androidx.media3.test.utils.DecoderCountersUtil
    private void <init>()
    {
        androidx.media3.test.utils.DecoderCountersUtil r0;

        r0 := @this: androidx.media3.test.utils.DecoderCountersUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getTotalBufferCount(androidx.media3.exoplayer.DecoderCounters)
    {
        androidx.media3.exoplayer.DecoderCounters r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: androidx.media3.exoplayer.DecoderCounters;

        virtualinvoke r0.<androidx.media3.exoplayer.DecoderCounters: void ensureUpdated()>();

        $i1 = r0.<androidx.media3.exoplayer.DecoderCounters: int skippedInputBufferCount>;

        $i0 = r0.<androidx.media3.exoplayer.DecoderCounters: int skippedOutputBufferCount>;

        $i3 = $i1 + $i0;

        $i2 = r0.<androidx.media3.exoplayer.DecoderCounters: int droppedBufferCount>;

        $i5 = $i3 + $i2;

        $i4 = r0.<androidx.media3.exoplayer.DecoderCounters: int renderedOutputBufferCount>;

        $i6 = $i5 + $i4;

        return $i6;
    }

    public static void assertSkippedOutputBufferCount(java.lang.String, androidx.media3.exoplayer.DecoderCounters, int)
    {
        java.lang.String r0;
        androidx.media3.exoplayer.DecoderCounters r1;
        int i0, i1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        java.lang.Integer $r4, $r6;
        com.google.common.truth.IntegerSubject $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        i0 := @parameter2: int;

        virtualinvoke r1.<androidx.media3.exoplayer.DecoderCounters: void ensureUpdated()>();

        i1 = r1.<androidx.media3.exoplayer.DecoderCounters: int skippedOutputBufferCount>;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r2[1] = r1;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("Codec(%s) skipped an unexpected number of buffers. Counters:\n%s", $r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r5.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r6);

        return;
    }

    public static void assertTotalBufferCount(java.lang.String, androidx.media3.exoplayer.DecoderCounters)
    {
        java.lang.String r0;
        androidx.media3.exoplayer.DecoderCounters r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        $i2 = r1.<androidx.media3.exoplayer.DecoderCounters: int skippedInputBufferCount>;

        $i1 = r1.<androidx.media3.exoplayer.DecoderCounters: int droppedInputBufferCount>;

        $i4 = $i2 + $i1;

        $i3 = r1.<androidx.media3.exoplayer.DecoderCounters: int queuedInputBufferCount>;

        i0 = $i4 + $i3;

        $i5 = i0 - 1;

        staticinvoke <androidx.media3.test.utils.DecoderCountersUtil: void assertTotalBufferCount(java.lang.String,androidx.media3.exoplayer.DecoderCounters,int,int)>(r0, r1, $i5, i0);

        return;
    }

    public static void assertTotalBufferCount(java.lang.String, androidx.media3.exoplayer.DecoderCounters, int, int)
    {
        java.lang.String r0;
        androidx.media3.exoplayer.DecoderCounters r1;
        int i0, i1, i2;
        java.lang.Object[] $r2, $r7;
        com.google.common.truth.StandardSubjectBuilder $r3, $r8;
        java.lang.Integer $r4, $r6, $r9, $r11;
        com.google.common.truth.IntegerSubject $r5, $r10;
        java.lang.Comparable r12, r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = staticinvoke <androidx.media3.test.utils.DecoderCountersUtil: int getTotalBufferCount(androidx.media3.exoplayer.DecoderCounters)>(r1);

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r2[1] = r1;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("Codec(%s) output too few buffers. Counters:\n%s", $r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r5 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r12 = (java.lang.Comparable) $r6;

        virtualinvoke $r5.<com.google.common.truth.IntegerSubject: void isAtLeast(java.lang.Comparable)>(r12);

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r0;

        $r7[1] = r1;

        $r8 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("Codec(%s) output too many buffers. Counters:\n%s", $r7);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r10 = virtualinvoke $r8.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r9);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r13 = (java.lang.Comparable) $r11;

        virtualinvoke $r10.<com.google.common.truth.IntegerSubject: void isAtMost(java.lang.Comparable)>(r13);

        return;
    }

    public static void assertDroppedBufferLimit(java.lang.String, androidx.media3.exoplayer.DecoderCounters, int)
    {
        java.lang.String r0;
        androidx.media3.exoplayer.DecoderCounters r1;
        int i0, i1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        java.lang.Integer $r4, $r6;
        com.google.common.truth.IntegerSubject $r5;
        java.lang.Comparable r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        i0 := @parameter2: int;

        virtualinvoke r1.<androidx.media3.exoplayer.DecoderCounters: void ensureUpdated()>();

        i1 = r1.<androidx.media3.exoplayer.DecoderCounters: int droppedBufferCount>;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r2[1] = r1;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("Codec(%s) was late decoding too many buffers. Counters:\n%s: ", $r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r7 = (java.lang.Comparable) $r6;

        virtualinvoke $r5.<com.google.common.truth.IntegerSubject: void isAtMost(java.lang.Comparable)>(r7);

        return;
    }

    public static void assertConsecutiveDroppedBufferLimit(java.lang.String, androidx.media3.exoplayer.DecoderCounters, int)
    {
        java.lang.String r0;
        androidx.media3.exoplayer.DecoderCounters r1;
        int i0, i1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        java.lang.Integer $r4, $r6;
        com.google.common.truth.IntegerSubject $r5;
        java.lang.Comparable r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        i0 := @parameter2: int;

        virtualinvoke r1.<androidx.media3.exoplayer.DecoderCounters: void ensureUpdated()>();

        i1 = r1.<androidx.media3.exoplayer.DecoderCounters: int maxConsecutiveDroppedBufferCount>;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r2[1] = r1;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("Codec(%s) was late decoding too many buffers consecutively. Counters:\n%s", $r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r7 = (java.lang.Comparable) $r6;

        virtualinvoke $r5.<com.google.common.truth.IntegerSubject: void isAtMost(java.lang.Comparable)>(r7);

        return;
    }

    public static void assertVideoFrameProcessingOffsetSampleCount(java.lang.String, androidx.media3.exoplayer.DecoderCounters, int, int)
    {
        java.lang.String r0;
        androidx.media3.exoplayer.DecoderCounters r1;
        int i0, i1, i2;
        java.lang.Object[] $r2, $r7;
        com.google.common.truth.StandardSubjectBuilder $r3, $r8;
        java.lang.Integer $r4, $r6, $r9, $r11;
        com.google.common.truth.IntegerSubject $r5, $r10;
        java.lang.Comparable r12, r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.exoplayer.DecoderCounters;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = r1.<androidx.media3.exoplayer.DecoderCounters: int videoFrameProcessingOffsetCount>;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r2[1] = r1;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("Codec(%s) videoFrameProcessingOffsetSampleCount too low. Counters:\n%s", $r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r5 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r12 = (java.lang.Comparable) $r6;

        virtualinvoke $r5.<com.google.common.truth.IntegerSubject: void isAtLeast(java.lang.Comparable)>(r12);

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r0;

        $r7[1] = r1;

        $r8 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("Codec(%s) videoFrameProcessingOffsetSampleCount too high. Counters:\n%s", $r7);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r10 = virtualinvoke $r8.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r9);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r13 = (java.lang.Comparable) $r11;

        virtualinvoke $r10.<com.google.common.truth.IntegerSubject: void isAtMost(java.lang.Comparable)>(r13);

        return;
    }

