com.google.common.flogger.backend.FormatChar
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] $VALUES>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar BOOLEAN>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar CHAR>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar DECIMAL>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar EXPONENT>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar EXPONENT_HEX>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar FLOAT>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar GENERAL>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar HEX>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] MAP>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar OCTAL>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar STRING>
<com.google.common.flogger.backend.FormatChar: int allowedFlags>
<com.google.common.flogger.backend.FormatChar: java.lang.String defaultFormatString>
<com.google.common.flogger.backend.FormatChar: char formatChar>
<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatType type>
    private static com.google.common.flogger.backend.FormatChar[] $values()
    {
        com.google.common.flogger.backend.FormatChar[] $r0;
        com.google.common.flogger.backend.FormatChar $r1;

        $r0 = newarray (com.google.common.flogger.backend.FormatChar)[10];

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar STRING>;

        $r0[0] = $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar BOOLEAN>;

        $r0[1] = $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar CHAR>;

        $r0[2] = $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar DECIMAL>;

        $r0[3] = $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar OCTAL>;

        $r0[4] = $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar HEX>;

        $r0[5] = $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar FLOAT>;

        $r0[6] = $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar EXPONENT>;

        $r0[7] = $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar GENERAL>;

        $r0[8] = $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar EXPONENT_HEX>;

        $r0[9] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        com.google.common.flogger.backend.FormatChar $r0;
        com.google.common.flogger.backend.FormatType $r1;
        com.google.common.flogger.backend.FormatChar[] $r2, $r3;
        int $i0, $i1, $i3;
        char $c2;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType GENERAL>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("STRING", 0, 115, $r1, "-#", 1);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar STRING> = $r0;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType BOOLEAN>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("BOOLEAN", 1, 98, $r1, "-", 1);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar BOOLEAN> = $r0;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType CHARACTER>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("CHAR", 2, 99, $r1, "-", 1);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar CHAR> = $r0;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType INTEGRAL>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("DECIMAL", 3, 100, $r1, "-0+ ,(", 0);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar DECIMAL> = $r0;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType INTEGRAL>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("OCTAL", 4, 111, $r1, "-#0(", 0);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar OCTAL> = $r0;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType INTEGRAL>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("HEX", 5, 120, $r1, "-#0(", 1);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar HEX> = $r0;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType FLOAT>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("FLOAT", 6, 102, $r1, "-#0+ ,(", 0);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar FLOAT> = $r0;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType FLOAT>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("EXPONENT", 7, 101, $r1, "-#0+ (", 1);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar EXPONENT> = $r0;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType FLOAT>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("GENERAL", 8, 103, $r1, "-0+ ,(", 1);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar GENERAL> = $r0;

        $r0 = new com.google.common.flogger.backend.FormatChar;

        $r1 = <com.google.common.flogger.backend.FormatType: com.google.common.flogger.backend.FormatType FLOAT>;

        specialinvoke $r0.<com.google.common.flogger.backend.FormatChar: void <init>(java.lang.String,int,char,com.google.common.flogger.backend.FormatType,java.lang.String,boolean)>("EXPONENT_HEX", 9, 97, $r1, "-#0+ ", 1);

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar EXPONENT_HEX> = $r0;

        $r2 = staticinvoke <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] $values()>();

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] $VALUES> = $r2;

        $r2 = newarray (com.google.common.flogger.backend.FormatChar)[26];

        <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] MAP> = $r2;

        $r2 = staticinvoke <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] values()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r0 = $r2[$i1];

        $r3 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] MAP>;

        $c2 = virtualinvoke $r0.<com.google.common.flogger.backend.FormatChar: char getChar()>();

        $i3 = staticinvoke <com.google.common.flogger.backend.FormatChar: int indexOf(char)>($c2);

        $r3[$i3] = $r0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void <init>(java.lang.String, int, char, com.google.common.flogger.backend.FormatType, java.lang.String, boolean)
    {
        com.google.common.flogger.backend.FormatChar $r0;
        char $c0;
        com.google.common.flogger.backend.FormatType $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        int $i1;
        java.lang.StringBuilder $r4;

        $r0 := @this: com.google.common.flogger.backend.FormatChar;

        $r3 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        $c0 := @parameter2: char;

        $r1 := @parameter3: com.google.common.flogger.backend.FormatType;

        $r2 := @parameter4: java.lang.String;

        $z0 := @parameter5: boolean;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r3, $i1);

        $r0.<com.google.common.flogger.backend.FormatChar: char formatChar> = $c0;

        $r0.<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatType type> = $r1;

        $i1 = staticinvoke <com.google.common.flogger.backend.FormatOptions: int parseValidFlags(java.lang.String,boolean)>($r2, $z0);

        $r0.<com.google.common.flogger.backend.FormatChar: int allowedFlags> = $i1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0.<com.google.common.flogger.backend.FormatChar: java.lang.String defaultFormatString> = $r3;

        return;
    }

    private boolean hasUpperCaseVariant()
    {
        com.google.common.flogger.backend.FormatChar $r0;
        int $i0;

        $r0 := @this: com.google.common.flogger.backend.FormatChar;

        $i0 = $r0.<com.google.common.flogger.backend.FormatChar: int allowedFlags>;

        $i0 = $i0 & 128;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static int indexOf(char)
    {
        char $c0;
        int $i1;

        $c0 := @parameter0: char;

        $c0 = $c0 | 32;

        $i1 = $c0 + -97;

        return $i1;
    }

    private static boolean isLowerCase(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        $c0 = $c0 & 32;

        if $c0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static com.google.common.flogger.backend.FormatChar of(char)
    {
        char $c0;
        com.google.common.flogger.backend.FormatChar[] $r0;
        int $i1;
        com.google.common.flogger.backend.FormatChar $r1;
        boolean $z0;

        $c0 := @parameter0: char;

        $r0 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] MAP>;

        $i1 = staticinvoke <com.google.common.flogger.backend.FormatChar: int indexOf(char)>($c0);

        $r1 = $r0[$i1];

        $z0 = staticinvoke <com.google.common.flogger.backend.FormatChar: boolean isLowerCase(char)>($c0);

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        if $r1 == null goto label2;

        $z0 = specialinvoke $r1.<com.google.common.flogger.backend.FormatChar: boolean hasUpperCaseVariant()>();

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        return null;
    }

    public static com.google.common.flogger.backend.FormatChar[] values()
    {
        java.lang.Object $r0;
        com.google.common.flogger.backend.FormatChar[] $r1;

        $r1 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (com.google.common.flogger.backend.FormatChar[]) $r0;

        return $r1;
    }

    int getAllowedFlags()
    {
        com.google.common.flogger.backend.FormatChar $r0;
        int i0;

        $r0 := @this: com.google.common.flogger.backend.FormatChar;

        i0 = $r0.<com.google.common.flogger.backend.FormatChar: int allowedFlags>;

        return i0;
    }

    public char getChar()
    {
        com.google.common.flogger.backend.FormatChar $r0;
        char c0;

        $r0 := @this: com.google.common.flogger.backend.FormatChar;

        c0 = $r0.<com.google.common.flogger.backend.FormatChar: char formatChar>;

        return c0;
    }

    public java.lang.String getDefaultFormatString()
    {
        com.google.common.flogger.backend.FormatChar $r0;
        java.lang.String r1;

        $r0 := @this: com.google.common.flogger.backend.FormatChar;

        r1 = $r0.<com.google.common.flogger.backend.FormatChar: java.lang.String defaultFormatString>;

        return r1;
    }

    public com.google.common.flogger.backend.FormatType getType()
    {
        com.google.common.flogger.backend.FormatChar $r0;
        com.google.common.flogger.backend.FormatType r1;

        $r0 := @this: com.google.common.flogger.backend.FormatChar;

        r1 = $r0.<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatType type>;

        return r1;
    }

