androidx.compose.foundation.text.selection.SelectionManager
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState _selection>
<androidx.compose.foundation.text.selection.SelectionManager: boolean touchMode>
<androidx.compose.foundation.text.selection.SelectionManager: kotlin.jvm.functions.Function1 onSelectionChange>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.hapticfeedback.HapticFeedback hapticFeedBack>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.ClipboardManager clipboardManager>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.TextToolbar textToolbar>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.focus.FocusRequester focusRequester>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState hasFocus$delegate>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.geometry.Offset previousPosition>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates containerLayoutCoordinates>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState dragBeginPosition$delegate>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState dragTotalDistance$delegate>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState startHandlePosition$delegate>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState endHandlePosition$delegate>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState draggingHandle$delegate>
<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState currentDragPosition$delegate>
    public void <init>(androidx.compose.foundation.text.selection.SelectionRegistrarImpl)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl r1, $r19, $r22, $r25, $r28, $r31, $r34, $r37;
        androidx.compose.runtime.MutableState $r2, $r7, $r10, $r13, $r14, $r15, $r16, $r17;
        androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1 $r3;
        kotlin.jvm.functions.Function1 $r4, $r20, $r26, $r35, $r38;
        androidx.compose.ui.focus.FocusRequester $r5;
        java.lang.Boolean $r6;
        androidx.compose.ui.geometry.Offset$Companion $r8, $r11;
        long $l0, $l1;
        androidx.compose.ui.geometry.Offset $r9, $r12;
        androidx.compose.foundation.text.selection.SelectionManager$1 $r18;
        androidx.compose.foundation.text.selection.SelectionManager$2 $r21;
        kotlin.jvm.functions.Function3 $r23;
        androidx.compose.foundation.text.selection.SelectionManager$3 $r24;
        androidx.compose.foundation.text.selection.SelectionManager$4 $r27;
        kotlin.jvm.functions.Function5 $r29;
        androidx.compose.foundation.text.selection.SelectionManager$5 $r30;
        kotlin.jvm.functions.Function0 $r32;
        androidx.compose.foundation.text.selection.SelectionManager$6 $r33;
        androidx.compose.foundation.text.selection.SelectionManager$7 $r36;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionRegistrarImpl;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "selectionRegistrar");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar> = r1;

        $r2 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>(null, null, 2, null);

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState _selection> = $r2;

        r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean touchMode> = 1;

        $r3 = <androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1: androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        r0.<androidx.compose.foundation.text.selection.SelectionManager: kotlin.jvm.functions.Function1 onSelectionChange> = $r4;

        $r5 = new androidx.compose.ui.focus.FocusRequester;

        specialinvoke $r5.<androidx.compose.ui.focus.FocusRequester: void <init>()>();

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.focus.FocusRequester focusRequester> = $r5;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r7 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r6, null, 2, null);

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState hasFocus$delegate> = $r7;

        $r8 = <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset$Companion Companion>;

        $l0 = virtualinvoke $r8.<androidx.compose.ui.geometry.Offset$Companion: long getZero-F1C5BW0()>();

        $r9 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>($l0);

        $r10 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r9, null, 2, null);

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState dragBeginPosition$delegate> = $r10;

        $r11 = <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset$Companion Companion>;

        $l1 = virtualinvoke $r11.<androidx.compose.ui.geometry.Offset$Companion: long getZero-F1C5BW0()>();

        $r12 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>($l1);

        $r13 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r12, null, 2, null);

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState dragTotalDistance$delegate> = $r13;

        $r14 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>(null, null, 2, null);

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState startHandlePosition$delegate> = $r14;

        $r15 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>(null, null, 2, null);

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState endHandlePosition$delegate> = $r15;

        $r16 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>(null, null, 2, null);

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState draggingHandle$delegate> = $r16;

        $r17 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>(null, null, 2, null);

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState currentDragPosition$delegate> = $r17;

        $r19 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r18 = new androidx.compose.foundation.text.selection.SelectionManager$1;

        specialinvoke $r18.<androidx.compose.foundation.text.selection.SelectionManager$1: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r20 = (kotlin.jvm.functions.Function1) $r18;

        virtualinvoke $r19.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setOnPositionChangeCallback$foundation_release(kotlin.jvm.functions.Function1)>($r20);

        $r22 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r21 = new androidx.compose.foundation.text.selection.SelectionManager$2;

        specialinvoke $r21.<androidx.compose.foundation.text.selection.SelectionManager$2: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r23 = (kotlin.jvm.functions.Function3) $r21;

        virtualinvoke $r22.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setOnSelectionUpdateStartCallback$foundation_release(kotlin.jvm.functions.Function3)>($r23);

        $r25 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r24 = new androidx.compose.foundation.text.selection.SelectionManager$3;

        specialinvoke $r24.<androidx.compose.foundation.text.selection.SelectionManager$3: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r26 = (kotlin.jvm.functions.Function1) $r24;

        virtualinvoke $r25.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setOnSelectionUpdateSelectAll$foundation_release(kotlin.jvm.functions.Function1)>($r26);

        $r28 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r27 = new androidx.compose.foundation.text.selection.SelectionManager$4;

        specialinvoke $r27.<androidx.compose.foundation.text.selection.SelectionManager$4: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r29 = (kotlin.jvm.functions.Function5) $r27;

        virtualinvoke $r28.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setOnSelectionUpdateCallback$foundation_release(kotlin.jvm.functions.Function5)>($r29);

        $r31 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r30 = new androidx.compose.foundation.text.selection.SelectionManager$5;

        specialinvoke $r30.<androidx.compose.foundation.text.selection.SelectionManager$5: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r32 = (kotlin.jvm.functions.Function0) $r30;

        virtualinvoke $r31.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setOnSelectionUpdateEndCallback$foundation_release(kotlin.jvm.functions.Function0)>($r32);

        $r34 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r33 = new androidx.compose.foundation.text.selection.SelectionManager$6;

        specialinvoke $r33.<androidx.compose.foundation.text.selection.SelectionManager$6: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r35 = (kotlin.jvm.functions.Function1) $r33;

        virtualinvoke $r34.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setOnSelectableChangeCallback$foundation_release(kotlin.jvm.functions.Function1)>($r35);

        $r37 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r36 = new androidx.compose.foundation.text.selection.SelectionManager$7;

        specialinvoke $r36.<androidx.compose.foundation.text.selection.SelectionManager$7: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r38 = (kotlin.jvm.functions.Function1) $r36;

        virtualinvoke $r37.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setAfterSelectableUnsubscribe$foundation_release(kotlin.jvm.functions.Function1)>($r38);

        return;
    }

    public final androidx.compose.foundation.text.selection.Selection getSelection()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Object $r2;
        androidx.compose.foundation.text.selection.Selection $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState _selection>;

        $r2 = interfaceinvoke $r1.<androidx.compose.runtime.MutableState: java.lang.Object getValue()>();

        $r3 = (androidx.compose.foundation.text.selection.Selection) $r2;

        return $r3;
    }

    public final void setSelection(androidx.compose.foundation.text.selection.Selection)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.foundation.text.selection.Selection r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.foundation.text.selection.Selection;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState _selection>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        if r1 == null goto label1;

        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void updateHandleOffsets()>();

     label1:
        return;
    }

    public final boolean getTouchMode()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        boolean $z0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $z0 = r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean touchMode>;

        return $z0;
    }

    public final void setTouchMode(boolean)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        boolean z0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        z0 := @parameter0: boolean;

        r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean touchMode> = z0;

        return;
    }

    public final kotlin.jvm.functions.Function1 getOnSelectionChange()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: kotlin.jvm.functions.Function1 onSelectionChange>;

        return $r1;
    }

    public final void setOnSelectionChange(kotlin.jvm.functions.Function1)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.foundation.text.selection.SelectionManager: kotlin.jvm.functions.Function1 onSelectionChange> = r1;

        return;
    }

    public final androidx.compose.ui.hapticfeedback.HapticFeedback getHapticFeedBack()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.hapticfeedback.HapticFeedback $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.hapticfeedback.HapticFeedback hapticFeedBack>;

        return $r1;
    }

    public final void setHapticFeedBack(androidx.compose.ui.hapticfeedback.HapticFeedback)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.hapticfeedback.HapticFeedback r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.hapticfeedback.HapticFeedback;

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.hapticfeedback.HapticFeedback hapticFeedBack> = r1;

        return;
    }

    public final androidx.compose.ui.platform.ClipboardManager getClipboardManager()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.platform.ClipboardManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.ClipboardManager clipboardManager>;

        return $r1;
    }

    public final void setClipboardManager(androidx.compose.ui.platform.ClipboardManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.platform.ClipboardManager r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.platform.ClipboardManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.ClipboardManager clipboardManager> = r1;

        return;
    }

    public final androidx.compose.ui.platform.TextToolbar getTextToolbar()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.platform.TextToolbar $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.TextToolbar textToolbar>;

        return $r1;
    }

    public final void setTextToolbar(androidx.compose.ui.platform.TextToolbar)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.platform.TextToolbar r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.platform.TextToolbar;

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.TextToolbar textToolbar> = r1;

        return;
    }

    public final androidx.compose.ui.focus.FocusRequester getFocusRequester()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.focus.FocusRequester $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.focus.FocusRequester focusRequester>;

        return $r1;
    }

    public final void setFocusRequester(androidx.compose.ui.focus.FocusRequester)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.focus.FocusRequester r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.focus.FocusRequester;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.focus.FocusRequester focusRequester> = r1;

        return;
    }

    public final boolean getHasFocus()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState hasFocus$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public final void setHasFocus(boolean)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        boolean z0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Boolean r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState hasFocus$delegate>;

        r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    public final androidx.compose.ui.Modifier getModifier()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.Modifier$Companion $r1, $r18, $r20;
        androidx.compose.foundation.text.selection.SelectionManager$modifier$1 $r2;
        androidx.compose.ui.Modifier $r3, $r5, $r8, $r10, $r13, $r14, $r17, $r19, $r21, $r22;
        kotlin.jvm.functions.Function0 $r4;
        androidx.compose.foundation.text.selection.SelectionManager$modifier$2 $r6;
        kotlin.jvm.functions.Function1 $r7, $r12, $r16;
        androidx.compose.ui.focus.FocusRequester $r9;
        androidx.compose.foundation.text.selection.SelectionManager$modifier$3 $r11;
        androidx.compose.foundation.text.selection.SelectionManager$modifier$4 $r15;
        boolean $z0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = <androidx.compose.ui.Modifier: androidx.compose.ui.Modifier$Companion Companion>;

        $r3 = (androidx.compose.ui.Modifier) $r1;

        $r2 = new androidx.compose.foundation.text.selection.SelectionManager$modifier$1;

        specialinvoke $r2.<androidx.compose.foundation.text.selection.SelectionManager$modifier$1: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.Modifier onClearSelectionRequested(androidx.compose.ui.Modifier,kotlin.jvm.functions.Function0)>($r3, $r4);

        $r6 = new androidx.compose.foundation.text.selection.SelectionManager$modifier$2;

        specialinvoke $r6.<androidx.compose.foundation.text.selection.SelectionManager$modifier$2: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        $r8 = staticinvoke <androidx.compose.ui.layout.OnGloballyPositionedModifierKt: androidx.compose.ui.Modifier onGloballyPositioned(androidx.compose.ui.Modifier,kotlin.jvm.functions.Function1)>($r5, $r7);

        $r9 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.focus.FocusRequester focusRequester>;

        $r10 = staticinvoke <androidx.compose.ui.focus.FocusRequesterModifierKt: androidx.compose.ui.Modifier focusRequester(androidx.compose.ui.Modifier,androidx.compose.ui.focus.FocusRequester)>($r8, $r9);

        $r11 = new androidx.compose.foundation.text.selection.SelectionManager$modifier$3;

        specialinvoke $r11.<androidx.compose.foundation.text.selection.SelectionManager$modifier$3: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r12 = (kotlin.jvm.functions.Function1) $r11;

        $r13 = staticinvoke <androidx.compose.ui.focus.FocusChangedModifierKt: androidx.compose.ui.Modifier onFocusChanged(androidx.compose.ui.Modifier,kotlin.jvm.functions.Function1)>($r10, $r12);

        $r14 = staticinvoke <androidx.compose.foundation.FocusableKt: androidx.compose.ui.Modifier focusable$default(androidx.compose.ui.Modifier,boolean,androidx.compose.foundation.interaction.MutableInteractionSource,int,java.lang.Object)>($r13, 0, null, 3, null);

        $r15 = new androidx.compose.foundation.text.selection.SelectionManager$modifier$4;

        specialinvoke $r15.<androidx.compose.foundation.text.selection.SelectionManager$modifier$4: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r16 = (kotlin.jvm.functions.Function1) $r15;

        $r17 = staticinvoke <androidx.compose.ui.input.key.KeyInputModifierKt: androidx.compose.ui.Modifier onKeyEvent(androidx.compose.ui.Modifier,kotlin.jvm.functions.Function1)>($r14, $r16);

        $z0 = specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean getShouldShowMagnifier()>();

        if $z0 == 0 goto label1;

        $r20 = <androidx.compose.ui.Modifier: androidx.compose.ui.Modifier$Companion Companion>;

        $r21 = (androidx.compose.ui.Modifier) $r20;

        $r22 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager_androidKt: androidx.compose.ui.Modifier selectionMagnifier(androidx.compose.ui.Modifier,androidx.compose.foundation.text.selection.SelectionManager)>($r21, r0);

        goto label2;

     label1:
        $r18 = <androidx.compose.ui.Modifier: androidx.compose.ui.Modifier$Companion Companion>;

        $r22 = (androidx.compose.ui.Modifier) $r18;

     label2:
        $r19 = interfaceinvoke $r17.<androidx.compose.ui.Modifier: androidx.compose.ui.Modifier then(androidx.compose.ui.Modifier)>($r22);

        return $r19;
    }

    public final androidx.compose.ui.layout.LayoutCoordinates getContainerLayoutCoordinates()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.layout.LayoutCoordinates $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates containerLayoutCoordinates>;

        return $r1;
    }

    public final void setContainerLayoutCoordinates(androidx.compose.ui.layout.LayoutCoordinates)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        androidx.compose.ui.geometry.Offset r2, $r4, $r5;
        boolean $z0, $z1;
        androidx.compose.foundation.text.selection.Selection $r3;
        long $l0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates containerLayoutCoordinates> = r1;

        $z0 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean getHasFocus()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if $r3 == null goto label3;

        if r1 == null goto label1;

        $l0 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: long positionInWindow(androidx.compose.ui.layout.LayoutCoordinates)>(r1);

        $r5 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>($l0);

        goto label2;

     label1:
        $r5 = null;

     label2:
        r2 = $r5;

        $r4 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.geometry.Offset previousPosition>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, r2);

        if $z1 != 0 goto label3;

        r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.geometry.Offset previousPosition> = r2;

        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void updateHandleOffsets()>();

        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void updateSelectionToolbarPosition()>();

     label3:
        return;
    }

    public final long getDragBeginPosition-F1C5BW0$foundation_release()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.ui.geometry.Offset $r4;
        long $l0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState dragBeginPosition$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.ui.geometry.Offset) $r3;

        $l0 = virtualinvoke $r4.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

        return $l0;
    }

    private final void setDragBeginPosition-k-4lQ0M(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        long l0;
        androidx.compose.runtime.MutableState $r1;
        androidx.compose.ui.geometry.Offset r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState dragBeginPosition$delegate>;

        r2 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>(l0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    public final long getDragTotalDistance-F1C5BW0$foundation_release()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.ui.geometry.Offset $r4;
        long $l0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState dragTotalDistance$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.ui.geometry.Offset) $r3;

        $l0 = virtualinvoke $r4.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

        return $l0;
    }

    private final void setDragTotalDistance-k-4lQ0M(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        long l0;
        androidx.compose.runtime.MutableState $r1;
        androidx.compose.ui.geometry.Offset r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState dragTotalDistance$delegate>;

        r2 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>(l0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    public final androidx.compose.ui.geometry.Offset getStartHandlePosition-_m7T9-E()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.ui.geometry.Offset $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState startHandlePosition$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.ui.geometry.Offset) $r3;

        return $r4;
    }

    private final void setStartHandlePosition-_kEHs6E(androidx.compose.ui.geometry.Offset)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.geometry.Offset r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.geometry.Offset;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState startHandlePosition$delegate>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        return;
    }

    public final androidx.compose.ui.geometry.Offset getEndHandlePosition-_m7T9-E()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.ui.geometry.Offset $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState endHandlePosition$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.ui.geometry.Offset) $r3;

        return $r4;
    }

    private final void setEndHandlePosition-_kEHs6E(androidx.compose.ui.geometry.Offset)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.geometry.Offset r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.geometry.Offset;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState endHandlePosition$delegate>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        return;
    }

    public final androidx.compose.foundation.text.Handle getDraggingHandle()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.foundation.text.Handle $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState draggingHandle$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.foundation.text.Handle) $r3;

        return $r4;
    }

    private final void setDraggingHandle(androidx.compose.foundation.text.Handle)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.foundation.text.Handle r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.foundation.text.Handle;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState draggingHandle$delegate>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        return;
    }

    public final androidx.compose.ui.geometry.Offset getCurrentDragPosition-_m7T9-E()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.ui.geometry.Offset $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState currentDragPosition$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.ui.geometry.Offset) $r3;

        return $r4;
    }

    private final void setCurrentDragPosition-_kEHs6E(androidx.compose.ui.geometry.Offset)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.geometry.Offset r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.geometry.Offset;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.runtime.MutableState currentDragPosition$delegate>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        return;
    }

    private final boolean getShouldShowMagnifier()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.foundation.text.Handle $r1;
        boolean $z0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.Handle getDraggingHandle()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final androidx.compose.foundation.text.selection.Selectable getAnchorSelectable$foundation_release(androidx.compose.foundation.text.selection.Selection$AnchorInfo)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.foundation.text.selection.Selection$AnchorInfo r1;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r2;
        java.util.Map $r3;
        long $l0;
        java.lang.Long $r4;
        java.lang.Object $r5;
        androidx.compose.foundation.text.selection.Selectable $r6;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.foundation.text.selection.Selection$AnchorInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r3 = virtualinvoke $r2.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: java.util.Map getSelectableMap$foundation_release()>();

        $l0 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (androidx.compose.foundation.text.selection.Selectable) $r5;

        return $r6;
    }

    private final void updateHandleOffsets()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.foundation.text.selection.Selection r1;
        androidx.compose.ui.layout.LayoutCoordinates r2, r5, $r17, $r18, r19;
        androidx.compose.foundation.text.selection.Selectable r3, r4, $r13, $r15;
        long l0, $l1, $l2, $l3;
        androidx.compose.ui.geometry.Rect r6;
        boolean $z1, $z2, $z3;
        androidx.compose.foundation.text.selection.Selection$AnchorInfo $r10, $r11, r12;
        androidx.compose.ui.geometry.Offset $r20, $r21;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates containerLayoutCoordinates>;

        if r1 == null goto label01;

        $r11 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        if $r11 == null goto label01;

        r12 = $r11;

        $r13 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selectable getAnchorSelectable$foundation_release(androidx.compose.foundation.text.selection.Selection$AnchorInfo)>(r12);

        goto label02;

     label01:
        $r13 = null;

     label02:
        r3 = $r13;

        if r1 == null goto label03;

        $r10 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

        if $r10 == null goto label03;

        $r15 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selectable getAnchorSelectable$foundation_release(androidx.compose.foundation.text.selection.Selection$AnchorInfo)>($r10);

        goto label04;

     label03:
        $r15 = null;

     label04:
        r4 = $r15;

        if r3 == null goto label05;

        $r17 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.layout.LayoutCoordinates getLayoutCoordinates()>();

        goto label06;

     label05:
        $r17 = null;

     label06:
        r5 = $r17;

        if r4 == null goto label07;

        $r18 = interfaceinvoke r4.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.layout.LayoutCoordinates getLayoutCoordinates()>();

        goto label08;

     label07:
        $r18 = null;

     label08:
        r19 = $r18;

        if r1 == null goto label09;

        if r2 == null goto label09;

        $z1 = interfaceinvoke r2.<androidx.compose.ui.layout.LayoutCoordinates: boolean isAttached()>();

        if $z1 == 0 goto label09;

        if r5 == null goto label09;

        if r19 != null goto label10;

     label09:
        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void setStartHandlePosition-_kEHs6E(androidx.compose.ui.geometry.Offset)>(null);

        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void setEndHandlePosition-_kEHs6E(androidx.compose.ui.geometry.Offset)>(null);

        return;

     label10:
        $l1 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: long getHandlePosition-dBAh8RU(androidx.compose.foundation.text.selection.Selection,boolean)>(r1, 1);

        $l3 = interfaceinvoke r2.<androidx.compose.ui.layout.LayoutCoordinates: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r5, $l1);

        $l2 = interfaceinvoke r4.<androidx.compose.foundation.text.selection.Selectable: long getHandlePosition-dBAh8RU(androidx.compose.foundation.text.selection.Selection,boolean)>(r1, 0);

        l0 = interfaceinvoke r2.<androidx.compose.ui.layout.LayoutCoordinates: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r19, $l2);

        r6 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManagerKt: androidx.compose.ui.geometry.Rect visibleBounds(androidx.compose.ui.layout.LayoutCoordinates)>(r2);

        $z2 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManagerKt: boolean containsInclusive-Uv8p0NA(androidx.compose.ui.geometry.Rect,long)>(r6, $l3);

        if $z2 == 0 goto label11;

        $r20 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>($l3);

        goto label12;

     label11:
        $r20 = null;

     label12:
        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void setStartHandlePosition-_kEHs6E(androidx.compose.ui.geometry.Offset)>($r20);

        $z3 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManagerKt: boolean containsInclusive-Uv8p0NA(androidx.compose.ui.geometry.Rect,long)>(r6, l0);

        if $z3 == 0 goto label13;

        $r21 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>(l0);

        goto label14;

     label13:
        $r21 = null;

     label14:
        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void setEndHandlePosition-_kEHs6E(androidx.compose.ui.geometry.Offset)>($r21);

        return;
    }

    public final androidx.compose.ui.layout.LayoutCoordinates requireContainerCoordinates$foundation_release()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2, $r4;
        java.lang.String $r3, $r5, r6, r7;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates containerLayoutCoordinates>;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        r6 = "Failed requirement.";

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label3:
        $z0 = interfaceinvoke r1.<androidx.compose.ui.layout.LayoutCoordinates: boolean isAttached()>();

        if $z0 != 0 goto label4;

        r7 = "Failed requirement.";

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label4:
        return r1;
    }

    public final kotlin.Pair selectAll$foundation_release(long, androidx.compose.foundation.text.selection.Selection)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        long l0, $l3, $l5;
        androidx.compose.foundation.text.selection.Selection r1, r3, r8, r9, r10, r18, $r19;
        java.util.Map r2;
        java.util.List $r4;
        int i1, $i2, i6;
        java.lang.Object r5, r6;
        androidx.compose.foundation.text.selection.Selectable r7;
        java.util.LinkedHashMap $r11;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r12;
        androidx.compose.ui.layout.LayoutCoordinates $r13;
        boolean $z0;
        androidx.compose.ui.hapticfeedback.HapticFeedback $r14;
        androidx.compose.ui.hapticfeedback.HapticFeedbackType$Companion $r15;
        byte $b4;
        java.lang.Long $r16;
        kotlin.Pair $r20;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.compose.foundation.text.selection.Selection;

        $r11 = new java.util.LinkedHashMap;

        specialinvoke $r11.<java.util.LinkedHashMap: void <init>()>();

        r2 = (java.util.Map) $r11;

        $r12 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r13 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates requireContainerCoordinates$foundation_release()>();

        r18 = null;

        $r4 = virtualinvoke $r12.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: java.util.List sort(androidx.compose.ui.layout.LayoutCoordinates)>($r13);

        i6 = 0;

        i1 = interfaceinvoke $r4.<java.util.List: int size()>();

     label1:
        if i6 >= i1 goto label5;

        r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i6);

        r6 = r5;

        r7 = (androidx.compose.foundation.text.selection.Selectable) r6;

        r8 = r18;

        $l3 = interfaceinvoke r7.<androidx.compose.foundation.text.selection.Selectable: long getSelectableId()>();

        $b4 = $l3 cmp l0;

        if $b4 != 0 goto label2;

        $r19 = interfaceinvoke r7.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.foundation.text.selection.Selection getSelectAllSelection()>();

        goto label3;

     label2:
        $r19 = null;

     label3:
        r9 = $r19;

        if r9 == null goto label4;

        r10 = r9;

        $l5 = interfaceinvoke r7.<androidx.compose.foundation.text.selection.Selectable: long getSelectableId()>();

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r10);

        goto label4;

     label4:
        r18 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManagerKt: androidx.compose.foundation.text.selection.Selection merge(androidx.compose.foundation.text.selection.Selection,androidx.compose.foundation.text.selection.Selection)>(r8, r9);

        i6 = i6 + 1;

        goto label1;

     label5:
        r3 = r18;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, r1);

        if $z0 != 0 goto label6;

        $r14 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.hapticfeedback.HapticFeedback hapticFeedBack>;

        if $r14 == null goto label6;

        $r15 = <androidx.compose.ui.hapticfeedback.HapticFeedbackType: androidx.compose.ui.hapticfeedback.HapticFeedbackType$Companion Companion>;

        $i2 = virtualinvoke $r15.<androidx.compose.ui.hapticfeedback.HapticFeedbackType$Companion: int getTextHandleMove-5zf0vsI()>();

        interfaceinvoke $r14.<androidx.compose.ui.hapticfeedback.HapticFeedback: void performHapticFeedback-CdsT49E(int)>($i2);

        goto label6;

     label6:
        $r20 = new kotlin.Pair;

        specialinvoke $r20.<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>(r3, r2);

        return $r20;
    }

    public final androidx.compose.ui.text.AnnotatedString getSelectedText$foundation_release()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        java.util.List r1;
        androidx.compose.foundation.text.selection.Selection r2, $r7;
        int i0, i10;
        androidx.compose.foundation.text.selection.Selectable r3;
        androidx.compose.ui.text.AnnotatedString r4, r12, $r14;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r5;
        androidx.compose.ui.layout.LayoutCoordinates $r6;
        java.lang.Object $r8;
        long $l1, $l2, $l4, $l5, $l7, $l8, $l11, $l12;
        androidx.compose.foundation.text.selection.Selection$AnchorInfo $r9, $r10, $r11, $r15;
        byte $b3, $b6, $b9, $b13;
        boolean $z1, $z2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r6 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates requireContainerCoordinates$foundation_release()>();

        r1 = virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: java.util.List sort(androidx.compose.ui.layout.LayoutCoordinates)>($r6);

        r12 = null;

        $r7 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if $r7 == null goto label9;

        r2 = $r7;

        i10 = 0;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

     label1:
        if i10 >= i0 goto label8;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i10);

        r3 = (androidx.compose.foundation.text.selection.Selectable) $r8;

        $l1 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: long getSelectableId()>();

        $r9 = virtualinvoke r2.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        $l2 = virtualinvoke $r9.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $b3 = $l1 cmp $l2;

        if $b3 == 0 goto label2;

        $l7 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: long getSelectableId()>();

        $r11 = virtualinvoke r2.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

        $l8 = virtualinvoke $r11.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $b9 = $l7 cmp $l8;

        if $b9 == 0 goto label2;

        if r12 != null goto label2;

        goto label7;

     label2:
        r4 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManagerKt: androidx.compose.ui.text.AnnotatedString getCurrentSelectedText(androidx.compose.foundation.text.selection.Selectable,androidx.compose.foundation.text.selection.Selection)>(r3, r2);

        if r12 == null goto label3;

        $r14 = virtualinvoke r12.<androidx.compose.ui.text.AnnotatedString: androidx.compose.ui.text.AnnotatedString plus(androidx.compose.ui.text.AnnotatedString)>(r4);

        if $r14 != null goto label4;

     label3:
        $r14 = r4;

     label4:
        r12 = $r14;

        $l11 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: long getSelectableId()>();

        $r15 = virtualinvoke r2.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

        $l12 = virtualinvoke $r15.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $b13 = $l11 cmp $l12;

        if $b13 != 0 goto label5;

        $z2 = virtualinvoke r2.<androidx.compose.foundation.text.selection.Selection: boolean getHandlesCrossed()>();

        if $z2 == 0 goto label6;

     label5:
        $l4 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: long getSelectableId()>();

        $r10 = virtualinvoke r2.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        $l5 = virtualinvoke $r10.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label7;

        $z1 = virtualinvoke r2.<androidx.compose.foundation.text.selection.Selection: boolean getHandlesCrossed()>();

        if $z1 == 0 goto label7;

     label6:
        goto label8;

     label7:
        i10 = i10 + 1;

        goto label1;

     label8:
        goto label9;

     label9:
        return r12;
    }

    public final void copy$foundation_release()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.text.AnnotatedString r1, r2;
        androidx.compose.ui.platform.ClipboardManager $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.text.AnnotatedString getSelectedText$foundation_release()>();

        if r1 == null goto label2;

        r2 = r1;

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.ClipboardManager clipboardManager>;

        if $r3 == null goto label1;

        interfaceinvoke $r3.<androidx.compose.ui.platform.ClipboardManager: void setText(androidx.compose.ui.text.AnnotatedString)>(r2);

        goto label1;

     label1:
        goto label2;

     label2:
        return;
    }

    public final void showSelectionToolbar$foundation_release()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.foundation.text.selection.Selection r1, $r2;
        boolean $z1;
        androidx.compose.ui.platform.TextToolbar $r3;
        androidx.compose.ui.geometry.Rect $r4;
        androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1 $r5;
        kotlin.jvm.functions.Function0 $r6;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $z1 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean getHasFocus()>();

        if $z1 == 0 goto label2;

        $r2 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if $r2 == null goto label2;

        r1 = $r2;

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.TextToolbar textToolbar>;

        if $r3 == null goto label1;

        $r4 = specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.geometry.Rect getContentRect()>();

        $r5 = new androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1;

        specialinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1: void <init>(androidx.compose.foundation.text.selection.SelectionManager)>(r0);

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        staticinvoke <androidx.compose.ui.platform.TextToolbar: void showMenu$default(androidx.compose.ui.platform.TextToolbar,androidx.compose.ui.geometry.Rect,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0,int,java.lang.Object)>($r3, $r4, $r6, null, null, null, 28, null);

        goto label1;

     label1:
        goto label2;

     label2:
        return;
    }

    public final void hideSelectionToolbar$foundation_release()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        boolean $z0;
        androidx.compose.ui.platform.TextToolbar $r1, $r3;
        androidx.compose.ui.platform.TextToolbarStatus $r2, $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $z0 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean getHasFocus()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.TextToolbar textToolbar>;

        if $r1 == null goto label1;

        $r4 = interfaceinvoke $r1.<androidx.compose.ui.platform.TextToolbar: androidx.compose.ui.platform.TextToolbarStatus getStatus()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        $r2 = <androidx.compose.ui.platform.TextToolbarStatus: androidx.compose.ui.platform.TextToolbarStatus Shown>;

        if $r4 != $r2 goto label3;

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.TextToolbar textToolbar>;

        if $r3 == null goto label3;

        interfaceinvoke $r3.<androidx.compose.ui.platform.TextToolbar: void hide()>();

        goto label3;

     label3:
        return;
    }

    private final void updateSelectionToolbarPosition()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        boolean $z0;
        androidx.compose.ui.platform.TextToolbar $r1;
        androidx.compose.ui.platform.TextToolbarStatus $r2, $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $z0 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean getHasFocus()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.platform.TextToolbar textToolbar>;

        if $r1 == null goto label1;

        $r3 = interfaceinvoke $r1.<androidx.compose.ui.platform.TextToolbar: androidx.compose.ui.platform.TextToolbarStatus getStatus()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        $r2 = <androidx.compose.ui.platform.TextToolbarStatus: androidx.compose.ui.platform.TextToolbarStatus Shown>;

        if $r3 != $r2 goto label3;

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void showSelectionToolbar$foundation_release()>();

     label3:
        return;
    }

    private final androidx.compose.ui.geometry.Rect getContentRect()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.foundation.text.selection.Selection r1, $r7;
        androidx.compose.foundation.text.selection.Selectable r2, r3;
        androidx.compose.ui.layout.LayoutCoordinates r4, r5, r6, $r12, $r15;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        androidx.compose.foundation.text.selection.Selection$AnchorInfo $r8, $r9, $r18, $r20;
        androidx.compose.ui.geometry.Rect$Companion $r10, $r13, $r16, $r23;
        androidx.compose.ui.geometry.Rect $r11, $r14, $r17, $r19, $r21, $r22, $r24;
        boolean $z0;
        long $l0, $l1, $l3, $l5, l6, l7, l8, l9, l10, l11, l12, l13;
        int $i2, $i4;
        double $d0, $d1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r7 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if $r7 != null goto label1;

        $r23 = <androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect$Companion Companion>;

        $r24 = virtualinvoke $r23.<androidx.compose.ui.geometry.Rect$Companion: androidx.compose.ui.geometry.Rect getZero()>();

        return $r24;

     label1:
        r1 = $r7;

        $r8 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        r2 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selectable getAnchorSelectable$foundation_release(androidx.compose.foundation.text.selection.Selection$AnchorInfo)>($r8);

        $r9 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

        r3 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selectable getAnchorSelectable$foundation_release(androidx.compose.foundation.text.selection.Selection$AnchorInfo)>($r9);

        if r2 == null goto label2;

        $r12 = interfaceinvoke r2.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.layout.LayoutCoordinates getLayoutCoordinates()>();

        if $r12 != null goto label3;

     label2:
        $r10 = <androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect$Companion Companion>;

        $r11 = virtualinvoke $r10.<androidx.compose.ui.geometry.Rect$Companion: androidx.compose.ui.geometry.Rect getZero()>();

        return $r11;

     label3:
        r4 = $r12;

        if r3 == null goto label4;

        $r15 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.layout.LayoutCoordinates getLayoutCoordinates()>();

        if $r15 != null goto label5;

     label4:
        $r13 = <androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect$Companion Companion>;

        $r14 = virtualinvoke $r13.<androidx.compose.ui.geometry.Rect$Companion: androidx.compose.ui.geometry.Rect getZero()>();

        return $r14;

     label5:
        r5 = $r15;

        r6 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates containerLayoutCoordinates>;

        if r6 == null goto label6;

        $z0 = interfaceinvoke r6.<androidx.compose.ui.layout.LayoutCoordinates: boolean isAttached()>();

        if $z0 == 0 goto label6;

        $l0 = interfaceinvoke r2.<androidx.compose.foundation.text.selection.Selectable: long getHandlePosition-dBAh8RU(androidx.compose.foundation.text.selection.Selection,boolean)>(r1, 1);

        l6 = interfaceinvoke r6.<androidx.compose.ui.layout.LayoutCoordinates: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r4, $l0);

        $l1 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: long getHandlePosition-dBAh8RU(androidx.compose.foundation.text.selection.Selection,boolean)>(r1, 0);

        l7 = interfaceinvoke r6.<androidx.compose.ui.layout.LayoutCoordinates: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r5, $l1);

        l8 = interfaceinvoke r6.<androidx.compose.ui.layout.LayoutCoordinates: long localToRoot-MK-Hz9U(long)>(l6);

        l9 = interfaceinvoke r6.<androidx.compose.ui.layout.LayoutCoordinates: long localToRoot-MK-Hz9U(long)>(l7);

        $f4 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l8);

        $f5 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l9);

        f0 = staticinvoke <java.lang.Math: float min(float,float)>($f4, $f5);

        $f6 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l8);

        $f7 = staticinvoke <androidx.compose.ui.geometry.Offset: float getX-impl(long)>(l9);

        f1 = staticinvoke <java.lang.Math: float max(float,float)>($f6, $f7);

        $r18 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        $i2 = virtualinvoke $r18.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: int getOffset()>();

        $r19 = interfaceinvoke r2.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.geometry.Rect getBoundingBox(int)>($i2);

        $f8 = virtualinvoke $r19.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $l3 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>(0.0F, $f8);

        l10 = interfaceinvoke r6.<androidx.compose.ui.layout.LayoutCoordinates: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r4, $l3);

        $r20 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

        $i4 = virtualinvoke $r20.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: int getOffset()>();

        $r21 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.geometry.Rect getBoundingBox(int)>($i4);

        $f9 = virtualinvoke $r21.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $l5 = staticinvoke <androidx.compose.ui.geometry.OffsetKt: long Offset(float,float)>(0.0F, $f9);

        l11 = interfaceinvoke r6.<androidx.compose.ui.layout.LayoutCoordinates: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r5, $l5);

        l12 = interfaceinvoke r6.<androidx.compose.ui.layout.LayoutCoordinates: long localToRoot-MK-Hz9U(long)>(l10);

        l13 = interfaceinvoke r6.<androidx.compose.ui.layout.LayoutCoordinates: long localToRoot-MK-Hz9U(long)>(l11);

        $f10 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l12);

        $f11 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l13);

        f2 = staticinvoke <java.lang.Math: float min(float,float)>($f10, $f11);

        $f12 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l8);

        $f13 = staticinvoke <androidx.compose.ui.geometry.Offset: float getY-impl(long)>(l9);

        $f14 = staticinvoke <java.lang.Math: float max(float,float)>($f12, $f13);

        $f15 = staticinvoke <androidx.compose.foundation.text.selection.SelectionHandlesKt: float getHandleHeight()>();

        $d0 = (double) $f15;

        $d1 = $d0 * 4.0;

        $f16 = (float) $d1;

        f3 = $f14 + $f16;

        $r22 = new androidx.compose.ui.geometry.Rect;

        specialinvoke $r22.<androidx.compose.ui.geometry.Rect: void <init>(float,float,float,float)>(f0, f2, f1, f3);

        return $r22;

     label6:
        $r16 = <androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect$Companion Companion>;

        $r17 = virtualinvoke $r16.<androidx.compose.ui.geometry.Rect$Companion: androidx.compose.ui.geometry.Rect getZero()>();

        return $r17;
    }

    public final void onRelease()
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r1;
        java.util.Map $r2;
        androidx.compose.foundation.text.selection.Selection $r3;
        kotlin.jvm.functions.Function1 $r4;
        androidx.compose.ui.hapticfeedback.HapticFeedback $r6;
        androidx.compose.ui.hapticfeedback.HapticFeedbackType$Companion $r7;
        int $i0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        virtualinvoke $r1.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setSubselections(java.util.Map)>($r2);

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void hideSelectionToolbar$foundation_release()>();

        $r3 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if $r3 == null goto label1;

        $r4 = r0.<androidx.compose.foundation.text.selection.SelectionManager: kotlin.jvm.functions.Function1 onSelectionChange>;

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(null);

        $r6 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.hapticfeedback.HapticFeedback hapticFeedBack>;

        if $r6 == null goto label1;

        $r7 = <androidx.compose.ui.hapticfeedback.HapticFeedbackType: androidx.compose.ui.hapticfeedback.HapticFeedbackType$Companion Companion>;

        $i0 = virtualinvoke $r7.<androidx.compose.ui.hapticfeedback.HapticFeedbackType$Companion: int getTextHandleMove-5zf0vsI()>();

        interfaceinvoke $r6.<androidx.compose.ui.hapticfeedback.HapticFeedback: void performHapticFeedback-CdsT49E(int)>($i0);

        goto label1;

     label1:
        return;
    }

    public final androidx.compose.foundation.text.TextDragObserver handleDragObserver(boolean)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        boolean z0;
        androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1 $r1;
        androidx.compose.foundation.text.TextDragObserver $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        z0 := @parameter0: boolean;

        $r1 = new androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1;

        specialinvoke $r1.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: void <init>(androidx.compose.foundation.text.selection.SelectionManager,boolean)>(r0, z0);

        $r2 = (androidx.compose.foundation.text.TextDragObserver) $r1;

        return $r2;
    }

    private final java.lang.Object detectNonConsumingTap(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.input.pointer.PointerInputScope $r1;
        kotlin.jvm.functions.Function1 r2;
        kotlin.coroutines.Continuation $r3;
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2 $r4;
        kotlin.jvm.functions.Function2 $r5;
        java.lang.Object $r6, $r7;
        kotlin.Unit $r8;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 := @parameter0: androidx.compose.ui.input.pointer.PointerInputScope;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2;

        specialinvoke $r4.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: void <init>(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>(r2, null);

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        $r6 = staticinvoke <androidx.compose.foundation.gestures.ForEachGestureKt: java.lang.Object forEachGesture(androidx.compose.ui.input.pointer.PointerInputScope,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r1, $r5, $r3);

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r7 goto label1;

        return $r6;

     label1:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;
    }

    private final androidx.compose.ui.Modifier onClearSelectionRequested(androidx.compose.ui.Modifier, kotlin.jvm.functions.Function0)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.Modifier $r1, $r6;
        kotlin.jvm.functions.Function0 r2;
        boolean $z0;
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1 $r3;
        kotlin.Unit $r4;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 := @parameter0: androidx.compose.ui.Modifier;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        $z0 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean getHasFocus()>();

        if $z0 == 0 goto label1;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r3 = new androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1;

        specialinvoke $r3.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: void <init>(androidx.compose.foundation.text.selection.SelectionManager,kotlin.jvm.functions.Function0,kotlin.coroutines.Continuation)>(r0, r2, null);

        $r5 = (kotlin.jvm.functions.Function2) $r3;

        $r6 = staticinvoke <androidx.compose.ui.input.pointer.SuspendingPointerInputFilterKt: androidx.compose.ui.Modifier pointerInput(androidx.compose.ui.Modifier,java.lang.Object,kotlin.jvm.functions.Function2)>($r1, $r4, $r5);

        goto label2;

     label1:
        $r6 = $r1;

     label2:
        return $r6;
    }

    private final androidx.compose.ui.geometry.Offset convertToContainerCoordinates-Q7Q5hAU(androidx.compose.ui.layout.LayoutCoordinates, long)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.layout.LayoutCoordinates r1, r2, $r3;
        long l0, $l1;
        boolean $z0;
        androidx.compose.ui.geometry.Offset $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        l0 := @parameter1: long;

        r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates containerLayoutCoordinates>;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<androidx.compose.ui.layout.LayoutCoordinates: boolean isAttached()>();

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r3 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates requireContainerCoordinates$foundation_release()>();

        $l1 = interfaceinvoke $r3.<androidx.compose.ui.layout.LayoutCoordinates: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r1, l0);

        $r4 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>($l1);

        return $r4;
    }

    private final void startSelection-9KIMszo(long, boolean, androidx.compose.foundation.text.selection.SelectionAdjustment)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        long l0;
        boolean z0;
        androidx.compose.foundation.text.selection.SelectionAdjustment r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r1 := @parameter2: androidx.compose.foundation.text.selection.SelectionAdjustment;

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean updateSelection-3R_-tFg$foundation_release(long,long,androidx.compose.ui.geometry.Offset,boolean,androidx.compose.foundation.text.selection.SelectionAdjustment)>(l0, l0, null, z0, r1);

        return;
    }

    public final boolean updateSelection-RHHTvR4$foundation_release(androidx.compose.ui.geometry.Offset, androidx.compose.ui.geometry.Offset, boolean, androidx.compose.foundation.text.selection.SelectionAdjustment)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        androidx.compose.ui.geometry.Offset r1, r2, $r18;
        boolean z0, $z2, $z3;
        androidx.compose.foundation.text.selection.SelectionAdjustment r3;
        long l0, l1, l2, l3, $l4, $l5, $l6, $l7, $l8;
        androidx.compose.foundation.text.selection.Selection r4, $r6;
        androidx.compose.foundation.text.selection.Selectable r5, $r12;
        androidx.compose.foundation.text.selection.Selection$AnchorInfo $r7, $r17;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r8;
        java.util.Map $r9;
        java.lang.Long $r10;
        java.lang.Object $r11;
        androidx.compose.ui.layout.LayoutCoordinates $r13;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter0: androidx.compose.ui.geometry.Offset;

        r2 := @parameter1: androidx.compose.ui.geometry.Offset;

        z0 := @parameter2: boolean;

        r3 := @parameter3: androidx.compose.foundation.text.selection.SelectionAdjustment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "adjustment");

        if r1 != null goto label01;

        return 0;

     label01:
        $r6 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if $r6 == null goto label08;

        r4 = $r6;

        if z0 == 0 goto label02;

        $r17 = virtualinvoke r4.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

        $l6 = virtualinvoke $r17.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        goto label03;

     label02:
        $r7 = virtualinvoke r4.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        $l6 = virtualinvoke $r7.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

     label03:
        l3 = $l6;

        $r8 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r9 = virtualinvoke $r8.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: java.util.Map getSelectableMap$foundation_release()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (androidx.compose.foundation.text.selection.Selectable) $r11;

        if $r12 != null goto label04;

        $r18 = null;

        goto label07;

     label04:
        r5 = $r12;

        $r13 = interfaceinvoke r5.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.layout.LayoutCoordinates getLayoutCoordinates()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        if z0 != 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        $l4 = interfaceinvoke r5.<androidx.compose.foundation.text.selection.Selectable: long getHandlePosition-dBAh8RU(androidx.compose.foundation.text.selection.Selection,boolean)>(r4, $z3);

        $l5 = staticinvoke <androidx.compose.foundation.text.selection.SelectionHandlesKt: long getAdjustedCoordinates-k-4lQ0M(long)>($l4);

        $r18 = specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.geometry.Offset convertToContainerCoordinates-Q7Q5hAU(androidx.compose.ui.layout.LayoutCoordinates,long)>($r13, $l5);

     label07:
        if $r18 == null goto label08;

        goto label09;

     label08:
        return 0;

     label09:
        l0 = virtualinvoke $r18.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

        if z0 == 0 goto label10;

        $l7 = virtualinvoke r1.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

        goto label11;

     label10:
        $l7 = l0;

     label11:
        l1 = $l7;

        if z0 == 0 goto label12;

        $l8 = l0;

        goto label13;

     label12:
        $l8 = virtualinvoke r1.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

     label13:
        l2 = $l8;

        $z2 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: boolean updateSelection-3R_-tFg$foundation_release(long,long,androidx.compose.ui.geometry.Offset,boolean,androidx.compose.foundation.text.selection.SelectionAdjustment)>(l1, l2, r2, z0, r3);

        return $z2;
    }

    public final boolean updateSelection-3R_-tFg$foundation_release(long, long, androidx.compose.ui.geometry.Offset, boolean, androidx.compose.foundation.text.selection.SelectionAdjustment)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        long l0, l1, $l4, $l5;
        androidx.compose.ui.geometry.Offset r1, $r35;
        boolean z0, z1, $z2, z3, $z4;
        androidx.compose.foundation.text.selection.SelectionAdjustment r2;
        java.util.Map r3, $r23;
        androidx.compose.foundation.text.selection.Selection r4, r9, r10, r12, r13, $r17, r36;
        java.util.List $r5;
        int i2, $i3, i6;
        java.lang.Object r6, r7, $r25, $r27, $r28;
        androidx.compose.foundation.text.selection.Selectable r8;
        kotlin.Pair r11;
        java.util.LinkedHashMap $r14;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r15, $r19, $r22;
        androidx.compose.ui.layout.LayoutCoordinates $r16, $r26;
        androidx.compose.ui.hapticfeedback.HapticFeedback $r18;
        kotlin.jvm.functions.Function1 $r20;
        androidx.compose.ui.hapticfeedback.HapticFeedbackType$Companion $r21;
        java.lang.Long $r24, $r30;
        java.lang.Boolean $r29;
        androidx.compose.foundation.text.Handle $r34;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: androidx.compose.ui.geometry.Offset;

        z0 := @parameter3: boolean;

        r2 := @parameter4: androidx.compose.foundation.text.selection.SelectionAdjustment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "adjustment");

        if z0 == 0 goto label01;

        $r34 = <androidx.compose.foundation.text.Handle: androidx.compose.foundation.text.Handle SelectionStart>;

        goto label02;

     label01:
        $r34 = <androidx.compose.foundation.text.Handle: androidx.compose.foundation.text.Handle SelectionEnd>;

     label02:
        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void setDraggingHandle(androidx.compose.foundation.text.Handle)>($r34);

        if z0 == 0 goto label03;

        $r35 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>(l0);

        goto label04;

     label03:
        $r35 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>(l1);

     label04:
        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void setCurrentDragPosition-_kEHs6E(androidx.compose.ui.geometry.Offset)>($r35);

        $r14 = new java.util.LinkedHashMap;

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>();

        r3 = (java.util.Map) $r14;

        z3 = 0;

        $r15 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r16 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates requireContainerCoordinates$foundation_release()>();

        r36 = null;

        $r5 = virtualinvoke $r15.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: java.util.List sort(androidx.compose.ui.layout.LayoutCoordinates)>($r16);

        i6 = 0;

        i2 = interfaceinvoke $r5.<java.util.List: int size()>();

     label05:
        if i6 >= i2 goto label10;

        r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i6);

        r7 = r6;

        r8 = (androidx.compose.foundation.text.selection.Selectable) r7;

        r9 = r36;

        $r22 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        $r23 = virtualinvoke $r22.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: java.util.Map getSubselections()>();

        $l4 = interfaceinvoke r8.<androidx.compose.foundation.text.selection.Selectable: long getSelectableId()>();

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r25 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        r10 = (androidx.compose.foundation.text.selection.Selection) $r25;

        $r26 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates requireContainerCoordinates$foundation_release()>();

        r11 = interfaceinvoke r8.<androidx.compose.foundation.text.selection.Selectable: kotlin.Pair updateSelection-qCDeeow(long,long,androidx.compose.ui.geometry.Offset,boolean,androidx.compose.ui.layout.LayoutCoordinates,androidx.compose.foundation.text.selection.SelectionAdjustment,androidx.compose.foundation.text.selection.Selection)>(l0, l1, r1, z0, $r26, r2, r10);

        $r27 = virtualinvoke r11.<kotlin.Pair: java.lang.Object component1()>();

        r12 = (androidx.compose.foundation.text.selection.Selection) $r27;

        $r28 = virtualinvoke r11.<kotlin.Pair: java.lang.Object component2()>();

        $r29 = (java.lang.Boolean) $r28;

        z1 = virtualinvoke $r29.<java.lang.Boolean: boolean booleanValue()>();

        if z3 != 0 goto label06;

        if z1 == 0 goto label07;

     label06:
        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        z3 = $z4;

        if r12 == null goto label09;

        r13 = r12;

        $l5 = interfaceinvoke r8.<androidx.compose.foundation.text.selection.Selectable: long getSelectableId()>();

        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, r13);

        goto label09;

     label09:
        r36 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManagerKt: androidx.compose.foundation.text.selection.Selection merge(androidx.compose.foundation.text.selection.Selection,androidx.compose.foundation.text.selection.Selection)>(r9, r12);

        i6 = i6 + 1;

        goto label05;

     label10:
        r4 = r36;

        $r17 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r4, $r17);

        if $z2 != 0 goto label12;

        $r18 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.hapticfeedback.HapticFeedback hapticFeedBack>;

        if $r18 == null goto label11;

        $r21 = <androidx.compose.ui.hapticfeedback.HapticFeedbackType: androidx.compose.ui.hapticfeedback.HapticFeedbackType$Companion Companion>;

        $i3 = virtualinvoke $r21.<androidx.compose.ui.hapticfeedback.HapticFeedbackType$Companion: int getTextHandleMove-5zf0vsI()>();

        interfaceinvoke $r18.<androidx.compose.ui.hapticfeedback.HapticFeedback: void performHapticFeedback-CdsT49E(int)>($i3);

        goto label11;

     label11:
        $r19 = r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        virtualinvoke $r19.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setSubselections(java.util.Map)>(r3);

        $r20 = r0.<androidx.compose.foundation.text.selection.SelectionManager: kotlin.jvm.functions.Function1 onSelectionChange>;

        interfaceinvoke $r20.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r4);

     label12:
        return z3;
    }

    public final void contextMenuOpenAdjustment-k-4lQ0M(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager r0;
        long l0, $l1;
        boolean z0, $z1;
        androidx.compose.foundation.text.selection.Selection $r1;
        androidx.compose.foundation.text.selection.SelectionAdjustment$Companion $r2;
        androidx.compose.foundation.text.selection.SelectionAdjustment $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if $r1 == null goto label1;

        $l1 = virtualinvoke $r1.<androidx.compose.foundation.text.selection.Selection: long toTextRange-d9O1mEE()>();

        $z1 = staticinvoke <androidx.compose.ui.text.TextRange: boolean getCollapsed-impl(long)>($l1);

        goto label2;

     label1:
        $z1 = 1;

     label2:
        z0 = $z1;

        if z0 == 0 goto label3;

        $r2 = <androidx.compose.foundation.text.selection.SelectionAdjustment: androidx.compose.foundation.text.selection.SelectionAdjustment$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.compose.foundation.text.selection.SelectionAdjustment$Companion: androidx.compose.foundation.text.selection.SelectionAdjustment getWord()>();

        specialinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager: void startSelection-9KIMszo(long,boolean,androidx.compose.foundation.text.selection.SelectionAdjustment)>(l0, 1, $r3);

     label3:
        return;
    }

    public static final void access$setCurrentDragPosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager, androidx.compose.ui.geometry.Offset)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        androidx.compose.ui.geometry.Offset r1;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter1: androidx.compose.ui.geometry.Offset;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: void setCurrentDragPosition-_kEHs6E(androidx.compose.ui.geometry.Offset)>(r1);

        return;
    }

    public static final void access$setDraggingHandle(androidx.compose.foundation.text.selection.SelectionManager, androidx.compose.foundation.text.Handle)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        androidx.compose.foundation.text.Handle r1;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter1: androidx.compose.foundation.text.Handle;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: void setDraggingHandle(androidx.compose.foundation.text.Handle)>(r1);

        return;
    }

    public static final androidx.compose.foundation.text.selection.SelectionRegistrarImpl access$getSelectionRegistrar$p(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r1;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 = $r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl selectionRegistrar>;

        return $r1;
    }

    public static final void access$setDragBeginPosition-k-4lQ0M(androidx.compose.foundation.text.selection.SelectionManager, long)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        l0 := @parameter1: long;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: void setDragBeginPosition-k-4lQ0M(long)>(l0);

        return;
    }

    public static final void access$setDragTotalDistance-k-4lQ0M(androidx.compose.foundation.text.selection.SelectionManager, long)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        l0 := @parameter1: long;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: void setDragTotalDistance-k-4lQ0M(long)>(l0);

        return;
    }

    public static final java.lang.Object access$detectNonConsumingTap(androidx.compose.foundation.text.selection.SelectionManager, androidx.compose.ui.input.pointer.PointerInputScope, kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        androidx.compose.ui.input.pointer.PointerInputScope $r1;
        kotlin.jvm.functions.Function1 r2;
        kotlin.coroutines.Continuation $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        $r1 := @parameter1: androidx.compose.ui.input.pointer.PointerInputScope;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        $r4 = specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: java.lang.Object detectNonConsumingTap(androidx.compose.ui.input.pointer.PointerInputScope,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r1, r2, $r3);

        return $r4;
    }

    public static final void access$updateHandleOffsets(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: void updateHandleOffsets()>();

        return;
    }

    public static final void access$updateSelectionToolbarPosition(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: void updateSelectionToolbarPosition()>();

        return;
    }

    public static final androidx.compose.ui.geometry.Offset access$convertToContainerCoordinates-Q7Q5hAU(androidx.compose.foundation.text.selection.SelectionManager, androidx.compose.ui.layout.LayoutCoordinates, long)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        long l0;
        androidx.compose.ui.geometry.Offset $r2;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter1: androidx.compose.ui.layout.LayoutCoordinates;

        l0 := @parameter2: long;

        $r2 = specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.geometry.Offset convertToContainerCoordinates-Q7Q5hAU(androidx.compose.ui.layout.LayoutCoordinates,long)>(r1, l0);

        return $r2;
    }

    public static final void access$startSelection-9KIMszo(androidx.compose.foundation.text.selection.SelectionManager, long, boolean, androidx.compose.foundation.text.selection.SelectionAdjustment)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        long l0;
        boolean z0;
        androidx.compose.foundation.text.selection.SelectionAdjustment r1;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        r1 := @parameter3: androidx.compose.foundation.text.selection.SelectionAdjustment;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: void startSelection-9KIMszo(long,boolean,androidx.compose.foundation.text.selection.SelectionAdjustment)>(l0, z0, r1);

        return;
    }

    public static final void access$setStartHandlePosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager, androidx.compose.ui.geometry.Offset)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        androidx.compose.ui.geometry.Offset r1;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter1: androidx.compose.ui.geometry.Offset;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: void setStartHandlePosition-_kEHs6E(androidx.compose.ui.geometry.Offset)>(r1);

        return;
    }

    public static final void access$setEndHandlePosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager, androidx.compose.ui.geometry.Offset)
    {
        androidx.compose.foundation.text.selection.SelectionManager $r0;
        androidx.compose.ui.geometry.Offset r1;

        $r0 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r1 := @parameter1: androidx.compose.ui.geometry.Offset;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager: void setEndHandlePosition-_kEHs6E(androidx.compose.ui.geometry.Offset)>(r1);

        return;
    }

androidx.compose.foundation.text.selection.SelectionManager$1
<androidx.compose.foundation.text.selection.SelectionManager$1: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$1;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$1: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager$1 r0;
        long l0, $l1, $l3;
        androidx.compose.foundation.text.selection.SelectionManager $r1, $r2, $r3, $r4;
        byte $b2, $b4;
        androidx.compose.foundation.text.selection.Selection r5, r7;
        androidx.compose.foundation.text.selection.Selection$AnchorInfo r6, r8;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$1;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        r5 = virtualinvoke $r1.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if r5 == null goto label2;

        r6 = virtualinvoke r5.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        if r6 == null goto label2;

        $l3 = virtualinvoke r6.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $b4 = l0 cmp $l3;

        if $b4 != 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label7;

        $r4 = r0.<androidx.compose.foundation.text.selection.SelectionManager$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        r7 = virtualinvoke $r4.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if r7 == null goto label5;

        r8 = virtualinvoke r7.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

        if r8 == null goto label5;

        $l1 = virtualinvoke r8.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label4;

        $z1 = 1;

        goto label6;

     label4:
        $z1 = 0;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        if $z1 == 0 goto label8;

     label7:
        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$updateHandleOffsets(androidx.compose.foundation.text.selection.SelectionManager)>($r2);

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$updateSelectionToolbarPosition(androidx.compose.foundation.text.selection.SelectionManager)>($r3);

     label8:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$1 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        long $l0;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$1: void invoke(long)>($l0);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.foundation.text.selection.SelectionManager$2
<androidx.compose.foundation.text.selection.SelectionManager$2: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$2 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$2;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$2: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke-d-4ec7I(androidx.compose.ui.layout.LayoutCoordinates, long, androidx.compose.foundation.text.selection.SelectionAdjustment)
    {
        androidx.compose.foundation.text.selection.SelectionManager$2 r0;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        long l0, $l1;
        androidx.compose.foundation.text.selection.SelectionAdjustment r2;
        androidx.compose.ui.geometry.Offset r3;
        androidx.compose.foundation.text.selection.SelectionManager $r4, $r5, $r6, $r8;
        androidx.compose.ui.focus.FocusRequester $r7;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$2;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.compose.foundation.text.selection.SelectionAdjustment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutCoordinates");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "selectionMode");

        $r4 = r0.<androidx.compose.foundation.text.selection.SelectionManager$2: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        r3 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.geometry.Offset access$convertToContainerCoordinates-Q7Q5hAU(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.layout.LayoutCoordinates,long)>($r4, r1, l0);

        if r3 == null goto label1;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$2: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $l1 = virtualinvoke r3.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$startSelection-9KIMszo(androidx.compose.foundation.text.selection.SelectionManager,long,boolean,androidx.compose.foundation.text.selection.SelectionAdjustment)>($r5, $l1, 0, r2);

        $r6 = r0.<androidx.compose.foundation.text.selection.SelectionManager$2: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r7 = virtualinvoke $r6.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.focus.FocusRequester getFocusRequester()>();

        virtualinvoke $r7.<androidx.compose.ui.focus.FocusRequester: void requestFocus()>();

        $r8 = r0.<androidx.compose.foundation.text.selection.SelectionManager$2: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r8.<androidx.compose.foundation.text.selection.SelectionManager: void hideSelectionToolbar$foundation_release()>();

     label1:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.ui.geometry.Offset $r4;
        androidx.compose.ui.layout.LayoutCoordinates $r5;
        long $l0;
        androidx.compose.foundation.text.selection.SelectionAdjustment $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (androidx.compose.ui.layout.LayoutCoordinates) r1;

        $r4 = (androidx.compose.ui.geometry.Offset) r2;

        $l0 = virtualinvoke $r4.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

        $r6 = (androidx.compose.foundation.text.selection.SelectionAdjustment) r3;

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$2: void invoke-d-4ec7I(androidx.compose.ui.layout.LayoutCoordinates,long,androidx.compose.foundation.text.selection.SelectionAdjustment)>($r5, $l0, $r6);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.foundation.text.selection.SelectionManager$3
<androidx.compose.foundation.text.selection.SelectionManager$3: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$3 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$3;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$3: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager$3 r0;
        long l0;
        kotlin.Pair r1;
        androidx.compose.foundation.text.selection.Selection r2, $r6, $r10;
        java.util.Map r3;
        androidx.compose.foundation.text.selection.SelectionManager $r4, $r5, $r9, $r11, $r13, $r14, $r16;
        java.lang.Object $r7, $r8;
        boolean $z0;
        androidx.compose.ui.focus.FocusRequester $r12;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r15;
        kotlin.jvm.functions.Function1 $r17;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$3;

        l0 := @parameter0: long;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r4 = r0.<androidx.compose.foundation.text.selection.SelectionManager$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r6 = virtualinvoke $r4.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        r1 = virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager: kotlin.Pair selectAll$foundation_release(long,androidx.compose.foundation.text.selection.Selection)>(l0, $r6);

        $r7 = virtualinvoke r1.<kotlin.Pair: java.lang.Object component1()>();

        r2 = (androidx.compose.foundation.text.selection.Selection) $r7;

        $r8 = virtualinvoke r1.<kotlin.Pair: java.lang.Object component2()>();

        r3 = (java.util.Map) $r8;

        $r9 = r0.<androidx.compose.foundation.text.selection.SelectionManager$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r10 = virtualinvoke $r9.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r10);

        if $z0 != 0 goto label1;

        $r14 = r0.<androidx.compose.foundation.text.selection.SelectionManager$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r15 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl access$getSelectionRegistrar$p(androidx.compose.foundation.text.selection.SelectionManager)>($r14);

        virtualinvoke $r15.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: void setSubselections(java.util.Map)>(r3);

        $r16 = r0.<androidx.compose.foundation.text.selection.SelectionManager$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r17 = virtualinvoke $r16.<androidx.compose.foundation.text.selection.SelectionManager: kotlin.jvm.functions.Function1 getOnSelectionChange()>();

        interfaceinvoke $r17.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

     label1:
        $r11 = r0.<androidx.compose.foundation.text.selection.SelectionManager$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r12 = virtualinvoke $r11.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.focus.FocusRequester getFocusRequester()>();

        virtualinvoke $r12.<androidx.compose.ui.focus.FocusRequester: void requestFocus()>();

        $r13 = r0.<androidx.compose.foundation.text.selection.SelectionManager$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r13.<androidx.compose.foundation.text.selection.SelectionManager: void hideSelectionToolbar$foundation_release()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$3 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        long $l0;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$3: void invoke(long)>($l0);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.foundation.text.selection.SelectionManager$4
<androidx.compose.foundation.text.selection.SelectionManager$4: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$4 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$4;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$4: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(5);

        return;
    }

    public final java.lang.Boolean invoke-5iVPX68(androidx.compose.ui.layout.LayoutCoordinates, long, long, boolean, androidx.compose.foundation.text.selection.SelectionAdjustment)
    {
        androidx.compose.foundation.text.selection.SelectionManager$4 r0;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        long l0, l1;
        boolean z0, $z1;
        androidx.compose.foundation.text.selection.SelectionAdjustment r2;
        androidx.compose.ui.geometry.Offset r3, r4;
        androidx.compose.foundation.text.selection.SelectionManager $r5, $r6, $r7;
        java.lang.Boolean $r8;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$4;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        r2 := @parameter4: androidx.compose.foundation.text.selection.SelectionAdjustment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutCoordinates");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "selectionMode");

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$4: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        r3 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.geometry.Offset access$convertToContainerCoordinates-Q7Q5hAU(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.layout.LayoutCoordinates,long)>($r5, r1, l0);

        $r6 = r0.<androidx.compose.foundation.text.selection.SelectionManager$4: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        r4 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.geometry.Offset access$convertToContainerCoordinates-Q7Q5hAU(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.layout.LayoutCoordinates,long)>($r6, r1, l1);

        $r7 = r0.<androidx.compose.foundation.text.selection.SelectionManager$4: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $z1 = virtualinvoke $r7.<androidx.compose.foundation.text.selection.SelectionManager: boolean updateSelection-RHHTvR4$foundation_release(androidx.compose.ui.geometry.Offset,androidx.compose.ui.geometry.Offset,boolean,androidx.compose.foundation.text.selection.SelectionAdjustment)>(r3, r4, z0, r2);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r8;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$4 r0;
        java.lang.Object r1, r2, r3, r4, r5;
        androidx.compose.ui.geometry.Offset $r6, $r8;
        androidx.compose.ui.layout.LayoutCoordinates $r7;
        long $l0, $l1;
        java.lang.Boolean $r9, $r11;
        boolean $z0;
        androidx.compose.foundation.text.selection.SelectionAdjustment $r10;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$4;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        $r7 = (androidx.compose.ui.layout.LayoutCoordinates) r1;

        $r6 = (androidx.compose.ui.geometry.Offset) r2;

        $l0 = virtualinvoke $r6.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

        $r8 = (androidx.compose.ui.geometry.Offset) r3;

        $l1 = virtualinvoke $r8.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

        $r9 = (java.lang.Boolean) r4;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        $r10 = (androidx.compose.foundation.text.selection.SelectionAdjustment) r5;

        $r11 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$4: java.lang.Boolean invoke-5iVPX68(androidx.compose.ui.layout.LayoutCoordinates,long,long,boolean,androidx.compose.foundation.text.selection.SelectionAdjustment)>($r7, $l0, $l1, $z0, $r10);

        return $r11;
    }

androidx.compose.foundation.text.selection.SelectionManager$5
<androidx.compose.foundation.text.selection.SelectionManager$5: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$5 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$5;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$5: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.foundation.text.selection.SelectionManager$5 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1, $r2, $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$5;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$5: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r1.<androidx.compose.foundation.text.selection.SelectionManager: void showSelectionToolbar$foundation_release()>();

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$5: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDraggingHandle(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.foundation.text.Handle)>($r2, null);

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager$5: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setCurrentDragPosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.geometry.Offset)>($r3, null);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.foundation.text.selection.SelectionManager$5 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$5;

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$5: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.foundation.text.selection.SelectionManager$6
<androidx.compose.foundation.text.selection.SelectionManager$6: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$6 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$6;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$6: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager$6 r0;
        long l0;
        java.lang.Long r1;
        androidx.compose.foundation.text.selection.SelectionManager $r2, $r5, $r6;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r3;
        java.util.Map $r4;
        boolean $z0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$6;

        l0 := @parameter0: long;

        r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$6: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r3 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl access$getSelectionRegistrar$p(androidx.compose.foundation.text.selection.SelectionManager)>($r2);

        $r4 = virtualinvoke $r3.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: java.util.Map getSubselections()>();

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$6: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager: void onRelease()>();

        $r6 = r0.<androidx.compose.foundation.text.selection.SelectionManager$6: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r6.<androidx.compose.foundation.text.selection.SelectionManager: void setSelection(androidx.compose.foundation.text.selection.Selection)>(null);

     label1:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$6 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        long $l0;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$6;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$6: void invoke(long)>($l0);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.foundation.text.selection.SelectionManager$7
<androidx.compose.foundation.text.selection.SelectionManager$7: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$7 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$7;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$7: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager$7 r0;
        long l0, $l1, $l3;
        androidx.compose.foundation.text.selection.SelectionManager $r1, $r2, $r3, $r4;
        byte $b2, $b4;
        androidx.compose.foundation.text.selection.Selection r5, r7;
        androidx.compose.foundation.text.selection.Selection$AnchorInfo r6, r8;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$7;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$7: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        r5 = virtualinvoke $r1.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if r5 == null goto label2;

        r6 = virtualinvoke r5.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        if r6 == null goto label2;

        $l3 = virtualinvoke r6.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $b4 = l0 cmp $l3;

        if $b4 != 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label7;

        $r4 = r0.<androidx.compose.foundation.text.selection.SelectionManager$7: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        r7 = virtualinvoke $r4.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if r7 == null goto label5;

        r8 = virtualinvoke r7.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

        if r8 == null goto label5;

        $l1 = virtualinvoke r8.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label4;

        $z1 = 1;

        goto label6;

     label4:
        $z1 = 0;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        if $z1 == 0 goto label8;

     label7:
        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$7: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setStartHandlePosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.geometry.Offset)>($r2, null);

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager$7: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setEndHandlePosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.geometry.Offset)>($r3, null);

     label8:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$7 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        long $l0;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$7;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$7: void invoke(long)>($l0);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1
<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: int label>
<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: java.lang.Object L$0>
<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: kotlin.jvm.functions.Function1 $onTap>
    void <init>(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1 r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: kotlin.jvm.functions.Function1 $onTap> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.RestrictedSuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1 r0;
        java.lang.Object $r1, r6, $r11, $r14;
        androidx.compose.ui.input.pointer.AwaitPointerEventScope $r2;
        androidx.compose.ui.input.pointer.PointerInputChange r3, r5, $r7;
        kotlin.jvm.functions.Function1 r4;
        int $i0;
        kotlin.Unit $r8;
        long $l1;
        androidx.compose.ui.geometry.Offset $r9;
        kotlin.coroutines.Continuation $r12;
        java.lang.IllegalStateException $r13;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1;

        $r1 := @parameter0: java.lang.Object;

        r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label5;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r11 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: java.lang.Object L$0>;

        $r2 = (androidx.compose.ui.input.pointer.AwaitPointerEventScope) $r11;

        $r12 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: int label> = 1;

        $r14 = staticinvoke <androidx.compose.foundation.gestures.TapGestureDetectorKt: java.lang.Object waitForUpOrCancellation(androidx.compose.ui.input.pointer.AwaitPointerEventScope,kotlin.coroutines.Continuation)>($r2, $r12);

        if $r14 != r6 goto label3;

        return r6;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r14 = $r1;

     label3:
        $r7 = (androidx.compose.ui.input.pointer.PointerInputChange) $r14;

        if $r7 == null goto label4;

        r3 = $r7;

        r4 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: kotlin.jvm.functions.Function1 $onTap>;

        r5 = r3;

        $l1 = virtualinvoke r5.<androidx.compose.ui.input.pointer.PointerInputChange: long getPosition-F1C5BW0()>();

        $r9 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>($l1);

        interfaceinvoke r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r9);

        goto label4;

     label4:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;

     label5:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r13;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        kotlin.jvm.functions.Function1 $r5;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: kotlin.jvm.functions.Function1 $onTap>;

        specialinvoke $r4.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: void <init>(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        r3.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(androidx.compose.ui.input.pointer.AwaitPointerEventScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1 r0, $r5;
        androidx.compose.ui.input.pointer.AwaitPointerEventScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1;

        r1 := @parameter0: androidx.compose.ui.input.pointer.AwaitPointerEventScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.compose.ui.input.pointer.AwaitPointerEventScope $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.ui.input.pointer.AwaitPointerEventScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: java.lang.Object invoke(androidx.compose.ui.input.pointer.AwaitPointerEventScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1
<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: int label>
<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: androidx.compose.ui.input.pointer.PointerInputScope $$this$forEachGesture>
<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: kotlin.jvm.functions.Function1 $onTap>
    void <init>(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1 r0;
        androidx.compose.ui.input.pointer.PointerInputScope $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1;

        $r1 := @parameter0: androidx.compose.ui.input.pointer.PointerInputScope;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: androidx.compose.ui.input.pointer.PointerInputScope $$this$forEachGesture> = $r1;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: kotlin.jvm.functions.Function1 $onTap> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1 r0;
        java.lang.Object $r1, r2, $r9;
        int $i0;
        kotlin.Unit $r3;
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1 $r4;
        kotlin.jvm.functions.Function1 $r5;
        androidx.compose.ui.input.pointer.PointerInputScope $r6;
        kotlin.jvm.functions.Function2 $r7;
        kotlin.coroutines.Continuation $r8;
        java.lang.IllegalStateException $r10;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r6 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: androidx.compose.ui.input.pointer.PointerInputScope $$this$forEachGesture>;

        $r4 = new androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: kotlin.jvm.functions.Function1 $onTap>;

        specialinvoke $r4.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1$1: void <init>(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r5, null);

        $r7 = (kotlin.jvm.functions.Function2) $r4;

        $r8 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: int label> = 1;

        $r9 = interfaceinvoke $r6.<androidx.compose.ui.input.pointer.PointerInputScope: java.lang.Object awaitPointerEventScope(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r7, $r8);

        if $r9 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;

     label4:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r10;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        kotlin.jvm.functions.Function1 $r4;
        androidx.compose.ui.input.pointer.PointerInputScope $r5;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: androidx.compose.ui.input.pointer.PointerInputScope $$this$forEachGesture>;

        $r4 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: kotlin.jvm.functions.Function1 $onTap>;

        specialinvoke $r3.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: void <init>(androidx.compose.ui.input.pointer.PointerInputScope,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2
<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: int label>
<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: java.lang.Object L$0>
<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: kotlin.jvm.functions.Function1 $onTap>
    void <init>(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2 r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: kotlin.jvm.functions.Function1 $onTap> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2 r0;
        java.lang.Object $r1, r3, $r5, $r10;
        androidx.compose.ui.input.pointer.PointerInputScope $r2;
        int $i0;
        kotlin.Unit $r4;
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1 $r6;
        kotlin.jvm.functions.Function1 $r7;
        kotlin.jvm.functions.Function2 $r8;
        kotlin.coroutines.Continuation $r9;
        java.lang.IllegalStateException $r11;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: java.lang.Object L$0>;

        $r2 = (androidx.compose.ui.input.pointer.PointerInputScope) $r5;

        $r6 = new androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1;

        $r7 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: kotlin.jvm.functions.Function1 $onTap>;

        specialinvoke $r6.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2$1: void <init>(androidx.compose.ui.input.pointer.PointerInputScope,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r2, $r7, null);

        $r8 = (kotlin.jvm.functions.Function2) $r6;

        $r9 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: int label> = 1;

        $r10 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: java.lang.Object coroutineScope(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r8, $r9);

        if $r10 != r3 goto label3;

        return r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label4:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r11;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        kotlin.jvm.functions.Function1 $r5;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: kotlin.jvm.functions.Function1 $onTap>;

        specialinvoke $r4.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: void <init>(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        r3.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2 r0, $r5;
        androidx.compose.ui.input.pointer.PointerInputScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2;

        r1 := @parameter0: androidx.compose.ui.input.pointer.PointerInputScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.compose.ui.input.pointer.PointerInputScope $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.ui.input.pointer.PointerInputScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$detectNonConsumingTap$2: java.lang.Object invoke(androidx.compose.ui.input.pointer.PointerInputScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1
<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>
<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: boolean $isStartHandle>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager, boolean)
    {
        androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;
        boolean $z0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        $z0 := @parameter1: boolean;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: boolean $isStartHandle> = $z0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onDown-k-4lQ0M(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1 r0;
        long l0, l1, $l2, $l3;
        androidx.compose.foundation.text.selection.Selection r1, $r6;
        androidx.compose.foundation.text.selection.Selection$AnchorInfo r2, $r15;
        androidx.compose.foundation.text.selection.Selectable r3, $r8;
        androidx.compose.ui.layout.LayoutCoordinates r4, $r9, $r12;
        androidx.compose.foundation.text.selection.SelectionManager $r5, $r7, $r10, $r11, $r14;
        boolean $z0, $z1, $z2;
        androidx.compose.ui.geometry.Offset $r13;
        androidx.compose.foundation.text.Handle $r16;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1;

        l0 := @parameter0: long;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r6 = virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        if $r6 != null goto label1;

        return;

     label1:
        r1 = $r6;

        $z0 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: boolean $isStartHandle>;

        if $z0 == 0 goto label2;

        $r15 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        goto label3;

     label2:
        $r15 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

     label3:
        r2 = $r15;

        $r7 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r8 = virtualinvoke $r7.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selectable getAnchorSelectable$foundation_release(androidx.compose.foundation.text.selection.Selection$AnchorInfo)>(r2);

        if $r8 != null goto label4;

        return;

     label4:
        r3 = $r8;

        $r9 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.layout.LayoutCoordinates getLayoutCoordinates()>();

        if $r9 != null goto label5;

        return;

     label5:
        r4 = $r9;

        $z1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: boolean $isStartHandle>;

        $l2 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: long getHandlePosition-dBAh8RU(androidx.compose.foundation.text.selection.Selection,boolean)>(r1, $z1);

        l1 = staticinvoke <androidx.compose.foundation.text.selection.SelectionHandlesKt: long getAdjustedCoordinates-k-4lQ0M(long)>($l2);

        $r11 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r10 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r12 = virtualinvoke $r10.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates requireContainerCoordinates$foundation_release()>();

        $l3 = interfaceinvoke $r12.<androidx.compose.ui.layout.LayoutCoordinates: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r4, l1);

        $r13 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>($l3);

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setCurrentDragPosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.geometry.Offset)>($r11, $r13);

        $r14 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $z2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: boolean $isStartHandle>;

        if $z2 == 0 goto label6;

        $r16 = <androidx.compose.foundation.text.Handle: androidx.compose.foundation.text.Handle SelectionStart>;

        goto label7;

     label6:
        $r16 = <androidx.compose.foundation.text.Handle: androidx.compose.foundation.text.Handle SelectionEnd>;

     label7:
        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDraggingHandle(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.foundation.text.Handle)>($r14, $r16);

        return;
    }

    public void onUp()
    {
        androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1, $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDraggingHandle(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.foundation.text.Handle)>($r1, null);

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setCurrentDragPosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.geometry.Offset)>($r2, null);

        return;
    }

    public void onStart-k-4lQ0M(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1 r0;
        long l0, l1, $l2, $l3, $l4, $l5, $l6;
        androidx.compose.foundation.text.selection.Selection r1, $r7;
        androidx.compose.foundation.text.selection.Selectable r2, r3;
        androidx.compose.ui.layout.LayoutCoordinates r4, $r22, $r25, $r26;
        androidx.compose.foundation.text.selection.SelectionManager $r5, $r6, $r8, $r14, $r20, $r21, $r24;
        androidx.compose.foundation.text.selection.SelectionRegistrarImpl $r9, $r15;
        java.util.Map $r10, $r16;
        androidx.compose.foundation.text.selection.Selection$AnchorInfo $r11, $r17;
        java.lang.Long $r12, $r18;
        java.lang.Object $r13, $r19;
        boolean $z0, $z1;
        androidx.compose.ui.geometry.Offset$Companion $r23;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1;

        l0 := @parameter0: long;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager: void hideSelectionToolbar$foundation_release()>();

        $r6 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r7 = virtualinvoke $r6.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.Selection getSelection()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        r1 = $r7;

        $r8 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r9 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl access$getSelectionRegistrar$p(androidx.compose.foundation.text.selection.SelectionManager)>($r8);

        $r10 = virtualinvoke $r9.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: java.util.Map getSelectableMap$foundation_release()>();

        $r11 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getStart()>();

        $l2 = virtualinvoke $r11.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r13 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        r2 = (androidx.compose.foundation.text.selection.Selectable) $r13;

        $r14 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r15 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.foundation.text.selection.SelectionRegistrarImpl access$getSelectionRegistrar$p(androidx.compose.foundation.text.selection.SelectionManager)>($r14);

        $r16 = virtualinvoke $r15.<androidx.compose.foundation.text.selection.SelectionRegistrarImpl: java.util.Map getSelectableMap$foundation_release()>();

        $r17 = virtualinvoke r1.<androidx.compose.foundation.text.selection.Selection: androidx.compose.foundation.text.selection.Selection$AnchorInfo getEnd()>();

        $l3 = virtualinvoke $r17.<androidx.compose.foundation.text.selection.Selection$AnchorInfo: long getSelectableId()>();

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r19 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        r3 = (androidx.compose.foundation.text.selection.Selectable) $r19;

        $z0 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: boolean $isStartHandle>;

        if $z0 == 0 goto label3;

        if r2 == null goto label1;

        $r25 = interfaceinvoke r2.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.layout.LayoutCoordinates getLayoutCoordinates()>();

        goto label2;

     label1:
        $r25 = null;

        $r26 = null;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r25);

        goto label6;

     label3:
        if r3 == null goto label4;

        $r26 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: androidx.compose.ui.layout.LayoutCoordinates getLayoutCoordinates()>();

        goto label5;

     label4:
        $r26 = null;

     label5:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r26);

     label6:
        r4 = $r26;

        $z1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: boolean $isStartHandle>;

        if $z1 == 0 goto label7;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r2);

        $l6 = interfaceinvoke r2.<androidx.compose.foundation.text.selection.Selectable: long getHandlePosition-dBAh8RU(androidx.compose.foundation.text.selection.Selection,boolean)>(r1, 1);

        goto label8;

     label7:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r3);

        $l6 = interfaceinvoke r3.<androidx.compose.foundation.text.selection.Selectable: long getHandlePosition-dBAh8RU(androidx.compose.foundation.text.selection.Selection,boolean)>(r1, 0);

     label8:
        l1 = staticinvoke <androidx.compose.foundation.text.selection.SelectionHandlesKt: long getAdjustedCoordinates-k-4lQ0M(long)>($l6);

        $r21 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r20 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r22 = virtualinvoke $r20.<androidx.compose.foundation.text.selection.SelectionManager: androidx.compose.ui.layout.LayoutCoordinates requireContainerCoordinates$foundation_release()>();

        $l4 = interfaceinvoke $r22.<androidx.compose.ui.layout.LayoutCoordinates: long localPositionOf-R5De75A(androidx.compose.ui.layout.LayoutCoordinates,long)>(r4, l1);

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDragBeginPosition-k-4lQ0M(androidx.compose.foundation.text.selection.SelectionManager,long)>($r21, $l4);

        $r24 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r23 = <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset$Companion Companion>;

        $l5 = virtualinvoke $r23.<androidx.compose.ui.geometry.Offset$Companion: long getZero-F1C5BW0()>();

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDragTotalDistance-k-4lQ0M(androidx.compose.foundation.text.selection.SelectionManager,long)>($r24, $l5);

        return;
    }

    public void onDrag-k-4lQ0M(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1 r0;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, l7;
        boolean z0, $z1;
        androidx.compose.foundation.text.selection.SelectionManager $r1, $r2, $r3, $r5, $r9, $r11, r12;
        androidx.compose.ui.geometry.Offset $r4, $r6;
        androidx.compose.foundation.text.selection.SelectionAdjustment$Companion $r7;
        androidx.compose.foundation.text.selection.SelectionAdjustment $r8;
        androidx.compose.ui.geometry.Offset$Companion $r10;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1;

        l0 := @parameter0: long;

        r12 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $l1 = virtualinvoke r12.<androidx.compose.foundation.text.selection.SelectionManager: long getDragTotalDistance-F1C5BW0$foundation_release()>();

        $l2 = staticinvoke <androidx.compose.ui.geometry.Offset: long plus-MK-Hz9U(long,long)>($l1, l0);

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDragTotalDistance-k-4lQ0M(androidx.compose.foundation.text.selection.SelectionManager,long)>(r12, $l2);

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $l3 = virtualinvoke $r1.<androidx.compose.foundation.text.selection.SelectionManager: long getDragBeginPosition-F1C5BW0$foundation_release()>();

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $l4 = virtualinvoke $r2.<androidx.compose.foundation.text.selection.SelectionManager: long getDragTotalDistance-F1C5BW0$foundation_release()>();

        l7 = staticinvoke <androidx.compose.ui.geometry.Offset: long plus-MK-Hz9U(long,long)>($l3, $l4);

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r4 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>(l7);

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $l5 = virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager: long getDragBeginPosition-F1C5BW0$foundation_release()>();

        $r6 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>($l5);

        $z1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: boolean $isStartHandle>;

        $r7 = <androidx.compose.foundation.text.selection.SelectionAdjustment: androidx.compose.foundation.text.selection.SelectionAdjustment$Companion Companion>;

        $r8 = virtualinvoke $r7.<androidx.compose.foundation.text.selection.SelectionAdjustment$Companion: androidx.compose.foundation.text.selection.SelectionAdjustment getCharacterWithWordAccelerate()>();

        z0 = virtualinvoke $r3.<androidx.compose.foundation.text.selection.SelectionManager: boolean updateSelection-RHHTvR4$foundation_release(androidx.compose.ui.geometry.Offset,androidx.compose.ui.geometry.Offset,boolean,androidx.compose.foundation.text.selection.SelectionAdjustment)>($r4, $r6, $z1, $r8);

        if z0 == 0 goto label1;

        $r9 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDragBeginPosition-k-4lQ0M(androidx.compose.foundation.text.selection.SelectionManager,long)>($r9, l7);

        $r11 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r10 = <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset$Companion Companion>;

        $l6 = virtualinvoke $r10.<androidx.compose.ui.geometry.Offset$Companion: long getZero-F1C5BW0()>();

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDragTotalDistance-k-4lQ0M(androidx.compose.foundation.text.selection.SelectionManager,long)>($r11, $l6);

     label1:
        return;
    }

    public void onStop()
    {
        androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1, $r2, $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r1.<androidx.compose.foundation.text.selection.SelectionManager: void showSelectionToolbar$foundation_release()>();

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDraggingHandle(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.foundation.text.Handle)>($r2, null);

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setCurrentDragPosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.geometry.Offset)>($r3, null);

        return;
    }

    public void onCancel()
    {
        androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1, $r2, $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r1.<androidx.compose.foundation.text.selection.SelectionManager: void showSelectionToolbar$foundation_release()>();

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setDraggingHandle(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.foundation.text.Handle)>($r2, null);

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager$handleDragObserver$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: void access$setCurrentDragPosition-_kEHs6E(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.geometry.Offset)>($r3, null);

        return;
    }

androidx.compose.foundation.text.selection.SelectionManager$modifier$1
<androidx.compose.foundation.text.selection.SelectionManager$modifier$1: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$1;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$1: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$1;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r1.<androidx.compose.foundation.text.selection.SelectionManager: void onRelease()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$1;

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.foundation.text.selection.SelectionManager$modifier$2
<androidx.compose.foundation.text.selection.SelectionManager$modifier$2: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$2 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$2;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$2: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.layout.LayoutCoordinates)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$2 r0;
        androidx.compose.ui.layout.LayoutCoordinates r1;
        androidx.compose.foundation.text.selection.SelectionManager $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$2;

        r1 := @parameter0: androidx.compose.ui.layout.LayoutCoordinates;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$2: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r2.<androidx.compose.foundation.text.selection.SelectionManager: void setContainerLayoutCoordinates(androidx.compose.ui.layout.LayoutCoordinates)>(r1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$2 r0;
        java.lang.Object r1;
        androidx.compose.ui.layout.LayoutCoordinates $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.layout.LayoutCoordinates) r1;

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$2: void invoke(androidx.compose.ui.layout.LayoutCoordinates)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.foundation.text.selection.SelectionManager$modifier$3
<androidx.compose.foundation.text.selection.SelectionManager$modifier$3: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$3 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$3;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$3: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.focus.FocusState)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$3 r0;
        androidx.compose.ui.focus.FocusState r1;
        boolean $z0, $z1, $z2;
        androidx.compose.foundation.text.selection.SelectionManager $r2, $r3, $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$3;

        r1 := @parameter0: androidx.compose.ui.focus.FocusState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "focusState");

        $z0 = interfaceinvoke r1.<androidx.compose.ui.focus.FocusState: boolean isFocused()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $z1 = virtualinvoke $r2.<androidx.compose.foundation.text.selection.SelectionManager: boolean getHasFocus()>();

        if $z1 == 0 goto label1;

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r3.<androidx.compose.foundation.text.selection.SelectionManager: void onRelease()>();

     label1:
        $r4 = r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$3: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $z2 = interfaceinvoke r1.<androidx.compose.ui.focus.FocusState: boolean isFocused()>();

        virtualinvoke $r4.<androidx.compose.foundation.text.selection.SelectionManager: void setHasFocus(boolean)>($z2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$3 r0;
        java.lang.Object r1;
        androidx.compose.ui.focus.FocusState $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.focus.FocusState) r1;

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$3: void invoke(androidx.compose.ui.focus.FocusState)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.foundation.text.selection.SelectionManager$modifier$4
<androidx.compose.foundation.text.selection.SelectionManager$modifier$4: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$4 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$4;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$4: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke-ZmokQxo(android.view.KeyEvent)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$4 r0;
        android.view.KeyEvent r1;
        boolean $z0, $z1;
        java.lang.Boolean $r2;
        androidx.compose.foundation.text.selection.SelectionManager $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$4;

        r1 := @parameter0: android.view.KeyEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $z0 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager_androidKt: boolean isCopyKeyEvent-ZmokQxo(android.view.KeyEvent)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$4: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r3.<androidx.compose.foundation.text.selection.SelectionManager: void copy$foundation_release()>();

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$modifier$4 r0;
        java.lang.Object r1;
        androidx.compose.ui.input.key.KeyEvent $r2;
        android.view.KeyEvent $r3;
        java.lang.Boolean $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$modifier$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.input.key.KeyEvent) r1;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.input.key.KeyEvent: android.view.KeyEvent unbox-impl()>();

        $r4 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$modifier$4: java.lang.Boolean invoke-ZmokQxo(android.view.KeyEvent)>($r3);

        return $r4;
    }

androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1
<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1: kotlin.jvm.functions.Function0 $block>
    void <init>(kotlin.jvm.functions.Function0)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1 r0;
        kotlin.jvm.functions.Function0 $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1: kotlin.jvm.functions.Function0 $block> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke-k-4lQ0M(long)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1 r0;
        long l0;
        kotlin.jvm.functions.Function0 $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1: kotlin.jvm.functions.Function0 $block>;

        interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.geometry.Offset $r2;
        long $l0;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.geometry.Offset) r1;

        $l0 = virtualinvoke $r2.<androidx.compose.ui.geometry.Offset: long unbox-impl()>();

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1: void invoke-k-4lQ0M(long)>($l0);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1
<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: int label>
<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: java.lang.Object L$0>
<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: androidx.compose.foundation.text.selection.SelectionManager this$0>
<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: kotlin.jvm.functions.Function0 $block>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager, kotlin.jvm.functions.Function0, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        $r2 := @parameter1: kotlin.jvm.functions.Function0;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: kotlin.jvm.functions.Function0 $block> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1 r0;
        java.lang.Object $r1, r3, $r5, $r11;
        androidx.compose.ui.input.pointer.PointerInputScope $r2;
        int $i0;
        kotlin.Unit $r4;
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1 $r6;
        kotlin.jvm.functions.Function0 $r7;
        androidx.compose.foundation.text.selection.SelectionManager $r8;
        kotlin.jvm.functions.Function1 $r9;
        kotlin.coroutines.Continuation $r10;
        java.lang.IllegalStateException $r12;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1;

        $r1 := @parameter0: java.lang.Object;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: java.lang.Object L$0>;

        $r2 = (androidx.compose.ui.input.pointer.PointerInputScope) $r5;

        $r8 = r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r6 = new androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1;

        $r7 = r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: kotlin.jvm.functions.Function0 $block>;

        specialinvoke $r6.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1$1: void <init>(kotlin.jvm.functions.Function0)>($r7);

        $r9 = (kotlin.jvm.functions.Function1) $r6;

        $r10 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: int label> = 1;

        $r11 = staticinvoke <androidx.compose.foundation.text.selection.SelectionManager: java.lang.Object access$detectNonConsumingTap(androidx.compose.foundation.text.selection.SelectionManager,androidx.compose.ui.input.pointer.PointerInputScope,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r8, $r2, $r9, $r10);

        if $r11 != r3 goto label3;

        return r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label4:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r12;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r7;
        kotlin.jvm.functions.Function0 $r5;
        androidx.compose.foundation.text.selection.SelectionManager $r6;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1;

        $r6 = r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        $r5 = r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: kotlin.jvm.functions.Function0 $block>;

        specialinvoke $r4.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: void <init>(androidx.compose.foundation.text.selection.SelectionManager,kotlin.jvm.functions.Function0,kotlin.coroutines.Continuation)>($r6, $r5, $r2);

        r3 = $r4;

        r3.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: java.lang.Object L$0> = r1;

        $r7 = (kotlin.coroutines.Continuation) r3;

        return $r7;
    }

    public final java.lang.Object invoke(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1 r0, $r5;
        androidx.compose.ui.input.pointer.PointerInputScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1;

        r1 := @parameter0: androidx.compose.ui.input.pointer.PointerInputScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        androidx.compose.ui.input.pointer.PointerInputScope $r4;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.ui.input.pointer.PointerInputScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$onClearSelectionRequested$1: java.lang.Object invoke(androidx.compose.ui.input.pointer.PointerInputScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1
<androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1: androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1 INSTANCE>
    void <init>()
    {
        androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1 r0;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.foundation.text.selection.Selection)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1 r0;
        androidx.compose.foundation.text.selection.Selection r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1;

        r1 := @parameter0: androidx.compose.foundation.text.selection.Selection;

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1 r0;
        java.lang.Object r1;
        androidx.compose.foundation.text.selection.Selection $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.foundation.text.selection.Selection) r1;

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1: void invoke(androidx.compose.foundation.text.selection.Selection)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1 $r0;

        $r0 = new androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1;

        specialinvoke $r0.<androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1: void <init>()>();

        <androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1: androidx.compose.foundation.text.selection.SelectionManager$onSelectionChange$1 INSTANCE> = $r0;

        return;
    }

androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1
<androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1: androidx.compose.foundation.text.selection.SelectionManager this$0>
    void <init>(androidx.compose.foundation.text.selection.SelectionManager)
    {
        androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1;

        $r1 := @parameter0: androidx.compose.foundation.text.selection.SelectionManager;

        r0.<androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1: androidx.compose.foundation.text.selection.SelectionManager this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1 r0;
        androidx.compose.foundation.text.selection.SelectionManager $r1, $r2;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1;

        $r1 = r0.<androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r1.<androidx.compose.foundation.text.selection.SelectionManager: void copy$foundation_release()>();

        $r2 = r0.<androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1: androidx.compose.foundation.text.selection.SelectionManager this$0>;

        virtualinvoke $r2.<androidx.compose.foundation.text.selection.SelectionManager: void onRelease()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1;

        virtualinvoke r0.<androidx.compose.foundation.text.selection.SelectionManager$showSelectionToolbar$1$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

