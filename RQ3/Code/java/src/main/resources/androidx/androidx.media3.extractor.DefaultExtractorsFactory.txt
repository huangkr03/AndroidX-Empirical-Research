androidx.media3.extractor.DefaultExtractorsFactory
<androidx.media3.extractor.DefaultExtractorsFactory: int[] DEFAULT_EXTRACTOR_ORDER>
<androidx.media3.extractor.DefaultExtractorsFactory: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader FLAC_EXTENSION_LOADER>
<androidx.media3.extractor.DefaultExtractorsFactory: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader MIDI_EXTENSION_LOADER>
<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingEnabled>
<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingAlwaysEnabled>
<androidx.media3.extractor.DefaultExtractorsFactory: int adtsFlags>
<androidx.media3.extractor.DefaultExtractorsFactory: int amrFlags>
<androidx.media3.extractor.DefaultExtractorsFactory: int flacFlags>
<androidx.media3.extractor.DefaultExtractorsFactory: int matroskaFlags>
<androidx.media3.extractor.DefaultExtractorsFactory: int mp4Flags>
<androidx.media3.extractor.DefaultExtractorsFactory: int fragmentedMp4Flags>
<androidx.media3.extractor.DefaultExtractorsFactory: int mp3Flags>
<androidx.media3.extractor.DefaultExtractorsFactory: int tsMode>
<androidx.media3.extractor.DefaultExtractorsFactory: int tsFlags>
<androidx.media3.extractor.DefaultExtractorsFactory: com.google.common.collect.ImmutableList tsSubtitleFormats>
<androidx.media3.extractor.DefaultExtractorsFactory: int tsTimestampSearchBytes>
    public void <init>()
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        com.google.common.collect.ImmutableList $r1;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int tsMode> = 1;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int tsTimestampSearchBytes> = 112800;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: com.google.common.collect.ImmutableList tsSubtitleFormats> = $r1;

        return;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setConstantBitrateSeekingEnabled(boolean)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        boolean z0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingEnabled> = z0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setConstantBitrateSeekingAlwaysEnabled(boolean)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        boolean z0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingAlwaysEnabled> = z0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setAdtsExtractorFlags(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int adtsFlags> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setAmrExtractorFlags(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int amrFlags> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setFlacExtractorFlags(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int flacFlags> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setMatroskaExtractorFlags(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int matroskaFlags> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setMp4ExtractorFlags(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int mp4Flags> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setFragmentedMp4ExtractorFlags(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int fragmentedMp4Flags> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setMp3ExtractorFlags(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int mp3Flags> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setTsExtractorMode(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int tsMode> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setTsExtractorFlags(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int tsFlags> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setTsSubtitleFormats(java.util.List)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        java.util.List r1;
        com.google.common.collect.ImmutableList $r2;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>(r1);

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: com.google.common.collect.ImmutableList tsSubtitleFormats> = $r2;

        return r0;
    }

    public synchronized androidx.media3.extractor.DefaultExtractorsFactory setTsExtractorTimestampSearchBytes(int)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.DefaultExtractorsFactory: int tsTimestampSearchBytes> = i0;

        return r0;
    }

    public synchronized androidx.media3.extractor.Extractor[] createExtractors()
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        java.util.HashMap $r1;
        android.net.Uri $r2;
        androidx.media3.extractor.Extractor[] $r3;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        $r2 = <android.net.Uri: android.net.Uri EMPTY>;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r3 = virtualinvoke r0.<androidx.media3.extractor.DefaultExtractorsFactory: androidx.media3.extractor.Extractor[] createExtractors(android.net.Uri,java.util.Map)>($r2, $r1);

        return $r3;
    }

    public synchronized androidx.media3.extractor.Extractor[] createExtractors(android.net.Uri, java.util.Map)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        android.net.Uri r1;
        java.util.Map r2;
        java.util.ArrayList r3, $r5;
        int i0, i1, i2, i3, $i4, $i5, i6;
        int[] r4, $r6;
        androidx.media3.extractor.Extractor[] $r7, $r9;
        java.lang.Object[] $r8;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.util.Map;

        $r5 = new java.util.ArrayList;

        $r6 = <androidx.media3.extractor.DefaultExtractorsFactory: int[] DEFAULT_EXTRACTOR_ORDER>;

        $i4 = lengthof $r6;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i4);

        r3 = $r5;

        i0 = staticinvoke <androidx.media3.common.FileTypes: int inferFileTypeFromResponseHeaders(java.util.Map)>(r2);

        if i0 == -1 goto label1;

        specialinvoke r0.<androidx.media3.extractor.DefaultExtractorsFactory: void addExtractorsForFileType(int,java.util.List)>(i0, r3);

     label1:
        i1 = staticinvoke <androidx.media3.common.FileTypes: int inferFileTypeFromUri(android.net.Uri)>(r1);

        if i1 == -1 goto label2;

        if i1 == i0 goto label2;

        specialinvoke r0.<androidx.media3.extractor.DefaultExtractorsFactory: void addExtractorsForFileType(int,java.util.List)>(i1, r3);

     label2:
        r4 = <androidx.media3.extractor.DefaultExtractorsFactory: int[] DEFAULT_EXTRACTOR_ORDER>;

        i2 = lengthof r4;

        i6 = 0;

     label3:
        if i6 >= i2 goto label5;

        i3 = r4[i6];

        if i3 == i0 goto label4;

        if i3 == i1 goto label4;

        specialinvoke r0.<androidx.media3.extractor.DefaultExtractorsFactory: void addExtractorsForFileType(int,java.util.List)>(i3, r3);

     label4:
        i6 = i6 + 1;

        goto label3;

     label5:
        $i5 = interfaceinvoke r3.<java.util.List: int size()>();

        $r7 = newarray (androidx.media3.extractor.Extractor)[$i5];

        $r8 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (androidx.media3.extractor.Extractor[]) $r8;

        return $r9;
    }

    private void addExtractorsForFileType(int, java.util.List)
    {
        androidx.media3.extractor.DefaultExtractorsFactory r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.util.List r1;
        androidx.media3.extractor.Extractor r2, r3;
        androidx.media3.extractor.avi.AviExtractor $r4;
        java.lang.Object[] $r5, $r21;
        androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader $r6, $r22;
        androidx.media3.extractor.jpeg.JpegExtractor $r7;
        androidx.media3.extractor.wav.WavExtractor $r8;
        androidx.media3.extractor.ts.TsExtractor $r9;
        androidx.media3.common.util.TimestampAdjuster $r10;
        androidx.media3.extractor.ts.DefaultTsPayloadReaderFactory $r11;
        com.google.common.collect.ImmutableList $r12;
        androidx.media3.extractor.ts.PsExtractor $r13;
        androidx.media3.extractor.ogg.OggExtractor $r14;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor $r15;
        androidx.media3.extractor.mp4.Mp4Extractor $r16;
        androidx.media3.extractor.mp3.Mp3Extractor $r17;
        boolean $z9, $z10, $z16, $z17, $z19, $z20;
        androidx.media3.extractor.mkv.MatroskaExtractor $r19;
        androidx.media3.extractor.flv.FlvExtractor $r20;
        java.lang.Integer $r23;
        androidx.media3.extractor.flac.FlacExtractor $r24;
        androidx.media3.extractor.amr.AmrExtractor $r25;
        androidx.media3.extractor.ts.AdtsExtractor $r27;
        androidx.media3.extractor.ts.Ac4Extractor $r29;
        androidx.media3.extractor.ts.Ac3Extractor $r30;
        byte $b18, $b19, $b20, $b21, $b22, $b23;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        tableswitch(i0)
        {
            case -1: goto label30;
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label08;
            case 4: goto label13;
            case 5: goto label15;
            case 6: goto label16;
            case 7: goto label17;
            case 8: goto label22;
            case 9: goto label23;
            case 10: goto label24;
            case 11: goto label25;
            case 12: goto label26;
            case 13: goto label30;
            case 14: goto label27;
            case 15: goto label28;
            case 16: goto label29;
            default: goto label30;
        };

     label01:
        $r30 = new androidx.media3.extractor.ts.Ac3Extractor;

        specialinvoke $r30.<androidx.media3.extractor.ts.Ac3Extractor: void <init>()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r30);

        goto label30;

     label02:
        $r29 = new androidx.media3.extractor.ts.Ac4Extractor;

        specialinvoke $r29.<androidx.media3.extractor.ts.Ac4Extractor: void <init>()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label30;

     label03:
        $r27 = new androidx.media3.extractor.ts.AdtsExtractor;

        $i15 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int adtsFlags>;

        $z19 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingEnabled>;

        if $z19 == 0 goto label04;

        $b18 = 1;

        goto label05;

     label04:
        $b18 = 0;

     label05:
        $i16 = $i15 | $b18;

        $z20 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingAlwaysEnabled>;

        if $z20 == 0 goto label06;

        $b19 = 2;

        goto label07;

     label06:
        $b19 = 0;

     label07:
        $i17 = $i16 | $b19;

        specialinvoke $r27.<androidx.media3.extractor.ts.AdtsExtractor: void <init>(int)>($i17);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r27);

        goto label30;

     label08:
        $r25 = new androidx.media3.extractor.amr.AmrExtractor;

        $i12 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int amrFlags>;

        $z16 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingEnabled>;

        if $z16 == 0 goto label09;

        $b20 = 1;

        goto label10;

     label09:
        $b20 = 0;

     label10:
        $i13 = $i12 | $b20;

        $z17 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingAlwaysEnabled>;

        if $z17 == 0 goto label11;

        $b21 = 2;

        goto label12;

     label11:
        $b21 = 0;

     label12:
        $i14 = $i13 | $b21;

        specialinvoke $r25.<androidx.media3.extractor.amr.AmrExtractor: void <init>(int)>($i14);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r25);

        goto label30;

     label13:
        $r22 = <androidx.media3.extractor.DefaultExtractorsFactory: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader FLAC_EXTENSION_LOADER>;

        $r21 = newarray (java.lang.Object)[1];

        $i10 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int flacFlags>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r21[0] = $r23;

        r2 = virtualinvoke $r22.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: androidx.media3.extractor.Extractor getExtractor(java.lang.Object[])>($r21);

        if r2 == null goto label14;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label30;

     label14:
        $r24 = new androidx.media3.extractor.flac.FlacExtractor;

        $i11 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int flacFlags>;

        specialinvoke $r24.<androidx.media3.extractor.flac.FlacExtractor: void <init>(int)>($i11);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r24);

        goto label30;

     label15:
        $r20 = new androidx.media3.extractor.flv.FlvExtractor;

        specialinvoke $r20.<androidx.media3.extractor.flv.FlvExtractor: void <init>()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label30;

     label16:
        $r19 = new androidx.media3.extractor.mkv.MatroskaExtractor;

        $i9 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int matroskaFlags>;

        specialinvoke $r19.<androidx.media3.extractor.mkv.MatroskaExtractor: void <init>(int)>($i9);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label30;

     label17:
        $r17 = new androidx.media3.extractor.mp3.Mp3Extractor;

        $i6 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int mp3Flags>;

        $z9 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingEnabled>;

        if $z9 == 0 goto label18;

        $b22 = 1;

        goto label19;

     label18:
        $b22 = 0;

     label19:
        $i7 = $i6 | $b22;

        $z10 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: boolean constantBitrateSeekingAlwaysEnabled>;

        if $z10 == 0 goto label20;

        $b23 = 2;

        goto label21;

     label20:
        $b23 = 0;

     label21:
        $i8 = $i7 | $b23;

        specialinvoke $r17.<androidx.media3.extractor.mp3.Mp3Extractor: void <init>(int)>($i8);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label30;

     label22:
        $r15 = new androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        $i4 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int fragmentedMp4Flags>;

        specialinvoke $r15.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void <init>(int)>($i4);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = new androidx.media3.extractor.mp4.Mp4Extractor;

        $i5 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int mp4Flags>;

        specialinvoke $r16.<androidx.media3.extractor.mp4.Mp4Extractor: void <init>(int)>($i5);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label30;

     label23:
        $r14 = new androidx.media3.extractor.ogg.OggExtractor;

        specialinvoke $r14.<androidx.media3.extractor.ogg.OggExtractor: void <init>()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label30;

     label24:
        $r13 = new androidx.media3.extractor.ts.PsExtractor;

        specialinvoke $r13.<androidx.media3.extractor.ts.PsExtractor: void <init>()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label30;

     label25:
        $r9 = new androidx.media3.extractor.ts.TsExtractor;

        $i1 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int tsMode>;

        $r10 = new androidx.media3.common.util.TimestampAdjuster;

        specialinvoke $r10.<androidx.media3.common.util.TimestampAdjuster: void <init>(long)>(0L);

        $r11 = new androidx.media3.extractor.ts.DefaultTsPayloadReaderFactory;

        $i2 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int tsFlags>;

        $r12 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: com.google.common.collect.ImmutableList tsSubtitleFormats>;

        specialinvoke $r11.<androidx.media3.extractor.ts.DefaultTsPayloadReaderFactory: void <init>(int,java.util.List)>($i2, $r12);

        $i3 = r0.<androidx.media3.extractor.DefaultExtractorsFactory: int tsTimestampSearchBytes>;

        specialinvoke $r9.<androidx.media3.extractor.ts.TsExtractor: void <init>(int,androidx.media3.common.util.TimestampAdjuster,androidx.media3.extractor.ts.TsPayloadReader$Factory,int)>($i1, $r10, $r11, $i3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label30;

     label26:
        $r8 = new androidx.media3.extractor.wav.WavExtractor;

        specialinvoke $r8.<androidx.media3.extractor.wav.WavExtractor: void <init>()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label30;

     label27:
        $r7 = new androidx.media3.extractor.jpeg.JpegExtractor;

        specialinvoke $r7.<androidx.media3.extractor.jpeg.JpegExtractor: void <init>()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label30;

     label28:
        $r6 = <androidx.media3.extractor.DefaultExtractorsFactory: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader MIDI_EXTENSION_LOADER>;

        $r5 = newarray (java.lang.Object)[0];

        r3 = virtualinvoke $r6.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: androidx.media3.extractor.Extractor getExtractor(java.lang.Object[])>($r5);

        if r3 == null goto label30;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label30;

     label29:
        $r4 = new androidx.media3.extractor.avi.AviExtractor;

        specialinvoke $r4.<androidx.media3.extractor.avi.AviExtractor: void <init>()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label30;

     label30:
        return;
    }

    private static java.lang.reflect.Constructor getMidiExtractorConstructor() throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException
    {
        java.lang.Class $r0, $r1;
        java.lang.Class[] $r2;
        java.lang.reflect.Constructor $r3;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.media3.decoder.midi.MidiExtractor");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Landroidx/media3/extractor/Extractor;");

        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

        return $r3;
    }

    private static java.lang.reflect.Constructor getFlacExtractorConstructor() throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        boolean z0;
        java.lang.Boolean $r0;
        java.lang.Class $r1, $r6, $r7, $r9;
        java.lang.Class[] $r2, $r8;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.reflect.Constructor $r10;

        $r0 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.media3.decoder.flac.FlacLibrary");

        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isAvailable", $r2);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        z0 = virtualinvoke $r0.<java.lang.Boolean: boolean equals(java.lang.Object)>($r5);

        if z0 == 0 goto label1;

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.media3.decoder.flac.FlacExtractor");

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Landroidx/media3/extractor/Extractor;");

        $r8 = newarray (java.lang.Class)[1];

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        $r8[0] = $r9;

        $r10 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r8);

        return $r10;

     label1:
        return null;
    }

    static void <clinit>()
    {
        int[] $r0;
        androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader $r1, $r3;
        androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier $r2, $r4;

        $r0 = newarray (int)[16];

        $r0[0] = 5;

        $r0[1] = 4;

        $r0[2] = 12;

        $r0[3] = 8;

        $r0[4] = 3;

        $r0[5] = 10;

        $r0[6] = 9;

        $r0[7] = 11;

        $r0[8] = 6;

        $r0[9] = 2;

        $r0[10] = 0;

        $r0[11] = 1;

        $r0[12] = 7;

        $r0[13] = 16;

        $r0[14] = 15;

        $r0[15] = 14;

        <androidx.media3.extractor.DefaultExtractorsFactory: int[] DEFAULT_EXTRACTOR_ORDER> = $r0;

        $r1 = new androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader;

        $r2 = dynamicinvoke "getConstructor" <androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.reflect.Constructor __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.extractor.DefaultExtractorsFactory: java.lang.reflect.Constructor getFlacExtractorConstructor()>, methodtype: java.lang.reflect.Constructor __METHODTYPE__());

        specialinvoke $r1.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: void <init>(androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier)>($r2);

        <androidx.media3.extractor.DefaultExtractorsFactory: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader FLAC_EXTENSION_LOADER> = $r1;

        $r3 = new androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader;

        $r4 = dynamicinvoke "getConstructor" <androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.reflect.Constructor __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.extractor.DefaultExtractorsFactory: java.lang.reflect.Constructor getMidiExtractorConstructor()>, methodtype: java.lang.reflect.Constructor __METHODTYPE__());

        specialinvoke $r3.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: void <init>(androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier)>($r4);

        <androidx.media3.extractor.DefaultExtractorsFactory: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader MIDI_EXTENSION_LOADER> = $r3;

        return;
    }

androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier
<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier: java.lang.reflect.Constructor getConstructor()>
androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader
<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier constructorSupplier>
<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: java.util.concurrent.atomic.AtomicBoolean extensionLoaded>
<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: java.lang.reflect.Constructor extractorConstructor>
    public void <init>(androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier)
    {
        androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader r0;
        androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader;

        r1 := @parameter0: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier constructorSupplier> = r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: java.util.concurrent.atomic.AtomicBoolean extensionLoaded> = $r2;

        return;
    }

    public transient androidx.media3.extractor.Extractor getExtractor(java.lang.Object[])
    {
        androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader r0;
        java.lang.Object[] r1;
        java.lang.reflect.Constructor r2;
        java.lang.Throwable r3, $r6;
        java.lang.Object $r4;
        androidx.media3.extractor.Extractor $r5;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader;

        r1 := @parameter0: java.lang.Object[];

        r2 = specialinvoke r0.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: java.lang.reflect.Constructor maybeLoadExtractorConstructor()>();

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r1);

        $r5 = (androidx.media3.extractor.Extractor) $r4;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected error creating extractor", r3);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.reflect.Constructor maybeLoadExtractorConstructor()
    {
        androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader r0;
        java.util.concurrent.atomic.AtomicBoolean r1, $r3, $r4, $r12;
        java.lang.Throwable r2, $r8, $r9, $r11, r14, r15;
        boolean $z0;
        androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier $r5;
        java.lang.reflect.Constructor $r6, $r7, $r13;
        java.lang.RuntimeException $r10;

        r0 := @this: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader;

        $r3 = r0.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: java.util.concurrent.atomic.AtomicBoolean extensionLoaded>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r4 = r0.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: java.util.concurrent.atomic.AtomicBoolean extensionLoaded>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label03;

        $r7 = r0.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: java.lang.reflect.Constructor extractorConstructor>;

        exitmonitor r1;

     label02:
        return $r7;

     label03:
        $r5 = r0.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier constructorSupplier>;

        $r6 = interfaceinvoke $r5.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader$ConstructorSupplier: java.lang.reflect.Constructor getConstructor()>();

     label04:
        exitmonitor r1;

     label05:
        return $r6;

     label06:
        $r11 := @caughtexception;

        r14 = $r11;

        goto label08;

     label07:
        $r9 := @caughtexception;

        r15 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error instantiating extension", r15);

        throw $r10;

     label08:
        $r12 = r0.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: java.util.concurrent.atomic.AtomicBoolean extensionLoaded>;

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r13 = r0.<androidx.media3.extractor.DefaultExtractorsFactory$ExtensionLoader: java.lang.reflect.Constructor extractorConstructor>;

        exitmonitor r1;

     label09:
        return $r13;

     label10:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label11:
        throw r2;

        catch java.lang.ClassNotFoundException from label03 to label04 with label06;
        catch java.lang.Exception from label03 to label04 with label07;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label05 with label10;
        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

