androidx.test.ext.junitgtest.GtestRunner
<androidx.test.ext.junitgtest.GtestRunner: androidx.test.ext.junitgtest.GtestRunner$Companion Companion>
<androidx.test.ext.junitgtest.GtestRunner: java.lang.Class targetClass>
<androidx.test.ext.junitgtest.GtestRunner: org.junit.runner.Description description>
<androidx.test.ext.junitgtest.GtestRunner: boolean onceFlag>
    public void <init>(java.lang.Class)
    {
        androidx.test.ext.junitgtest.GtestRunner r0;
        java.lang.Class r1, r10;
        boolean $z0, $z2;
        androidx.test.ext.junitgtest.GtestRunner$Companion $r2;
        java.lang.'annotation'.Annotation $r3;
        java.lang.String $r4, $r8, $r11, $r17;
        org.junit.runner.Description $r5, $r16;
        java.lang.IllegalStateException $r6, $r7;
        java.lang.Throwable $r9;
        kotlin.Unit $r12;
        androidx.test.ext.junitgtest.TargetLibrary $r14, r15;

        r0 := @this: androidx.test.ext.junitgtest.GtestRunner;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "testClass");

        specialinvoke r0.<org.junit.runner.Runner: void <init>()>();

        r10 = class "Landroidx/test/ext/junitgtest/GtestRunner;";

        entermonitor r10;

     label1:
        $z0 = <androidx.test.ext.junitgtest.GtestRunner: boolean onceFlag>;

        if $z0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 != 0 goto label4;

        $r11 = "Error multiple GtestRunners defined";

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $r2 = <androidx.test.ext.junitgtest.GtestRunner: androidx.test.ext.junitgtest.GtestRunner$Companion Companion>;

        <androidx.test.ext.junitgtest.GtestRunner: boolean onceFlag> = 1;

        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label5:
        exitmonitor r10;

        goto label8;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r10;

        throw $r9;

     label8:
        r0.<androidx.test.ext.junitgtest.GtestRunner: java.lang.Class targetClass> = r1;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroidx/test/ext/junitgtest/TargetLibrary;");

        $r14 = (androidx.test.ext.junitgtest.TargetLibrary) $r3;

        if $r14 != null goto label9;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing required @TargetLibrary annotation");

        throw $r6;

     label9:
        r15 = $r14;

        $r4 = interfaceinvoke r15.<androidx.test.ext.junitgtest.TargetLibrary: java.lang.String libraryName()>();

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>($r4);

        $r16 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createSuiteDescription(java.lang.Class)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "createSuiteDescription(testClass)");

        r0.<androidx.test.ext.junitgtest.GtestRunner: org.junit.runner.Description description> = $r16;

        $r17 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "testClass.name");

        $r5 = r0.<androidx.test.ext.junitgtest.GtestRunner: org.junit.runner.Description description>;

        specialinvoke r0.<androidx.test.ext.junitgtest.GtestRunner: void initialize(java.lang.String,org.junit.runner.Description)>($r17, $r5);

        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public org.junit.runner.Description getDescription()
    {
        androidx.test.ext.junitgtest.GtestRunner r0;
        org.junit.runner.Description $r1;

        r0 := @this: androidx.test.ext.junitgtest.GtestRunner;

        $r1 = r0.<androidx.test.ext.junitgtest.GtestRunner: org.junit.runner.Description description>;

        return $r1;
    }

    public void filter(org.junit.runner.manipulation.Filter) throws org.junit.runner.manipulation.NoTestsRemainException
    {
        androidx.test.ext.junitgtest.GtestRunner r0;
        org.junit.runner.manipulation.Filter r1;
        java.util.List r2;
        org.junit.runner.Description r3, $r4, $r6, $r10, r12;
        java.lang.Class $r5;
        java.util.ArrayList $r7, r11;
        boolean $z0, $z1, $z2;
        org.junit.runner.manipulation.NoTestsRemainException $r8;
        java.lang.Object $r9;
        java.util.Iterator r13;

        r0 := @this: androidx.test.ext.junitgtest.GtestRunner;

        r1 := @parameter0: org.junit.runner.manipulation.Filter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "filter");

        $r4 = r0.<androidx.test.ext.junitgtest.GtestRunner: org.junit.runner.Description description>;

        r11 = virtualinvoke $r4.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r11, "description.children");

        r2 = (java.util.List) r11;

        $r5 = r0.<androidx.test.ext.junitgtest.GtestRunner: java.lang.Class targetClass>;

        r12 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createSuiteDescription(java.lang.Class)>($r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r12, "createSuiteDescription(targetClass)");

        r0.<androidx.test.ext.junitgtest.GtestRunner: org.junit.runner.Description description> = r12;

        r13 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r9 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.junit.runner.Description) $r9;

        $z1 = virtualinvoke r1.<org.junit.runner.manipulation.Filter: boolean shouldRun(org.junit.runner.Description)>(r3);

        if $z1 == 0 goto label1;

        $r10 = r0.<androidx.test.ext.junitgtest.GtestRunner: org.junit.runner.Description description>;

        virtualinvoke $r10.<org.junit.runner.Description: void addChild(org.junit.runner.Description)>(r3);

        goto label1;

     label2:
        $r6 = r0.<androidx.test.ext.junitgtest.GtestRunner: org.junit.runner.Description description>;

        $r7 = virtualinvoke $r6.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        $z0 = virtualinvoke $r7.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r8 = new org.junit.runner.manipulation.NoTestsRemainException;

        specialinvoke $r8.<org.junit.runner.manipulation.NoTestsRemainException: void <init>()>();

        throw $r8;

     label3:
        return;
    }

    public void run(org.junit.runner.notification.RunNotifier)
    {
        androidx.test.ext.junitgtest.GtestRunner r0;
        org.junit.runner.notification.RunNotifier r1;
        org.junit.runner.Description r2, $r4;
        java.lang.String r3, r9;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.Class $r6;
        java.lang.Object $r7;
        java.util.Iterator r8;

        r0 := @this: androidx.test.ext.junitgtest.GtestRunner;

        r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "notifier");

        $r4 = r0.<androidx.test.ext.junitgtest.GtestRunner: org.junit.runner.Description description>;

        $r5 = virtualinvoke $r4.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        r8 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.junit.runner.Description) $r7;

        r3 = virtualinvoke r2.<org.junit.runner.Description: java.lang.String getMethodName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "description.methodName");

        specialinvoke r0.<androidx.test.ext.junitgtest.GtestRunner: void addTest(java.lang.String)>(r3);

        goto label1;

     label2:
        $r6 = r0.<androidx.test.ext.junitgtest.GtestRunner: java.lang.Class targetClass>;

        r9 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r9, "targetClass.name");

        specialinvoke r0.<androidx.test.ext.junitgtest.GtestRunner: boolean run(java.lang.String,org.junit.runner.notification.RunNotifier)>(r9, r1);

        return;
    }

<androidx.test.ext.junitgtest.GtestRunner: void initialize(java.lang.String,org.junit.runner.Description)>
<androidx.test.ext.junitgtest.GtestRunner: void addTest(java.lang.String)>
<androidx.test.ext.junitgtest.GtestRunner: boolean run(java.lang.String,org.junit.runner.notification.RunNotifier)>
    static void <clinit>()
    {
        androidx.test.ext.junitgtest.GtestRunner$Companion $r0;

        $r0 = new androidx.test.ext.junitgtest.GtestRunner$Companion;

        specialinvoke $r0.<androidx.test.ext.junitgtest.GtestRunner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.test.ext.junitgtest.GtestRunner: androidx.test.ext.junitgtest.GtestRunner$Companion Companion> = $r0;

        return;
    }

androidx.test.ext.junitgtest.GtestRunner$Companion
    private void <init>()
    {
        androidx.test.ext.junitgtest.GtestRunner$Companion r0;

        r0 := @this: androidx.test.ext.junitgtest.GtestRunner$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.test.ext.junitgtest.GtestRunner$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.test.ext.junitgtest.GtestRunner$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.test.ext.junitgtest.GtestRunner$Companion: void <init>()>();

        return;
    }

