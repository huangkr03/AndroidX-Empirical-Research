androidx.room.AmbiguousColumnResolver
<androidx.room.AmbiguousColumnResolver: androidx.room.AmbiguousColumnResolver INSTANCE>
    private void <init>()
    {
        androidx.room.AmbiguousColumnResolver r0;

        r0 := @this: androidx.room.AmbiguousColumnResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final int[][] resolve(java.lang.String[], java.lang.String[][])
    {
        java.lang.String[] r0, $r57, $r58, $r60, r73, r85, r86;
        java.lang.String[][] r1;
        java.util.Collection r3, r6, $r29, $r33, $r34, $r44, $r56, r99, r103, $r104;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11, i12, i13, $i14, i15, i16, i17, $i18, $i19, i20, i21, i22, i23, i24, $i25, $i26, i27, $i28, $i29, i30, i32;
        java.lang.String r4, r5, $r32, $r50, $r51, $r61, $r62, r63, $r65, $r67, $r68, r78, $r91, $r96;
        java.util.Iterator r7, $r93, r100;
        java.lang.Object r8, $r20, $r38, r72, r84, $r94, $r101;
        androidx.room.AmbiguousColumnResolver$ResultColumn r9, $r55;
        java.util.List r10, $r22, $r24, $r28, $r39, $r54, r75, r79, r82, r87, r90, r95;
        java.lang.Object[] $r11, $r12, $r26, $r71, $r83;
        java.util.ArrayList $r13, $r23, $r40, $r53, r81;
        boolean $z4, $z5, $z7, $z8, $z9, $z10, $z11, $z13, $z16, z25, z27, $z31, $z34, $z35, z36, $z37, z40, z41;
        kotlin.jvm.internal.Ref$ObjectRef $r14;
        androidx.room.AmbiguousColumnResolver$Solution$Companion $r15;
        androidx.room.AmbiguousColumnResolver$Solution $r16, $r21;
        androidx.room.AmbiguousColumnResolver$resolve$4 $r17;
        androidx.room.AmbiguousColumnResolver $r18, $r36, $r42;
        kotlin.jvm.functions.Function1 $r19, $r43;
        int[][] $r25, $r27;
        int[] $r30;
        java.lang.IllegalStateException $r31, $r49;
        androidx.room.AmbiguousColumnResolver$resolve$1$1 $r35;
        kotlin.jvm.functions.Function3 $r37;
        androidx.room.AmbiguousColumnResolver$resolve$1$2 $r41;
        java.lang.StringBuilder $r45, $r46, $r47, $r48;
        java.lang.Integer $r52;
        java.util.Locale $r59, $r66;
        char $c6, $c9;
        java.util.Set r69, r70, r74;
        java.lang.Iterable $r89, $r92, $r98;
        androidx.room.AmbiguousColumnResolver$Match r102;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[][];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "resultColumns");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "mappings");

        i12 = 0;

        i13 = lengthof r0;

     label01:
        if i12 >= i13 goto label04;

        r63 = r0[i12];

        $i14 = i12;

        $c6 = virtualinvoke r63.<java.lang.String: char charAt(int)>(0);

        if $c6 != 96 goto label02;

        $i7 = virtualinvoke r63.<java.lang.String: int length()>();

        $i8 = $i7 - 1;

        $c9 = virtualinvoke r63.<java.lang.String: char charAt(int)>($i8);

        if $c9 != 96 goto label02;

        $i10 = virtualinvoke r63.<java.lang.String: int length()>();

        $i11 = $i10 - 1;

        $r62 = virtualinvoke r63.<java.lang.String: java.lang.String substring(int,int)>(1, $i11);

        $r65 = $r62;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r62, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        goto label03;

     label02:
        $r65 = r63;

     label03:
        $r66 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r66, "US");

        $r67 = virtualinvoke $r65.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r66);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r67, "this as java.lang.String).toLowerCase(locale)");

        r0[$i14] = $r67;

        i12 = i12 + 1;

        goto label01;

     label04:
        i15 = 0;

        $r11 = (java.lang.Object[]) r1;

        i16 = lengthof $r11;

     label05:
        if i15 >= i16 goto label08;

        i17 = 0;

        $r57 = r1[i15];

        $i18 = lengthof $r57;

     label06:
        if i17 >= $i18 goto label07;

        $r60 = r1[i15];

        $r58 = r1[i15];

        $r68 = $r58[i17];

        $r59 = <java.util.Locale: java.util.Locale US>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r59, "US");

        $r61 = virtualinvoke $r68.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r59);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r61, "this as java.lang.String).toLowerCase(locale)");

        $r60[i17] = $r61;

        i17 = i17 + 1;

        goto label06;

     label07:
        i15 = i15 + 1;

        goto label05;

     label08:
        r69 = staticinvoke <kotlin.collections.SetsKt: java.util.Set createSetBuilder()>();

        r70 = r69;

        $r71 = (java.lang.Object[]) r1;

        $i19 = 0;

        i20 = lengthof $r71;

     label09:
        if $i19 >= i20 goto label10;

        r72 = $r71[$i19];

        r73 = (java.lang.String[]) r72;

        $r56 = (java.util.Collection) r70;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Object[])>($r56, r73);

        $i19 = $i19 + 1;

        goto label09;

     label10:
        r74 = staticinvoke <kotlin.collections.SetsKt: java.util.Set build(java.util.Set)>(r69);

        r75 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        i21 = 0;

        i22 = 0;

        i23 = lengthof r0;

     label11:
        if i22 >= i23 goto label13;

        $i5 = i21;

        i21 = i21 + 1;

        r78 = r0[i22];

        i24 = $i5;

        $z16 = interfaceinvoke r74.<java.util.Set: boolean contains(java.lang.Object)>(r78);

        if $z16 == 0 goto label12;

        $r55 = new androidx.room.AmbiguousColumnResolver$ResultColumn;

        specialinvoke $r55.<androidx.room.AmbiguousColumnResolver$ResultColumn: void <init>(java.lang.String,int)>(r78, i24);

        interfaceinvoke r75.<java.util.List: boolean add(java.lang.Object)>($r55);

     label12:
        i22 = i22 + 1;

        goto label11;

     label13:
        r79 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>(r75);

        $r12 = (java.lang.Object[]) r1;

        $i25 = lengthof $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i25);

        $i26 = 0;

     label14:
        if $i26 >= $i25 goto label15;

        i27 = $i26;

        r81 = $r13;

        z25 = 0;

        $r53 = new java.util.ArrayList;

        specialinvoke $r53.<java.util.ArrayList: void <init>()>();

        $r54 = (java.util.List) $r53;

        virtualinvoke r81.<java.util.ArrayList: boolean add(java.lang.Object)>($r54);

        $i26 = $i26 + 1;

        goto label14;

     label15:
        r82 = (java.util.List) $r13;

        $r83 = (java.lang.Object[]) r1;

        $i28 = 0;

        $i29 = 0;

        i30 = lengthof $r83;

     label16:
        if $i29 >= i30 goto label26;

        r84 = $r83[$i29];

        $i2 = $i28;

        $i28 = $i28 + 1;

        r85 = (java.lang.String[]) r84;

        z27 = 0;

        $r36 = <androidx.room.AmbiguousColumnResolver: androidx.room.AmbiguousColumnResolver INSTANCE>;

        $r35 = new androidx.room.AmbiguousColumnResolver$resolve$1$1;

        specialinvoke $r35.<androidx.room.AmbiguousColumnResolver$resolve$1$1: void <init>(java.lang.String[],java.util.List,int)>(r85, r82, $i2);

        $r37 = (kotlin.jvm.functions.Function3) $r35;

        specialinvoke $r36.<androidx.room.AmbiguousColumnResolver: void rabinKarpSearch(java.util.List,java.lang.String[],kotlin.jvm.functions.Function3)>(r79, r85, $r37);

        $r38 = interfaceinvoke r82.<java.util.List: java.lang.Object get(int)>($i2);

        $r39 = (java.util.List) $r38;

        $z9 = interfaceinvoke $r39.<java.util.List: boolean isEmpty()>();

        if $z9 == 0 goto label25;

        r86 = r85;

        $r40 = new java.util.ArrayList;

        $i3 = lengthof r86;

        specialinvoke $r40.<java.util.ArrayList: void <init>(int)>($i3);

        r3 = (java.util.Collection) $r40;

        i32 = 0;

        i0 = lengthof r86;

     label17:
        if i32 >= i0 goto label24;

        r4 = r86[i32];

        r5 = r4;

        r6 = r3;

        r87 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        $r89 = (java.lang.Iterable) r79;

        r7 = interfaceinvoke $r89.<java.lang.Iterable: java.util.Iterator iterator()>();

     label18:
        $z10 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label20;

        r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (androidx.room.AmbiguousColumnResolver$ResultColumn) r8;

        $r51 = virtualinvoke r9.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String getName()>();

        $z13 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r5, $r51);

        if $z13 == 0 goto label19;

        $i4 = virtualinvoke r9.<androidx.room.AmbiguousColumnResolver$ResultColumn: int getIndex()>();

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke r87.<java.util.List: boolean add(java.lang.Object)>($r52);

     label19:
        goto label18;

     label20:
        r90 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>(r87);

        $r44 = (java.util.Collection) r90;

        $z11 = interfaceinvoke $r44.<java.util.Collection: boolean isEmpty()>();

        if $z11 != 0 goto label21;

        $z31 = 1;

        goto label22;

     label21:
        $z31 = 0;

     label22:
        if $z31 != 0 goto label23;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Column ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in result");

        $r91 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        $r49 = new java.lang.IllegalStateException;

        $r50 = virtualinvoke $r91.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r50);

        throw $r49;

     label23:
        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>(r90);

        i32 = i32 + 1;

        goto label17;

     label24:
        r10 = (java.util.List) r3;

        $r42 = <androidx.room.AmbiguousColumnResolver: androidx.room.AmbiguousColumnResolver INSTANCE>;

        $r41 = new androidx.room.AmbiguousColumnResolver$resolve$1$2;

        specialinvoke $r41.<androidx.room.AmbiguousColumnResolver$resolve$1$2: void <init>(java.util.List,int)>(r82, $i2);

        $r43 = (kotlin.jvm.functions.Function1) $r41;

        staticinvoke <androidx.room.AmbiguousColumnResolver: void dfs$default(androidx.room.AmbiguousColumnResolver,java.util.List,java.util.List,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r42, r10, null, 0, $r43, 6, null);

     label25:
        $i29 = $i29 + 1;

        goto label16;

     label26:
        $r92 = (java.lang.Iterable) r82;

        $z4 = $r92 instanceof java.util.Collection;

        if $z4 == 0 goto label27;

        $r34 = (java.util.Collection) $r92;

        $z8 = interfaceinvoke $r34.<java.util.Collection: boolean isEmpty()>();

        if $z8 == 0 goto label27;

        $z34 = 1;

        goto label32;

     label27:
        $r93 = interfaceinvoke $r92.<java.lang.Iterable: java.util.Iterator iterator()>();

     label28:
        $z35 = interfaceinvoke $r93.<java.util.Iterator: boolean hasNext()>();

        if $z35 == 0 goto label31;

        $r94 = interfaceinvoke $r93.<java.util.Iterator: java.lang.Object next()>();

        r95 = (java.util.List) $r94;

        z36 = 0;

        $r33 = (java.util.Collection) r95;

        $z7 = interfaceinvoke $r33.<java.util.Collection: boolean isEmpty()>();

        if $z7 != 0 goto label29;

        $z37 = 1;

        goto label30;

     label29:
        $z37 = 0;

     label30:
        if $z37 != 0 goto label28;

        $z34 = 0;

        goto label32;

     label31:
        $z34 = 1;

     label32:
        if $z34 != 0 goto label33;

        $r96 = "Failed to find matches for all mappings";

        $r31 = new java.lang.IllegalStateException;

        $r32 = virtualinvoke $r96.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r32);

        throw $r31;

     label33:
        $r14 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r14.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        $r15 = <androidx.room.AmbiguousColumnResolver$Solution: androidx.room.AmbiguousColumnResolver$Solution$Companion Companion>;

        $r16 = virtualinvoke $r15.<androidx.room.AmbiguousColumnResolver$Solution$Companion: androidx.room.AmbiguousColumnResolver$Solution getNO_SOLUTION()>();

        $r14.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r16;

        $r18 = <androidx.room.AmbiguousColumnResolver: androidx.room.AmbiguousColumnResolver INSTANCE>;

        $r17 = new androidx.room.AmbiguousColumnResolver$resolve$4;

        specialinvoke $r17.<androidx.room.AmbiguousColumnResolver$resolve$4: void <init>(kotlin.jvm.internal.Ref$ObjectRef)>($r14);

        $r19 = (kotlin.jvm.functions.Function1) $r17;

        staticinvoke <androidx.room.AmbiguousColumnResolver: void dfs$default(androidx.room.AmbiguousColumnResolver,java.util.List,java.util.List,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r18, r82, null, 0, $r19, 6, null);

        $r20 = $r14.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r21 = (androidx.room.AmbiguousColumnResolver$Solution) $r20;

        $r22 = virtualinvoke $r21.<androidx.room.AmbiguousColumnResolver$Solution: java.util.List getMatches()>();

        $r98 = (java.lang.Iterable) $r22;

        $r23 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r98, 10);

        specialinvoke $r23.<java.util.ArrayList: void <init>(int)>($i1);

        r99 = (java.util.Collection) $r23;

        z40 = 0;

        r100 = interfaceinvoke $r98.<java.lang.Iterable: java.util.Iterator iterator()>();

     label34:
        $z5 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label35;

        $r101 = interfaceinvoke r100.<java.util.Iterator: java.lang.Object next()>();

        r102 = (androidx.room.AmbiguousColumnResolver$Match) $r101;

        r103 = r99;

        z41 = 0;

        $r28 = virtualinvoke r102.<androidx.room.AmbiguousColumnResolver$Match: java.util.List getResultIndices()>();

        $r29 = (java.util.Collection) $r28;

        $r30 = staticinvoke <kotlin.collections.CollectionsKt: int[] toIntArray(java.util.Collection)>($r29);

        interfaceinvoke r103.<java.util.Collection: boolean add(java.lang.Object)>($r30);

        goto label34;

     label35:
        $r24 = (java.util.List) r99;

        $r104 = (java.util.Collection) $r24;

        $r25 = newarray (int[])[0];

        $r26 = interfaceinvoke $r104.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r25);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r26, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        $r27 = (int[][]) $r26;

        return $r27;
    }

    private final void rabinKarpSearch(java.util.List, java.lang.String[], kotlin.jvm.functions.Function3)
    {
        androidx.room.AmbiguousColumnResolver r0;
        java.util.List r1, $r5, $r14;
        java.lang.String[] r2, r17;
        kotlin.jvm.functions.Function3 r3;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        androidx.room.AmbiguousColumnResolver$ResultColumn r4, $r7, $r10;
        boolean $z1;
        java.lang.Object $r6, $r9, $r22;
        java.lang.String $r8, $r11, $r16, r18, r19;
        java.lang.Integer $r12, $r13;
        java.lang.Iterable r20;
        java.util.Iterator r21;

        r0 := @this: androidx.room.AmbiguousColumnResolver;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: kotlin.jvm.functions.Function3;

        r17 = r2;

        i6 = 0;

        i7 = 0;

        i8 = lengthof r17;

     label1:
        if i7 >= i8 goto label2;

        r18 = r17[i7];

        r19 = r18;

        i9 = i6;

        i10 = virtualinvoke r19.<java.lang.String: int hashCode()>();

        i6 = i9 + i10;

        i7 = i7 + 1;

        goto label1;

     label2:
        i0 = i6;

        i11 = 0;

        i12 = lengthof r2;

        $r5 = interfaceinvoke r1.<java.util.List: java.util.List subList(int,int)>(i11, i12);

        r20 = (java.lang.Iterable) $r5;

        i13 = 0;

        r21 = interfaceinvoke r20.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r22 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.room.AmbiguousColumnResolver$ResultColumn) $r22;

        i14 = i13;

        $r16 = virtualinvoke r4.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String getName()>();

        i15 = virtualinvoke $r16.<java.lang.String: int hashCode()>();

        i13 = i14 + i15;

        goto label3;

     label4:
        i16 = i13;

     label5:
        if i0 != i16 goto label6;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $r14 = interfaceinvoke r1.<java.util.List: java.util.List subList(int,int)>(i11, i12);

        interfaceinvoke r3.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r12, $r13, $r14);

     label6:
        i11 = i11 + 1;

        i12 = i12 + 1;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i12 <= $i1 goto label7;

        goto label8;

     label7:
        $i2 = i11 - 1;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r7 = (androidx.room.AmbiguousColumnResolver$ResultColumn) $r6;

        $r8 = virtualinvoke $r7.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String getName()>();

        $i3 = virtualinvoke $r8.<java.lang.String: int hashCode()>();

        i17 = i16 - $i3;

        $i4 = i12 - 1;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i4);

        $r10 = (androidx.room.AmbiguousColumnResolver$ResultColumn) $r9;

        $r11 = virtualinvoke $r10.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String getName()>();

        $i5 = virtualinvoke $r11.<java.lang.String: int hashCode()>();

        i16 = i17 + $i5;

        goto label5;

     label8:
        return;
    }

    private final void dfs(java.util.List, java.util.List, int, kotlin.jvm.functions.Function1)
    {
        androidx.room.AmbiguousColumnResolver r0, $r9;
        java.util.List r1, r2, $r12;
        int i0, $i1, $i2;
        kotlin.jvm.functions.Function1 r3;
        java.lang.Iterable $r4, $r11;
        java.util.Iterator r5;
        java.lang.Object r6, r7, $r8;
        boolean $z2;

        r0 := @this: androidx.room.AmbiguousColumnResolver;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        r3 := @parameter3: kotlin.jvm.functions.Function1;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 != $i1 goto label1;

        $r11 = (java.lang.Iterable) r2;

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r11);

        interfaceinvoke r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r12);

        return;

     label1:
        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.lang.Iterable) $r8;

        r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = r6;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7);

        $r9 = <androidx.room.AmbiguousColumnResolver: androidx.room.AmbiguousColumnResolver INSTANCE>;

        $i2 = i0 + 1;

        specialinvoke $r9.<androidx.room.AmbiguousColumnResolver: void dfs(java.util.List,java.util.List,int,kotlin.jvm.functions.Function1)>(r1, r2, $i2, r3);

        staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object removeLast(java.util.List)>(r2);

        goto label2;

     label3:
        return;
    }

    static void dfs$default(androidx.room.AmbiguousColumnResolver, java.util.List, java.util.List, int, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.room.AmbiguousColumnResolver r0;
        java.util.List r1, r5;
        kotlin.jvm.functions.Function1 r2;
        int i0, $i1, $i2, i3;
        java.lang.Object r3;
        java.util.ArrayList $r4;

        r0 := @parameter0: androidx.room.AmbiguousColumnResolver;

        r1 := @parameter1: java.util.List;

        r5 := @parameter2: java.util.List;

        i3 := @parameter3: int;

        r2 := @parameter4: kotlin.jvm.functions.Function1;

        i0 := @parameter5: int;

        r3 := @parameter6: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r5 = (java.util.List) $r4;

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        i3 = 0;

     label2:
        specialinvoke r0.<androidx.room.AmbiguousColumnResolver: void dfs(java.util.List,java.util.List,int,kotlin.jvm.functions.Function1)>(r1, r5, i3, r2);

        return;
    }

    static void <clinit>()
    {
        androidx.room.AmbiguousColumnResolver $r0;

        $r0 = new androidx.room.AmbiguousColumnResolver;

        specialinvoke $r0.<androidx.room.AmbiguousColumnResolver: void <init>()>();

        <androidx.room.AmbiguousColumnResolver: androidx.room.AmbiguousColumnResolver INSTANCE> = $r0;

        return;
    }

androidx.room.AmbiguousColumnResolver$Match
<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange resultRange>
<androidx.room.AmbiguousColumnResolver$Match: java.util.List resultIndices>
    public void <init>(kotlin.ranges.IntRange, java.util.List)
    {
        androidx.room.AmbiguousColumnResolver$Match r0;
        kotlin.ranges.IntRange r1;
        java.util.List r2;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Match;

        r1 := @parameter0: kotlin.ranges.IntRange;

        r2 := @parameter1: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "resultRange");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "resultIndices");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange resultRange> = r1;

        r0.<androidx.room.AmbiguousColumnResolver$Match: java.util.List resultIndices> = r2;

        return;
    }

    public final kotlin.ranges.IntRange getResultRange()
    {
        androidx.room.AmbiguousColumnResolver$Match r0;
        kotlin.ranges.IntRange $r1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Match;

        $r1 = r0.<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange resultRange>;

        return $r1;
    }

    public final java.util.List getResultIndices()
    {
        androidx.room.AmbiguousColumnResolver$Match r0;
        java.util.List $r1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Match;

        $r1 = r0.<androidx.room.AmbiguousColumnResolver$Match: java.util.List resultIndices>;

        return $r1;
    }

androidx.room.AmbiguousColumnResolver$resolve$1$1
<androidx.room.AmbiguousColumnResolver$resolve$1$1: java.lang.String[] $mapping>
<androidx.room.AmbiguousColumnResolver$resolve$1$1: java.util.List $mappingMatches>
<androidx.room.AmbiguousColumnResolver$resolve$1$1: int $mappingIndex>
    void <init>(java.lang.String[], java.util.List, int)
    {
        androidx.room.AmbiguousColumnResolver$resolve$1$1 r0;
        java.lang.String[] $r1;
        java.util.List $r2;
        int $i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$resolve$1$1;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: java.util.List;

        $i0 := @parameter2: int;

        r0.<androidx.room.AmbiguousColumnResolver$resolve$1$1: java.lang.String[] $mapping> = $r1;

        r0.<androidx.room.AmbiguousColumnResolver$resolve$1$1: java.util.List $mappingMatches> = $r2;

        r0.<androidx.room.AmbiguousColumnResolver$resolve$1$1: int $mappingIndex> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(int, int, java.util.List)
    {
        androidx.room.AmbiguousColumnResolver$resolve$1$1 r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7;
        java.util.List r1, r2, $r16, $r20;
        java.lang.String[] $r3;
        java.util.Collection r5, r14;
        java.lang.String r6, r7, r12;
        java.lang.Iterable $r8;
        java.util.Iterator r9;
        java.lang.Object r10, $r17, $r23;
        androidx.room.AmbiguousColumnResolver$ResultColumn r11, r13;
        java.util.ArrayList $r15;
        androidx.room.AmbiguousColumnResolver$Match $r18;
        kotlin.ranges.IntRange $r19;
        boolean $z6, $z8;
        java.lang.Integer $r21;

        r0 := @this: androidx.room.AmbiguousColumnResolver$resolve$1$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "resultColumnsSublist");

        $r3 = r0.<androidx.room.AmbiguousColumnResolver$resolve$1$1: java.lang.String[] $mapping>;

        $r15 = new java.util.ArrayList;

        $i3 = lengthof $r3;

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i3);

        r5 = (java.util.Collection) $r15;

        i7 = 0;

        i2 = lengthof $r3;

     label1:
        if i7 >= i2 goto label7;

        r6 = $r3[i7];

        r7 = r6;

        r14 = r5;

        $r8 = (java.lang.Iterable) r1;

        r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z6 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label3;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (androidx.room.AmbiguousColumnResolver$ResultColumn) r10;

        r12 = virtualinvoke r11.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String component1()>();

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r7, r12);

        if $z8 == 0 goto label2;

        $r23 = r10;

        goto label4;

     label3:
        $r23 = null;

     label4:
        r13 = (androidx.room.AmbiguousColumnResolver$ResultColumn) $r23;

        if r13 == null goto label5;

        $i6 = virtualinvoke r13.<androidx.room.AmbiguousColumnResolver$ResultColumn: int getIndex()>();

        goto label6;

     label5:
        return;

     label6:
        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        interfaceinvoke r14.<java.util.Collection: boolean add(java.lang.Object)>($r21);

        i7 = i7 + 1;

        goto label1;

     label7:
        r2 = (java.util.List) r5;

        $r16 = r0.<androidx.room.AmbiguousColumnResolver$resolve$1$1: java.util.List $mappingMatches>;

        $i4 = r0.<androidx.room.AmbiguousColumnResolver$resolve$1$1: int $mappingIndex>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>($i4);

        $r20 = (java.util.List) $r17;

        $r18 = new androidx.room.AmbiguousColumnResolver$Match;

        $r19 = new kotlin.ranges.IntRange;

        $i5 = i1 - 1;

        specialinvoke $r19.<kotlin.ranges.IntRange: void <init>(int,int)>(i0, $i5);

        specialinvoke $r18.<androidx.room.AmbiguousColumnResolver$Match: void <init>(kotlin.ranges.IntRange,java.util.List)>($r19, r2);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r18);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.room.AmbiguousColumnResolver$resolve$1$1 r0;
        java.lang.Object r1, r2, r3;
        java.lang.Number $r4, $r5;
        int $i0, $i1;
        java.util.List $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.room.AmbiguousColumnResolver$resolve$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = (java.lang.Number) r1;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        $r5 = (java.lang.Number) r2;

        $i1 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        $r6 = (java.util.List) r3;

        virtualinvoke r0.<androidx.room.AmbiguousColumnResolver$resolve$1$1: void invoke(int,int,java.util.List)>($i0, $i1, $r6);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.room.AmbiguousColumnResolver$resolve$1$2
<androidx.room.AmbiguousColumnResolver$resolve$1$2: java.util.List $mappingMatches>
<androidx.room.AmbiguousColumnResolver$resolve$1$2: int $mappingIndex>
    void <init>(java.util.List, int)
    {
        androidx.room.AmbiguousColumnResolver$resolve$1$2 r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$resolve$1$2;

        $r1 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        r0.<androidx.room.AmbiguousColumnResolver$resolve$1$2: java.util.List $mappingMatches> = $r1;

        r0.<androidx.room.AmbiguousColumnResolver$resolve$1$2: int $mappingIndex> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.util.List)
    {
        androidx.room.AmbiguousColumnResolver$resolve$1$2 r0;
        java.util.List r1, $r9, $r13;
        int i0, i1, $i2, i3, i4, $i5, $i6, $i7;
        java.util.Iterator r2, r20;
        java.lang.Iterable $r3, $r6;
        boolean $z1, $z2, $z5, $z8;
        java.lang.Object $r4, $r7, $r10, $r14, $r17;
        java.lang.Number $r5, $r8, $r15, $r18;
        androidx.room.AmbiguousColumnResolver$Match $r11;
        kotlin.ranges.IntRange $r12;
        java.util.NoSuchElementException $r16, $r19;

        r0 := @this: androidx.room.AmbiguousColumnResolver$resolve$1$2;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "indices");

        $r3 = (java.lang.Iterable) r1;

        r2 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r19 = new java.util.NoSuchElementException;

        specialinvoke $r19.<java.util.NoSuchElementException: void <init>()>();

        throw $r19;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Number) $r4;

        i3 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        i4 = i3;

     label2:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label3;

        $r17 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (java.lang.Number) $r17;

        $i5 = virtualinvoke $r18.<java.lang.Number: int intValue()>();

        if i4 <= $i5 goto label2;

        i4 = $i5;

        goto label2;

     label3:
        i0 = i4;

        $r6 = (java.lang.Iterable) r1;

        r20 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label4;

        $r16 = new java.util.NoSuchElementException;

        specialinvoke $r16.<java.util.NoSuchElementException: void <init>()>();

        throw $r16;

     label4:
        $r7 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Number) $r7;

        $i6 = virtualinvoke $r8.<java.lang.Number: int intValue()>();

     label5:
        $z8 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label6;

        $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (java.lang.Number) $r14;

        $i7 = virtualinvoke $r15.<java.lang.Number: int intValue()>();

        if $i6 >= $i7 goto label5;

        $i6 = $i7;

        goto label5;

     label6:
        i1 = $i6;

        $r9 = r0.<androidx.room.AmbiguousColumnResolver$resolve$1$2: java.util.List $mappingMatches>;

        $i2 = r0.<androidx.room.AmbiguousColumnResolver$resolve$1$2: int $mappingIndex>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i2);

        $r13 = (java.util.List) $r10;

        $r11 = new androidx.room.AmbiguousColumnResolver$Match;

        $r12 = new kotlin.ranges.IntRange;

        specialinvoke $r12.<kotlin.ranges.IntRange: void <init>(int,int)>(i0, i1);

        specialinvoke $r11.<androidx.room.AmbiguousColumnResolver$Match: void <init>(kotlin.ranges.IntRange,java.util.List)>($r12, r1);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r11);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AmbiguousColumnResolver$resolve$1$2 r0;
        java.lang.Object r1;
        java.util.List $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.room.AmbiguousColumnResolver$resolve$1$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.List) r1;

        virtualinvoke r0.<androidx.room.AmbiguousColumnResolver$resolve$1$2: void invoke(java.util.List)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.room.AmbiguousColumnResolver$resolve$4
<androidx.room.AmbiguousColumnResolver$resolve$4: kotlin.jvm.internal.Ref$ObjectRef $bestSolution>
    void <init>(kotlin.jvm.internal.Ref$ObjectRef)
    {
        androidx.room.AmbiguousColumnResolver$resolve$4 r0;
        kotlin.jvm.internal.Ref$ObjectRef $r1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$resolve$4;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$ObjectRef;

        r0.<androidx.room.AmbiguousColumnResolver$resolve$4: kotlin.jvm.internal.Ref$ObjectRef $bestSolution> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.util.List)
    {
        androidx.room.AmbiguousColumnResolver$resolve$4 r0;
        java.util.List r1;
        androidx.room.AmbiguousColumnResolver$Solution r2, $r6;
        androidx.room.AmbiguousColumnResolver$Solution$Companion $r3;
        kotlin.jvm.internal.Ref$ObjectRef $r4, $r7;
        java.lang.Object $r5;
        int $i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$resolve$4;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r3 = <androidx.room.AmbiguousColumnResolver$Solution: androidx.room.AmbiguousColumnResolver$Solution$Companion Companion>;

        r2 = virtualinvoke $r3.<androidx.room.AmbiguousColumnResolver$Solution$Companion: androidx.room.AmbiguousColumnResolver$Solution build(java.util.List)>(r1);

        $r4 = r0.<androidx.room.AmbiguousColumnResolver$resolve$4: kotlin.jvm.internal.Ref$ObjectRef $bestSolution>;

        $r5 = $r4.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r6 = (androidx.room.AmbiguousColumnResolver$Solution) $r5;

        $i0 = virtualinvoke r2.<androidx.room.AmbiguousColumnResolver$Solution: int compareTo(androidx.room.AmbiguousColumnResolver$Solution)>($r6);

        if $i0 >= 0 goto label1;

        $r7 = r0.<androidx.room.AmbiguousColumnResolver$resolve$4: kotlin.jvm.internal.Ref$ObjectRef $bestSolution>;

        $r7.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = r2;

     label1:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.AmbiguousColumnResolver$resolve$4 r0;
        java.lang.Object r1;
        java.util.List $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.room.AmbiguousColumnResolver$resolve$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.List) r1;

        virtualinvoke r0.<androidx.room.AmbiguousColumnResolver$resolve$4: void invoke(java.util.List)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.room.AmbiguousColumnResolver$ResultColumn
<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String name>
<androidx.room.AmbiguousColumnResolver$ResultColumn: int index>
    public void <init>(java.lang.String, int)
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$ResultColumn;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String name> = r1;

        r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: int index> = i0;

        return;
    }

    public final java.lang.String getName()
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$ResultColumn;

        $r1 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String name>;

        return $r1;
    }

    public final int getIndex()
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0;
        int $i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$ResultColumn;

        $i0 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: int index>;

        return $i0;
    }

    public final java.lang.String component1()
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$ResultColumn;

        $r1 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String name>;

        return $r1;
    }

    public final int component2()
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0;
        int $i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$ResultColumn;

        $i0 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: int index>;

        return $i0;
    }

    public final androidx.room.AmbiguousColumnResolver$ResultColumn copy(java.lang.String, int)
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0, $r2;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$ResultColumn;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r2 = new androidx.room.AmbiguousColumnResolver$ResultColumn;

        specialinvoke $r2.<androidx.room.AmbiguousColumnResolver$ResultColumn: void <init>(java.lang.String,int)>(r1, i0);

        return $r2;
    }

    public static androidx.room.AmbiguousColumnResolver$ResultColumn copy$default(androidx.room.AmbiguousColumnResolver$ResultColumn, java.lang.String, int, int, java.lang.Object)
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0, $r2;
        int i0, $i1, $i2, i3;
        java.lang.Object r1;
        java.lang.String r3;

        r0 := @parameter0: androidx.room.AmbiguousColumnResolver$ResultColumn;

        r3 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String name>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        i3 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: int index>;

     label2:
        $r2 = virtualinvoke r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: androidx.room.AmbiguousColumnResolver$ResultColumn copy(java.lang.String,int)>(r3, i3);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7;
        java.lang.String $r3, $r8;
        int $i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$ResultColumn;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ResultColumn(name=");

        $r3 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String name>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", index=");

        $i0 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: int index>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public int hashCode()
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, i3, i4;

        r0 := @this: androidx.room.AmbiguousColumnResolver$ResultColumn;

        $r1 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String name>;

        i3 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = i3 * 31;

        $i0 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: int index>;

        $i2 = staticinvoke <java.lang.Integer: int hashCode(int)>($i0);

        i4 = $i1 + $i2;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.room.AmbiguousColumnResolver$ResultColumn r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;
        int $i0, $i1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$ResultColumn;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.room.AmbiguousColumnResolver$ResultColumn;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (androidx.room.AmbiguousColumnResolver$ResultColumn) r1;

        $r4 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String name>;

        $r3 = r2.<androidx.room.AmbiguousColumnResolver$ResultColumn: java.lang.String name>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = r0.<androidx.room.AmbiguousColumnResolver$ResultColumn: int index>;

        $i0 = r2.<androidx.room.AmbiguousColumnResolver$ResultColumn: int index>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        return 1;
    }

androidx.room.AmbiguousColumnResolver$Solution$Companion
    private void <init>()
    {
        androidx.room.AmbiguousColumnResolver$Solution$Companion r0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.AmbiguousColumnResolver$Solution getNO_SOLUTION()
    {
        androidx.room.AmbiguousColumnResolver$Solution$Companion r0;
        androidx.room.AmbiguousColumnResolver$Solution $r1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution$Companion;

        $r1 = staticinvoke <androidx.room.AmbiguousColumnResolver$Solution: androidx.room.AmbiguousColumnResolver$Solution access$getNO_SOLUTION$cp()>();

        return $r1;
    }

    public final androidx.room.AmbiguousColumnResolver$Solution build(java.util.List)
    {
        androidx.room.AmbiguousColumnResolver$Solution$Companion r0;
        java.util.List r1, $r25;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, $i15, i16, $i17, $i18, i19, i20;
        java.lang.Iterable $r2, $r6, $r9, r26, r36;
        java.util.Iterator r3, r27, r30, r33, $r37;
        java.lang.Object r4, $r7, $r10, $r17, $r20, r28;
        androidx.room.AmbiguousColumnResolver$Match r5, r29, r31, r32, r34, $r35;
        boolean $z3, $z4, $z5, $z6, $z7, $z8, $z9, z11, $z12, $z15, z17, $z18, $z19;
        kotlin.ranges.IntRange $r8, $r11, $r12, $r15, $r18, $r21, $r23, $r24;
        androidx.room.AmbiguousColumnResolver$Solution $r13;
        kotlin.collections.IntIterator $r14;
        java.util.Collection $r16;
        java.util.NoSuchElementException $r19, $r22;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution$Companion;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "matches");

        r26 = (java.lang.Iterable) r1;

        i10 = 0;

        r27 = interfaceinvoke r26.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label02;

        r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r29 = (androidx.room.AmbiguousColumnResolver$Match) r28;

        i3 = i10;

        $r23 = virtualinvoke r29.<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange getResultRange()>();

        $i5 = virtualinvoke $r23.<kotlin.ranges.IntRange: int getLast()>();

        $r24 = virtualinvoke r29.<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange getResultRange()>();

        $i6 = virtualinvoke $r24.<kotlin.ranges.IntRange: int getFirst()>();

        $i7 = $i5 - $i6;

        $i8 = $i7 + 1;

        $r25 = virtualinvoke r29.<androidx.room.AmbiguousColumnResolver$Match: java.util.List getResultIndices()>();

        $i9 = interfaceinvoke $r25.<java.util.List: int size()>();

        i4 = $i8 - $i9;

        i10 = i3 + i4;

        goto label01;

     label02:
        i0 = i10;

        $r6 = (java.lang.Iterable) r1;

        r30 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z4 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label03;

        $r22 = new java.util.NoSuchElementException;

        specialinvoke $r22.<java.util.NoSuchElementException: void <init>()>();

        throw $r22;

     label03:
        $r7 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (androidx.room.AmbiguousColumnResolver$Match) $r7;

        z11 = 0;

        $r8 = virtualinvoke r31.<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange getResultRange()>();

        i11 = virtualinvoke $r8.<kotlin.ranges.IntRange: int getFirst()>();

     label04:
        $z12 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label05;

        $r20 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r32 = (androidx.room.AmbiguousColumnResolver$Match) $r20;

        $r21 = virtualinvoke r32.<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange getResultRange()>();

        i12 = virtualinvoke $r21.<kotlin.ranges.IntRange: int getFirst()>();

        if i11 <= i12 goto label04;

        i11 = i12;

        goto label04;

     label05:
        i13 = i11;

        $r9 = (java.lang.Iterable) r1;

        r33 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z5 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label06;

        $r19 = new java.util.NoSuchElementException;

        specialinvoke $r19.<java.util.NoSuchElementException: void <init>()>();

        throw $r19;

     label06:
        $r10 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (androidx.room.AmbiguousColumnResolver$Match) $r10;

        $r11 = virtualinvoke r34.<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange getResultRange()>();

        i14 = virtualinvoke $r11.<kotlin.ranges.IntRange: int getLast()>();

     label07:
        $z15 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label08;

        $r17 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        $r35 = (androidx.room.AmbiguousColumnResolver$Match) $r17;

        $r18 = virtualinvoke $r35.<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange getResultRange()>();

        $i15 = virtualinvoke $r18.<kotlin.ranges.IntRange: int getLast()>();

        if i14 >= $i15 goto label07;

        i14 = $i15;

        goto label07;

     label08:
        i16 = i14;

        $r12 = new kotlin.ranges.IntRange;

        specialinvoke $r12.<kotlin.ranges.IntRange: void <init>(int,int)>(i13, i16);

        r36 = (java.lang.Iterable) $r12;

        z17 = 0;

        $z6 = r36 instanceof java.util.Collection;

        if $z6 == 0 goto label09;

        $r16 = (java.util.Collection) r36;

        $z9 = interfaceinvoke $r16.<java.util.Collection: boolean isEmpty()>();

        if $z9 == 0 goto label09;

        $i17 = 0;

        goto label17;

     label09:
        $i18 = 0;

        $r37 = interfaceinvoke r36.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z18 = interfaceinvoke $r37.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label16;

        $r14 = (kotlin.collections.IntIterator) $r37;

        i1 = virtualinvoke $r14.<kotlin.collections.IntIterator: int nextInt()>();

        i2 = i1;

        i19 = 0;

        $r2 = (java.lang.Iterable) r1;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label11:
        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label14;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.room.AmbiguousColumnResolver$Match) r4;

        $r15 = virtualinvoke r5.<androidx.room.AmbiguousColumnResolver$Match: kotlin.ranges.IntRange getResultRange()>();

        $z8 = virtualinvoke $r15.<kotlin.ranges.IntRange: boolean contains(int)>(i2);

        if $z8 == 0 goto label12;

        i19 = i19 + 1;

     label12:
        if i19 <= 1 goto label13;

        $z19 = 1;

        goto label15;

     label13:
        goto label11;

     label14:
        $z19 = 0;

     label15:
        if $z19 == 0 goto label10;

        $i18 = $i18 + 1;

        if $i18 >= 0 goto label10;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        goto label10;

     label16:
        $i17 = $i18;

     label17:
        i20 = $i17;

        $r13 = new androidx.room.AmbiguousColumnResolver$Solution;

        specialinvoke $r13.<androidx.room.AmbiguousColumnResolver$Solution: void <init>(java.util.List,int,int)>(r1, i0, i20);

        return $r13;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.AmbiguousColumnResolver$Solution$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.AmbiguousColumnResolver$Solution$Companion: void <init>()>();

        return;
    }

androidx.room.AmbiguousColumnResolver$Solution
<androidx.room.AmbiguousColumnResolver$Solution: androidx.room.AmbiguousColumnResolver$Solution$Companion Companion>
<androidx.room.AmbiguousColumnResolver$Solution: java.util.List matches>
<androidx.room.AmbiguousColumnResolver$Solution: int coverageOffset>
<androidx.room.AmbiguousColumnResolver$Solution: int overlaps>
<androidx.room.AmbiguousColumnResolver$Solution: androidx.room.AmbiguousColumnResolver$Solution NO_SOLUTION>
    public void <init>(java.util.List, int, int)
    {
        androidx.room.AmbiguousColumnResolver$Solution r0;
        java.util.List r1;
        int i0, i1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "matches");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.AmbiguousColumnResolver$Solution: java.util.List matches> = r1;

        r0.<androidx.room.AmbiguousColumnResolver$Solution: int coverageOffset> = i0;

        r0.<androidx.room.AmbiguousColumnResolver$Solution: int overlaps> = i1;

        return;
    }

    public final java.util.List getMatches()
    {
        androidx.room.AmbiguousColumnResolver$Solution r0;
        java.util.List $r1;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution;

        $r1 = r0.<androidx.room.AmbiguousColumnResolver$Solution: java.util.List matches>;

        return $r1;
    }

    public final int getCoverageOffset()
    {
        androidx.room.AmbiguousColumnResolver$Solution r0;
        int $i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution;

        $i0 = r0.<androidx.room.AmbiguousColumnResolver$Solution: int coverageOffset>;

        return $i0;
    }

    public final int getOverlaps()
    {
        androidx.room.AmbiguousColumnResolver$Solution r0;
        int $i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution;

        $i0 = r0.<androidx.room.AmbiguousColumnResolver$Solution: int overlaps>;

        return $i0;
    }

    public int compareTo(androidx.room.AmbiguousColumnResolver$Solution)
    {
        androidx.room.AmbiguousColumnResolver$Solution r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution;

        r1 := @parameter0: androidx.room.AmbiguousColumnResolver$Solution;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $i2 = r0.<androidx.room.AmbiguousColumnResolver$Solution: int overlaps>;

        $i1 = r1.<androidx.room.AmbiguousColumnResolver$Solution: int overlaps>;

        i0 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i2, $i1);

        if i0 == 0 goto label1;

        return i0;

     label1:
        $i4 = r0.<androidx.room.AmbiguousColumnResolver$Solution: int coverageOffset>;

        $i3 = r1.<androidx.room.AmbiguousColumnResolver$Solution: int coverageOffset>;

        $i5 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i4, $i3);

        return $i5;
    }

    public volatile int compareTo(java.lang.Object)
    {
        androidx.room.AmbiguousColumnResolver$Solution r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: androidx.room.AmbiguousColumnResolver$Solution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.room.AmbiguousColumnResolver$Solution) r1;

        $i0 = virtualinvoke r0.<androidx.room.AmbiguousColumnResolver$Solution: int compareTo(androidx.room.AmbiguousColumnResolver$Solution)>($r2);

        return $i0;
    }

    public static final androidx.room.AmbiguousColumnResolver$Solution access$getNO_SOLUTION$cp()
    {
        androidx.room.AmbiguousColumnResolver$Solution $r0;

        $r0 = <androidx.room.AmbiguousColumnResolver$Solution: androidx.room.AmbiguousColumnResolver$Solution NO_SOLUTION>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.room.AmbiguousColumnResolver$Solution$Companion $r0;
        androidx.room.AmbiguousColumnResolver$Solution $r1;
        java.util.List $r2;

        $r0 = new androidx.room.AmbiguousColumnResolver$Solution$Companion;

        specialinvoke $r0.<androidx.room.AmbiguousColumnResolver$Solution$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.AmbiguousColumnResolver$Solution: androidx.room.AmbiguousColumnResolver$Solution$Companion Companion> = $r0;

        $r1 = new androidx.room.AmbiguousColumnResolver$Solution;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        specialinvoke $r1.<androidx.room.AmbiguousColumnResolver$Solution: void <init>(java.util.List,int,int)>($r2, 2147483647, 2147483647);

        <androidx.room.AmbiguousColumnResolver$Solution: androidx.room.AmbiguousColumnResolver$Solution NO_SOLUTION> = $r1;

        return;
    }

