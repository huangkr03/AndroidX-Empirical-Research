androidx.room.EntityUpsertionAdapter
<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>
<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>
    public void <init>(androidx.room.EntityInsertionAdapter, androidx.room.EntityDeletionOrUpdateAdapter)
    {
        androidx.room.EntityUpsertionAdapter r0;
        androidx.room.EntityInsertionAdapter r1;
        androidx.room.EntityDeletionOrUpdateAdapter r2;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: androidx.room.EntityInsertionAdapter;

        r2 := @parameter1: androidx.room.EntityDeletionOrUpdateAdapter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "insertionAdapter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "updateAdapter");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter> = r1;

        r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter> = r2;

        return;
    }

    public final void upsert(java.lang.Object)
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        androidx.room.EntityInsertionAdapter $r3;
        androidx.room.EntityDeletionOrUpdateAdapter $r5;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r3 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        virtualinvoke $r3.<androidx.room.EntityInsertionAdapter: void insert(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r2);

        $r5 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        virtualinvoke $r5.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>(r1);

     label4:
        return;

        catch android.database.sqlite.SQLiteConstraintException from label1 to label2 with label3;
    }

    public final void upsert(java.lang.Object[])
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.lang.Object[] r1;
        int i0, i2;
        java.lang.Object r3, r4;
        java.lang.Throwable r5, $r7;
        androidx.room.EntityInsertionAdapter $r6;
        androidx.room.EntityDeletionOrUpdateAdapter $r8;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        i2 = 0;

        i0 = lengthof r1;

     label1:
        if i2 >= i0 goto label6;

        r3 = r1[i2];

        r4 = r3;

     label2:
        $r6 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        virtualinvoke $r6.<androidx.room.EntityInsertionAdapter: void insert(java.lang.Object)>(r4);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r5 = $r7;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r5);

        $r8 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        virtualinvoke $r8.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>(r4);

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return;

        catch android.database.sqlite.SQLiteConstraintException from label2 to label3 with label4;
    }

    public final void upsert(java.lang.Iterable)
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        java.lang.Object r3, r4;
        java.lang.Throwable r5, $r7;
        boolean $z2;
        androidx.room.EntityInsertionAdapter $r6;
        androidx.room.EntityDeletionOrUpdateAdapter $r8;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = r3;

     label2:
        $r6 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        virtualinvoke $r6.<androidx.room.EntityInsertionAdapter: void insert(java.lang.Object)>(r4);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r5 = $r7;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r5);

        $r8 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        virtualinvoke $r8.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>(r4);

     label5:
        goto label1;

     label6:
        return;

        catch android.database.sqlite.SQLiteConstraintException from label2 to label3 with label4;
    }

    public final long upsertAndReturnId(java.lang.Object)
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        androidx.room.EntityInsertionAdapter $r3;
        androidx.room.EntityDeletionOrUpdateAdapter $r5;
        long l1;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r3 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        l1 = virtualinvoke $r3.<androidx.room.EntityInsertionAdapter: long insertAndReturnId(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r2);

        $r5 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        virtualinvoke $r5.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>(r1);

        l1 = -1L;

     label4:
        return l1;

        catch android.database.sqlite.SQLiteConstraintException from label1 to label2 with label3;
    }

    public final long[] upsertAndReturnIdsArray(java.lang.Object[])
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.lang.Object[] r1;
        int i0, i1, i2, i4, $i5;
        long[] r2, r4, $r10;
        java.lang.Throwable r3, $r7;
        java.lang.Object $r5, $r8;
        androidx.room.EntityInsertionAdapter $r6;
        androidx.room.EntityDeletionOrUpdateAdapter $r9;
        long l6;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        i4 = 0;

        i0 = lengthof r1;

        r2 = newarray (long)[i0];

     label1:
        if i4 >= i0 goto label6;

        i1 = i4;

        i2 = i1;

        r4 = r2;

     label2:
        $r10 = r4;

        $i5 = i2;

        $r6 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        $r5 = r1[i1];

        l6 = virtualinvoke $r6.<androidx.room.EntityInsertionAdapter: long insertAndReturnId(java.lang.Object)>($r5);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        $r10 = r4;

        $i5 = i2;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r3);

        $r9 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        $r8 = r1[i1];

        virtualinvoke $r9.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>($r8);

        l6 = -1L;

     label5:
        $r10[$i5] = l6;

        i4 = i4 + 1;

        goto label1;

     label6:
        return r2;

        catch android.database.sqlite.SQLiteConstraintException from label2 to label3 with label4;
    }

    public final long[] upsertAndReturnIdsArray(java.util.Collection)
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        int i0, i1, i2, i4, $i5;
        long[] r3, r6, $r10;
        java.lang.Object r4;
        java.lang.Throwable r5, $r8;
        androidx.room.EntityInsertionAdapter $r7;
        androidx.room.EntityDeletionOrUpdateAdapter $r9;
        long l6;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        i4 = 0;

        i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r3 = newarray (long)[i0];

     label1:
        if i4 >= i0 goto label6;

        i1 = i4;

        r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        i2 = i1;

        r6 = r3;

     label2:
        $r10 = r6;

        $i5 = i2;

        $r7 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        l6 = virtualinvoke $r7.<androidx.room.EntityInsertionAdapter: long insertAndReturnId(java.lang.Object)>(r4);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r5 = $r8;

        $r10 = r6;

        $i5 = i2;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r5);

        $r9 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        virtualinvoke $r9.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>(r4);

        l6 = -1L;

     label5:
        $r10[$i5] = l6;

        i4 = i4 + 1;

        goto label1;

     label6:
        return r3;

        catch android.database.sqlite.SQLiteConstraintException from label2 to label3 with label4;
    }

    public final java.util.List upsertAndReturnIdsList(java.lang.Object[])
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.lang.Object[] r1;
        java.util.List r2, $r8;
        int i0, i3;
        java.lang.Object r5, r6;
        java.lang.Throwable r7, $r11;
        androidx.room.EntityInsertionAdapter $r9;
        long $l1;
        java.lang.Long $r10, $r13;
        androidx.room.EntityDeletionOrUpdateAdapter $r12;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        i3 = 0;

        i0 = lengthof r1;

     label1:
        if i3 >= i0 goto label6;

        r5 = r1[i3];

        r6 = r5;

     label2:
        $r9 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        $l1 = virtualinvoke $r9.<androidx.room.EntityInsertionAdapter: long insertAndReturnId(java.lang.Object)>(r6);

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r7 = $r11;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r7);

        $r12 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        virtualinvoke $r12.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>(r6);

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r13);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>(r2);

        return $r8;

        catch android.database.sqlite.SQLiteConstraintException from label2 to label3 with label4;
    }

    public final java.util.List upsertAndReturnIdsList(java.util.Collection)
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.util.Collection r1;
        java.util.List r2, $r9;
        java.lang.Iterable $r4;
        java.util.Iterator r5;
        java.lang.Object r6, r7;
        java.lang.Throwable r8, $r12;
        boolean $z3;
        androidx.room.EntityInsertionAdapter $r10;
        long $l0;
        java.lang.Long $r11, $r14;
        androidx.room.EntityDeletionOrUpdateAdapter $r13;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        $r4 = (java.lang.Iterable) r1;

        r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = r6;

     label2:
        $r10 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        $l0 = virtualinvoke $r10.<androidx.room.EntityInsertionAdapter: long insertAndReturnId(java.lang.Object)>(r7);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r8 = $r12;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r8);

        $r13 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        virtualinvoke $r13.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>(r7);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r14);

     label5:
        goto label1;

     label6:
        $r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>(r2);

        return $r9;

        catch android.database.sqlite.SQLiteConstraintException from label2 to label3 with label4;
    }

    public final java.lang.Long[] upsertAndReturnIdsArrayBox(java.lang.Object[])
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.lang.Object[] r1;
        int i0, i1, i2, i4, $i5;
        java.lang.Long[] r2, r4, $r11;
        java.lang.Throwable r3, $r8;
        java.lang.Object $r5, $r9;
        androidx.room.EntityInsertionAdapter $r6;
        java.lang.Long $r7;
        androidx.room.EntityDeletionOrUpdateAdapter $r10;
        long l6;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        i4 = 0;

        i0 = lengthof r1;

        r2 = newarray (java.lang.Long)[i0];

     label1:
        if i4 >= i0 goto label6;

        i1 = i4;

        i2 = i1;

        r4 = r2;

     label2:
        $r11 = r4;

        $i5 = i2;

        $r6 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        $r5 = r1[i1];

        l6 = virtualinvoke $r6.<androidx.room.EntityInsertionAdapter: long insertAndReturnId(java.lang.Object)>($r5);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        $r11 = r4;

        $i5 = i2;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r3);

        $r10 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        $r9 = r1[i1];

        virtualinvoke $r10.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>($r9);

        l6 = -1L;

     label5:
        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l6);

        $r11[$i5] = $r7;

        i4 = i4 + 1;

        goto label1;

     label6:
        return r2;

        catch android.database.sqlite.SQLiteConstraintException from label2 to label3 with label4;
    }

    public final java.lang.Long[] upsertAndReturnIdsArrayBox(java.util.Collection)
    {
        androidx.room.EntityUpsertionAdapter r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        int i0, i1, i2, i4, $i5;
        java.lang.Long[] r3, r6, $r11;
        java.lang.Object r4;
        java.lang.Throwable r5, $r9;
        androidx.room.EntityInsertionAdapter $r7;
        java.lang.Long $r8;
        androidx.room.EntityDeletionOrUpdateAdapter $r10;
        long l6;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "entities");

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        i4 = 0;

        i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r3 = newarray (java.lang.Long)[i0];

     label1:
        if i4 >= i0 goto label6;

        i1 = i4;

        r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        i2 = i1;

        r6 = r3;

     label2:
        $r11 = r6;

        $i5 = i2;

        $r7 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityInsertionAdapter insertionAdapter>;

        l6 = virtualinvoke $r7.<androidx.room.EntityInsertionAdapter: long insertAndReturnId(java.lang.Object)>(r4);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r5 = $r9;

        $r11 = r6;

        $i5 = i2;

        specialinvoke r0.<androidx.room.EntityUpsertionAdapter: void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)>(r5);

        $r10 = r0.<androidx.room.EntityUpsertionAdapter: androidx.room.EntityDeletionOrUpdateAdapter updateAdapter>;

        virtualinvoke $r10.<androidx.room.EntityDeletionOrUpdateAdapter: int handle(java.lang.Object)>(r4);

        l6 = -1L;

     label5:
        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l6);

        $r11[$i5] = $r8;

        i4 = i4 + 1;

        goto label1;

     label6:
        return r3;

        catch android.database.sqlite.SQLiteConstraintException from label2 to label3 with label4;
    }

    private final void checkUniquenessException(android.database.sqlite.SQLiteConstraintException)
    {
        androidx.room.EntityUpsertionAdapter r0;
        android.database.sqlite.SQLiteConstraintException r1;
        java.lang.String r2, $r3;
        int $i0;
        java.lang.CharSequence $r4, $r5, $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: androidx.room.EntityUpsertionAdapter;

        r1 := @parameter0: android.database.sqlite.SQLiteConstraintException;

        $r3 = virtualinvoke r1.<android.database.sqlite.SQLiteConstraintException: java.lang.String getMessage()>();

        if $r3 != null goto label1;

        throw r1;

     label1:
        r2 = $r3;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 > 19 goto label2;

        $r7 = (java.lang.CharSequence) r2;

        $r6 = (java.lang.CharSequence) "unique";

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r7, $r6, 1);

        if $z1 != 0 goto label3;

        throw r1;

     label2:
        $r5 = (java.lang.CharSequence) r2;

        $r4 = (java.lang.CharSequence) "1555";

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r5, $r4, 1);

        if $z0 != 0 goto label3;

        throw r1;

     label3:
        return;
    }

