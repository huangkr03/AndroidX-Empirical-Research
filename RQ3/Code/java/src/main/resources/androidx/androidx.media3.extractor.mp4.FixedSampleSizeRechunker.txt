androidx.media3.extractor.mp4.FixedSampleSizeRechunker
<androidx.media3.extractor.mp4.FixedSampleSizeRechunker: int MAX_SAMPLE_SIZE>
    public static androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results rechunk(int, long[], int[], long)
    {
        int i0, i2, i3, $i4, $i6, $i7, $i10, $i12, i13, i14, i15, i16, i17, i18, i19, i20, i21;
        long[] r0, r5, r7;
        int[] r1, r2, r4, r6;
        long l1, $l5, $l8, $l9, $l11, l22, l23;
        androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results $r3;

        i0 := @parameter0: int;

        r0 := @parameter1: long[];

        r1 := @parameter2: int[];

        l1 := @parameter3: long;

        i2 = 8192 / i0;

        i13 = 0;

        r4 = r1;

        i14 = lengthof r4;

        i15 = 0;

     label1:
        if i15 >= i14 goto label2;

        i16 = r4[i15];

        $i12 = staticinvoke <androidx.media3.common.util.Util: int ceilDivide(int,int)>(i16, i2);

        i13 = i13 + $i12;

        i15 = i15 + 1;

        goto label1;

     label2:
        r5 = newarray (long)[i13];

        r6 = newarray (int)[i13];

        i17 = 0;

        r7 = newarray (long)[i13];

        r2 = newarray (int)[i13];

        i18 = 0;

        i19 = 0;

        i20 = 0;

     label3:
        $i4 = lengthof r1;

        if i20 >= $i4 goto label6;

        i21 = r1[i20];

        l22 = r0[i20];

     label4:
        if i21 <= 0 goto label5;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i21);

        r5[i19] = l22;

        $i6 = i0 * i3;

        r6[i19] = $i6;

        $i7 = r6[i19];

        i17 = staticinvoke <java.lang.Math: int max(int,int)>(i17, $i7);

        $l8 = (long) i18;

        $l9 = l1 * $l8;

        r7[i19] = $l9;

        r2[i19] = 1;

        $i10 = r6[i19];

        $l11 = (long) $i10;

        l22 = l22 + $l11;

        i18 = i18 + i3;

        i21 = i21 - i3;

        i19 = i19 + 1;

        goto label4;

     label5:
        i20 = i20 + 1;

        goto label3;

     label6:
        $l5 = (long) i18;

        l23 = l1 * $l5;

        $r3 = new androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results;

        specialinvoke $r3.<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: void <init>(long[],int[],int,long[],int[],long,androidx.media3.extractor.mp4.FixedSampleSizeRechunker$1)>(r5, r6, i17, r7, r2, l23, null);

        return $r3;
    }

    private void <init>()
    {
        androidx.media3.extractor.mp4.FixedSampleSizeRechunker r0;

        r0 := @this: androidx.media3.extractor.mp4.FixedSampleSizeRechunker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.media3.extractor.mp4.FixedSampleSizeRechunker$1
androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results
<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: long[] offsets>
<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: int[] sizes>
<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: int maximumSize>
<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: long[] timestamps>
<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: int[] flags>
<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: long duration>
    private void <init>(long[], int[], int, long[], int[], long)
    {
        androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results r0;
        long[] r1, r3;
        int[] r2, r4;
        int i0;
        long l1;

        r0 := @this: androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results;

        r1 := @parameter0: long[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        r3 := @parameter3: long[];

        r4 := @parameter4: int[];

        l1 := @parameter5: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: long[] offsets> = r1;

        r0.<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: int[] sizes> = r2;

        r0.<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: int maximumSize> = i0;

        r0.<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: long[] timestamps> = r3;

        r0.<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: int[] flags> = r4;

        r0.<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: long duration> = l1;

        return;
    }

    void <init>(long[], int[], int, long[], int[], long, androidx.media3.extractor.mp4.FixedSampleSizeRechunker$1)
    {
        androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results r0;
        long[] r1, r3;
        int[] r2, r4;
        int i0;
        long l1;
        androidx.media3.extractor.mp4.FixedSampleSizeRechunker$1 r5;

        r0 := @this: androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results;

        r1 := @parameter0: long[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        r3 := @parameter3: long[];

        r4 := @parameter4: int[];

        l1 := @parameter5: long;

        r5 := @parameter6: androidx.media3.extractor.mp4.FixedSampleSizeRechunker$1;

        specialinvoke r0.<androidx.media3.extractor.mp4.FixedSampleSizeRechunker$Results: void <init>(long[],int[],int,long[],int[],long)>(r1, r2, i0, r3, r4, l1);

        return;
    }

