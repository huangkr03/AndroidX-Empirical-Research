io.opencensus.trace.TraceId
<io.opencensus.trace.TraceId: io.opencensus.trace.TraceId INVALID>
<io.opencensus.trace.TraceId: long idHi>
<io.opencensus.trace.TraceId: long idLo>
    static void <clinit>()
    {
        io.opencensus.trace.TraceId $r0;

        $r0 = new io.opencensus.trace.TraceId;

        specialinvoke $r0.<io.opencensus.trace.TraceId: void <init>(long,long)>(0L, 0L);

        <io.opencensus.trace.TraceId: io.opencensus.trace.TraceId INVALID> = $r0;

        return;
    }

    private void <init>(long, long)
    {
        io.opencensus.trace.TraceId $r0;
        long $l0, $l1;

        $r0 := @this: io.opencensus.trace.TraceId;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.opencensus.trace.TraceId: long idHi> = $l0;

        $r0.<io.opencensus.trace.TraceId: long idLo> = $l1;

        return;
    }

    public static io.opencensus.trace.TraceId fromBytes(byte[])
    {
        byte[] $r0;
        int $i0;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        io.opencensus.trace.TraceId $r3;

        $r0 := @parameter0: byte[];

        staticinvoke <io.opencensus.internal.Utils: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "src");

        $i0 = lengthof $r0;

        if $i0 != 16 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r1[0] = $r2;

        $i0 = lengthof $r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r2;

        staticinvoke <io.opencensus.internal.Utils: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid size: expected %s, got %s", $r1);

        $r3 = staticinvoke <io.opencensus.trace.TraceId: io.opencensus.trace.TraceId fromBytes(byte[],int)>($r0, 0);

        return $r3;
    }

    public static io.opencensus.trace.TraceId fromBytes(byte[], int)
    {
        byte[] $r0;
        int $i0;
        io.opencensus.trace.TraceId $r1;
        long $l1, $l2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        staticinvoke <io.opencensus.internal.Utils: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "src");

        $r1 = new io.opencensus.trace.TraceId;

        $l1 = staticinvoke <io.opencensus.trace.BigendianEncoding: long longFromByteArray(byte[],int)>($r0, $i0);

        $i0 = $i0 + 8;

        $l2 = staticinvoke <io.opencensus.trace.BigendianEncoding: long longFromByteArray(byte[],int)>($r0, $i0);

        specialinvoke $r1.<io.opencensus.trace.TraceId: void <init>(long,long)>($l1, $l2);

        return $r1;
    }

    public int compareTo(io.opencensus.trace.TraceId)
    {
        io.opencensus.trace.TraceId $r0, $r1;
        byte $b0;
        long $l1, $l2;

        $r0 := @this: io.opencensus.trace.TraceId;

        $r1 := @parameter0: io.opencensus.trace.TraceId;

        $l1 = $r0.<io.opencensus.trace.TraceId: long idHi>;

        $l2 = $r1.<io.opencensus.trace.TraceId: long idHi>;

        $b0 = $l1 cmp $l2;

        if $b0 != 0 goto label3;

        $l1 = $r0.<io.opencensus.trace.TraceId: long idLo>;

        $l2 = $r1.<io.opencensus.trace.TraceId: long idLo>;

        $b0 = $l1 cmp $l2;

        if $b0 != 0 goto label1;

        return 0;

     label1:
        $b0 = $l1 cmp $l2;

        if $b0 >= 0 goto label2;

        return -1;

     label2:
        return 1;

     label3:
        $b0 = $l1 cmp $l2;

        if $b0 >= 0 goto label4;

        return -1;

     label4:
        return 1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        io.opencensus.trace.TraceId $r0, $r2;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: io.opencensus.trace.TraceId;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (io.opencensus.trace.TraceId) $r1;

        $i0 = virtualinvoke $r0.<io.opencensus.trace.TraceId: int compareTo(io.opencensus.trace.TraceId)>($r2);

        return $i0;
    }

    public void copyLowerBase16To(char[], int)
    {
        io.opencensus.trace.TraceId $r0;
        char[] $r1;
        int $i0;
        long $l1;

        $r0 := @this: io.opencensus.trace.TraceId;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $l1 = $r0.<io.opencensus.trace.TraceId: long idHi>;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void longToBase16String(long,char[],int)>($l1, $r1, $i0);

        $l1 = $r0.<io.opencensus.trace.TraceId: long idLo>;

        $i0 = $i0 + 16;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void longToBase16String(long,char[],int)>($l1, $r1, $i0);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        io.opencensus.trace.TraceId $r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        long $l0, $l1;
        byte $b2;

        $r0 := @this: io.opencensus.trace.TraceId;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof io.opencensus.trace.TraceId;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (io.opencensus.trace.TraceId) $r1;

        $l0 = $r0.<io.opencensus.trace.TraceId: long idHi>;

        $l1 = $r2.<io.opencensus.trace.TraceId: long idHi>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $l0 = $r0.<io.opencensus.trace.TraceId: long idLo>;

        $l1 = $r2.<io.opencensus.trace.TraceId: long idLo>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public byte[] getBytes()
    {
        io.opencensus.trace.TraceId $r0;
        byte[] $r1;
        long $l0;

        $r0 := @this: io.opencensus.trace.TraceId;

        $r1 = newarray (byte)[16];

        $l0 = $r0.<io.opencensus.trace.TraceId: long idHi>;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void longToByteArray(long,byte[],int)>($l0, $r1, 0);

        $l0 = $r0.<io.opencensus.trace.TraceId: long idLo>;

        staticinvoke <io.opencensus.trace.BigendianEncoding: void longToByteArray(long,byte[],int)>($l0, $r1, 8);

        return $r1;
    }

    public int hashCode()
    {
        io.opencensus.trace.TraceId $r0;
        long $l0, $l1;
        int $i2, $i3;

        $r0 := @this: io.opencensus.trace.TraceId;

        $l0 = $r0.<io.opencensus.trace.TraceId: long idHi>;

        $l1 = $l0 >>> 32;

        $l0 = $l0 ^ $l1;

        $i2 = (int) $l0;

        $i2 = $i2 + 31;

        $i2 = $i2 * 31;

        $l1 = $r0.<io.opencensus.trace.TraceId: long idLo>;

        $l0 = $l1 >>> 32;

        $l0 = $l1 ^ $l0;

        $i3 = (int) $l0;

        $i2 = $i2 + $i3;

        return $i2;
    }

    public java.lang.String toLowerBase16()
    {
        io.opencensus.trace.TraceId $r0;
        char[] $r1;
        java.lang.String $r2;

        $r0 := @this: io.opencensus.trace.TraceId;

        $r1 = newarray (char)[32];

        virtualinvoke $r0.<io.opencensus.trace.TraceId: void copyLowerBase16To(char[],int)>($r1, 0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        io.opencensus.trace.TraceId $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: io.opencensus.trace.TraceId;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TraceId{traceId=");

        $r2 = virtualinvoke $r0.<io.opencensus.trace.TraceId: java.lang.String toLowerBase16()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

