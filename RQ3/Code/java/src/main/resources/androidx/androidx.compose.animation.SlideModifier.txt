androidx.compose.animation.SlideModifier
<androidx.compose.animation.SlideModifier: androidx.compose.animation.core.Transition$DeferredAnimation lazyAnimation>
<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State slideIn>
<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State slideOut>
<androidx.compose.animation.SlideModifier: kotlin.jvm.functions.Function1 transitionSpec>
    public void <init>(androidx.compose.animation.core.Transition$DeferredAnimation, androidx.compose.runtime.State, androidx.compose.runtime.State)
    {
        androidx.compose.animation.SlideModifier r0;
        androidx.compose.animation.core.Transition$DeferredAnimation r1;
        androidx.compose.runtime.State r2, r3;
        androidx.compose.animation.SlideModifier$transitionSpec$1 $r4;
        kotlin.jvm.functions.Function1 $r5;

        r0 := @this: androidx.compose.animation.SlideModifier;

        r1 := @parameter0: androidx.compose.animation.core.Transition$DeferredAnimation;

        r2 := @parameter1: androidx.compose.runtime.State;

        r3 := @parameter2: androidx.compose.runtime.State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lazyAnimation");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slideIn");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "slideOut");

        specialinvoke r0.<androidx.compose.animation.LayoutModifierWithPassThroughIntrinsics: void <init>()>();

        r0.<androidx.compose.animation.SlideModifier: androidx.compose.animation.core.Transition$DeferredAnimation lazyAnimation> = r1;

        r0.<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State slideIn> = r2;

        r0.<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State slideOut> = r3;

        $r4 = new androidx.compose.animation.SlideModifier$transitionSpec$1;

        specialinvoke $r4.<androidx.compose.animation.SlideModifier$transitionSpec$1: void <init>(androidx.compose.animation.SlideModifier)>(r0);

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        r0.<androidx.compose.animation.SlideModifier: kotlin.jvm.functions.Function1 transitionSpec> = $r5;

        return;
    }

    public final androidx.compose.animation.core.Transition$DeferredAnimation getLazyAnimation()
    {
        androidx.compose.animation.SlideModifier r0;
        androidx.compose.animation.core.Transition$DeferredAnimation $r1;

        r0 := @this: androidx.compose.animation.SlideModifier;

        $r1 = r0.<androidx.compose.animation.SlideModifier: androidx.compose.animation.core.Transition$DeferredAnimation lazyAnimation>;

        return $r1;
    }

    public final androidx.compose.runtime.State getSlideIn()
    {
        androidx.compose.animation.SlideModifier r0;
        androidx.compose.runtime.State $r1;

        r0 := @this: androidx.compose.animation.SlideModifier;

        $r1 = r0.<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State slideIn>;

        return $r1;
    }

    public final androidx.compose.runtime.State getSlideOut()
    {
        androidx.compose.animation.SlideModifier r0;
        androidx.compose.runtime.State $r1;

        r0 := @this: androidx.compose.animation.SlideModifier;

        $r1 = r0.<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State slideOut>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function1 getTransitionSpec()
    {
        androidx.compose.animation.SlideModifier r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.animation.SlideModifier;

        $r1 = r0.<androidx.compose.animation.SlideModifier: kotlin.jvm.functions.Function1 transitionSpec>;

        return $r1;
    }

    public final long targetValueByState-oFUgxo0(androidx.compose.animation.EnterExitState, long)
    {
        androidx.compose.animation.SlideModifier r0;
        androidx.compose.animation.EnterExitState r1;
        long l0, l1, l2, $l3, $l4, $l7;
        androidx.compose.runtime.State $r2, $r17;
        java.lang.Object $r3, $r11, $r15, $r18;
        androidx.compose.animation.Slide $r4, $r19;
        androidx.compose.ui.unit.IntOffset$Companion $r5, $r6, $r7;
        kotlin.NoWhenBranchMatchedException $r8;
        kotlin.jvm.functions.Function1 $r9, $r13;
        androidx.compose.ui.unit.IntSize $r10, $r14;
        androidx.compose.ui.unit.IntOffset $r12, $r16;
        int[] $r20;
        int $i5, $i6;

        r0 := @this: androidx.compose.animation.SlideModifier;

        r1 := @parameter0: androidx.compose.animation.EnterExitState;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "targetState");

        $r2 = r0.<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State slideIn>;

        $r3 = interfaceinvoke $r2.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.animation.Slide) $r3;

        if $r4 == null goto label1;

        $r13 = virtualinvoke $r4.<androidx.compose.animation.Slide: kotlin.jvm.functions.Function1 getSlideOffset()>();

        if $r13 == null goto label1;

        $r14 = staticinvoke <androidx.compose.ui.unit.IntSize: androidx.compose.ui.unit.IntSize box-impl(long)>(l0);

        $r15 = interfaceinvoke $r13.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r14);

        $r16 = (androidx.compose.ui.unit.IntOffset) $r15;

        $l3 = virtualinvoke $r16.<androidx.compose.ui.unit.IntOffset: long unbox-impl()>();

        goto label2;

     label1:
        $r5 = <androidx.compose.ui.unit.IntOffset: androidx.compose.ui.unit.IntOffset$Companion Companion>;

        $l3 = virtualinvoke $r5.<androidx.compose.ui.unit.IntOffset$Companion: long getZero-nOcc-ac()>();

     label2:
        l1 = $l3;

        $r17 = r0.<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State slideOut>;

        $r18 = interfaceinvoke $r17.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r19 = (androidx.compose.animation.Slide) $r18;

        if $r19 == null goto label3;

        $r9 = virtualinvoke $r19.<androidx.compose.animation.Slide: kotlin.jvm.functions.Function1 getSlideOffset()>();

        if $r9 == null goto label3;

        $r10 = staticinvoke <androidx.compose.ui.unit.IntSize: androidx.compose.ui.unit.IntSize box-impl(long)>(l0);

        $r11 = interfaceinvoke $r9.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r10);

        $r12 = (androidx.compose.ui.unit.IntOffset) $r11;

        $l4 = virtualinvoke $r12.<androidx.compose.ui.unit.IntOffset: long unbox-impl()>();

        goto label4;

     label3:
        $r6 = <androidx.compose.ui.unit.IntOffset: androidx.compose.ui.unit.IntOffset$Companion Companion>;

        $l4 = virtualinvoke $r6.<androidx.compose.ui.unit.IntOffset$Companion: long getZero-nOcc-ac()>();

     label4:
        l2 = $l4;

        $r20 = <androidx.compose.animation.SlideModifier$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i5 = virtualinvoke r1.<androidx.compose.animation.EnterExitState: int ordinal()>();

        $i6 = $r20[$i5];

        tableswitch($i6)
        {
            case 1: goto label5;
            case 2: goto label6;
            case 3: goto label7;
            default: goto label8;
        };

     label5:
        $r7 = <androidx.compose.ui.unit.IntOffset: androidx.compose.ui.unit.IntOffset$Companion Companion>;

        $l7 = virtualinvoke $r7.<androidx.compose.ui.unit.IntOffset$Companion: long getZero-nOcc-ac()>();

        goto label9;

     label6:
        $l7 = l1;

        goto label9;

     label7:
        $l7 = l2;

        goto label9;

     label8:
        $r8 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r8.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r8;

     label9:
        return $l7;
    }

    public androidx.compose.ui.layout.MeasureResult measure-3p2s80s(androidx.compose.ui.layout.MeasureScope, androidx.compose.ui.layout.Measurable, long)
    {
        androidx.compose.animation.SlideModifier r0;
        androidx.compose.ui.layout.MeasureScope $r1;
        androidx.compose.ui.layout.Measurable r2;
        long l0, l1;
        androidx.compose.ui.layout.Placeable r3;
        int $i2, $i3, $i4, $i5;
        androidx.compose.animation.SlideModifier$measure$1 $r4;
        kotlin.jvm.functions.Function1 $r5;
        androidx.compose.ui.layout.MeasureResult $r6;

        r0 := @this: androidx.compose.animation.SlideModifier;

        $r1 := @parameter0: androidx.compose.ui.layout.MeasureScope;

        r2 := @parameter1: androidx.compose.ui.layout.Measurable;

        l0 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$measure");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "measurable");

        r3 = interfaceinvoke r2.<androidx.compose.ui.layout.Measurable: androidx.compose.ui.layout.Placeable measure-BRTryo0(long)>(l0);

        $i2 = virtualinvoke r3.<androidx.compose.ui.layout.Placeable: int getWidth()>();

        $i3 = virtualinvoke r3.<androidx.compose.ui.layout.Placeable: int getHeight()>();

        l1 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long IntSize(int,int)>($i2, $i3);

        $i4 = virtualinvoke r3.<androidx.compose.ui.layout.Placeable: int getWidth()>();

        $i5 = virtualinvoke r3.<androidx.compose.ui.layout.Placeable: int getHeight()>();

        $r4 = new androidx.compose.animation.SlideModifier$measure$1;

        specialinvoke $r4.<androidx.compose.animation.SlideModifier$measure$1: void <init>(androidx.compose.animation.SlideModifier,androidx.compose.ui.layout.Placeable,long)>(r0, r3, l1);

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        $r6 = staticinvoke <androidx.compose.ui.layout.MeasureScope: androidx.compose.ui.layout.MeasureResult layout$default(androidx.compose.ui.layout.MeasureScope,int,int,java.util.Map,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r1, $i4, $i5, null, $r5, 4, null);

        return $r6;
    }

androidx.compose.animation.SlideModifier$measure$1$slideOffset$1
<androidx.compose.animation.SlideModifier$measure$1$slideOffset$1: androidx.compose.animation.SlideModifier this$0>
<androidx.compose.animation.SlideModifier$measure$1$slideOffset$1: long $measuredSize>
    void <init>(androidx.compose.animation.SlideModifier, long)
    {
        androidx.compose.animation.SlideModifier$measure$1$slideOffset$1 r0;
        androidx.compose.animation.SlideModifier $r1;
        long $l0;

        r0 := @this: androidx.compose.animation.SlideModifier$measure$1$slideOffset$1;

        $r1 := @parameter0: androidx.compose.animation.SlideModifier;

        $l0 := @parameter1: long;

        r0.<androidx.compose.animation.SlideModifier$measure$1$slideOffset$1: androidx.compose.animation.SlideModifier this$0> = $r1;

        r0.<androidx.compose.animation.SlideModifier$measure$1$slideOffset$1: long $measuredSize> = $l0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final long invoke-Bjo55l4(androidx.compose.animation.EnterExitState)
    {
        androidx.compose.animation.SlideModifier$measure$1$slideOffset$1 r0;
        androidx.compose.animation.EnterExitState r1;
        long $l0, $l1;
        androidx.compose.animation.SlideModifier $r2;

        r0 := @this: androidx.compose.animation.SlideModifier$measure$1$slideOffset$1;

        r1 := @parameter0: androidx.compose.animation.EnterExitState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.compose.animation.SlideModifier$measure$1$slideOffset$1: androidx.compose.animation.SlideModifier this$0>;

        $l0 = r0.<androidx.compose.animation.SlideModifier$measure$1$slideOffset$1: long $measuredSize>;

        $l1 = virtualinvoke $r2.<androidx.compose.animation.SlideModifier: long targetValueByState-oFUgxo0(androidx.compose.animation.EnterExitState,long)>(r1, $l0);

        return $l1;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.animation.SlideModifier$measure$1$slideOffset$1 r0;
        java.lang.Object r1;
        androidx.compose.animation.EnterExitState $r2;
        long $l0;
        androidx.compose.ui.unit.IntOffset $r3;

        r0 := @this: androidx.compose.animation.SlideModifier$measure$1$slideOffset$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.animation.EnterExitState) r1;

        $l0 = virtualinvoke r0.<androidx.compose.animation.SlideModifier$measure$1$slideOffset$1: long invoke-Bjo55l4(androidx.compose.animation.EnterExitState)>($r2);

        $r3 = staticinvoke <androidx.compose.ui.unit.IntOffset: androidx.compose.ui.unit.IntOffset box-impl(long)>($l0);

        return $r3;
    }

androidx.compose.animation.SlideModifier$measure$1
<androidx.compose.animation.SlideModifier$measure$1: androidx.compose.animation.SlideModifier this$0>
<androidx.compose.animation.SlideModifier$measure$1: androidx.compose.ui.layout.Placeable $placeable>
<androidx.compose.animation.SlideModifier$measure$1: long $measuredSize>
    void <init>(androidx.compose.animation.SlideModifier, androidx.compose.ui.layout.Placeable, long)
    {
        androidx.compose.animation.SlideModifier$measure$1 r0;
        androidx.compose.animation.SlideModifier $r1;
        androidx.compose.ui.layout.Placeable $r2;
        long $l0;

        r0 := @this: androidx.compose.animation.SlideModifier$measure$1;

        $r1 := @parameter0: androidx.compose.animation.SlideModifier;

        $r2 := @parameter1: androidx.compose.ui.layout.Placeable;

        $l0 := @parameter2: long;

        r0.<androidx.compose.animation.SlideModifier$measure$1: androidx.compose.animation.SlideModifier this$0> = $r1;

        r0.<androidx.compose.animation.SlideModifier$measure$1: androidx.compose.ui.layout.Placeable $placeable> = $r2;

        r0.<androidx.compose.animation.SlideModifier$measure$1: long $measuredSize> = $l0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.ui.layout.Placeable$PlacementScope)
    {
        androidx.compose.animation.SlideModifier$measure$1 r0;
        androidx.compose.ui.layout.Placeable$PlacementScope $r1;
        androidx.compose.runtime.State r2;
        androidx.compose.animation.SlideModifier $r3, $r5, $r8;
        androidx.compose.animation.core.Transition$DeferredAnimation $r4;
        kotlin.jvm.functions.Function1 $r6, $r9;
        androidx.compose.animation.SlideModifier$measure$1$slideOffset$1 $r7;
        long $l0, $l1;
        androidx.compose.ui.layout.Placeable $r10;
        java.lang.Object $r11;
        androidx.compose.ui.unit.IntOffset $r12;

        r0 := @this: androidx.compose.animation.SlideModifier$measure$1;

        $r1 := @parameter0: androidx.compose.ui.layout.Placeable$PlacementScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$layout");

        $r3 = r0.<androidx.compose.animation.SlideModifier$measure$1: androidx.compose.animation.SlideModifier this$0>;

        $r4 = virtualinvoke $r3.<androidx.compose.animation.SlideModifier: androidx.compose.animation.core.Transition$DeferredAnimation getLazyAnimation()>();

        $r5 = r0.<androidx.compose.animation.SlideModifier$measure$1: androidx.compose.animation.SlideModifier this$0>;

        $r6 = virtualinvoke $r5.<androidx.compose.animation.SlideModifier: kotlin.jvm.functions.Function1 getTransitionSpec()>();

        $r7 = new androidx.compose.animation.SlideModifier$measure$1$slideOffset$1;

        $r8 = r0.<androidx.compose.animation.SlideModifier$measure$1: androidx.compose.animation.SlideModifier this$0>;

        $l0 = r0.<androidx.compose.animation.SlideModifier$measure$1: long $measuredSize>;

        specialinvoke $r7.<androidx.compose.animation.SlideModifier$measure$1$slideOffset$1: void <init>(androidx.compose.animation.SlideModifier,long)>($r8, $l0);

        $r9 = (kotlin.jvm.functions.Function1) $r7;

        r2 = virtualinvoke $r4.<androidx.compose.animation.core.Transition$DeferredAnimation: androidx.compose.runtime.State animate(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r6, $r9);

        $r10 = r0.<androidx.compose.animation.SlideModifier$measure$1: androidx.compose.ui.layout.Placeable $placeable>;

        $r11 = interfaceinvoke r2.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r12 = (androidx.compose.ui.unit.IntOffset) $r11;

        $l1 = virtualinvoke $r12.<androidx.compose.ui.unit.IntOffset: long unbox-impl()>();

        staticinvoke <androidx.compose.ui.layout.Placeable$PlacementScope: void placeWithLayer-aW-9-wM$default(androidx.compose.ui.layout.Placeable$PlacementScope,androidx.compose.ui.layout.Placeable,long,float,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r1, $r10, $l1, 0.0F, null, 6, null);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.animation.SlideModifier$measure$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.layout.Placeable$PlacementScope $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.animation.SlideModifier$measure$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.layout.Placeable$PlacementScope) r1;

        virtualinvoke r0.<androidx.compose.animation.SlideModifier$measure$1: void invoke(androidx.compose.ui.layout.Placeable$PlacementScope)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.animation.SlideModifier$transitionSpec$1
<androidx.compose.animation.SlideModifier$transitionSpec$1: androidx.compose.animation.SlideModifier this$0>
    void <init>(androidx.compose.animation.SlideModifier)
    {
        androidx.compose.animation.SlideModifier$transitionSpec$1 r0;
        androidx.compose.animation.SlideModifier $r1;

        r0 := @this: androidx.compose.animation.SlideModifier$transitionSpec$1;

        $r1 := @parameter0: androidx.compose.animation.SlideModifier;

        r0.<androidx.compose.animation.SlideModifier$transitionSpec$1: androidx.compose.animation.SlideModifier this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final androidx.compose.animation.core.FiniteAnimationSpec invoke(androidx.compose.animation.core.Transition$Segment)
    {
        androidx.compose.animation.SlideModifier$transitionSpec$1 r0;
        androidx.compose.animation.core.Transition$Segment $r1;
        androidx.compose.animation.EnterExitState $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        androidx.compose.animation.core.SpringSpec $r6, $r11, $r17;
        androidx.compose.animation.SlideModifier $r7, $r13;
        androidx.compose.runtime.State $r8, $r14;
        java.lang.Object $r9, $r15;
        androidx.compose.animation.Slide $r10, $r16;
        androidx.compose.animation.core.FiniteAnimationSpec $r12, $r18, $r19;

        r0 := @this: androidx.compose.animation.SlideModifier$transitionSpec$1;

        $r1 := @parameter0: androidx.compose.animation.core.Transition$Segment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$null");

        $r3 = <androidx.compose.animation.EnterExitState: androidx.compose.animation.EnterExitState PreEnter>;

        $r2 = <androidx.compose.animation.EnterExitState: androidx.compose.animation.EnterExitState Visible>;

        $z0 = interfaceinvoke $r1.<androidx.compose.animation.core.Transition$Segment: boolean isTransitioningTo(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z0 == 0 goto label2;

        $r13 = r0.<androidx.compose.animation.SlideModifier$transitionSpec$1: androidx.compose.animation.SlideModifier this$0>;

        $r14 = virtualinvoke $r13.<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State getSlideIn()>();

        $r15 = interfaceinvoke $r14.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r16 = (androidx.compose.animation.Slide) $r15;

        if $r16 == null goto label1;

        $r18 = virtualinvoke $r16.<androidx.compose.animation.Slide: androidx.compose.animation.core.FiniteAnimationSpec getAnimationSpec()>();

        $r19 = $r18;

        if $r18 != null goto label5;

     label1:
        $r17 = staticinvoke <androidx.compose.animation.EnterExitTransitionKt: androidx.compose.animation.core.SpringSpec access$getDefaultOffsetAnimationSpec$p()>();

        $r19 = (androidx.compose.animation.core.FiniteAnimationSpec) $r17;

        goto label5;

     label2:
        $r5 = <androidx.compose.animation.EnterExitState: androidx.compose.animation.EnterExitState Visible>;

        $r4 = <androidx.compose.animation.EnterExitState: androidx.compose.animation.EnterExitState PostExit>;

        $z1 = interfaceinvoke $r1.<androidx.compose.animation.core.Transition$Segment: boolean isTransitioningTo(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $z1 == 0 goto label4;

        $r7 = r0.<androidx.compose.animation.SlideModifier$transitionSpec$1: androidx.compose.animation.SlideModifier this$0>;

        $r8 = virtualinvoke $r7.<androidx.compose.animation.SlideModifier: androidx.compose.runtime.State getSlideOut()>();

        $r9 = interfaceinvoke $r8.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r10 = (androidx.compose.animation.Slide) $r9;

        if $r10 == null goto label3;

        $r12 = virtualinvoke $r10.<androidx.compose.animation.Slide: androidx.compose.animation.core.FiniteAnimationSpec getAnimationSpec()>();

        $r19 = $r12;

        if $r12 != null goto label5;

     label3:
        $r11 = staticinvoke <androidx.compose.animation.EnterExitTransitionKt: androidx.compose.animation.core.SpringSpec access$getDefaultOffsetAnimationSpec$p()>();

        $r19 = (androidx.compose.animation.core.FiniteAnimationSpec) $r11;

        goto label5;

     label4:
        $r6 = staticinvoke <androidx.compose.animation.EnterExitTransitionKt: androidx.compose.animation.core.SpringSpec access$getDefaultOffsetAnimationSpec$p()>();

        $r19 = (androidx.compose.animation.core.FiniteAnimationSpec) $r6;

     label5:
        return $r19;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.animation.SlideModifier$transitionSpec$1 r0;
        java.lang.Object r1;
        androidx.compose.animation.core.Transition$Segment $r2;
        androidx.compose.animation.core.FiniteAnimationSpec $r3;

        r0 := @this: androidx.compose.animation.SlideModifier$transitionSpec$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.animation.core.Transition$Segment) r1;

        $r3 = virtualinvoke r0.<androidx.compose.animation.SlideModifier$transitionSpec$1: androidx.compose.animation.core.FiniteAnimationSpec invoke(androidx.compose.animation.core.Transition$Segment)>($r2);

        return $r3;
    }

androidx.compose.animation.SlideModifier$WhenMappings
<androidx.compose.animation.SlideModifier$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.compose.animation.EnterExitState[] $r1;
        int $i0, $i1, $i2, $i3;
        androidx.compose.animation.EnterExitState $r2, $r3, $r4;

        $r1 = staticinvoke <androidx.compose.animation.EnterExitState: androidx.compose.animation.EnterExitState[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.compose.animation.EnterExitState: androidx.compose.animation.EnterExitState Visible>;

        $i1 = virtualinvoke $r2.<androidx.compose.animation.EnterExitState: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.compose.animation.EnterExitState: androidx.compose.animation.EnterExitState PreEnter>;

        $i2 = virtualinvoke $r3.<androidx.compose.animation.EnterExitState: int ordinal()>();

        r0[$i2] = 2;

        $r4 = <androidx.compose.animation.EnterExitState: androidx.compose.animation.EnterExitState PostExit>;

        $i3 = virtualinvoke $r4.<androidx.compose.animation.EnterExitState: int ordinal()>();

        r0[$i3] = 3;

        <androidx.compose.animation.SlideModifier$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

