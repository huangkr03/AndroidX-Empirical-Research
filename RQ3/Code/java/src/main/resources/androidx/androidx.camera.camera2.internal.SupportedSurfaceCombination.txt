androidx.camera.camera2.internal.SupportedSurfaceCombination
<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String TAG>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.List mSurfaceCombinations>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mMaxSizeCache>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String mCameraId>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.workaround.ExcludedSupportedSizesContainer mExcludedSupportedSizesContainer>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.workaround.ExtraSupportedSurfaceCombinationsContainer mExtraSupportedSurfaceCombinationsContainer>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: int mHardwareLevel>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsSensorLandscapeResolution>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mExcludedSizeListCache>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsRawSupported>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsBurstCaptureSupported>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceSizeDefinition mSurfaceSizeDefinition>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mOutputSizesCache>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.DisplayInfoManager mDisplayInfoManager>
<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.workaround.ResolutionCorrector mResolutionCorrector>
    void <init>(android.content.Context, java.lang.String, androidx.camera.camera2.internal.compat.CameraManagerCompat, androidx.camera.camera2.internal.CamcorderProfileHelper) throws androidx.camera.core.CameraUnavailableException
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        android.content.Context r1;
        java.lang.String r2, $r12, $r18;
        androidx.camera.camera2.internal.compat.CameraManagerCompat r3;
        androidx.camera.camera2.internal.CamcorderProfileHelper r4, $r14;
        int[] r5, r28;
        int i0, i1, $i2, i3;
        java.util.ArrayList $r6;
        java.util.HashMap $r7, $r8, $r9;
        androidx.camera.camera2.internal.compat.workaround.ResolutionCorrector $r10;
        java.lang.Object $r11, $r13, $r22, $r25;
        androidx.camera.camera2.internal.compat.workaround.ExcludedSupportedSizesContainer $r15;
        androidx.camera.camera2.internal.compat.workaround.ExtraSupportedSurfaceCombinationsContainer $r16;
        androidx.camera.camera2.internal.DisplayInfoManager $r17;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r19, $r21, $r24;
        android.hardware.camera2.CameraCharacteristics$Key $r20, $r23;
        boolean $z0;
        java.lang.Integer r27;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.camera.camera2.internal.compat.CameraManagerCompat;

        r4 := @parameter3: androidx.camera.camera2.internal.CamcorderProfileHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.List mSurfaceCombinations> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mMaxSizeCache> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mExcludedSizeListCache> = $r8;

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsRawSupported> = 0;

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsBurstCaptureSupported> = 0;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mOutputSizesCache> = $r9;

        $r10 = new androidx.camera.camera2.internal.compat.workaround.ResolutionCorrector;

        specialinvoke $r10.<androidx.camera.camera2.internal.compat.workaround.ResolutionCorrector: void <init>()>();

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.workaround.ResolutionCorrector mResolutionCorrector> = $r10;

        $r11 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r12 = (java.lang.String) $r11;

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String mCameraId> = $r12;

        $r13 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r14 = (androidx.camera.camera2.internal.CamcorderProfileHelper) $r13;

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper> = $r14;

        $r15 = new androidx.camera.camera2.internal.compat.workaround.ExcludedSupportedSizesContainer;

        specialinvoke $r15.<androidx.camera.camera2.internal.compat.workaround.ExcludedSupportedSizesContainer: void <init>(java.lang.String)>(r2);

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.workaround.ExcludedSupportedSizesContainer mExcludedSupportedSizesContainer> = $r15;

        $r16 = new androidx.camera.camera2.internal.compat.workaround.ExtraSupportedSurfaceCombinationsContainer;

        specialinvoke $r16.<androidx.camera.camera2.internal.compat.workaround.ExtraSupportedSurfaceCombinationsContainer: void <init>()>();

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.workaround.ExtraSupportedSurfaceCombinationsContainer mExtraSupportedSurfaceCombinationsContainer> = $r16;

        $r17 = staticinvoke <androidx.camera.camera2.internal.DisplayInfoManager: androidx.camera.camera2.internal.DisplayInfoManager getInstance(android.content.Context)>(r1);

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.DisplayInfoManager mDisplayInfoManager> = $r17;

        $r18 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String mCameraId>;

        $r19 = virtualinvoke r3.<androidx.camera.camera2.internal.compat.CameraManagerCompat: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat getCameraCharacteristicsCompat(java.lang.String)>($r18);

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics> = $r19;

        $r21 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics>;

        $r20 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>;

        $r22 = virtualinvoke $r21.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r20);

        r27 = (java.lang.Integer) $r22;

        if r27 == null goto label1;

        $i2 = virtualinvoke r27.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i2 = 2;

     label2:
        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: int mHardwareLevel> = $i2;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean isSensorLandscapeResolution()>();

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsSensorLandscapeResolution> = $z0;

        goto label3;

     label3:
        $r24 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics>;

        $r23 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CAPABILITIES>;

        $r25 = virtualinvoke $r24.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r23);

        r28 = (int[]) $r25;

        if r28 == null goto label7;

        r5 = r28;

        i0 = lengthof r5;

        i3 = 0;

     label4:
        if i3 >= i0 goto label7;

        i1 = r5[i3];

        if i1 != 3 goto label5;

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsRawSupported> = 1;

        goto label6;

     label5:
        if i1 != 6 goto label6;

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsBurstCaptureSupported> = 1;

     label6:
        i3 = i3 + 1;

        goto label4;

     label7:
        specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: void generateSupportedCombinationList()>();

        specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: void generateSurfaceSizeDefinition()>();

        specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: void checkCustomization()>();

        return;
    }

    java.lang.String getCameraId()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        java.lang.String $r1;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        $r1 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String mCameraId>;

        return $r1;
    }

    boolean isRawSupported()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        $z0 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsRawSupported>;

        return $z0;
    }

    boolean isBurstCaptureSupported()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        $z0 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsBurstCaptureSupported>;

        return $z0;
    }

    boolean checkSupported(java.util.List)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        java.util.List r1, $r4;
        java.util.Iterator r2;
        androidx.camera.core.impl.SurfaceCombination r3;
        boolean $z0, z1;
        java.lang.Object $r5;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: java.util.List;

        z1 = 0;

        $r4 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.List mSurfaceCombinations>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.SurfaceCombination) $r5;

        z1 = virtualinvoke r3.<androidx.camera.core.impl.SurfaceCombination: boolean isSupported(java.util.List)>(r1);

        if z1 == 0 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        return z1;
    }

    androidx.camera.core.impl.SurfaceConfig transformSurfaceConfig(int, android.util.Size)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0;
        android.util.Size r1;
        androidx.camera.core.impl.SurfaceSizeDefinition $r2;
        androidx.camera.core.impl.SurfaceConfig $r3;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.Size;

        $r2 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceSizeDefinition mSurfaceSizeDefinition>;

        $r3 = staticinvoke <androidx.camera.core.impl.SurfaceConfig: androidx.camera.core.impl.SurfaceConfig transformSurfaceConfig(int,android.util.Size,androidx.camera.core.impl.SurfaceSizeDefinition)>(i0, r1, $r2);

        return $r3;
    }

    java.util.Map getSuggestedResolutions(java.util.List, java.util.List)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        java.util.List r1, r2, r4, r60, r64, r65;
        java.util.ArrayList r3, r5, $r7, $r8, $r22, r61;
        androidx.camera.core.impl.UseCaseConfig r6, $r39, r59, r72;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.IllegalArgumentException $r9, $r40;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r41, $r42, $r44, $r45, $r46, $r47, $r48;
        java.lang.String $r12, $r20, $r43, $r49;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.Object $r21, $r24, $r26, $r29, $r30, $r32, $r35, $r37, $r38, $r50, $r54;
        java.util.HashMap $r23, r66;
        java.lang.Integer $r25, $r31, r63;
        android.util.Size $r27, $r51, r70;
        androidx.camera.core.impl.SurfaceSizeDefinition $r33, $r52;
        androidx.camera.core.impl.SurfaceConfig $r34, $r36, $r53, $r55;
        java.util.Iterator r56, r58, r62, r67, r68, r71;
        androidx.camera.core.impl.AttachedSurfaceInfo r57, r69;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: void refreshPreviewSize()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

        r56 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r54 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (androidx.camera.core.impl.AttachedSurfaceInfo) $r54;

        $r55 = virtualinvoke r57.<androidx.camera.core.impl.AttachedSurfaceInfo: androidx.camera.core.impl.SurfaceConfig getSurfaceConfig()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r55);

        goto label01;

     label02:
        r58 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r50 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r59 = (androidx.camera.core.impl.UseCaseConfig) $r50;

        $i7 = interfaceinvoke r59.<androidx.camera.core.impl.UseCaseConfig: int getInputFormat()>();

        $r51 = new android.util.Size;

        specialinvoke $r51.<android.util.Size: void <init>(int,int)>(640, 480);

        $r52 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceSizeDefinition mSurfaceSizeDefinition>;

        $r53 = staticinvoke <androidx.camera.core.impl.SurfaceConfig: androidx.camera.core.impl.SurfaceConfig transformSurfaceConfig(int,android.util.Size,androidx.camera.core.impl.SurfaceSizeDefinition)>($i7, $r51, $r52);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r53);

        goto label03;

     label04:
        $z2 = virtualinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean checkSupported(java.util.List)>(r3);

        if $z2 != 0 goto label05;

        $r40 = new java.lang.IllegalArgumentException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No supported surface combination is found for camera device - Id : ");

        $r43 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String mCameraId>;

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  May be attempting to bind too many use cases. Existing surfaces: ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" New configs: ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r49);

        throw $r40;

     label05:
        r60 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.List getUseCasesPriorityOrder(java.util.List)>(r2);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r61 = $r8;

        r62 = interfaceinvoke r60.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r37 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (java.lang.Integer) $r37;

        $i6 = virtualinvoke r63.<java.lang.Integer: int intValue()>();

        $r38 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i6);

        $r39 = (androidx.camera.core.impl.UseCaseConfig) $r38;

        r64 = virtualinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.List getSupportedOutputSizes(androidx.camera.core.impl.UseCaseConfig)>($r39);

        interfaceinvoke r61.<java.util.List: boolean add(java.lang.Object)>(r64);

        goto label06;

     label07:
        r65 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.List getAllPossibleSizeArrangements(java.util.List)>(r61);

        r66 = null;

        r67 = interfaceinvoke r65.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke r67.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label16;

        $r21 = interfaceinvoke r67.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.List) $r21;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r5 = $r22;

        r68 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z5 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r35 = interfaceinvoke r68.<java.util.Iterator: java.lang.Object next()>();

        r69 = (androidx.camera.core.impl.AttachedSurfaceInfo) $r35;

        $r36 = virtualinvoke r69.<androidx.camera.core.impl.AttachedSurfaceInfo: androidx.camera.core.impl.SurfaceConfig getSurfaceConfig()>();

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r36);

        goto label09;

     label10:
        i8 = 0;

     label11:
        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        if i8 >= $i1 goto label12;

        $r29 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i8);

        r70 = (android.util.Size) $r29;

        $r30 = interfaceinvoke r60.<java.util.List: java.lang.Object get(int)>(i8);

        $r31 = (java.lang.Integer) $r30;

        $i4 = virtualinvoke $r31.<java.lang.Integer: int intValue()>();

        $r32 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i4);

        r6 = (androidx.camera.core.impl.UseCaseConfig) $r32;

        $i5 = interfaceinvoke r6.<androidx.camera.core.impl.UseCaseConfig: int getInputFormat()>();

        $r33 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceSizeDefinition mSurfaceSizeDefinition>;

        $r34 = staticinvoke <androidx.camera.core.impl.SurfaceConfig: androidx.camera.core.impl.SurfaceConfig transformSurfaceConfig(int,android.util.Size,androidx.camera.core.impl.SurfaceSizeDefinition)>($i5, r70, $r33);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r34);

        i8 = i8 + 1;

        goto label11;

     label12:
        $z6 = virtualinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean checkSupported(java.util.List)>(r5);

        if $z6 == 0 goto label15;

        $r23 = new java.util.HashMap;

        specialinvoke $r23.<java.util.HashMap: void <init>()>();

        r66 = $r23;

        r71 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z7 = interfaceinvoke r71.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label14;

        $r24 = interfaceinvoke r71.<java.util.Iterator: java.lang.Object next()>();

        r72 = (androidx.camera.core.impl.UseCaseConfig) $r24;

        $i2 = interfaceinvoke r2.<java.util.List: int indexOf(java.lang.Object)>(r72);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i3 = interfaceinvoke r60.<java.util.List: int indexOf(java.lang.Object)>($r25);

        $r26 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i3);

        $r27 = (android.util.Size) $r26;

        interfaceinvoke r66.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r72, $r27);

        goto label13;

     label14:
        goto label16;

     label15:
        goto label08;

     label16:
        if r66 != null goto label17;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No supported surface combination is found for camera device - Id : ");

        $r12 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String mCameraId>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and Hardware level: ");

        $i0 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: int mHardwareLevel>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". May be the specified resolution is too large and not supported. Existing surfaces: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" New configs: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r9;

     label17:
        return r66;
    }

    private android.util.Rational getTargetAspectRatio(androidx.camera.core.impl.ImageOutputConfig)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        androidx.camera.core.impl.ImageOutputConfig r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.util.Size r2, r3;
        androidx.camera.camera2.internal.compat.workaround.TargetAspectRatio $r4;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r5;
        java.lang.String $r6, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.util.Rational $r7, $r12, r13, $r14, $r15, $r16, $r17;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: androidx.camera.core.impl.ImageOutputConfig;

        r13 = null;

        $r4 = new androidx.camera.camera2.internal.compat.workaround.TargetAspectRatio;

        specialinvoke $r4.<androidx.camera.camera2.internal.compat.workaround.TargetAspectRatio: void <init>()>();

        $r6 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String mCameraId>;

        $r5 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics>;

        i0 = virtualinvoke $r4.<androidx.camera.camera2.internal.compat.workaround.TargetAspectRatio: int get(java.lang.String,androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)>($r6, $r5);

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label04;
            case 2: goto label07;
            case 3: goto label08;
            default: goto label18;
        };

     label01:
        $z4 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsSensorLandscapeResolution>;

        if $z4 == 0 goto label02;

        $r14 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_4_3>;

        goto label03;

     label02:
        $r14 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_3_4>;

     label03:
        r13 = $r14;

        goto label18;

     label04:
        $z3 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsSensorLandscapeResolution>;

        if $z3 == 0 goto label05;

        $r15 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_16_9>;

        goto label06;

     label05:
        $r15 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_9_16>;

     label06:
        r13 = $r15;

        goto label18;

     label07:
        r2 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size fetchMaxSize(int)>(256);

        $r12 = new android.util.Rational;

        $i4 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i5 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        specialinvoke $r12.<android.util.Rational: void <init>(int,int)>($i4, $i5);

        r13 = $r12;

        goto label18;

     label08:
        r3 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size getTargetSize(androidx.camera.core.impl.ImageOutputConfig)>(r1);

        $z0 = interfaceinvoke r1.<androidx.camera.core.impl.ImageOutputConfig: boolean hasTargetAspectRatio()>();

        if $z0 == 0 goto label17;

        i1 = interfaceinvoke r1.<androidx.camera.core.impl.ImageOutputConfig: int getTargetAspectRatio()>();

        lookupswitch(i1)
        {
            case 0: goto label09;
            case 1: goto label12;
            default: goto label15;
        };

     label09:
        $z2 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsSensorLandscapeResolution>;

        if $z2 == 0 goto label10;

        $r16 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_4_3>;

        goto label11;

     label10:
        $r16 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_3_4>;

     label11:
        r13 = $r16;

        goto label16;

     label12:
        $z1 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsSensorLandscapeResolution>;

        if $z1 == 0 goto label13;

        $r17 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_16_9>;

        goto label14;

     label13:
        $r17 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_9_16>;

     label14:
        r13 = $r17;

        goto label16;

     label15:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Undefined target aspect ratio: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("SupportedSurfaceCombination", $r11);

     label16:
        goto label18;

     label17:
        if r3 == null goto label18;

        $r7 = new android.util.Rational;

        $i2 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i3 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        specialinvoke $r7.<android.util.Rational: void <init>(int,int)>($i2, $i3);

        r13 = $r7;

        goto label18;

     label18:
        return r13;
    }

    private android.util.Size fetchMaxSize(int)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0;
        android.util.Size r1, r2;
        java.util.Map $r3, $r6;
        java.lang.Integer $r4, $r7;
        java.lang.Object $r5;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mMaxSizeCache>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r1 = (android.util.Size) $r5;

        if r1 == null goto label1;

        return r1;

     label1:
        r2 = virtualinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size getMaxOutputSizeByFormat(int)>(i0);

        $r6 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mMaxSizeCache>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r2);

        return r2;
    }

    private java.util.List getUseCasesPriorityOrder(java.util.List)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        java.util.List r1;
        java.util.ArrayList r2, r3, $r5, $r6;
        androidx.camera.core.impl.UseCaseConfig r4, r15;
        boolean $z0, $z1, $z2, $z4;
        java.lang.Object $r7, $r9, $r11;
        java.lang.Integer $r8, $r10, $r12, $r13;
        int $i0, $i1, i2, i3;
        java.util.Iterator r14, r16, r17;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: java.util.List;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        r14 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (androidx.camera.core.impl.UseCaseConfig) $r11;

        i2 = interfaceinvoke r15.<androidx.camera.core.impl.UseCaseConfig: int getSurfaceOccupancyPriority(int)>(0);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z4 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>($r12);

        if $z4 != 0 goto label2;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r13);

     label2:
        goto label1;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r3);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r3);

        r16 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r7 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        i3 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        r17 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r9 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.core.impl.UseCaseConfig) $r9;

        $i0 = interfaceinvoke r4.<androidx.camera.core.impl.UseCaseConfig: int getSurfaceOccupancyPriority(int)>(0);

        if i3 != $i0 goto label6;

        $i1 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>(r4);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10);

     label6:
        goto label5;

     label7:
        goto label4;

     label8:
        return r2;
    }

    java.util.List getSupportedOutputSizes(androidx.camera.core.impl.UseCaseConfig)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        androidx.camera.core.impl.UseCaseConfig r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i12;
        androidx.camera.core.impl.ImageOutputConfig r2;
        java.util.ArrayList r3, $r8, $r9, $r11, r38, r43;
        android.util.Size r4, r7, r28, r30, r31, $r32, r34, $r36, r37;
        android.util.Rational r5, r35, r42;
        java.util.Iterator r6, r41, r44;
        boolean $z0, $z1, $z2, $z4, $z6, $z8;
        java.util.HashMap $r10, r39;
        java.util.Set $r12, $r18;
        androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio $r13;
        java.lang.Object $r14, $r15, $r17, $r19, $r20;
        java.util.List $r16, $r21, r47;
        java.lang.IllegalArgumentException $r22;
        java.lang.StringBuilder $r23, $r24, $r25;
        java.lang.String $r26;
        android.util.Size[] r27, r33;
        androidx.camera.core.impl.utils.CompareSizesByArea $r29;
        java.util.Map r40;
        androidx.camera.camera2.internal.compat.workaround.ResolutionCorrector $r45;
        androidx.camera.core.impl.SurfaceConfig$ConfigType $r46;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: androidx.camera.core.impl.UseCaseConfig;

        i0 = interfaceinvoke r1.<androidx.camera.core.impl.UseCaseConfig: int getInputFormat()>();

        r2 = (androidx.camera.core.impl.ImageOutputConfig) r1;

        r27 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size[] getCustomizedSupportSizesFromConfig(int,androidx.camera.core.impl.ImageOutputConfig)>(i0, r2);

        if r27 != null goto label01;

        r27 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size[] getAllOutputSizesByFormat(int)>(i0);

     label01:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r3 = $r8;

        r28 = interfaceinvoke r2.<androidx.camera.core.impl.ImageOutputConfig: android.util.Size getMaxResolution(android.util.Size)>(null);

        r4 = virtualinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size getMaxOutputSizeByFormat(int)>(i0);

        if r28 == null goto label02;

        $i8 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>(r4);

        $i9 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>(r28);

        if $i8 >= $i9 goto label03;

     label02:
        r28 = r4;

     label03:
        $r29 = new androidx.camera.core.impl.utils.CompareSizesByArea;

        specialinvoke $r29.<androidx.camera.core.impl.utils.CompareSizesByArea: void <init>(boolean)>(1);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r27, $r29);

        r30 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size getTargetSize(androidx.camera.core.impl.ImageOutputConfig)>(r2);

        r31 = <androidx.camera.core.internal.utils.SizeUtil: android.util.Size RESOLUTION_VGA>;

        $r32 = <androidx.camera.core.internal.utils.SizeUtil: android.util.Size RESOLUTION_VGA>;

        i1 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>($r32);

        i2 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>(r28);

        if i2 >= i1 goto label04;

        r31 = <androidx.camera.core.internal.utils.SizeUtil: android.util.Size RESOLUTION_ZERO>;

        goto label05;

     label04:
        if r30 == null goto label05;

        $i7 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>(r30);

        if $i7 >= i1 goto label05;

        r31 = r30;

     label05:
        r33 = r27;

        i10 = lengthof r33;

        i11 = 0;

     label06:
        if i11 >= i10 goto label08;

        r34 = r33[i11];

        $i3 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>(r34);

        $i4 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>(r28);

        if $i3 > $i4 goto label07;

        $i5 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>(r34);

        $i6 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>(r31);

        if $i5 < $i6 goto label07;

        $z6 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>(r34);

        if $z6 != 0 goto label07;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r34);

     label07:
        i11 = i11 + 1;

        goto label06;

     label08:
        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label09;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not get supported output size under supported maximum for the format: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label09:
        r35 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Rational getTargetAspectRatio(androidx.camera.core.impl.ImageOutputConfig)>(r2);

        if r30 != null goto label10;

        $r36 = interfaceinvoke r2.<androidx.camera.core.impl.ImageOutputConfig: android.util.Size getDefaultResolution(android.util.Size)>(null);

        goto label11;

     label10:
        $r36 = r30;

     label11:
        r37 = $r36;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r38 = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r39 = $r10;

        if r35 != null goto label12;

        interfaceinvoke r38.<java.util.List: boolean addAll(java.util.Collection)>(r3);

        if r37 == null goto label19;

        specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: void removeSupportedSizesByTargetSize(java.util.List,android.util.Size)>(r38, r37);

        goto label19;

     label12:
        r40 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map groupSizesByAspectRatio(java.util.List)>(r3);

        if r37 == null goto label14;

        $r18 = interfaceinvoke r40.<java.util.Map: java.util.Set keySet()>();

        r41 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z4 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        $r19 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();

        r42 = (android.util.Rational) $r19;

        $r20 = interfaceinvoke r40.<java.util.Map: java.lang.Object get(java.lang.Object)>(r42);

        $r21 = (java.util.List) $r20;

        specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: void removeSupportedSizesByTargetSize(java.util.List,android.util.Size)>($r21, r37);

        goto label13;

     label14:
        $r11 = new java.util.ArrayList;

        $r12 = interfaceinvoke r40.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r12);

        r43 = $r11;

        $r13 = new androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio;

        specialinvoke $r13.<androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio: void <init>(android.util.Rational)>(r35);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r43, $r13);

        r44 = interfaceinvoke r43.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z8 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label19;

        $r14 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.util.Rational) $r14;

        $r15 = interfaceinvoke r40.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r16 = (java.util.List) $r15;

        r6 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label18;

        $r17 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.util.Size) $r17;

        $z2 = interfaceinvoke r38.<java.util.List: boolean contains(java.lang.Object)>(r7);

        if $z2 != 0 goto label17;

        interfaceinvoke r38.<java.util.List: boolean add(java.lang.Object)>(r7);

     label17:
        goto label16;

     label18:
        goto label15;

     label19:
        $r45 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.workaround.ResolutionCorrector mResolutionCorrector>;

        $i12 = interfaceinvoke r1.<androidx.camera.core.impl.UseCaseConfig: int getInputFormat()>();

        $r46 = staticinvoke <androidx.camera.core.impl.SurfaceConfig: androidx.camera.core.impl.SurfaceConfig$ConfigType getConfigType(int)>($i12);

        r47 = virtualinvoke $r45.<androidx.camera.camera2.internal.compat.workaround.ResolutionCorrector: java.util.List insertOrPrioritize(androidx.camera.core.impl.SurfaceConfig$ConfigType,java.util.List)>($r46, r38);

        return r47;
    }

    private android.util.Size getTargetSize(androidx.camera.core.impl.ImageOutputConfig)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        androidx.camera.core.impl.ImageOutputConfig r1;
        int i0;
        android.util.Size r2, r3;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: androidx.camera.core.impl.ImageOutputConfig;

        i0 = interfaceinvoke r1.<androidx.camera.core.impl.ImageOutputConfig: int getTargetRotation(int)>(0);

        r2 = interfaceinvoke r1.<androidx.camera.core.impl.ImageOutputConfig: android.util.Size getTargetResolution(android.util.Size)>(null);

        r3 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size flipSizeByRotation(android.util.Size,int)>(r2, i0);

        return r3;
    }

    private android.util.Size flipSizeByRotation(android.util.Size, int)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        android.util.Size r1, $r2, r3;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: android.util.Size;

        i0 := @parameter1: int;

        r3 = r1;

        if r1 == null goto label1;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean isRotationNeeded(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = new android.util.Size;

        $i1 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $i2 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        specialinvoke $r2.<android.util.Size: void <init>(int,int)>($i1, $i2);

        r3 = $r2;

     label1:
        return r3;
    }

    private boolean isRotationNeeded(int)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.Integer r1, r2;
        boolean z0, $z1, $z2;
        android.hardware.camera2.CameraCharacteristics$Key $r3, $r7;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r4, $r8;
        java.lang.Object $r5, $r9;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        i0 := @parameter0: int;

        $r4 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics>;

        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $r5 = virtualinvoke $r4.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r3);

        r1 = (java.lang.Integer) $r5;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Camera HAL in bad state, unable to retrieve the SENSOR_ORIENTATION");

        i1 = staticinvoke <androidx.camera.core.impl.utils.CameraOrientationUtil: int surfaceRotationToDegrees(int)>(i0);

        $r8 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics>;

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r9 = virtualinvoke $r8.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r7);

        r2 = (java.lang.Integer) $r9;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "Camera HAL in bad state, unable to retrieve the LENS_FACING");

        $i3 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if 1 != $i3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $i4 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        i2 = staticinvoke <androidx.camera.core.impl.utils.CameraOrientationUtil: int getRelativeImageRotation(int,int,boolean)>(i1, $i4, z0);

        if i2 == 90 goto label3;

        if i2 != 270 goto label4;

     label3:
        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    private boolean isSensorLandscapeResolution()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        android.util.Size r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r3;
        java.lang.Object $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        $r3 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PIXEL_ARRAY_SIZE>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (android.util.Size) $r4;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        if $i0 < $i1 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        return $z0;
    }

    private java.util.Map groupSizesByAspectRatio(java.util.List)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        java.util.List r1, r7;
        java.util.HashMap r2, $r8;
        java.util.Iterator r3, r5;
        android.util.Size r4;
        android.util.Rational r6, $r10, $r13, $r17, r23;
        java.util.ArrayList $r9, $r12, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r15, $r21, $r22;
        java.util.Set $r16, $r19;
        int $i0, $i1;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: java.util.List;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r2 = $r8;

        $r10 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_4_3>;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        $r13 = <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_16_9>;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r12);

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.util.Size) $r15;

        r23 = null;

        $r16 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        r5 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r21 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.util.Rational) $r21;

        $z2 = staticinvoke <androidx.camera.core.impl.utils.AspectRatioUtil: boolean hasMatchingAspectRatio(android.util.Size,android.util.Rational)>(r4, r6);

        if $z2 == 0 goto label3;

        r23 = r6;

        $r22 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r23);

        r7 = (java.util.List) $r22;

        $z3 = interfaceinvoke r7.<java.util.List: boolean contains(java.lang.Object)>(r4);

        if $z3 != 0 goto label3;

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        goto label2;

     label4:
        if r23 != null goto label5;

        $r17 = new android.util.Rational;

        $i0 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        specialinvoke $r17.<android.util.Rational: void <init>(int,int)>($i0, $i1);

        $r18 = new java.util.ArrayList;

        $r19 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r4);

        specialinvoke $r18.<java.util.ArrayList: void <init>(java.util.Collection)>($r19);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

     label5:
        goto label1;

     label6:
        return r2;
    }

    private void removeSupportedSizesByTargetSize(java.util.List, android.util.Size)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        java.util.List r1;
        android.util.Size r2, r4, $r8;
        java.util.ArrayList r3, $r5;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.Object $r6, $r7;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.util.Size;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        i5 = -1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r3 = $r5;

        i6 = 0;

     label3:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i6 >= $i0 goto label5;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i6);

        r4 = (android.util.Size) $r6;

        $i1 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        if $i1 < $i2 goto label5;

        $i3 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $i4 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        if $i3 < $i4 goto label5;

        if i5 < 0 goto label4;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r8 = (android.util.Size) $r7;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label4:
        i5 = i6;

        i6 = i6 + 1;

        goto label3;

     label5:
        interfaceinvoke r1.<java.util.List: boolean removeAll(java.util.Collection)>(r3);

        return;
    }

    private java.util.List getAllPossibleSizeArrangements(java.util.List)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        java.util.List r1, r2, r3, $r6, $r9, r17;
        boolean $z0;
        java.util.ArrayList $r4, $r13, r18, r19;
        java.lang.Object $r5, $r7, $r8, $r10, $r11, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14;
        android.util.Size $r12;
        java.lang.IllegalArgumentException $r14;
        java.util.Iterator r16;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: java.util.List;

        i9 = 1;

        r16 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r15 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.List) $r15;

        $i8 = interfaceinvoke r17.<java.util.List: int size()>();

        i9 = i9 * $i8;

        goto label01;

     label02:
        if i9 != 0 goto label03;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Failed to find supported resolutions.");

        throw $r14;

     label03:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r18 = $r4;

        i10 = 0;

     label04:
        if i10 >= i9 goto label05;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r19 = $r13;

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>(r19);

        i10 = i10 + 1;

        goto label04;

     label05:
        i11 = i9;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.util.List) $r5;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        i12 = i11 / $i0;

        i13 = 0;

     label06:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i13 >= $i1 goto label10;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i13);

        r2 = (java.util.List) $r7;

        i14 = 0;

     label07:
        if i14 >= i9 goto label08;

        $r10 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(i14);

        r3 = (java.util.List) $r10;

        $i6 = i14 % i11;

        $i7 = $i6 / i12;

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i7);

        $r12 = (android.util.Size) $r11;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r12);

        i14 = i14 + 1;

        goto label07;

     label08:
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        if i13 >= $i3 goto label09;

        i11 = i12;

        $i4 = i13 + 1;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i4);

        $r9 = (java.util.List) $r8;

        $i5 = interfaceinvoke $r9.<java.util.List: int size()>();

        i12 = i11 / $i5;

     label09:
        i13 = i13 + 1;

        goto label06;

     label10:
        return r18;
    }

    private android.util.Size[] excludeProblematicSizes(android.util.Size[], int)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        android.util.Size[] r1, $r6, $r8;
        int i0;
        java.util.List r2, $r5;
        java.util.ArrayList r3, $r4;
        java.lang.Object[] $r7;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        r1 := @parameter0: android.util.Size[];

        i0 := @parameter1: int;

        r2 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.List fetchExcludedSizes(int)>(i0);

        $r4 = new java.util.ArrayList;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        r3 = $r4;

        interfaceinvoke r3.<java.util.List: boolean removeAll(java.util.Collection)>(r2);

        $r6 = newarray (android.util.Size)[0];

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (android.util.Size[]) $r7;

        return $r8;
    }

    private android.util.Size[] getCustomizedSupportSizesFromConfig(int, androidx.camera.core.impl.ImageOutputConfig)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0, $i1;
        androidx.camera.core.impl.ImageOutputConfig r1;
        java.util.List r2;
        java.util.Iterator r3;
        android.util.Pair r4;
        androidx.camera.core.impl.utils.CompareSizesByArea $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r9;
        java.lang.Integer $r8;
        android.util.Size[] r10;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.camera.core.impl.ImageOutputConfig;

        r10 = null;

        r2 = interfaceinvoke r1.<androidx.camera.core.impl.ImageOutputConfig: java.util.List getSupportedResolutions(java.util.List)>(null);

        if r2 == null goto label3;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.util.Pair) $r6;

        $r7 = r4.<android.util.Pair: java.lang.Object first>;

        $r8 = (java.lang.Integer) $r7;

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i1 != i0 goto label2;

        $r9 = r4.<android.util.Pair: java.lang.Object second>;

        r10 = (android.util.Size[]) $r9;

        goto label3;

     label2:
        goto label1;

     label3:
        if r10 == null goto label4;

        r10 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size[] excludeProblematicSizes(android.util.Size[],int)>(r10, i0);

        $r5 = new androidx.camera.core.impl.utils.CompareSizesByArea;

        specialinvoke $r5.<androidx.camera.core.impl.utils.CompareSizesByArea: void <init>(boolean)>(1);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r10, $r5);

     label4:
        return r10;
    }

    private android.util.Size[] getAllOutputSizesByFormat(int)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0;
        java.util.Map $r1, $r4;
        java.lang.Integer $r2, $r5;
        java.lang.Object $r3;
        android.util.Size[] r7;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mOutputSizesCache>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r7 = (android.util.Size[]) $r3;

        if r7 != null goto label1;

        r7 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size[] doGetAllOutputSizesByFormat(int)>(i0);

        $r4 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mOutputSizesCache>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r7);

     label1:
        return r7;
    }

    private android.util.Size[] doGetAllOutputSizesByFormat(int)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0, $i1;
        android.hardware.camera2.params.StreamConfigurationMap r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r3;
        java.lang.Object $r4;
        androidx.camera.core.impl.utils.CompareSizesByArea $r5;
        java.lang.IllegalArgumentException $r6, $r11;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        android.util.Size[] r12, r13;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (android.hardware.camera2.params.StreamConfigurationMap) $r4;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not retrieve SCALER_STREAM_CONFIGURATION_MAP");

        throw $r11;

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 >= 23 goto label2;

        if i0 != 34 goto label2;

        r12 = virtualinvoke r1.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>(class "Landroid/graphics/SurfaceTexture;");

        goto label3;

     label2:
        r12 = virtualinvoke r1.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(i0);

     label3:
        if r12 != null goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not get supported output size for the format: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        r13 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size[] excludeProblematicSizes(android.util.Size[],int)>(r12, i0);

        $r5 = new androidx.camera.core.impl.utils.CompareSizesByArea;

        specialinvoke $r5.<androidx.camera.core.impl.utils.CompareSizesByArea: void <init>(boolean)>(1);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r13, $r5);

        return r13;
    }

    android.util.Size getMaxOutputSizeByFormat(int)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0;
        android.util.Size[] r1;
        java.util.List $r2;
        androidx.camera.core.impl.utils.CompareSizesByArea $r3;
        java.lang.Object $r4;
        android.util.Size $r5;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size[] getAllOutputSizesByFormat(int)>(i0);

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = new androidx.camera.core.impl.utils.CompareSizesByArea;

        specialinvoke $r3.<androidx.camera.core.impl.utils.CompareSizesByArea: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>($r2, $r3);

        $r5 = (android.util.Size) $r4;

        return $r5;
    }

    private void generateSupportedCombinationList()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        boolean $z0, $z1;
        int $i0, $i1;
        java.util.List $r1, $r2, $r5, $r6;
        java.lang.String $r3;
        androidx.camera.camera2.internal.compat.workaround.ExtraSupportedSurfaceCombinationsContainer $r4;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        $r1 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.List mSurfaceCombinations>;

        $i0 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: int mHardwareLevel>;

        $z1 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsRawSupported>;

        $z0 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: boolean mIsBurstCaptureSupported>;

        $r2 = staticinvoke <androidx.camera.camera2.internal.GuaranteedConfigurationsUtil: java.util.List generateSupportedCombinationList(int,boolean,boolean)>($i0, $z1, $z0);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r5 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.List mSurfaceCombinations>;

        $r4 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.workaround.ExtraSupportedSurfaceCombinationsContainer mExtraSupportedSurfaceCombinationsContainer>;

        $r3 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String mCameraId>;

        $i1 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: int mHardwareLevel>;

        $r6 = virtualinvoke $r4.<androidx.camera.camera2.internal.compat.workaround.ExtraSupportedSurfaceCombinationsContainer: java.util.List get(java.lang.String,int)>($r3, $i1);

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        return;
    }

    private void checkCustomization()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        return;
    }

    private void generateSurfaceSizeDefinition()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        android.util.Size r1, r2, r3, $r4;
        androidx.camera.camera2.internal.DisplayInfoManager $r5;
        androidx.camera.core.impl.SurfaceSizeDefinition $r6;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        $r4 = new android.util.Size;

        specialinvoke $r4.<android.util.Size: void <init>(int,int)>(640, 480);

        r1 = $r4;

        $r5 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.DisplayInfoManager mDisplayInfoManager>;

        r2 = virtualinvoke $r5.<androidx.camera.camera2.internal.DisplayInfoManager: android.util.Size getPreviewSize()>();

        r3 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size getRecordSize()>();

        $r6 = staticinvoke <androidx.camera.core.impl.SurfaceSizeDefinition: androidx.camera.core.impl.SurfaceSizeDefinition create(android.util.Size,android.util.Size,android.util.Size)>(r1, r2, r3);

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceSizeDefinition mSurfaceSizeDefinition> = $r6;

        return;
    }

    private void refreshPreviewSize()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        android.util.Size r1, $r6, $r8;
        androidx.camera.camera2.internal.DisplayInfoManager $r2, $r4;
        androidx.camera.core.impl.SurfaceSizeDefinition $r3, $r5, $r7, $r9;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        $r2 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.DisplayInfoManager mDisplayInfoManager>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.DisplayInfoManager: void refresh()>();

        $r3 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceSizeDefinition mSurfaceSizeDefinition>;

        if $r3 != null goto label1;

        specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: void generateSurfaceSizeDefinition()>();

        goto label2;

     label1:
        $r4 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.DisplayInfoManager mDisplayInfoManager>;

        r1 = virtualinvoke $r4.<androidx.camera.camera2.internal.DisplayInfoManager: android.util.Size getPreviewSize()>();

        $r5 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceSizeDefinition mSurfaceSizeDefinition>;

        $r6 = virtualinvoke $r5.<androidx.camera.core.impl.SurfaceSizeDefinition: android.util.Size getAnalysisSize()>();

        $r7 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceSizeDefinition mSurfaceSizeDefinition>;

        $r8 = virtualinvoke $r7.<androidx.camera.core.impl.SurfaceSizeDefinition: android.util.Size getRecordSize()>();

        $r9 = staticinvoke <androidx.camera.core.impl.SurfaceSizeDefinition: androidx.camera.core.impl.SurfaceSizeDefinition create(android.util.Size,android.util.Size,android.util.Size)>($r6, r1, $r8);

        r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.core.impl.SurfaceSizeDefinition mSurfaceSizeDefinition> = $r9;

     label2:
        return;
    }

    private android.util.Size getRecordSize()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0, $i1, $i2;
        java.lang.String $r1;
        androidx.camera.camera2.internal.CamcorderProfileHelper $r2, $r5;
        boolean $z0;
        android.util.Size $r3, $r4, $r7;
        java.lang.Throwable $r6, r8;
        android.media.CamcorderProfile r9;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

     label1:
        $r1 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.lang.String mCameraId>;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size getRecordSizeFromStreamConfigurationMap()>();

        return $r7;

     label4:
        r9 = null;

        $r2 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        $z0 = interfaceinvoke $r2.<androidx.camera.camera2.internal.CamcorderProfileHelper: boolean hasProfile(int,int)>(i0, 1);

        if $z0 == 0 goto label5;

        $r5 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        r9 = interfaceinvoke $r5.<androidx.camera.camera2.internal.CamcorderProfileHelper: android.media.CamcorderProfile get(int,int)>(i0, 1);

     label5:
        if r9 == null goto label6;

        $r4 = new android.util.Size;

        $i2 = r9.<android.media.CamcorderProfile: int videoFrameWidth>;

        $i1 = r9.<android.media.CamcorderProfile: int videoFrameHeight>;

        specialinvoke $r4.<android.util.Size: void <init>(int,int)>($i2, $i1);

        return $r4;

     label6:
        $r3 = specialinvoke r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: android.util.Size getRecordSizeByHasProfile(int)>(i0);

        return $r3;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private android.util.Size getRecordSizeFromStreamConfigurationMap()
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        android.hardware.camera2.params.StreamConfigurationMap r1;
        android.util.Size[] r2, r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        android.util.Size r4, $r9, $r10, $r11, $r12;
        android.hardware.camera2.CameraCharacteristics$Key $r5;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r6;
        java.lang.Object $r7;
        androidx.camera.core.impl.utils.CompareSizesByArea $r8;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        $r6 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCharacteristics>;

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r7 = virtualinvoke $r6.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r5);

        r1 = (android.hardware.camera2.params.StreamConfigurationMap) $r7;

        if r1 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not retrieve SCALER_STREAM_CONFIGURATION_MAP");

        throw $r13;

     label1:
        r2 = virtualinvoke r1.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>(class "Landroid/media/MediaRecorder;");

        if r2 != null goto label2;

        $r12 = <androidx.camera.core.internal.utils.SizeUtil: android.util.Size RESOLUTION_480P>;

        return $r12;

     label2:
        $r8 = new androidx.camera.core.impl.utils.CompareSizesByArea;

        specialinvoke $r8.<androidx.camera.core.impl.utils.CompareSizesByArea: void <init>(boolean)>(1);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, $r8);

        r3 = r2;

        i0 = lengthof r3;

        i5 = 0;

     label3:
        if i5 >= i0 goto label5;

        r4 = r3[i5];

        $i1 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $r10 = <androidx.camera.core.internal.utils.SizeUtil: android.util.Size RESOLUTION_1080P>;

        $i2 = virtualinvoke $r10.<android.util.Size: int getWidth()>();

        if $i1 > $i2 goto label4;

        $i3 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $r11 = <androidx.camera.core.internal.utils.SizeUtil: android.util.Size RESOLUTION_1080P>;

        $i4 = virtualinvoke $r11.<android.util.Size: int getHeight()>();

        if $i3 > $i4 goto label4;

        return r4;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r9 = <androidx.camera.core.internal.utils.SizeUtil: android.util.Size RESOLUTION_480P>;

        return $r9;
    }

    private android.util.Size getRecordSizeByHasProfile(int)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0, $i1, $i2;
        androidx.camera.camera2.internal.CamcorderProfileHelper $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.util.Size $r7, r14;
        android.media.CamcorderProfile r15;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        i0 := @parameter0: int;

        r14 = <androidx.camera.core.internal.utils.SizeUtil: android.util.Size RESOLUTION_480P>;

        r15 = null;

        $r1 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        $z0 = interfaceinvoke $r1.<androidx.camera.camera2.internal.CamcorderProfileHelper: boolean hasProfile(int,int)>(i0, 10);

        if $z0 == 0 goto label1;

        $r13 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        r15 = interfaceinvoke $r13.<androidx.camera.camera2.internal.CamcorderProfileHelper: android.media.CamcorderProfile get(int,int)>(i0, 10);

        goto label6;

     label1:
        $r2 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        $z1 = interfaceinvoke $r2.<androidx.camera.camera2.internal.CamcorderProfileHelper: boolean hasProfile(int,int)>(i0, 8);

        if $z1 == 0 goto label2;

        $r12 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        r15 = interfaceinvoke $r12.<androidx.camera.camera2.internal.CamcorderProfileHelper: android.media.CamcorderProfile get(int,int)>(i0, 8);

        goto label6;

     label2:
        $r3 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        $z2 = interfaceinvoke $r3.<androidx.camera.camera2.internal.CamcorderProfileHelper: boolean hasProfile(int,int)>(i0, 12);

        if $z2 == 0 goto label3;

        $r11 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        r15 = interfaceinvoke $r11.<androidx.camera.camera2.internal.CamcorderProfileHelper: android.media.CamcorderProfile get(int,int)>(i0, 12);

        goto label6;

     label3:
        $r4 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        $z3 = interfaceinvoke $r4.<androidx.camera.camera2.internal.CamcorderProfileHelper: boolean hasProfile(int,int)>(i0, 6);

        if $z3 == 0 goto label4;

        $r10 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        r15 = interfaceinvoke $r10.<androidx.camera.camera2.internal.CamcorderProfileHelper: android.media.CamcorderProfile get(int,int)>(i0, 6);

        goto label6;

     label4:
        $r5 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        $z4 = interfaceinvoke $r5.<androidx.camera.camera2.internal.CamcorderProfileHelper: boolean hasProfile(int,int)>(i0, 5);

        if $z4 == 0 goto label5;

        $r9 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        r15 = interfaceinvoke $r9.<androidx.camera.camera2.internal.CamcorderProfileHelper: android.media.CamcorderProfile get(int,int)>(i0, 5);

        goto label6;

     label5:
        $r6 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        $z5 = interfaceinvoke $r6.<androidx.camera.camera2.internal.CamcorderProfileHelper: boolean hasProfile(int,int)>(i0, 4);

        if $z5 == 0 goto label6;

        $r8 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.CamcorderProfileHelper mCamcorderProfileHelper>;

        r15 = interfaceinvoke $r8.<androidx.camera.camera2.internal.CamcorderProfileHelper: android.media.CamcorderProfile get(int,int)>(i0, 4);

     label6:
        if r15 == null goto label7;

        $r7 = new android.util.Size;

        $i2 = r15.<android.media.CamcorderProfile: int videoFrameWidth>;

        $i1 = r15.<android.media.CamcorderProfile: int videoFrameHeight>;

        specialinvoke $r7.<android.util.Size: void <init>(int,int)>($i2, $i1);

        r14 = $r7;

     label7:
        return r14;
    }

    private java.util.List fetchExcludedSizes(int)
    {
        androidx.camera.camera2.internal.SupportedSurfaceCombination r0;
        int i0;
        java.util.Map $r1, $r5;
        java.lang.Integer $r2, $r6;
        java.lang.Object $r3;
        androidx.camera.camera2.internal.compat.workaround.ExcludedSupportedSizesContainer $r4;
        java.util.List r8;

        r0 := @this: androidx.camera.camera2.internal.SupportedSurfaceCombination;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mExcludedSizeListCache>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r8 = (java.util.List) $r3;

        if r8 != null goto label1;

        $r4 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: androidx.camera.camera2.internal.compat.workaround.ExcludedSupportedSizesContainer mExcludedSupportedSizesContainer>;

        r8 = virtualinvoke $r4.<androidx.camera.camera2.internal.compat.workaround.ExcludedSupportedSizesContainer: java.util.List get(int)>(i0);

        $r5 = r0.<androidx.camera.camera2.internal.SupportedSurfaceCombination: java.util.Map mExcludedSizeListCache>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r8);

     label1:
        return r8;
    }

