androidx.work.multiprocess.parcelable.ParcelableWorkInfo
<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: java.lang.String[] sEMPTY>
<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo>
<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: android.os.Parcelable$Creator CREATOR>
    public void <init>(androidx.work.WorkInfo)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo r0;
        androidx.work.WorkInfo r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo;

        r1 := @parameter0: androidx.work.WorkInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo> = r1;

        return;
    }

    protected void <init>(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo r0;
        android.os.Parcel r1;
        java.util.UUID r2;
        androidx.work.WorkInfo$State r3;
        androidx.work.multiprocess.parcelable.ParcelableData r4, r8, $r11, $r12;
        androidx.work.Data r5, r9;
        java.lang.String[] r6;
        java.util.List r7;
        int i0, i1, $i2;
        java.lang.String $r10;
        androidx.work.WorkInfo $r13;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r10 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r2 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>($r10);

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r3 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i2);

        $r11 = new androidx.work.multiprocess.parcelable.ParcelableData;

        specialinvoke $r11.<androidx.work.multiprocess.parcelable.ParcelableData: void <init>(android.os.Parcel)>(r1);

        r4 = $r11;

        r5 = virtualinvoke r4.<androidx.work.multiprocess.parcelable.ParcelableData: androidx.work.Data getData()>();

        r6 = virtualinvoke r1.<android.os.Parcel: java.lang.String[] createStringArray()>();

        r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r6);

        $r12 = new androidx.work.multiprocess.parcelable.ParcelableData;

        specialinvoke $r12.<androidx.work.multiprocess.parcelable.ParcelableData: void <init>(android.os.Parcel)>(r1);

        r8 = $r12;

        r9 = virtualinvoke r8.<androidx.work.multiprocess.parcelable.ParcelableData: androidx.work.Data getData()>();

        i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r13 = new androidx.work.WorkInfo;

        specialinvoke $r13.<androidx.work.WorkInfo: void <init>(java.util.UUID,androidx.work.WorkInfo$State,androidx.work.Data,java.util.List,androidx.work.Data,int,int)>(r2, r3, r5, r7, r9, i0, i1);

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo> = $r13;

        return;
    }

    public androidx.work.WorkInfo getWorkInfo()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo r0;
        androidx.work.WorkInfo $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo>;

        return $r1;
    }

    public int describeContents()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3;
        androidx.work.multiprocess.parcelable.ParcelableData r2, r4, $r10, $r19;
        java.util.ArrayList r3, $r13;
        androidx.work.WorkInfo $r5, $r8, $r11, $r14, $r20, $r22, $r23;
        java.util.UUID $r6;
        java.lang.String $r7;
        androidx.work.WorkInfo$State $r9;
        androidx.work.Data $r12, $r21;
        java.util.Set $r15;
        java.lang.String[] $r16, $r18;
        java.lang.Object[] $r17;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r5 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo>;

        $r6 = virtualinvoke $r5.<androidx.work.WorkInfo: java.util.UUID getId()>();

        $r7 = virtualinvoke $r6.<java.util.UUID: java.lang.String toString()>();

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r7);

        $r8 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo>;

        $r9 = virtualinvoke $r8.<androidx.work.WorkInfo: androidx.work.WorkInfo$State getState()>();

        $i1 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: int stateToInt(androidx.work.WorkInfo$State)>($r9);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r10 = new androidx.work.multiprocess.parcelable.ParcelableData;

        $r11 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo>;

        $r12 = virtualinvoke $r11.<androidx.work.WorkInfo: androidx.work.Data getOutputData()>();

        specialinvoke $r10.<androidx.work.multiprocess.parcelable.ParcelableData: void <init>(androidx.work.Data)>($r12);

        r2 = $r10;

        virtualinvoke r2.<androidx.work.multiprocess.parcelable.ParcelableData: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        $r13 = new java.util.ArrayList;

        $r14 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo>;

        $r15 = virtualinvoke $r14.<androidx.work.WorkInfo: java.util.Set getTags()>();

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>($r15);

        r3 = $r13;

        $r16 = <androidx.work.multiprocess.parcelable.ParcelableWorkInfo: java.lang.String[] sEMPTY>;

        $r17 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r18 = (java.lang.String[]) $r17;

        virtualinvoke r1.<android.os.Parcel: void writeStringArray(java.lang.String[])>($r18);

        $r19 = new androidx.work.multiprocess.parcelable.ParcelableData;

        $r20 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo>;

        $r21 = virtualinvoke $r20.<androidx.work.WorkInfo: androidx.work.Data getProgress()>();

        specialinvoke $r19.<androidx.work.multiprocess.parcelable.ParcelableData: void <init>(androidx.work.Data)>($r21);

        r4 = $r19;

        virtualinvoke r4.<androidx.work.multiprocess.parcelable.ParcelableData: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        $r22 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo>;

        $i2 = virtualinvoke $r22.<androidx.work.WorkInfo: int getRunAttemptCount()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $r23 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: androidx.work.WorkInfo mWorkInfo>;

        $i3 = virtualinvoke $r23.<androidx.work.WorkInfo: int getGeneration()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1 $r1;

        $r0 = newarray (java.lang.String)[0];

        <androidx.work.multiprocess.parcelable.ParcelableWorkInfo: java.lang.String[] sEMPTY> = $r0;

        $r1 = new androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1;

        specialinvoke $r1.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1: void <init>()>();

        <androidx.work.multiprocess.parcelable.ParcelableWorkInfo: android.os.Parcelable$Creator CREATOR> = $r1;

        return;
    }

androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1
    void <init>()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1 r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.work.multiprocess.parcelable.ParcelableWorkInfo createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = new androidx.work.multiprocess.parcelable.ParcelableWorkInfo;

        specialinvoke $r2.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo: void <init>(android.os.Parcel)>(r1);

        return $r2;
    }

    public androidx.work.multiprocess.parcelable.ParcelableWorkInfo[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.work.multiprocess.parcelable.ParcelableWorkInfo)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1: androidx.work.multiprocess.parcelable.ParcelableWorkInfo[] newArray(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableWorkInfo $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableWorkInfo$1: androidx.work.multiprocess.parcelable.ParcelableWorkInfo createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

