io.grpc.okhttp.OkHttpChannelBuilder
<io.grpc.okhttp.OkHttpChannelBuilder: long AS_LARGE_AS_INFINITE>
<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool DEFAULT_TRANSPORT_EXECUTOR_POOL>
<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.internal.ConnectionSpec INTERNAL_DEFAULT_CONNECTION_SPEC>
<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.SharedResourceHolder$Resource SHARED_EXECUTOR>
<io.grpc.okhttp.OkHttpChannelBuilder: java.util.logging.Logger log>
<io.grpc.okhttp.OkHttpChannelBuilder: java.util.EnumSet understoodTlsFeatures>
<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.internal.ConnectionSpec connectionSpec>
<io.grpc.okhttp.OkHttpChannelBuilder: int flowControlWindow>
<io.grpc.okhttp.OkHttpChannelBuilder: boolean freezeSecurityConfiguration>
<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.HostnameVerifier hostnameVerifier>
<io.grpc.okhttp.OkHttpChannelBuilder: long keepAliveTimeNanos>
<io.grpc.okhttp.OkHttpChannelBuilder: long keepAliveTimeoutNanos>
<io.grpc.okhttp.OkHttpChannelBuilder: boolean keepAliveWithoutCalls>
<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ManagedChannelImplBuilder managedChannelImplBuilder>
<io.grpc.okhttp.OkHttpChannelBuilder: int maxInboundMetadataSize>
<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType negotiationType>
<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool scheduledExecutorServicePool>
<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.SocketFactory socketFactory>
<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory sslSocketFactory>
<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool transportExecutorPool>
<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.TransportTracer$Factory transportTracerFactory>
<io.grpc.okhttp.OkHttpChannelBuilder: boolean useGetForSafeMethods>
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r3;
        io.grpc.okhttp.internal.ConnectionSpec $r4;
        io.grpc.okhttp.internal.CipherSuite[] $r5;
        io.grpc.okhttp.internal.CipherSuite $r6;
        io.grpc.okhttp.internal.TlsVersion[] $r7;
        io.grpc.okhttp.internal.TlsVersion $r8;
        java.util.concurrent.TimeUnit $r9;
        long $l0;
        io.grpc.okhttp.OkHttpChannelBuilder$1 $r10;
        io.grpc.internal.SharedResourcePool $r11;
        io.grpc.TlsChannelCredentials$Feature $r12, $r13;
        java.util.EnumSet $r14;

        $r0 = class "Lio/grpc/okhttp/OkHttpChannelBuilder;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <io.grpc.okhttp.OkHttpChannelBuilder: java.util.logging.Logger log> = $r2;

        $r3 = new io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $r4 = <io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.ConnectionSpec MODERN_TLS>;

        specialinvoke $r3.<io.grpc.okhttp.internal.ConnectionSpec$Builder: void <init>(io.grpc.okhttp.internal.ConnectionSpec)>($r4);

        $r5 = newarray (io.grpc.okhttp.internal.CipherSuite)[6];

        $r6 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256>;

        $r5[0] = $r6;

        $r6 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256>;

        $r5[1] = $r6;

        $r6 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384>;

        $r5[2] = $r6;

        $r6 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384>;

        $r5[3] = $r6;

        $r6 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256>;

        $r5[4] = $r6;

        $r6 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256>;

        $r5[5] = $r6;

        $r3 = virtualinvoke $r3.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder cipherSuites(io.grpc.okhttp.internal.CipherSuite[])>($r5);

        $r7 = newarray (io.grpc.okhttp.internal.TlsVersion)[1];

        $r8 = <io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion TLS_1_2>;

        $r7[0] = $r8;

        $r3 = virtualinvoke $r3.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder tlsVersions(io.grpc.okhttp.internal.TlsVersion[])>($r7);

        $r3 = virtualinvoke $r3.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1);

        $r4 = virtualinvoke $r3.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec build()>();

        <io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.internal.ConnectionSpec INTERNAL_DEFAULT_CONNECTION_SPEC> = $r4;

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $l0 = virtualinvoke $r9.<java.util.concurrent.TimeUnit: long toNanos(long)>(1000L);

        <io.grpc.okhttp.OkHttpChannelBuilder: long AS_LARGE_AS_INFINITE> = $l0;

        $r10 = new io.grpc.okhttp.OkHttpChannelBuilder$1;

        specialinvoke $r10.<io.grpc.okhttp.OkHttpChannelBuilder$1: void <init>()>();

        <io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.SharedResourceHolder$Resource SHARED_EXECUTOR> = $r10;

        $r11 = staticinvoke <io.grpc.internal.SharedResourcePool: io.grpc.internal.SharedResourcePool forResource(io.grpc.internal.SharedResourceHolder$Resource)>($r10);

        <io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool DEFAULT_TRANSPORT_EXECUTOR_POOL> = $r11;

        $r12 = <io.grpc.TlsChannelCredentials$Feature: io.grpc.TlsChannelCredentials$Feature MTLS>;

        $r13 = <io.grpc.TlsChannelCredentials$Feature: io.grpc.TlsChannelCredentials$Feature CUSTOM_MANAGERS>;

        $r14 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r12, $r13);

        <io.grpc.okhttp.OkHttpChannelBuilder: java.util.EnumSet understoodTlsFeatures> = $r14;

        return;
    }

    private void <init>(java.lang.String)
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        java.lang.String $r1;
        io.grpc.internal.ManagedChannelImplBuilder $r2;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder $r3;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider $r4;
        io.grpc.internal.TransportTracer$Factory $r5;
        io.grpc.internal.ObjectPool $r6;
        io.grpc.internal.SharedResourceHolder$Resource $r7;
        io.grpc.internal.SharedResourcePool $r8;
        io.grpc.okhttp.internal.ConnectionSpec $r9;
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType $r10;
        long $l0;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<io.grpc.internal.AbstractManagedChannelImplBuilder: void <init>()>();

        $r5 = staticinvoke <io.grpc.internal.TransportTracer: io.grpc.internal.TransportTracer$Factory getDefaultFactory()>();

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.TransportTracer$Factory transportTracerFactory> = $r5;

        $r6 = <io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool DEFAULT_TRANSPORT_EXECUTOR_POOL>;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool transportExecutorPool> = $r6;

        $r7 = <io.grpc.internal.GrpcUtil: io.grpc.internal.SharedResourceHolder$Resource TIMER_SERVICE>;

        $r8 = staticinvoke <io.grpc.internal.SharedResourcePool: io.grpc.internal.SharedResourcePool forResource(io.grpc.internal.SharedResourceHolder$Resource)>($r7);

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool scheduledExecutorServicePool> = $r8;

        $r9 = <io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.internal.ConnectionSpec INTERNAL_DEFAULT_CONNECTION_SPEC>;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.internal.ConnectionSpec connectionSpec> = $r9;

        $r10 = <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType TLS>;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType negotiationType> = $r10;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: long keepAliveTimeNanos> = 9223372036854775807L;

        $l0 = <io.grpc.internal.GrpcUtil: long DEFAULT_KEEPALIVE_TIMEOUT_NANOS>;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: long keepAliveTimeoutNanos> = $l0;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: int flowControlWindow> = 65535;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: int maxInboundMetadataSize> = 2147483647;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: boolean useGetForSafeMethods> = 0;

        $r2 = new io.grpc.internal.ManagedChannelImplBuilder;

        $r3 = new io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder;

        specialinvoke $r3.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder: void <init>(io.grpc.okhttp.OkHttpChannelBuilder,io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder-IA)>($r0, null);

        $r4 = new io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider;

        specialinvoke $r4.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider: void <init>(io.grpc.okhttp.OkHttpChannelBuilder,io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider-IA)>($r0, null);

        specialinvoke $r2.<io.grpc.internal.ManagedChannelImplBuilder: void <init>(java.lang.String,io.grpc.internal.ManagedChannelImplBuilder$ClientTransportFactoryBuilder,io.grpc.internal.ManagedChannelImplBuilder$ChannelBuilderDefaultPortProvider)>($r1, $r3, $r4);

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ManagedChannelImplBuilder managedChannelImplBuilder> = $r2;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: boolean freezeSecurityConfiguration> = 0;

        return;
    }

    public static io.grpc.okhttp.OkHttpChannelBuilder forTarget(java.lang.String)
    {
        java.lang.String $r0;
        io.grpc.okhttp.OkHttpChannelBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new io.grpc.okhttp.OkHttpChannelBuilder;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpChannelBuilder: void <init>(java.lang.String)>($r0);

        return $r1;
    }

    io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory buildTransportFactory()
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        io.grpc.internal.ObjectPool $r1, $r6;
        javax.net.ssl.HostnameVerifier $r2;
        io.grpc.okhttp.internal.ConnectionSpec $r3;
        int $i0, $i3, $i5;
        long $l1, $l2;
        javax.net.ssl.SSLSocketFactory $r4;
        byte $b4;
        boolean $z0, $z1;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r5;
        javax.net.SocketFactory $r7;
        io.grpc.internal.TransportTracer$Factory $r8;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $l1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: long keepAliveTimeNanos>;

        $b4 = $l1 cmp 9223372036854775807L;

        if $b4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r5 = new io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory;

        $r6 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool transportExecutorPool>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool scheduledExecutorServicePool>;

        $r7 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.SocketFactory socketFactory>;

        $r4 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory createSslSocketFactory()>();

        $r2 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        $r3 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.internal.ConnectionSpec connectionSpec>;

        $i0 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: int maxInboundMessageSize>;

        $l1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: long keepAliveTimeNanos>;

        $l2 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: long keepAliveTimeoutNanos>;

        $i3 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: int flowControlWindow>;

        $z1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: boolean keepAliveWithoutCalls>;

        $i5 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: int maxInboundMetadataSize>;

        $r8 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.TransportTracer$Factory transportTracerFactory>;

        specialinvoke $r5.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: void <init>(io.grpc.internal.ObjectPool,io.grpc.internal.ObjectPool,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,io.grpc.okhttp.internal.ConnectionSpec,int,boolean,long,long,int,boolean,int,io.grpc.internal.TransportTracer$Factory,boolean,io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory-IA)>($r6, $r1, $r7, $r4, $r2, $r3, $i0, $z0, $l1, $l2, $i3, $z1, $i5, $r8, 0, null);

        return $r5;
    }

    javax.net.ssl.SSLSocketFactory createSslSocketFactory()
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        int[] $r1;
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.StringBuilder $r4, r10;
        javax.net.ssl.SSLSocketFactory $r5;
        io.grpc.okhttp.internal.Platform $r6;
        java.security.Provider $r7;
        javax.net.ssl.SSLContext $r8;
        java.lang.Throwable $r9;
        java.lang.RuntimeException r11;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $r1 = <io.grpc.okhttp.OkHttpChannelBuilder$2: int[] $SwitchMap$io$grpc$okhttp$OkHttpChannelBuilder$NegotiationType>;

        $r2 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType negotiationType>;

        $i0 = virtualinvoke $r2.<io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label9;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        r11 = new java.lang.RuntimeException;

        $r2 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType negotiationType>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown negotiation type: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        $r9 = (java.lang.Throwable) r11;

        throw $r9;

     label2:
        $r5 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r5 != null goto label7;

        $r6 = staticinvoke <io.grpc.okhttp.internal.Platform: io.grpc.okhttp.internal.Platform get()>();

     label3:
        $r7 = virtualinvoke $r6.<io.grpc.okhttp.internal.Platform: java.security.Provider getProvider()>();

     label4:
        $r8 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>("Default", $r7);

     label5:
        $r5 = virtualinvoke $r8.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label6:
        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r5;

     label7:
        $r5 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        return $r5;

     label8:
        $r9 := @caughtexception;

        r11 = new java.lang.RuntimeException;

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("TLS Provider failure", $r9);

        $r9 = (java.lang.Throwable) r11;

        throw $r9;

     label9:
        return null;

        catch java.security.GeneralSecurityException from label3 to label4 with label8;
        catch java.security.GeneralSecurityException from label5 to label6 with label8;
    }

    protected io.grpc.ManagedChannelBuilder delegate()
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        io.grpc.internal.ManagedChannelImplBuilder r1;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        r1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ManagedChannelImplBuilder managedChannelImplBuilder>;

        return r1;
    }

    int getDefaultPort()
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        int[] $r1;
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType $r2;
        int $i0;
        java.lang.AssertionError $r3;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $r1 = <io.grpc.okhttp.OkHttpChannelBuilder$2: int[] $SwitchMap$io$grpc$okhttp$OkHttpChannelBuilder$NegotiationType>;

        $r2 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType negotiationType>;

        $i0 = virtualinvoke $r2.<io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.AssertionError;

        $r2 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType negotiationType>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not handled");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r3;

     label2:
        return 443;

     label3:
        return 80;
    }

    public volatile io.grpc.ManagedChannelBuilder keepAliveWithoutCalls(boolean)
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $z0 := @parameter0: boolean;

        $r0 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder keepAliveWithoutCalls(boolean)>($z0);

        return $r0;
    }

    public io.grpc.okhttp.OkHttpChannelBuilder keepAliveWithoutCalls(boolean)
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $z0 := @parameter0: boolean;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: boolean keepAliveWithoutCalls> = $z0;

        return $r0;
    }

    public io.grpc.okhttp.OkHttpChannelBuilder scheduledExecutorService(java.util.concurrent.ScheduledExecutorService)
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        io.grpc.internal.FixedObjectPool $r1;
        java.lang.Object $r2;
        java.util.concurrent.ScheduledExecutorService $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $r3 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        $r1 = new io.grpc.internal.FixedObjectPool;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "scheduledExecutorService");

        $r3 = (java.util.concurrent.ScheduledExecutorService) $r2;

        specialinvoke $r1.<io.grpc.internal.FixedObjectPool: void <init>(java.lang.Object)>($r3);

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool scheduledExecutorServicePool> = $r1;

        return $r0;
    }

    public io.grpc.okhttp.OkHttpChannelBuilder sslSocketFactory(javax.net.ssl.SSLSocketFactory)
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        javax.net.ssl.SSLSocketFactory $r1;
        boolean $z0;
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        $z0 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: boolean freezeSecurityConfiguration>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot change security when using ChannelCredentials");

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r1;

        $r2 = <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType TLS>;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType negotiationType> = $r2;

        return $r0;
    }

    public io.grpc.okhttp.OkHttpChannelBuilder transportExecutor(java.util.concurrent.Executor)
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        io.grpc.internal.FixedObjectPool $r1;
        java.util.concurrent.Executor $r2;
        io.grpc.internal.ObjectPool $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $r2 := @parameter0: java.util.concurrent.Executor;

        if $r2 != null goto label1;

        $r3 = <io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool DEFAULT_TRANSPORT_EXECUTOR_POOL>;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool transportExecutorPool> = $r3;

        return $r0;

     label1:
        $r1 = new io.grpc.internal.FixedObjectPool;

        specialinvoke $r1.<io.grpc.internal.FixedObjectPool: void <init>(java.lang.Object)>($r2);

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.internal.ObjectPool transportExecutorPool> = $r1;

        return $r0;
    }

    public volatile io.grpc.ManagedChannelBuilder usePlaintext()
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $r0 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder usePlaintext()>();

        return $r0;
    }

    public io.grpc.okhttp.OkHttpChannelBuilder usePlaintext()
    {
        io.grpc.okhttp.OkHttpChannelBuilder $r0;
        boolean $z0;
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder;

        $z0 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder: boolean freezeSecurityConfiguration>;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot change security when using ChannelCredentials");

        $r1 = <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType PLAINTEXT>;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType negotiationType> = $r1;

        return $r0;
    }

io.grpc.okhttp.OkHttpChannelBuilder$1
    void <init>()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$1 $r0;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile void close(java.lang.Object)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$1 $r0;
        java.lang.Object $r1;
        java.util.concurrent.Executor $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.Executor) $r1;

        virtualinvoke $r0.<io.grpc.okhttp.OkHttpChannelBuilder$1: void close(java.util.concurrent.Executor)>($r2);

        return;
    }

    public void close(java.util.concurrent.Executor)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$1 $r0;
        java.util.concurrent.Executor $r1;
        java.util.concurrent.ExecutorService $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$1;

        $r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = (java.util.concurrent.ExecutorService) $r1;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void shutdown()>();

        return;
    }

    public volatile java.lang.Object create()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$1 $r0;
        java.util.concurrent.Executor $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$1;

        $r1 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpChannelBuilder$1: java.util.concurrent.Executor create()>();

        return $r1;
    }

    public java.util.concurrent.Executor create()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$1 $r0;
        java.util.concurrent.ThreadFactory $r1;
        java.util.concurrent.ExecutorService $r2;
        java.util.concurrent.Executor r3;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$1;

        $r1 = staticinvoke <io.grpc.internal.GrpcUtil: java.util.concurrent.ThreadFactory getThreadFactory(java.lang.String,boolean)>("grpc-okhttp-%d", 1);

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>($r1);

        r3 = (java.util.concurrent.Executor) $r2;

        return r3;
    }

io.grpc.okhttp.OkHttpChannelBuilder$2
<io.grpc.okhttp.OkHttpChannelBuilder$2: int[] $SwitchMap$io$grpc$okhttp$NegotiationType>
<io.grpc.okhttp.OkHttpChannelBuilder$2: int[] $SwitchMap$io$grpc$okhttp$OkHttpChannelBuilder$NegotiationType>
    static void <clinit>()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] $r0;
        int $i0;
        int[] $r1;
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType $r2;
        java.lang.Throwable $r3, $r4, $r7, $r8;
        io.grpc.okhttp.NegotiationType[] $r5;
        io.grpc.okhttp.NegotiationType $r6;

        $r0 = staticinvoke <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <io.grpc.okhttp.OkHttpChannelBuilder$2: int[] $SwitchMap$io$grpc$okhttp$OkHttpChannelBuilder$NegotiationType> = $r1;

        $r2 = <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType PLAINTEXT>;

     label01:
        $i0 = virtualinvoke $r2.<io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: int ordinal()>();

     label02:
        $r1[$i0] = 1;

        goto label04;

     label03:
        $r3 := @caughtexception;

     label04:
        $r1 = <io.grpc.okhttp.OkHttpChannelBuilder$2: int[] $SwitchMap$io$grpc$okhttp$OkHttpChannelBuilder$NegotiationType>;

        $r2 = <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType TLS>;

     label05:
        $i0 = virtualinvoke $r2.<io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: int ordinal()>();

     label06:
        $r1[$i0] = 2;

        goto label08;

     label07:
        $r4 := @caughtexception;

     label08:
        $r5 = staticinvoke <io.grpc.okhttp.NegotiationType: io.grpc.okhttp.NegotiationType[] values()>();

        $i0 = lengthof $r5;

        $r1 = newarray (int)[$i0];

        <io.grpc.okhttp.OkHttpChannelBuilder$2: int[] $SwitchMap$io$grpc$okhttp$NegotiationType> = $r1;

        $r6 = <io.grpc.okhttp.NegotiationType: io.grpc.okhttp.NegotiationType TLS>;

     label09:
        $i0 = virtualinvoke $r6.<io.grpc.okhttp.NegotiationType: int ordinal()>();

     label10:
        $r1[$i0] = 1;

        goto label12;

     label11:
        $r7 := @caughtexception;

     label12:
        $r1 = <io.grpc.okhttp.OkHttpChannelBuilder$2: int[] $SwitchMap$io$grpc$okhttp$NegotiationType>;

        $r6 = <io.grpc.okhttp.NegotiationType: io.grpc.okhttp.NegotiationType PLAINTEXT>;

     label13:
        $i0 = virtualinvoke $r6.<io.grpc.okhttp.NegotiationType: int ordinal()>();

     label14:
        $r1[$i0] = 2;

        return;

     label15:
        $r8 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label09 to label10 with label11;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
    }

io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType
<io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] $VALUES>
<io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType PLAINTEXT>
<io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType TLS>
    private static io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] $values()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] $r0;
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType $r1;

        $r0 = newarray (io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType)[2];

        $r1 = <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType TLS>;

        $r0[0] = $r1;

        $r1 = <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType PLAINTEXT>;

        $r0[1] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] $r0;
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType $r1;

        $r1 = new io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: void <init>(java.lang.String,int)>("TLS", 0);

        <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType TLS> = $r1;

        $r1 = new io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: void <init>(java.lang.String,int)>("PLAINTEXT", 1);

        <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType PLAINTEXT> = $r1;

        $r0 = staticinvoke <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] $values()>();

        <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] values()
    {
        java.lang.Object $r0;
        io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] $r1;

        $r1 = <io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[]) $r0;

        return $r1;
    }

io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider-IA
io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider: io.grpc.okhttp.OkHttpChannelBuilder this$0>
    private void <init>(io.grpc.okhttp.OkHttpChannelBuilder)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider $r0;
        io.grpc.okhttp.OkHttpChannelBuilder $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpChannelBuilder;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider: io.grpc.okhttp.OkHttpChannelBuilder this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(io.grpc.okhttp.OkHttpChannelBuilder, io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider-IA)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider $r0;
        io.grpc.okhttp.OkHttpChannelBuilder $r1;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider-IA $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpChannelBuilder;

        $r2 := @parameter1: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider-IA;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider: void <init>(io.grpc.okhttp.OkHttpChannelBuilder)>($r1);

        return;
    }

    public int getDefaultPort()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider $r0;
        int $i0;
        io.grpc.okhttp.OkHttpChannelBuilder $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider;

        $r1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelDefaultPortProvider: io.grpc.okhttp.OkHttpChannelBuilder this$0>;

        $i0 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpChannelBuilder: int getDefaultPort()>();

        return $i0;
    }

io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder-IA
io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder: io.grpc.okhttp.OkHttpChannelBuilder this$0>
    private void <init>(io.grpc.okhttp.OkHttpChannelBuilder)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder $r0;
        io.grpc.okhttp.OkHttpChannelBuilder $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpChannelBuilder;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder: io.grpc.okhttp.OkHttpChannelBuilder this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(io.grpc.okhttp.OkHttpChannelBuilder, io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder-IA)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder $r0;
        io.grpc.okhttp.OkHttpChannelBuilder $r1;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder-IA $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpChannelBuilder;

        $r2 := @parameter1: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder-IA;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder: void <init>(io.grpc.okhttp.OkHttpChannelBuilder)>($r1);

        return;
    }

    public io.grpc.internal.ClientTransportFactory buildClientTransportFactory()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder $r0;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r1;
        io.grpc.okhttp.OkHttpChannelBuilder $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder;

        $r2 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpChannelTransportFactoryBuilder: io.grpc.okhttp.OkHttpChannelBuilder this$0>;

        $r1 = virtualinvoke $r2.<io.grpc.okhttp.OkHttpChannelBuilder: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory buildTransportFactory()>();

        return $r1;
    }

io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1: io.grpc.internal.AtomicBackoff$State val$keepAliveTimeNanosState>
    void <init>(io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory, io.grpc.internal.AtomicBackoff$State)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1 $r0;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r1;
        io.grpc.internal.AtomicBackoff$State $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory;

        $r2 := @parameter1: io.grpc.internal.AtomicBackoff$State;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1: io.grpc.internal.AtomicBackoff$State val$keepAliveTimeNanosState> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1 $r0;
        io.grpc.internal.AtomicBackoff$State $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1;

        $r1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1: io.grpc.internal.AtomicBackoff$State val$keepAliveTimeNanosState>;

        virtualinvoke $r1.<io.grpc.internal.AtomicBackoff$State: void backoff()>();

        return;
    }

io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory-IA
io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean closed>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.okhttp.internal.ConnectionSpec connectionSpec>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean enableKeepAlive>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.Executor executor>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.ObjectPool executorPool>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: int flowControlWindow>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.ssl.HostnameVerifier hostnameVerifier>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.AtomicBackoff keepAliveBackoff>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: long keepAliveTimeNanos>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: long keepAliveTimeoutNanos>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean keepAliveWithoutCalls>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: int maxInboundMetadataSize>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: int maxMessageSize>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.ScheduledExecutorService scheduledExecutorService>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.ObjectPool scheduledExecutorServicePool>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.SocketFactory socketFactory>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.ssl.SSLSocketFactory sslSocketFactory>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.TransportTracer$Factory transportTracerFactory>
<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean useGetForSafeMethods>
    private void <init>(io.grpc.internal.ObjectPool, io.grpc.internal.ObjectPool, javax.net.SocketFactory, javax.net.ssl.SSLSocketFactory, javax.net.ssl.HostnameVerifier, io.grpc.okhttp.internal.ConnectionSpec, int, boolean, long, long, int, boolean, int, io.grpc.internal.TransportTracer$Factory, boolean)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r0;
        io.grpc.internal.ObjectPool $r1, $r2;
        javax.net.SocketFactory $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        javax.net.ssl.HostnameVerifier $r5;
        io.grpc.okhttp.internal.ConnectionSpec $r6;
        int $i0, $i3, $i4;
        boolean $z0, $z1, $z2;
        long $l1, $l2;
        io.grpc.internal.TransportTracer$Factory $r7;
        java.lang.Object $r8;
        java.util.concurrent.Executor $r9;
        java.util.concurrent.ScheduledExecutorService $r10;
        io.grpc.internal.AtomicBackoff $r11;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory;

        $r1 := @parameter0: io.grpc.internal.ObjectPool;

        $r2 := @parameter1: io.grpc.internal.ObjectPool;

        $r3 := @parameter2: javax.net.SocketFactory;

        $r4 := @parameter3: javax.net.ssl.SSLSocketFactory;

        $r5 := @parameter4: javax.net.ssl.HostnameVerifier;

        $r6 := @parameter5: io.grpc.okhttp.internal.ConnectionSpec;

        $i0 := @parameter6: int;

        $z0 := @parameter7: boolean;

        $l1 := @parameter8: long;

        $l2 := @parameter9: long;

        $i3 := @parameter10: int;

        $z1 := @parameter11: boolean;

        $i4 := @parameter12: int;

        $r7 := @parameter13: io.grpc.internal.TransportTracer$Factory;

        $z2 := @parameter14: boolean;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.ObjectPool executorPool> = $r1;

        $r8 = interfaceinvoke $r1.<io.grpc.internal.ObjectPool: java.lang.Object getObject()>();

        $r9 = (java.util.concurrent.Executor) $r8;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.Executor executor> = $r9;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.ObjectPool scheduledExecutorServicePool> = $r2;

        $r8 = interfaceinvoke $r2.<io.grpc.internal.ObjectPool: java.lang.Object getObject()>();

        $r10 = (java.util.concurrent.ScheduledExecutorService) $r8;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.ScheduledExecutorService scheduledExecutorService> = $r10;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.SocketFactory socketFactory> = $r3;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r4;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r5;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.okhttp.internal.ConnectionSpec connectionSpec> = $r6;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: int maxMessageSize> = $i0;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean enableKeepAlive> = $z0;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: long keepAliveTimeNanos> = $l1;

        $r11 = new io.grpc.internal.AtomicBackoff;

        specialinvoke $r11.<io.grpc.internal.AtomicBackoff: void <init>(java.lang.String,long)>("keepalive time nanos", $l1);

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.AtomicBackoff keepAliveBackoff> = $r11;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: long keepAliveTimeoutNanos> = $l2;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: int flowControlWindow> = $i3;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean keepAliveWithoutCalls> = $z1;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: int maxInboundMetadataSize> = $i4;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean useGetForSafeMethods> = $z2;

        $r8 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r7, "transportTracerFactory");

        $r7 = (io.grpc.internal.TransportTracer$Factory) $r8;

        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.TransportTracer$Factory transportTracerFactory> = $r7;

        return;
    }

    void <init>(io.grpc.internal.ObjectPool, io.grpc.internal.ObjectPool, javax.net.SocketFactory, javax.net.ssl.SSLSocketFactory, javax.net.ssl.HostnameVerifier, io.grpc.okhttp.internal.ConnectionSpec, int, boolean, long, long, int, boolean, int, io.grpc.internal.TransportTracer$Factory, boolean, io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory-IA)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r0;
        io.grpc.internal.ObjectPool $r1, $r2;
        javax.net.SocketFactory $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        javax.net.ssl.HostnameVerifier $r5;
        io.grpc.okhttp.internal.ConnectionSpec $r6;
        int $i0, $i3, $i4;
        boolean $z0, $z1, $z2;
        long $l1, $l2;
        io.grpc.internal.TransportTracer$Factory $r7;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory-IA $r8;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory;

        $r1 := @parameter0: io.grpc.internal.ObjectPool;

        $r2 := @parameter1: io.grpc.internal.ObjectPool;

        $r3 := @parameter2: javax.net.SocketFactory;

        $r4 := @parameter3: javax.net.ssl.SSLSocketFactory;

        $r5 := @parameter4: javax.net.ssl.HostnameVerifier;

        $r6 := @parameter5: io.grpc.okhttp.internal.ConnectionSpec;

        $i0 := @parameter6: int;

        $z0 := @parameter7: boolean;

        $l1 := @parameter8: long;

        $l2 := @parameter9: long;

        $i3 := @parameter10: int;

        $z1 := @parameter11: boolean;

        $i4 := @parameter12: int;

        $r7 := @parameter13: io.grpc.internal.TransportTracer$Factory;

        $z2 := @parameter14: boolean;

        $r8 := @parameter15: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory-IA;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: void <init>(io.grpc.internal.ObjectPool,io.grpc.internal.ObjectPool,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,io.grpc.okhttp.internal.ConnectionSpec,int,boolean,long,long,int,boolean,int,io.grpc.internal.TransportTracer$Factory,boolean)>($r1, $r2, $r3, $r4, $r5, $r6, $i0, $z0, $l1, $l2, $i3, $z1, $i4, $r7, $z2);

        return;
    }

    public void close()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r0;
        boolean $z0;
        io.grpc.internal.ObjectPool $r1;
        java.util.concurrent.Executor $r2;
        java.util.concurrent.ScheduledExecutorService $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory;

        $z0 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean closed> = 1;

        $r1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.ObjectPool executorPool>;

        $r2 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.Executor executor>;

        interfaceinvoke $r1.<io.grpc.internal.ObjectPool: java.lang.Object returnObject(java.lang.Object)>($r2);

        $r1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.ObjectPool scheduledExecutorServicePool>;

        $r3 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.ScheduledExecutorService scheduledExecutorService>;

        interfaceinvoke $r1.<io.grpc.internal.ObjectPool: java.lang.Object returnObject(java.lang.Object)>($r3);

        return;
    }

    public java.util.concurrent.ScheduledExecutorService getScheduledExecutorService()
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r0;
        java.util.concurrent.ScheduledExecutorService r1;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory;

        r1 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.ScheduledExecutorService scheduledExecutorService>;

        return r1;
    }

    public io.grpc.internal.ConnectionClientTransport newClientTransport(java.net.SocketAddress, io.grpc.internal.ClientTransportFactory$ClientTransportOptions, io.grpc.ChannelLogger)
    {
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r0;
        java.net.SocketAddress $r1;
        io.grpc.internal.ClientTransportFactory$ClientTransportOptions $r2;
        io.grpc.ChannelLogger $r3;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1 $r4;
        long $l0, $l1;
        io.grpc.okhttp.OkHttpClientTransport $r5;
        boolean $z0;
        io.grpc.internal.AtomicBackoff $r6;
        io.grpc.internal.AtomicBackoff$State $r7;
        java.net.InetSocketAddress $r8;
        java.lang.String $r9, $r10;
        io.grpc.Attributes $r11;
        io.grpc.HttpConnectProxiedSocketAddress $r12;
        java.lang.IllegalStateException $r13;

        $r0 := @this: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory;

        $r1 := @parameter0: java.net.SocketAddress;

        $r2 := @parameter1: io.grpc.internal.ClientTransportFactory$ClientTransportOptions;

        $r3 := @parameter2: io.grpc.ChannelLogger;

        $z0 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean closed>;

        if $z0 != 0 goto label1;

        $r6 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.AtomicBackoff keepAliveBackoff>;

        $r7 = virtualinvoke $r6.<io.grpc.internal.AtomicBackoff: io.grpc.internal.AtomicBackoff$State getState()>();

        $r4 = new io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1;

        specialinvoke $r4.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory$1: void <init>(io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory,io.grpc.internal.AtomicBackoff$State)>($r0, $r7);

        $r8 = (java.net.InetSocketAddress) $r1;

        $r5 = new io.grpc.okhttp.OkHttpClientTransport;

        $r9 = virtualinvoke $r2.<io.grpc.internal.ClientTransportFactory$ClientTransportOptions: java.lang.String getAuthority()>();

        $r10 = virtualinvoke $r2.<io.grpc.internal.ClientTransportFactory$ClientTransportOptions: java.lang.String getUserAgent()>();

        $r11 = virtualinvoke $r2.<io.grpc.internal.ClientTransportFactory$ClientTransportOptions: io.grpc.Attributes getEagAttributes()>();

        $r12 = virtualinvoke $r2.<io.grpc.internal.ClientTransportFactory$ClientTransportOptions: io.grpc.HttpConnectProxiedSocketAddress getHttpConnectProxiedSocketAddress()>();

        specialinvoke $r5.<io.grpc.okhttp.OkHttpClientTransport: void <init>(io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory,java.net.InetSocketAddress,java.lang.String,java.lang.String,io.grpc.Attributes,io.grpc.HttpConnectProxiedSocketAddress,java.lang.Runnable)>($r0, $r8, $r9, $r10, $r11, $r12, $r4);

        $z0 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean enableKeepAlive>;

        if $z0 == 0 goto label2;

        $l1 = virtualinvoke $r7.<io.grpc.internal.AtomicBackoff$State: long get()>();

        $l0 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: long keepAliveTimeoutNanos>;

        $z0 = $r0.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean keepAliveWithoutCalls>;

        virtualinvoke $r5.<io.grpc.okhttp.OkHttpClientTransport: void enableKeepAlive(boolean,long,long,boolean)>(1, $l1, $l0, $z0);

        return $r5;

     label1:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The transport factory is closed.");

        throw $r13;

     label2:
        return $r5;
    }

