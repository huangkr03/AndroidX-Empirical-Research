androidx.test.espresso.assertion.PositionAssertions
<androidx.test.espresso.assertion.PositionAssertions: java.lang.String TAG>
    static android.view.View findView(org.hamcrest.Matcher, android.view.View)
    {
        org.hamcrest.Matcher r0;
        android.view.View r1, $r16, r23;
        java.util.Iterator r2;
        androidx.test.espresso.AmbiguousViewMatcherException$Builder r3, $r12, $r13, $r14, $r17, $r20, r26;
        java.lang.Iterable $r6, $r7;
        boolean $z0;
        androidx.test.espresso.NoMatchingViewException$Builder $r8, $r9, r24, r27;
        androidx.test.espresso.NoMatchingViewException $r10;
        java.lang.Object $r11, $r15;
        java.lang.Object[] $r18;
        android.view.View[] $r19;
        androidx.test.espresso.AmbiguousViewMatcherException $r21;
        androidx.test.espresso.assertion.PositionAssertions$2 r22, r25;
        java.lang.Throwable r28, r29;

        r0 := @parameter0: org.hamcrest.Matcher;

        r1 := @parameter1: android.view.View;

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r25 = new androidx.test.espresso.assertion.PositionAssertions$2;

        r22 = r25;

        specialinvoke r25.<androidx.test.espresso.assertion.PositionAssertions$2: void <init>(org.hamcrest.Matcher)>(r0);

        $r6 = staticinvoke <androidx.test.espresso.util.TreeIterables: java.lang.Iterable breadthFirstViewTraversal(android.view.View)>(r1);

        $r7 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,androidx.test.espresso.core.internal.deps.guava.base.Predicate)>($r6, r22);

        r2 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

        r23 = null;

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        if r23 == null goto label2;

        r26 = new androidx.test.espresso.AmbiguousViewMatcherException$Builder;

        r3 = r26;

        specialinvoke r26.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: void <init>()>();

        $r12 = virtualinvoke r3.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException$Builder withRootView(android.view.View)>(r1);

        $r13 = virtualinvoke $r12.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException$Builder withViewMatcher(org.hamcrest.Matcher)>(r0);

        $r14 = virtualinvoke $r13.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException$Builder withView1(android.view.View)>(r23);

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (android.view.View) $r15;

        $r17 = virtualinvoke $r14.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException$Builder withView2(android.view.View)>($r16);

        $r18 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Iterators: java.lang.Object[] toArray(java.util.Iterator,java.lang.Class)>(r2, class "Landroid/view/View;");

        $r19 = (android.view.View[]) $r18;

        $r20 = virtualinvoke $r17.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException$Builder withOtherAmbiguousViews(android.view.View[])>($r19);

        $r21 = virtualinvoke $r20.<androidx.test.espresso.AmbiguousViewMatcherException$Builder: androidx.test.espresso.AmbiguousViewMatcherException build()>();

        r28 = (java.lang.Throwable) $r21;

        throw r28;

     label2:
        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.view.View) $r11;

        goto label1;

     label3:
        if r23 != null goto label4;

        r27 = new androidx.test.espresso.NoMatchingViewException$Builder;

        r24 = r27;

        specialinvoke r27.<androidx.test.espresso.NoMatchingViewException$Builder: void <init>()>();

        $r8 = virtualinvoke r24.<androidx.test.espresso.NoMatchingViewException$Builder: androidx.test.espresso.NoMatchingViewException$Builder withViewMatcher(org.hamcrest.Matcher)>(r0);

        $r9 = virtualinvoke $r8.<androidx.test.espresso.NoMatchingViewException$Builder: androidx.test.espresso.NoMatchingViewException$Builder withRootView(android.view.View)>(r1);

        $r10 = virtualinvoke $r9.<androidx.test.espresso.NoMatchingViewException$Builder: androidx.test.espresso.NoMatchingViewException build()>();

        r29 = (java.lang.Throwable) $r10;

        throw r29;

     label4:
        return r23;
    }

    static volatile android.view.ViewGroup '-$$Nest$smgetTopViewGroup'(android.view.View)
    {
        android.view.View r0;
        android.view.ViewGroup $r1;

        r0 := @parameter0: android.view.View;

        $r1 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: android.view.ViewGroup getTopViewGroup(android.view.View)>(r0);

        return $r1;
    }

    private static android.view.ViewGroup getTopViewGroup(android.view.View)
    {
        boolean $z0;
        android.view.View r0;
        android.view.ViewParent r1;
        android.view.ViewGroup r2;

        r0 := @parameter0: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        r2 = null;

     label1:
        if r1 == null goto label3;

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r2 = (android.view.ViewGroup) r1;

     label2:
        r1 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return r2;
    }

    public static androidx.test.espresso.ViewAssertion isAbove(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.ViewAssertion $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion isCompletelyAbove(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static androidx.test.espresso.ViewAssertion isBelow(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.ViewAssertion $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion isCompletelyBelow(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static androidx.test.espresso.ViewAssertion isBottomAlignedWith(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isCompletelyAbove(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isCompletelyBelow(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isCompletelyLeftOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isCompletelyRightOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isLeftAlignedWith(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isLeftOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.ViewAssertion $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion isCompletelyLeftOf(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static androidx.test.espresso.ViewAssertion isPartiallyAbove(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isPartiallyBelow(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isPartiallyLeftOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isPartiallyRightOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isRightAlignedWith(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static androidx.test.espresso.ViewAssertion isRightOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.ViewAssertion $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion isCompletelyRightOf(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static androidx.test.espresso.ViewAssertion isTopAlignedWith(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1;
        androidx.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED>;

        $r2 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,androidx.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    static androidx.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher, androidx.test.espresso.assertion.PositionAssertions$Position)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.assertion.PositionAssertions$Position r1;
        androidx.test.espresso.assertion.PositionAssertions$1 r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r1 := @parameter1: androidx.test.espresso.assertion.PositionAssertions$Position;

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r2 = new androidx.test.espresso.assertion.PositionAssertions$1;

        specialinvoke r2.<androidx.test.espresso.assertion.PositionAssertions$1: void <init>(androidx.test.espresso.assertion.PositionAssertions$Position,org.hamcrest.Matcher)>(r1, r0);

        return r2;
    }

    private void <init>()
    {
        androidx.test.espresso.assertion.PositionAssertions r0;

        r0 := @this: androidx.test.espresso.assertion.PositionAssertions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static boolean isRelativePosition(android.view.View, android.view.View, androidx.test.espresso.assertion.PositionAssertions$Position)
    {
        android.view.View r0, r5;
        androidx.test.espresso.assertion.PositionAssertions$Position r1;
        int[] r2, r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11;

        r5 := @parameter0: android.view.View;

        r0 := @parameter1: android.view.View;

        r1 := @parameter2: androidx.test.espresso.assertion.PositionAssertions$Position;

        r2 = newarray (int)[2];

        r3 = newarray (int)[2];

        virtualinvoke r5.<android.view.View: void getLocationOnScreen(int[])>(r2);

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r3);

        $r4 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $i0 = virtualinvoke r1.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label34;
            case 2: goto label31;
            case 3: goto label28;
            case 4: goto label25;
            case 5: goto label22;
            case 6: goto label19;
            case 7: goto label16;
            case 8: goto label13;
            case 9: goto label10;
            case 10: goto label07;
            case 11: goto label04;
            case 12: goto label01;
            default: goto label37;
        };

     label01:
        $i2 = r2[1];

        $i3 = virtualinvoke r5.<android.view.View: int getHeight()>();

        $i4 = $i2 + $i3;

        $i5 = r3[1];

        $i6 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i7 = $i5 + $i6;

        if $i4 != $i7 goto label03;

        z0 = 1;

     label02:
        return z0;

     label03:
        z0 = 0;

        goto label02;

     label04:
        $i9 = r2[1];

        $i8 = r3[1];

        if $i9 != $i8 goto label06;

        z1 = 1;

     label05:
        return z1;

     label06:
        z1 = 0;

        goto label05;

     label07:
        $i10 = r2[0];

        $i11 = virtualinvoke r5.<android.view.View: int getWidth()>();

        $i12 = $i10 + $i11;

        $i13 = r3[0];

        $i14 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i15 = $i13 + $i14;

        if $i12 != $i15 goto label09;

        z2 = 1;

     label08:
        return z2;

     label09:
        z2 = 0;

        goto label08;

     label10:
        $i17 = r2[0];

        $i16 = r3[0];

        if $i17 != $i16 goto label12;

        z3 = 1;

     label11:
        return z3;

     label12:
        z3 = 0;

        goto label11;

     label13:
        $i19 = r3[1];

        $i18 = r2[1];

        if $i19 >= $i18 goto label15;

        $i20 = r2[1];

        $i21 = r3[1];

        $i22 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i23 = $i21 + $i22;

        if $i20 >= $i23 goto label15;

        z4 = 1;

     label14:
        return z4;

     label15:
        z4 = 0;

        goto label14;

     label16:
        $i25 = r2[1];

        $i24 = r3[1];

        if $i25 >= $i24 goto label18;

        $i26 = r3[1];

        $i27 = r2[1];

        $i28 = virtualinvoke r5.<android.view.View: int getHeight()>();

        $i29 = $i27 + $i28;

        if $i26 >= $i29 goto label18;

        z5 = 1;

     label17:
        return z5;

     label18:
        z5 = 0;

        goto label17;

     label19:
        $i31 = r3[0];

        $i30 = r2[0];

        if $i31 >= $i30 goto label21;

        $i32 = r2[0];

        $i33 = r3[0];

        $i34 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i35 = $i33 + $i34;

        if $i32 >= $i35 goto label21;

        z6 = 1;

     label20:
        return z6;

     label21:
        z6 = 0;

        goto label20;

     label22:
        $i37 = r2[0];

        $i36 = r3[0];

        if $i37 >= $i36 goto label24;

        $i38 = r3[0];

        $i39 = r2[0];

        $i40 = virtualinvoke r5.<android.view.View: int getWidth()>();

        $i41 = $i39 + $i40;

        if $i38 >= $i41 goto label24;

        z7 = 1;

     label23:
        return z7;

     label24:
        z7 = 0;

        goto label23;

     label25:
        $i42 = r3[1];

        $i43 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i45 = $i42 + $i43;

        $i44 = r2[1];

        if $i45 > $i44 goto label27;

        z8 = 1;

     label26:
        return z8;

     label27:
        z8 = 0;

        goto label26;

     label28:
        $i46 = r2[1];

        $i47 = virtualinvoke r5.<android.view.View: int getHeight()>();

        $i49 = $i46 + $i47;

        $i48 = r3[1];

        if $i49 > $i48 goto label30;

        z9 = 1;

     label29:
        return z9;

     label30:
        z9 = 0;

        goto label29;

     label31:
        $i50 = r3[0];

        $i51 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i53 = $i50 + $i51;

        $i52 = r2[0];

        if $i53 > $i52 goto label33;

        z10 = 1;

     label32:
        return z10;

     label33:
        z10 = 0;

        goto label32;

     label34:
        $i54 = r2[0];

        $i55 = virtualinvoke r5.<android.view.View: int getWidth()>();

        $i57 = $i54 + $i55;

        $i56 = r3[0];

        if $i57 > $i56 goto label36;

        z11 = 1;

     label35:
        return z11;

     label36:
        z11 = 0;

        goto label35;

     label37:
        return 0;
    }

androidx.test.espresso.assertion.PositionAssertions$1
<androidx.test.espresso.assertion.PositionAssertions$1: androidx.test.espresso.assertion.PositionAssertions$Position val$position>
<androidx.test.espresso.assertion.PositionAssertions$1: org.hamcrest.Matcher val$viewMatcher>
    void <init>(androidx.test.espresso.assertion.PositionAssertions$Position, org.hamcrest.Matcher)
    {
        androidx.test.espresso.assertion.PositionAssertions$1 r0;
        androidx.test.espresso.assertion.PositionAssertions$Position r1;
        org.hamcrest.Matcher r2;

        r0 := @this: androidx.test.espresso.assertion.PositionAssertions$1;

        r1 := @parameter0: androidx.test.espresso.assertion.PositionAssertions$Position;

        r2 := @parameter1: org.hamcrest.Matcher;

        r0.<androidx.test.espresso.assertion.PositionAssertions$1: androidx.test.espresso.assertion.PositionAssertions$Position val$position> = r1;

        r0.<androidx.test.espresso.assertion.PositionAssertions$1: org.hamcrest.Matcher val$viewMatcher> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void check(android.view.View, androidx.test.espresso.NoMatchingViewException)
    {
        androidx.test.espresso.NoMatchingViewException r0;
        org.hamcrest.StringDescription r1, r29;
        org.hamcrest.Description $r2, $r4, $r5, $r8, $r9;
        java.lang.String $r3, $r7, $r11, $r13, $r21, $r22, $r24;
        androidx.test.espresso.assertion.PositionAssertions$Position $r6, $r17;
        org.hamcrest.Matcher $r10, $r14, $r20;
        android.view.ViewGroup $r15;
        android.view.View $r16, r26;
        boolean $z0;
        java.lang.Boolean $r18, $r19;
        androidx.test.espresso.assertion.PositionAssertions$1 r25;
        java.util.Locale r27;
        java.lang.Object[] r28;
        java.lang.Throwable r30;

        r25 := @this: androidx.test.espresso.assertion.PositionAssertions$1;

        r26 := @parameter0: android.view.View;

        r0 := @parameter1: androidx.test.espresso.NoMatchingViewException;

        r29 = new org.hamcrest.StringDescription;

        r1 = r29;

        specialinvoke r29.<org.hamcrest.StringDescription: void <init>()>();

        if r0 == null goto label1;

        r27 = <java.util.Locale: java.util.Locale ROOT>;

        r28 = newarray (java.lang.Object)[1];

        $r21 = virtualinvoke r0.<androidx.test.espresso.NoMatchingViewException: java.lang.String getViewMatcherDescription()>();

        r28[0] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r27, "\' check could not be performed because view \'%s\' was not found.\n", r28);

        virtualinvoke r1.<org.hamcrest.StringDescription: org.hamcrest.Description appendText(java.lang.String)>($r22);

        $r24 = virtualinvoke r1.<org.hamcrest.StringDescription: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PositionAssertions", $r24);

        r30 = (java.lang.Throwable) r0;

        throw r30;

     label1:
        $r2 = virtualinvoke r1.<org.hamcrest.StringDescription: org.hamcrest.Description appendText(java.lang.String)>("View:");

        $r3 = staticinvoke <androidx.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>(r26);

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r3);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" is not ");

        $r6 = r25.<androidx.test.espresso.assertion.PositionAssertions$1: androidx.test.espresso.assertion.PositionAssertions$Position val$position>;

        $r7 = virtualinvoke $r6.<androidx.test.espresso.assertion.PositionAssertions$Position: java.lang.String toString()>();

        $r8 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r7);

        $r9 = interfaceinvoke $r8.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" view ");

        $r10 = r25.<androidx.test.espresso.assertion.PositionAssertions$1: org.hamcrest.Matcher val$viewMatcher>;

        $r11 = interfaceinvoke $r10.<org.hamcrest.Matcher: java.lang.String toString()>();

        interfaceinvoke $r9.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r11);

        $r13 = virtualinvoke r1.<org.hamcrest.StringDescription: java.lang.String toString()>();

        $r14 = r25.<androidx.test.espresso.assertion.PositionAssertions$1: org.hamcrest.Matcher val$viewMatcher>;

        $r15 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: android.view.ViewGroup '-$$Nest$smgetTopViewGroup'(android.view.View)>(r26);

        $r16 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: android.view.View findView(org.hamcrest.Matcher,android.view.View)>($r14, $r15);

        $r17 = r25.<androidx.test.espresso.assertion.PositionAssertions$1: androidx.test.espresso.assertion.PositionAssertions$Position val$position>;

        $z0 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions: boolean isRelativePosition(android.view.View,android.view.View,androidx.test.espresso.assertion.PositionAssertions$Position)>(r26, $r16, $r17);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r20 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r19);

        staticinvoke <androidx.test.espresso.matcher.ViewMatchers: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>($r13, $r18, $r20);

        return;
    }

androidx.test.espresso.assertion.PositionAssertions$2
<androidx.test.espresso.assertion.PositionAssertions$2: org.hamcrest.Matcher val$toView>
    void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.assertion.PositionAssertions$2 r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.assertion.PositionAssertions$2;

        r1 := @parameter0: org.hamcrest.Matcher;

        r0.<androidx.test.espresso.assertion.PositionAssertions$2: org.hamcrest.Matcher val$toView> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(android.view.View)
    {
        androidx.test.espresso.assertion.PositionAssertions$2 r0;
        android.view.View r1;
        org.hamcrest.Matcher $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.assertion.PositionAssertions$2;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<androidx.test.espresso.assertion.PositionAssertions$2: org.hamcrest.Matcher val$toView>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        androidx.test.espresso.assertion.PositionAssertions$2 r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.assertion.PositionAssertions$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.assertion.PositionAssertions$2: boolean apply(android.view.View)>($r2);

        return $z0;
    }

androidx.test.espresso.assertion.PositionAssertions$3
<androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>
    static void <clinit>()
    {
        androidx.test.espresso.assertion.PositionAssertions$Position[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        int[] $r1, $r3, $r5, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36;
        androidx.test.espresso.assertion.PositionAssertions$Position $r2, $r4, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        $r0 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position> = $r1;

     label01:
        $r3 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r2 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF>;

        $i1 = virtualinvoke $r2.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        $r5 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r4 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF>;

        $i2 = virtualinvoke $r4.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r5[$i2] = 2;

     label03:
        $r18 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r19 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE>;

        $i3 = virtualinvoke $r19.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r18[$i3] = 3;

     label04:
        $r20 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r21 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW>;

        $i4 = virtualinvoke $r21.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r20[$i4] = 4;

     label05:
        $r22 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r23 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF>;

        $i5 = virtualinvoke $r23.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r22[$i5] = 5;

     label06:
        $r24 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r25 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF>;

        $i6 = virtualinvoke $r25.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r24[$i6] = 6;

     label07:
        $r26 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r27 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE>;

        $i7 = virtualinvoke $r27.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r26[$i7] = 7;

     label08:
        $r28 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r29 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW>;

        $i8 = virtualinvoke $r29.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r28[$i8] = 8;

     label09:
        $r30 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r31 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED>;

        $i9 = virtualinvoke $r31.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r30[$i9] = 9;

     label10:
        $r32 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r33 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED>;

        $i10 = virtualinvoke $r33.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r32[$i10] = 10;

     label11:
        $r34 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r35 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED>;

        $i11 = virtualinvoke $r35.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r34[$i11] = 11;

     label12:
        $r36 = <androidx.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$androidx$test$espresso$assertion$PositionAssertions$Position>;

        $r37 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED>;

        $i12 = virtualinvoke $r37.<androidx.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r36[$i12] = 12;

     label13:
        return;

     label14:
        $r7 := @caughtexception;

        goto label02;

     label15:
        $r13 := @caughtexception;

        goto label03;

     label16:
        $r17 := @caughtexception;

        goto label04;

     label17:
        $r14 := @caughtexception;

        goto label05;

     label18:
        $r9 := @caughtexception;

        goto label06;

     label19:
        $r12 := @caughtexception;

        goto label07;

     label20:
        $r16 := @caughtexception;

        goto label08;

     label21:
        $r15 := @caughtexception;

        goto label09;

     label22:
        $r8 := @caughtexception;

        goto label10;

     label23:
        $r10 := @caughtexception;

        goto label11;

     label24:
        $r11 := @caughtexception;

        goto label12;

     label25:
        $r6 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label14;
        catch java.lang.NoSuchFieldError from label02 to label03 with label15;
        catch java.lang.NoSuchFieldError from label03 to label04 with label16;
        catch java.lang.NoSuchFieldError from label04 to label05 with label17;
        catch java.lang.NoSuchFieldError from label05 to label06 with label18;
        catch java.lang.NoSuchFieldError from label06 to label07 with label19;
        catch java.lang.NoSuchFieldError from label07 to label08 with label20;
        catch java.lang.NoSuchFieldError from label08 to label09 with label21;
        catch java.lang.NoSuchFieldError from label09 to label10 with label22;
        catch java.lang.NoSuchFieldError from label10 to label11 with label23;
        catch java.lang.NoSuchFieldError from label11 to label12 with label24;
        catch java.lang.NoSuchFieldError from label12 to label13 with label25;
    }

androidx.test.espresso.assertion.PositionAssertions$Position
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED>
<androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position[] $VALUES>
<androidx.test.espresso.assertion.PositionAssertions$Position: java.lang.String positionValue>
    public static androidx.test.espresso.assertion.PositionAssertions$Position valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.test.espresso.assertion.PositionAssertions$Position $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/test/espresso/assertion/PositionAssertions$Position;", r0);

        $r2 = (androidx.test.espresso.assertion.PositionAssertions$Position) $r1;

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.test.espresso.assertion.PositionAssertions$Position r0;
        java.lang.String $r1;

        r0 := @this: androidx.test.espresso.assertion.PositionAssertions$Position;

        $r1 = r0.<androidx.test.espresso.assertion.PositionAssertions$Position: java.lang.String positionValue>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.test.espresso.assertion.PositionAssertions$Position[] $r0;
        androidx.test.espresso.assertion.PositionAssertions$Position r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;

        r1 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r1.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("COMPLETELY_LEFT_OF", 0, "completely left of");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF> = r1;

        r2 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r2.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("COMPLETELY_RIGHT_OF", 1, "completely right of");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF> = r2;

        r3 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r3.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("COMPLETELY_ABOVE", 2, "completely above");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE> = r3;

        r4 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r4.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("COMPLETELY_BELOW", 3, "completely below");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW> = r4;

        r5 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r5.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("PARTIALLY_LEFT_OF", 4, "partially left of");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF> = r5;

        r6 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r6.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("PARTIALLY_RIGHT_OF", 5, "partially right of");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF> = r6;

        r7 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r7.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("PARTIALLY_ABOVE", 6, "partially above");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE> = r7;

        r8 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r8.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("PARTIALLY_BELOW", 7, "partially below");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW> = r8;

        r9 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r9.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("LEFT_ALIGNED", 8, "aligned left with");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED> = r9;

        r10 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r10.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("RIGHT_ALIGNED", 9, "aligned right with");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED> = r10;

        r11 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r11.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("TOP_ALIGNED", 10, "aligned top with");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED> = r11;

        r12 = new androidx.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke r12.<androidx.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("BOTTOM_ALIGNED", 11, "aligned bottom with");

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED> = r12;

        $r0 = staticinvoke <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position[] $values()>();

        <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        androidx.test.espresso.assertion.PositionAssertions$Position r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: androidx.test.espresso.assertion.PositionAssertions$Position;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<androidx.test.espresso.assertion.PositionAssertions$Position: java.lang.String positionValue> = r2;

        return;
    }

    private static androidx.test.espresso.assertion.PositionAssertions$Position[] $values()
    {
        androidx.test.espresso.assertion.PositionAssertions$Position[] r0;
        androidx.test.espresso.assertion.PositionAssertions$Position $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 = newarray (androidx.test.espresso.assertion.PositionAssertions$Position)[12];

        $r1 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF>;

        r0[0] = $r1;

        $r2 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF>;

        r0[1] = $r2;

        $r3 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE>;

        r0[2] = $r3;

        $r4 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW>;

        r0[3] = $r4;

        $r5 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF>;

        r0[4] = $r5;

        $r6 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF>;

        r0[5] = $r6;

        $r7 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE>;

        r0[6] = $r7;

        $r8 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW>;

        r0[7] = $r8;

        $r9 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED>;

        r0[8] = $r9;

        $r10 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED>;

        r0[9] = $r10;

        $r11 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED>;

        r0[10] = $r11;

        $r12 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED>;

        r0[11] = $r12;

        return r0;
    }

    public static androidx.test.espresso.assertion.PositionAssertions$Position[] values()
    {
        androidx.test.espresso.assertion.PositionAssertions$Position[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.test.espresso.assertion.PositionAssertions$Position: androidx.test.espresso.assertion.PositionAssertions$Position[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.test.espresso.assertion.PositionAssertions$Position[]) $r1;

        return $r2;
    }

