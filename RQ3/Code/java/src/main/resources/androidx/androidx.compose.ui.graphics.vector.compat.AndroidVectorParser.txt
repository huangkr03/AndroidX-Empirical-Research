androidx.compose.ui.graphics.vector.compat.AndroidVectorParser
<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>
<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config>
    public void <init>(org.xmlpull.v1.XmlPullParser, int)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "xmlParser");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser> = r1;

        r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config> = i0;

        return;
    }

    public void <init>(org.xmlpull.v1.XmlPullParser, int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, $i1, i2;
        kotlin.jvm.internal.DefaultConstructorMarker r2;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        i2 = 0;

     label1:
        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void <init>(org.xmlpull.v1.XmlPullParser,int)>(r1, i2);

        return;
    }

    public final org.xmlpull.v1.XmlPullParser getXmlParser()
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        $r1 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        return $r1;
    }

    public final int getConfig()
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        int $i0;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        $i0 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config>;

        return $i0;
    }

    public final void setConfig(int)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        int i0;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        i0 := @parameter0: int;

        r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config> = i0;

        return;
    }

    private final void updateConfig(int)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        int i0, $i1, $i2;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config>;

        $i2 = $i1 | i0;

        r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config> = $i2;

        return;
    }

    public final android.content.res.TypedArray obtainAttributes(android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, int[])
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        android.util.AttributeSet r3;
        int[] r4;
        android.content.res.TypedArray r5, $r6;
        int $i0;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: android.content.res.Resources$Theme;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "res");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "set");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "attrs");

        $r6 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r2, r3, r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "obtainAttributes(\n      \u2026          attrs\n        )");

        r5 = $r6;

        $i0 = virtualinvoke r5.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i0);

        return r5;
    }

    public final int getNamedInt(android.content.res.TypedArray, java.lang.String, int, int)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.TypedArray r1;
        java.lang.String r2;
        int i0, i1, i2, $i3;
        org.xmlpull.v1.XmlPullParser $r4;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typedArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "attrName");

        $r4 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        i2 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r1, $r4, r2, i0, i1);

        $i3 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i3);

        return i2;
    }

    public final float getNamedFloat(android.content.res.TypedArray, java.lang.String, int, float)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.TypedArray r1;
        java.lang.String r2;
        int i0, $i1;
        float f0, f1;
        org.xmlpull.v1.XmlPullParser $r4;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typedArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "attrName");

        $r4 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        f1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>(r1, $r4, r2, i0, f0);

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i1);

        return f1;
    }

    public final boolean getNamedBoolean(android.content.res.TypedArray, java.lang.String, int, boolean)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.TypedArray r1;
        java.lang.String r2;
        int i0, $i1;
        boolean z0, z2;
        org.xmlpull.v1.XmlPullParser $r4;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typedArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "attrName");

        $r4 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        z2 = staticinvoke <androidx.core.content.res.TypedArrayUtils: boolean getNamedBoolean(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,boolean)>(r1, $r4, r2, i0, z0);

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i1);

        return z2;
    }

    public final float getFloat(android.content.res.TypedArray, int, float)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.TypedArray r1;
        int i0, $i1;
        float f0, f1;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.TypedArray;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typedArray");

        f1 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(i0, f0);

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i1);

        return f1;
    }

    public final int getInt(android.content.res.TypedArray, int, int)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.TypedArray r1;
        int i0, i1, i2, $i3;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.TypedArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typedArray");

        i2 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(i0, i1);

        $i3 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i3);

        return i2;
    }

    public final java.lang.String getString(android.content.res.TypedArray, int)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.TypedArray r1;
        int i0, $i1;
        java.lang.String r3;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.TypedArray;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typedArray");

        r3 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getString(int)>(i0);

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i1);

        return r3;
    }

    public final float getDimension(android.content.res.TypedArray, int, float)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.TypedArray r1;
        int i0, $i1;
        float f0, f1;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.TypedArray;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typedArray");

        f1 = virtualinvoke r1.<android.content.res.TypedArray: float getDimension(int,float)>(i0, f0);

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i1);

        return f1;
    }

    public final androidx.core.content.res.ComplexColorCompat getNamedComplexColor(android.content.res.TypedArray, android.content.res.Resources$Theme, java.lang.String, int, int)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.TypedArray r1;
        android.content.res.Resources$Theme r2;
        java.lang.String r3;
        int i0, i1, $i2;
        androidx.core.content.res.ComplexColorCompat r5;
        org.xmlpull.v1.XmlPullParser $r6;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 := @parameter1: android.content.res.Resources$Theme;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typedArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "attrName");

        $r6 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        r5 = staticinvoke <androidx.core.content.res.TypedArrayUtils: androidx.core.content.res.ComplexColorCompat getNamedComplexColor(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme,java.lang.String,int,int)>(r1, $r6, r2, r3, i0, i1);

        $i2 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "result");

        return r5;
    }

    public final android.content.res.ColorStateList getNamedColorStateList(android.content.res.TypedArray, android.content.res.Resources$Theme, java.lang.String, int)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        android.content.res.TypedArray r1;
        android.content.res.Resources$Theme r2;
        java.lang.String r3;
        int i0, $i1;
        android.content.res.ColorStateList r4;
        org.xmlpull.v1.XmlPullParser $r5;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 := @parameter1: android.content.res.Resources$Theme;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typedArray");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "attrName");

        $r5 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        r4 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.ColorStateList getNamedColorStateList(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme,java.lang.String,int)>(r1, $r5, r2, r3, i0);

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        specialinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void updateConfig(int)>($i1);

        return r4;
    }

    public final org.xmlpull.v1.XmlPullParser component1()
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        $r1 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        return $r1;
    }

    public final int component2()
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        int $i0;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        $i0 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config>;

        return $i0;
    }

    public final androidx.compose.ui.graphics.vector.compat.AndroidVectorParser copy(org.xmlpull.v1.XmlPullParser, int)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0, $r2;
        org.xmlpull.v1.XmlPullParser r1;
        int i0;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "xmlParser");

        $r2 = new androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        specialinvoke $r2.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: void <init>(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        return $r2;
    }

    public static androidx.compose.ui.graphics.vector.compat.AndroidVectorParser copy$default(androidx.compose.ui.graphics.vector.compat.AndroidVectorParser, org.xmlpull.v1.XmlPullParser, int, int, java.lang.Object)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0, $r2;
        int i0, $i1, $i2, i3;
        java.lang.Object r1;
        org.xmlpull.v1.XmlPullParser r3;

        r0 := @parameter0: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r3 := @parameter1: org.xmlpull.v1.XmlPullParser;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        i3 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config>;

     label2:
        $r2 = virtualinvoke r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser copy(org.xmlpull.v1.XmlPullParser,int)>(r3, i3);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7;
        org.xmlpull.v1.XmlPullParser $r3;
        int $i0;
        java.lang.String $r8;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AndroidVectorParser(xmlParser=");

        $r3 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", config=");

        $i0 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public int hashCode()
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0;
        org.xmlpull.v1.XmlPullParser $r1;
        int $i0, $i1, $i2, i3, i4;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        $r1 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        i3 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = i3 * 31;

        $i0 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config>;

        $i2 = staticinvoke <java.lang.Integer: int hashCode(int)>($i0);

        i4 = $i1 + $i2;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.compose.ui.graphics.vector.compat.AndroidVectorParser r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.xmlpull.v1.XmlPullParser $r3, $r4;
        int $i0, $i1;

        r0 := @this: androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.compose.ui.graphics.vector.compat.AndroidVectorParser;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (androidx.compose.ui.graphics.vector.compat.AndroidVectorParser) r1;

        $r4 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        $r3 = r2.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: org.xmlpull.v1.XmlPullParser xmlParser>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = r0.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config>;

        $i0 = r2.<androidx.compose.ui.graphics.vector.compat.AndroidVectorParser: int config>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        return 1;
    }

