com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils
<com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function booleanAttributeValueFunction>
<com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function doubleAttributeValueFunction>
<com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function longAttributeValueFunction>
<com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function stringAttributeValueFunction>
    static void <clinit>()
    {
        com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$1 $r0;
        com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$2 $r1;
        com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$3 $r2;
        com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$4 $r3;

        $r0 = new com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$1;

        specialinvoke $r0.<com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$1: void <init>()>();

        <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function stringAttributeValueFunction> = $r0;

        $r1 = new com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$2;

        specialinvoke $r1.<com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$2: void <init>()>();

        <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function booleanAttributeValueFunction> = $r1;

        $r2 = new com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$3;

        specialinvoke $r2.<com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$3: void <init>()>();

        <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function longAttributeValueFunction> = $r2;

        $r3 = new com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$4;

        specialinvoke $r3.<com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$4: void <init>()>();

        <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function doubleAttributeValueFunction> = $r3;

        return;
    }

    private static io.opencensus.proto.trace.v1.AttributeValue toAttributeValueProto(io.opencensus.trace.AttributeValue)
    {
        io.opencensus.common.Function $r0, $r1, $r2, $r3, $r5;
        io.opencensus.trace.AttributeValue $r4;
        java.lang.Object $r6;
        io.opencensus.proto.trace.v1.AttributeValue $r7;

        $r4 := @parameter0: io.opencensus.trace.AttributeValue;

        $r0 = <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function stringAttributeValueFunction>;

        $r1 = <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function booleanAttributeValueFunction>;

        $r2 = <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function longAttributeValueFunction>;

        $r3 = <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.common.Function doubleAttributeValueFunction>;

        $r5 = staticinvoke <io.opencensus.common.Functions: io.opencensus.common.Function returnNull()>();

        $r6 = virtualinvoke $r4.<io.opencensus.trace.AttributeValue: java.lang.Object match(io.opencensus.common.Function,io.opencensus.common.Function,io.opencensus.common.Function,io.opencensus.common.Function,io.opencensus.common.Function)>($r0, $r1, $r2, $r3, $r5);

        $r7 = (io.opencensus.proto.trace.v1.AttributeValue) $r6;

        return $r7;
    }

    private static io.opencensus.proto.trace.v1.Span$Attributes$Builder toAttributesBuilderProto(java.util.Map, int)
    {
        java.util.Map $r0;
        int $i0;
        io.opencensus.proto.trace.v1.Span$Attributes$Builder $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry $r5;
        io.opencensus.trace.AttributeValue $r6;
        io.opencensus.proto.trace.v1.AttributeValue $r7;
        java.lang.String $r8;

        $r0 := @parameter0: java.util.Map;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <io.opencensus.proto.trace.v1.Span$Attributes: io.opencensus.proto.trace.v1.Span$Attributes$Builder newBuilder()>();

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Attributes$Builder: io.opencensus.proto.trace.v1.Span$Attributes$Builder setDroppedAttributesCount(int)>($i0);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (io.opencensus.trace.AttributeValue) $r4;

        $r7 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.AttributeValue toAttributeValueProto(io.opencensus.trace.AttributeValue)>($r6);

        if $r7 == null goto label1;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r4;

        virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Attributes$Builder: io.opencensus.proto.trace.v1.Span$Attributes$Builder putAttributeMap(java.lang.String,io.opencensus.proto.trace.v1.AttributeValue)>($r8, $r7);

        goto label1;

     label2:
        return $r1;
    }

    private static io.opencensus.proto.trace.v1.Span$Attributes toAttributesProto(io.opencensus.trace.export.SpanData$Attributes)
    {
        io.opencensus.trace.export.SpanData$Attributes $r0;
        java.util.Map $r1;
        int $i0;
        io.opencensus.proto.trace.v1.Span$Attributes$Builder $r2;
        com.google.protobuf.GeneratedMessageLite $r3;
        io.opencensus.proto.trace.v1.Span$Attributes $r4;

        $r0 := @parameter0: io.opencensus.trace.export.SpanData$Attributes;

        $r1 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$Attributes: java.util.Map getAttributeMap()>();

        $i0 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$Attributes: int getDroppedAttributesCount()>();

        $r2 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$Attributes$Builder toAttributesBuilderProto(java.util.Map,int)>($r1, $i0);

        $r3 = virtualinvoke $r2.<io.opencensus.proto.trace.v1.Span$Attributes$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r4 = (io.opencensus.proto.trace.v1.Span$Attributes) $r3;

        return $r4;
    }

    static com.google.protobuf.ByteString toByteString(byte[])
    {
        com.google.protobuf.ByteString $r0;
        byte[] $r1;

        $r1 := @parameter0: byte[];

        $r0 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r1);

        return $r0;
    }

    private static java.util.List toEntriesProto(java.util.List)
    {
        java.util.ArrayList $r0, r9;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        io.opencensus.trace.Tracestate$Entry $r4;
        io.opencensus.proto.trace.v1.Span$Tracestate$Entry$Builder $r5;
        java.lang.String $r6;
        com.google.protobuf.GeneratedMessageLite $r7;
        io.opencensus.proto.trace.v1.Span$Tracestate$Entry $r8;

        $r1 := @parameter0: java.util.List;

        r9 = new java.util.ArrayList;

        $r0 = r9;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (io.opencensus.trace.Tracestate$Entry) $r3;

        $r5 = staticinvoke <io.opencensus.proto.trace.v1.Span$Tracestate$Entry: io.opencensus.proto.trace.v1.Span$Tracestate$Entry$Builder newBuilder()>();

        $r6 = virtualinvoke $r4.<io.opencensus.trace.Tracestate$Entry: java.lang.String getKey()>();

        $r5 = virtualinvoke $r5.<io.opencensus.proto.trace.v1.Span$Tracestate$Entry$Builder: io.opencensus.proto.trace.v1.Span$Tracestate$Entry$Builder setKey(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<io.opencensus.trace.Tracestate$Entry: java.lang.String getValue()>();

        $r5 = virtualinvoke $r5.<io.opencensus.proto.trace.v1.Span$Tracestate$Entry$Builder: io.opencensus.proto.trace.v1.Span$Tracestate$Entry$Builder setValue(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<io.opencensus.proto.trace.v1.Span$Tracestate$Entry$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r8 = (io.opencensus.proto.trace.v1.Span$Tracestate$Entry) $r7;

        $r1 = (java.util.List) $r0;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        $r1 = (java.util.List) $r0;

        return $r1;
    }

    private static io.opencensus.proto.trace.v1.Span$Link toLinkProto(io.opencensus.trace.Link)
    {
        io.opencensus.trace.Link $r0;
        io.opencensus.proto.trace.v1.Span$Link$Builder $r1;
        io.opencensus.trace.TraceId $r2;
        byte[] $r3;
        com.google.protobuf.ByteString $r4;
        io.opencensus.trace.SpanId $r5;
        io.opencensus.trace.Link$Type $r6;
        io.opencensus.proto.trace.v1.Span$Link$Type $r7;
        java.util.Map $r8;
        io.opencensus.proto.trace.v1.Span$Attributes$Builder $r9;
        com.google.protobuf.GeneratedMessageLite $r10;
        io.opencensus.proto.trace.v1.Span$Link $r11;

        $r0 := @parameter0: io.opencensus.trace.Link;

        $r1 = staticinvoke <io.opencensus.proto.trace.v1.Span$Link: io.opencensus.proto.trace.v1.Span$Link$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<io.opencensus.trace.Link: io.opencensus.trace.TraceId getTraceId()>();

        $r3 = virtualinvoke $r2.<io.opencensus.trace.TraceId: byte[] getBytes()>();

        $r4 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: com.google.protobuf.ByteString toByteString(byte[])>($r3);

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Link$Builder: io.opencensus.proto.trace.v1.Span$Link$Builder setTraceId(com.google.protobuf.ByteString)>($r4);

        $r5 = virtualinvoke $r0.<io.opencensus.trace.Link: io.opencensus.trace.SpanId getSpanId()>();

        $r3 = virtualinvoke $r5.<io.opencensus.trace.SpanId: byte[] getBytes()>();

        $r4 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: com.google.protobuf.ByteString toByteString(byte[])>($r3);

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Link$Builder: io.opencensus.proto.trace.v1.Span$Link$Builder setSpanId(com.google.protobuf.ByteString)>($r4);

        $r6 = virtualinvoke $r0.<io.opencensus.trace.Link: io.opencensus.trace.Link$Type getType()>();

        $r7 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$Link$Type toLinkTypeProto(io.opencensus.trace.Link$Type)>($r6);

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Link$Builder: io.opencensus.proto.trace.v1.Span$Link$Builder setType(io.opencensus.proto.trace.v1.Span$Link$Type)>($r7);

        $r8 = virtualinvoke $r0.<io.opencensus.trace.Link: java.util.Map getAttributes()>();

        $r9 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$Attributes$Builder toAttributesBuilderProto(java.util.Map,int)>($r8, 0);

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Link$Builder: io.opencensus.proto.trace.v1.Span$Link$Builder setAttributes(io.opencensus.proto.trace.v1.Span$Attributes$Builder)>($r9);

        $r10 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Link$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r11 = (io.opencensus.proto.trace.v1.Span$Link) $r10;

        return $r11;
    }

    private static io.opencensus.proto.trace.v1.Span$Link$Type toLinkTypeProto(io.opencensus.trace.Link$Type)
    {
        io.opencensus.trace.Link$Type $r0, $r1;
        io.opencensus.proto.trace.v1.Span$Link$Type r2;

        $r1 := @parameter0: io.opencensus.trace.Link$Type;

        $r0 = <io.opencensus.trace.Link$Type: io.opencensus.trace.Link$Type PARENT_LINKED_SPAN>;

        if $r1 != $r0 goto label1;

        r2 = <io.opencensus.proto.trace.v1.Span$Link$Type: io.opencensus.proto.trace.v1.Span$Link$Type PARENT_LINKED_SPAN>;

        return r2;

     label1:
        r2 = <io.opencensus.proto.trace.v1.Span$Link$Type: io.opencensus.proto.trace.v1.Span$Link$Type CHILD_LINKED_SPAN>;

        return r2;
    }

    private static io.opencensus.proto.trace.v1.Span$Links toLinksProto(io.opencensus.trace.export.SpanData$Links)
    {
        io.opencensus.trace.export.SpanData$Links $r0;
        io.opencensus.proto.trace.v1.Span$Links$Builder $r1;
        int $i0;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        io.opencensus.trace.Link $r5;
        io.opencensus.proto.trace.v1.Span$Link $r6;
        com.google.protobuf.GeneratedMessageLite $r7;
        io.opencensus.proto.trace.v1.Span$Links $r8;

        $r0 := @parameter0: io.opencensus.trace.export.SpanData$Links;

        $r1 = staticinvoke <io.opencensus.proto.trace.v1.Span$Links: io.opencensus.proto.trace.v1.Span$Links$Builder newBuilder()>();

        $i0 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$Links: int getDroppedLinksCount()>();

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Links$Builder: io.opencensus.proto.trace.v1.Span$Links$Builder setDroppedLinksCount(int)>($i0);

        $r2 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$Links: java.util.List getLinks()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (io.opencensus.trace.Link) $r4;

        $r6 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$Link toLinkProto(io.opencensus.trace.Link)>($r5);

        virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Links$Builder: io.opencensus.proto.trace.v1.Span$Links$Builder addLink(io.opencensus.proto.trace.v1.Span$Link)>($r6);

        goto label1;

     label2:
        $r7 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Links$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r8 = (io.opencensus.proto.trace.v1.Span$Links) $r7;

        return $r8;
    }

    private static io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Type toMessageEventTypeProto(io.opencensus.trace.MessageEvent)
    {
        io.opencensus.trace.MessageEvent$Type $r0, $r1;
        io.opencensus.trace.MessageEvent $r2;
        io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Type r3;

        $r2 := @parameter0: io.opencensus.trace.MessageEvent;

        $r1 = virtualinvoke $r2.<io.opencensus.trace.MessageEvent: io.opencensus.trace.MessageEvent$Type getType()>();

        $r0 = <io.opencensus.trace.MessageEvent$Type: io.opencensus.trace.MessageEvent$Type RECEIVED>;

        if $r1 != $r0 goto label1;

        r3 = <io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Type: io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Type RECEIVED>;

        return r3;

     label1:
        r3 = <io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Type: io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Type SENT>;

        return r3;
    }

    private static io.opencensus.proto.trace.v1.Span$SpanKind toSpanKindProto(io.opencensus.trace.Span$Kind)
    {
        int[] $r0;
        int $i0;
        io.opencensus.trace.Span$Kind $r1;
        io.opencensus.proto.trace.v1.Span$SpanKind r2;

        $r1 := @parameter0: io.opencensus.trace.Span$Kind;

        $r0 = <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$5: int[] $SwitchMap$io$opencensus$trace$Span$Kind>;

        $i0 = virtualinvoke $r1.<io.opencensus.trace.Span$Kind: int ordinal()>();

        $i0 = $r0[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        r2 = <io.opencensus.proto.trace.v1.Span$SpanKind: io.opencensus.proto.trace.v1.Span$SpanKind UNRECOGNIZED>;

        return r2;

     label2:
        r2 = <io.opencensus.proto.trace.v1.Span$SpanKind: io.opencensus.proto.trace.v1.Span$SpanKind SERVER>;

        return r2;

     label3:
        r2 = <io.opencensus.proto.trace.v1.Span$SpanKind: io.opencensus.proto.trace.v1.Span$SpanKind CLIENT>;

        return r2;
    }

    public static io.opencensus.proto.trace.v1.Span toSpanProto(io.opencensus.trace.export.SpanData)
    {
        io.opencensus.trace.export.SpanData $r0;
        io.opencensus.trace.SpanContext $r1;
        io.opencensus.trace.TraceId $r2;
        io.opencensus.trace.SpanId $r3;
        io.opencensus.proto.trace.v1.Span$Builder $r4;
        byte[] $r5;
        com.google.protobuf.ByteString $r6;
        io.opencensus.trace.Tracestate $r7;
        io.opencensus.proto.trace.v1.Span$Tracestate $r8;
        java.lang.String $r9;
        io.opencensus.proto.trace.v1.TruncatableString $r10;
        io.opencensus.common.Timestamp $r11;
        com.google.protobuf.Timestamp $r12;
        io.opencensus.trace.export.SpanData$Attributes $r13;
        io.opencensus.proto.trace.v1.Span$Attributes $r14;
        io.opencensus.trace.export.SpanData$TimedEvents $r15, $r16;
        io.opencensus.proto.trace.v1.Span$TimeEvents $r17;
        io.opencensus.trace.export.SpanData$Links $r18;
        io.opencensus.proto.trace.v1.Span$Links $r19;
        io.opencensus.trace.Span$Kind $r20;
        io.opencensus.proto.trace.v1.Span$SpanKind $r21;
        io.opencensus.trace.Status $r22;
        io.opencensus.proto.trace.v1.Status $r23;
        java.lang.Integer $r24;
        com.google.protobuf.UInt32Value$Builder $r25;
        int $i0;
        com.google.protobuf.GeneratedMessageLite $r26;
        com.google.protobuf.UInt32Value $r27;
        java.lang.Boolean $r28;
        boolean $z0;
        com.google.protobuf.BoolValue $r29;
        io.opencensus.proto.trace.v1.Span $r30;

        $r0 := @parameter0: io.opencensus.trace.export.SpanData;

        $r1 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.trace.SpanContext getContext()>();

        $r2 = virtualinvoke $r1.<io.opencensus.trace.SpanContext: io.opencensus.trace.TraceId getTraceId()>();

        $r3 = virtualinvoke $r1.<io.opencensus.trace.SpanContext: io.opencensus.trace.SpanId getSpanId()>();

        $r4 = staticinvoke <io.opencensus.proto.trace.v1.Span: io.opencensus.proto.trace.v1.Span$Builder newBuilder()>();

        $r5 = virtualinvoke $r2.<io.opencensus.trace.TraceId: byte[] getBytes()>();

        $r6 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: com.google.protobuf.ByteString toByteString(byte[])>($r5);

        $r4 = virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setTraceId(com.google.protobuf.ByteString)>($r6);

        $r5 = virtualinvoke $r3.<io.opencensus.trace.SpanId: byte[] getBytes()>();

        $r6 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: com.google.protobuf.ByteString toByteString(byte[])>($r5);

        $r4 = virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setSpanId(com.google.protobuf.ByteString)>($r6);

        $r7 = virtualinvoke $r1.<io.opencensus.trace.SpanContext: io.opencensus.trace.Tracestate getTracestate()>();

        $r8 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$Tracestate toTracestateProto(io.opencensus.trace.Tracestate)>($r7);

        $r4 = virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setTracestate(io.opencensus.proto.trace.v1.Span$Tracestate)>($r8);

        $r9 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: java.lang.String getName()>();

        $r10 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.TruncatableString toTruncatableStringProto(java.lang.String)>($r9);

        $r4 = virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setName(io.opencensus.proto.trace.v1.TruncatableString)>($r10);

        $r11 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.common.Timestamp getStartTimestamp()>();

        $r12 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: com.google.protobuf.Timestamp toTimestampProto(io.opencensus.common.Timestamp)>($r11);

        $r4 = virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setStartTime(com.google.protobuf.Timestamp)>($r12);

        $r13 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.trace.export.SpanData$Attributes getAttributes()>();

        $r14 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$Attributes toAttributesProto(io.opencensus.trace.export.SpanData$Attributes)>($r13);

        $r4 = virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setAttributes(io.opencensus.proto.trace.v1.Span$Attributes)>($r14);

        $r15 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.trace.export.SpanData$TimedEvents getAnnotations()>();

        $r16 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.trace.export.SpanData$TimedEvents getMessageEvents()>();

        $r17 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$TimeEvents toTimeEventsProto(io.opencensus.trace.export.SpanData$TimedEvents,io.opencensus.trace.export.SpanData$TimedEvents)>($r15, $r16);

        $r4 = virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setTimeEvents(io.opencensus.proto.trace.v1.Span$TimeEvents)>($r17);

        $r18 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.trace.export.SpanData$Links getLinks()>();

        $r19 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$Links toLinksProto(io.opencensus.trace.export.SpanData$Links)>($r18);

        $r4 = virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setLinks(io.opencensus.proto.trace.v1.Span$Links)>($r19);

        $r20 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.trace.Span$Kind getKind()>();

        if $r20 == null goto label1;

        $r21 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$SpanKind toSpanKindProto(io.opencensus.trace.Span$Kind)>($r20);

        virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setKind(io.opencensus.proto.trace.v1.Span$SpanKind)>($r21);

     label1:
        $r22 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.trace.Status getStatus()>();

        if $r22 == null goto label2;

        $r23 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Status toStatusProto(io.opencensus.trace.Status)>($r22);

        virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setStatus(io.opencensus.proto.trace.v1.Status)>($r23);

     label2:
        $r11 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.common.Timestamp getEndTimestamp()>();

        if $r11 == null goto label3;

        $r12 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: com.google.protobuf.Timestamp toTimestampProto(io.opencensus.common.Timestamp)>($r11);

        virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setEndTime(com.google.protobuf.Timestamp)>($r12);

     label3:
        $r24 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: java.lang.Integer getChildSpanCount()>();

        if $r24 == null goto label4;

        $r25 = staticinvoke <com.google.protobuf.UInt32Value: com.google.protobuf.UInt32Value$Builder newBuilder()>();

        $i0 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        $r25 = virtualinvoke $r25.<com.google.protobuf.UInt32Value$Builder: com.google.protobuf.UInt32Value$Builder setValue(int)>($i0);

        $r26 = virtualinvoke $r25.<com.google.protobuf.UInt32Value$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r27 = (com.google.protobuf.UInt32Value) $r26;

        virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setChildSpanCount(com.google.protobuf.UInt32Value)>($r27);

     label4:
        $r28 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: java.lang.Boolean getHasRemoteParent()>();

        if $r28 == null goto label7;

        $z0 = virtualinvoke $r28.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        $r29 = staticinvoke <com.google.protobuf.BoolValue: com.google.protobuf.BoolValue of(boolean)>($z0);

        virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setSameProcessAsParentSpan(com.google.protobuf.BoolValue)>($r29);

     label7:
        $r3 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData: io.opencensus.trace.SpanId getParentSpanId()>();

        if $r3 == null goto label8;

        $z0 = virtualinvoke $r3.<io.opencensus.trace.SpanId: boolean isValid()>();

        if $z0 == 0 goto label8;

        $r5 = virtualinvoke $r3.<io.opencensus.trace.SpanId: byte[] getBytes()>();

        $r6 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: com.google.protobuf.ByteString toByteString(byte[])>($r5);

        virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: io.opencensus.proto.trace.v1.Span$Builder setParentSpanId(com.google.protobuf.ByteString)>($r6);

     label8:
        $r26 = virtualinvoke $r4.<io.opencensus.proto.trace.v1.Span$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r30 = (io.opencensus.proto.trace.v1.Span) $r26;

        return $r30;
    }

    private static io.opencensus.proto.trace.v1.Status toStatusProto(io.opencensus.trace.Status)
    {
        io.opencensus.trace.Status $r0;
        io.opencensus.proto.trace.v1.Status$Builder $r1;
        io.opencensus.trace.Status$CanonicalCode $r2;
        int $i0;
        java.lang.String $r3;
        com.google.protobuf.GeneratedMessageLite $r4;
        io.opencensus.proto.trace.v1.Status $r5;

        $r0 := @parameter0: io.opencensus.trace.Status;

        $r1 = staticinvoke <io.opencensus.proto.trace.v1.Status: io.opencensus.proto.trace.v1.Status$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<io.opencensus.trace.Status: io.opencensus.trace.Status$CanonicalCode getCanonicalCode()>();

        $i0 = virtualinvoke $r2.<io.opencensus.trace.Status$CanonicalCode: int value()>();

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Status$Builder: io.opencensus.proto.trace.v1.Status$Builder setCode(int)>($i0);

        $r3 = virtualinvoke $r0.<io.opencensus.trace.Status: java.lang.String getDescription()>();

        if $r3 == null goto label1;

        $r3 = virtualinvoke $r0.<io.opencensus.trace.Status: java.lang.String getDescription()>();

        virtualinvoke $r1.<io.opencensus.proto.trace.v1.Status$Builder: io.opencensus.proto.trace.v1.Status$Builder setMessage(java.lang.String)>($r3);

     label1:
        $r4 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Status$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r5 = (io.opencensus.proto.trace.v1.Status) $r4;

        return $r5;
    }

    private static io.opencensus.proto.trace.v1.Span$TimeEvent toTimeAnnotationProto(io.opencensus.trace.export.SpanData$TimedEvent)
    {
        io.opencensus.trace.export.SpanData$TimedEvent $r0;
        io.opencensus.proto.trace.v1.Span$TimeEvent$Builder $r1;
        io.opencensus.common.Timestamp $r2;
        com.google.protobuf.Timestamp $r3;
        java.lang.Object $r4;
        io.opencensus.trace.Annotation $r5;
        io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation$Builder $r6;
        java.lang.String $r7;
        io.opencensus.proto.trace.v1.TruncatableString $r8;
        java.util.Map $r9;
        io.opencensus.proto.trace.v1.Span$Attributes$Builder $r10;
        com.google.protobuf.GeneratedMessageLite $r11;
        io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation $r12;
        io.opencensus.proto.trace.v1.Span$TimeEvent $r13;

        $r0 := @parameter0: io.opencensus.trace.export.SpanData$TimedEvent;

        $r1 = staticinvoke <io.opencensus.proto.trace.v1.Span$TimeEvent: io.opencensus.proto.trace.v1.Span$TimeEvent$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$TimedEvent: io.opencensus.common.Timestamp getTimestamp()>();

        $r3 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: com.google.protobuf.Timestamp toTimestampProto(io.opencensus.common.Timestamp)>($r2);

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$TimeEvent$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$Builder setTime(com.google.protobuf.Timestamp)>($r3);

        $r4 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$TimedEvent: java.lang.Object getEvent()>();

        $r5 = (io.opencensus.trace.Annotation) $r4;

        $r6 = staticinvoke <io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation: io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation$Builder newBuilder()>();

        $r7 = virtualinvoke $r5.<io.opencensus.trace.Annotation: java.lang.String getDescription()>();

        $r8 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.TruncatableString toTruncatableStringProto(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation$Builder setDescription(io.opencensus.proto.trace.v1.TruncatableString)>($r8);

        $r9 = virtualinvoke $r5.<io.opencensus.trace.Annotation: java.util.Map getAttributes()>();

        $r10 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$Attributes$Builder toAttributesBuilderProto(java.util.Map,int)>($r9, 0);

        $r6 = virtualinvoke $r6.<io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation$Builder setAttributes(io.opencensus.proto.trace.v1.Span$Attributes$Builder)>($r10);

        $r11 = virtualinvoke $r6.<io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r12 = (io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation) $r11;

        virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$TimeEvent$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$Builder setAnnotation(io.opencensus.proto.trace.v1.Span$TimeEvent$Annotation)>($r12);

        $r11 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$TimeEvent$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r13 = (io.opencensus.proto.trace.v1.Span$TimeEvent) $r11;

        return $r13;
    }

    private static io.opencensus.proto.trace.v1.Span$TimeEvents toTimeEventsProto(io.opencensus.trace.export.SpanData$TimedEvents, io.opencensus.trace.export.SpanData$TimedEvents)
    {
        io.opencensus.trace.export.SpanData$TimedEvents $r0, $r1;
        io.opencensus.proto.trace.v1.Span$TimeEvents$Builder $r2;
        int $i0;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        io.opencensus.trace.export.SpanData$TimedEvent $r6;
        io.opencensus.proto.trace.v1.Span$TimeEvent $r7;
        com.google.protobuf.GeneratedMessageLite $r8;
        io.opencensus.proto.trace.v1.Span$TimeEvents $r9;

        $r0 := @parameter0: io.opencensus.trace.export.SpanData$TimedEvents;

        $r1 := @parameter1: io.opencensus.trace.export.SpanData$TimedEvents;

        $r2 = staticinvoke <io.opencensus.proto.trace.v1.Span$TimeEvents: io.opencensus.proto.trace.v1.Span$TimeEvents$Builder newBuilder()>();

        $i0 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$TimedEvents: int getDroppedEventsCount()>();

        virtualinvoke $r2.<io.opencensus.proto.trace.v1.Span$TimeEvents$Builder: io.opencensus.proto.trace.v1.Span$TimeEvents$Builder setDroppedAnnotationsCount(int)>($i0);

        $r3 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$TimedEvents: java.util.List getEvents()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (io.opencensus.trace.export.SpanData$TimedEvent) $r5;

        $r7 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$TimeEvent toTimeAnnotationProto(io.opencensus.trace.export.SpanData$TimedEvent)>($r6);

        virtualinvoke $r2.<io.opencensus.proto.trace.v1.Span$TimeEvents$Builder: io.opencensus.proto.trace.v1.Span$TimeEvents$Builder addTimeEvent(io.opencensus.proto.trace.v1.Span$TimeEvent)>($r7);

        goto label1;

     label2:
        $i0 = virtualinvoke $r1.<io.opencensus.trace.export.SpanData$TimedEvents: int getDroppedEventsCount()>();

        virtualinvoke $r2.<io.opencensus.proto.trace.v1.Span$TimeEvents$Builder: io.opencensus.proto.trace.v1.Span$TimeEvents$Builder setDroppedMessageEventsCount(int)>($i0);

        $r3 = virtualinvoke $r1.<io.opencensus.trace.export.SpanData$TimedEvents: java.util.List getEvents()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (io.opencensus.trace.export.SpanData$TimedEvent) $r5;

        $r7 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$TimeEvent toTimeMessageEventProto(io.opencensus.trace.export.SpanData$TimedEvent)>($r6);

        virtualinvoke $r2.<io.opencensus.proto.trace.v1.Span$TimeEvents$Builder: io.opencensus.proto.trace.v1.Span$TimeEvents$Builder addTimeEvent(io.opencensus.proto.trace.v1.Span$TimeEvent)>($r7);

        goto label3;

     label4:
        $r8 = virtualinvoke $r2.<io.opencensus.proto.trace.v1.Span$TimeEvents$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r9 = (io.opencensus.proto.trace.v1.Span$TimeEvents) $r8;

        return $r9;
    }

    private static io.opencensus.proto.trace.v1.Span$TimeEvent toTimeMessageEventProto(io.opencensus.trace.export.SpanData$TimedEvent)
    {
        io.opencensus.trace.export.SpanData$TimedEvent $r0;
        io.opencensus.proto.trace.v1.Span$TimeEvent$Builder $r1;
        io.opencensus.common.Timestamp $r2;
        com.google.protobuf.Timestamp $r3;
        java.lang.Object $r4;
        io.opencensus.trace.MessageEvent $r5;
        io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder $r6;
        long $l0;
        io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Type $r7;
        com.google.protobuf.GeneratedMessageLite $r8;
        io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent $r9;
        io.opencensus.proto.trace.v1.Span$TimeEvent $r10;

        $r0 := @parameter0: io.opencensus.trace.export.SpanData$TimedEvent;

        $r1 = staticinvoke <io.opencensus.proto.trace.v1.Span$TimeEvent: io.opencensus.proto.trace.v1.Span$TimeEvent$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$TimedEvent: io.opencensus.common.Timestamp getTimestamp()>();

        $r3 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: com.google.protobuf.Timestamp toTimestampProto(io.opencensus.common.Timestamp)>($r2);

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$TimeEvent$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$Builder setTime(com.google.protobuf.Timestamp)>($r3);

        $r4 = virtualinvoke $r0.<io.opencensus.trace.export.SpanData$TimedEvent: java.lang.Object getEvent()>();

        $r5 = (io.opencensus.trace.MessageEvent) $r4;

        $r6 = staticinvoke <io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent: io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder newBuilder()>();

        $l0 = virtualinvoke $r5.<io.opencensus.trace.MessageEvent: long getMessageId()>();

        $r6 = virtualinvoke $r6.<io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder setId(long)>($l0);

        $l0 = virtualinvoke $r5.<io.opencensus.trace.MessageEvent: long getCompressedMessageSize()>();

        $r6 = virtualinvoke $r6.<io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder setCompressedSize(long)>($l0);

        $l0 = virtualinvoke $r5.<io.opencensus.trace.MessageEvent: long getUncompressedMessageSize()>();

        $r6 = virtualinvoke $r6.<io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder setUncompressedSize(long)>($l0);

        $r7 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Type toMessageEventTypeProto(io.opencensus.trace.MessageEvent)>($r5);

        $r6 = virtualinvoke $r6.<io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder setType(io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Type)>($r7);

        $r8 = virtualinvoke $r6.<io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r9 = (io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent) $r8;

        virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$TimeEvent$Builder: io.opencensus.proto.trace.v1.Span$TimeEvent$Builder setMessageEvent(io.opencensus.proto.trace.v1.Span$TimeEvent$MessageEvent)>($r9);

        $r8 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$TimeEvent$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r10 = (io.opencensus.proto.trace.v1.Span$TimeEvent) $r8;

        return $r10;
    }

    static com.google.protobuf.Timestamp toTimestampProto(io.opencensus.common.Timestamp)
    {
        io.opencensus.common.Timestamp $r0;
        com.google.protobuf.Timestamp$Builder $r1;
        long $l0;
        int $i1;
        com.google.protobuf.GeneratedMessageLite $r2;
        com.google.protobuf.Timestamp $r3;

        $r0 := @parameter0: io.opencensus.common.Timestamp;

        $r1 = staticinvoke <com.google.protobuf.Timestamp: com.google.protobuf.Timestamp$Builder newBuilder()>();

        $l0 = virtualinvoke $r0.<io.opencensus.common.Timestamp: long getSeconds()>();

        $r1 = virtualinvoke $r1.<com.google.protobuf.Timestamp$Builder: com.google.protobuf.Timestamp$Builder setSeconds(long)>($l0);

        $i1 = virtualinvoke $r0.<io.opencensus.common.Timestamp: int getNanos()>();

        $r1 = virtualinvoke $r1.<com.google.protobuf.Timestamp$Builder: com.google.protobuf.Timestamp$Builder setNanos(int)>($i1);

        $r2 = virtualinvoke $r1.<com.google.protobuf.Timestamp$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r3 = (com.google.protobuf.Timestamp) $r2;

        return $r3;
    }

    private static io.opencensus.proto.trace.v1.Span$Tracestate toTracestateProto(io.opencensus.trace.Tracestate)
    {
        io.opencensus.trace.Tracestate $r0;
        io.opencensus.proto.trace.v1.Span$Tracestate$Builder $r1;
        java.util.List $r2;
        com.google.protobuf.GeneratedMessageLite $r3;
        io.opencensus.proto.trace.v1.Span$Tracestate $r4;
        java.lang.Iterable r5;

        $r0 := @parameter0: io.opencensus.trace.Tracestate;

        $r1 = staticinvoke <io.opencensus.proto.trace.v1.Span$Tracestate: io.opencensus.proto.trace.v1.Span$Tracestate$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<io.opencensus.trace.Tracestate: java.util.List getEntries()>();

        $r2 = staticinvoke <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils: java.util.List toEntriesProto(java.util.List)>($r2);

        r5 = (java.lang.Iterable) $r2;

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Tracestate$Builder: io.opencensus.proto.trace.v1.Span$Tracestate$Builder addAllEntries(java.lang.Iterable)>(r5);

        $r3 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.Span$Tracestate$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r4 = (io.opencensus.proto.trace.v1.Span$Tracestate) $r3;

        return $r4;
    }

    static io.opencensus.proto.trace.v1.TruncatableString toTruncatableStringProto(java.lang.String)
    {
        java.lang.String $r0;
        io.opencensus.proto.trace.v1.TruncatableString$Builder $r1;
        com.google.protobuf.GeneratedMessageLite $r2;
        io.opencensus.proto.trace.v1.TruncatableString $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <io.opencensus.proto.trace.v1.TruncatableString: io.opencensus.proto.trace.v1.TruncatableString$Builder newBuilder()>();

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.TruncatableString$Builder: io.opencensus.proto.trace.v1.TruncatableString$Builder setValue(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.TruncatableString$Builder: io.opencensus.proto.trace.v1.TruncatableString$Builder setTruncatedByteCount(int)>(0);

        $r2 = virtualinvoke $r1.<io.opencensus.proto.trace.v1.TruncatableString$Builder: com.google.protobuf.GeneratedMessageLite build()>();

        $r3 = (io.opencensus.proto.trace.v1.TruncatableString) $r2;

        return $r3;
    }

com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$1
    void <init>()
    {
        com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$1 $r0;

        $r0 := @this: com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$2
    void <init>()
    {
        com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$2 $r0;

        $r0 := @this: com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$3
    void <init>()
    {
        com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$3 $r0;

        $r0 := @this: com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$3;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$4
    void <init>()
    {
        com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$4 $r0;

        $r0 := @this: com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$4;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$5
<com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$5: int[] $SwitchMap$io$opencensus$trace$Span$Kind>
    static void <clinit>()
    {
        io.opencensus.trace.Span$Kind[] $r0;
        int $i0;
        int[] $r1;
        io.opencensus.trace.Span$Kind $r2;
        java.lang.Throwable $r3, $r4;

        $r0 = staticinvoke <io.opencensus.trace.Span$Kind: io.opencensus.trace.Span$Kind[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$5: int[] $SwitchMap$io$opencensus$trace$Span$Kind> = $r1;

        $r2 = <io.opencensus.trace.Span$Kind: io.opencensus.trace.Span$Kind CLIENT>;

     label1:
        $i0 = virtualinvoke $r2.<io.opencensus.trace.Span$Kind: int ordinal()>();

     label2:
        $r1[$i0] = 1;

        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        $r1 = <com.google.testing.platform.core.telemetry.opencensus.TraceProtoUtils$5: int[] $SwitchMap$io$opencensus$trace$Span$Kind>;

        $r2 = <io.opencensus.trace.Span$Kind: io.opencensus.trace.Span$Kind SERVER>;

     label5:
        $i0 = virtualinvoke $r2.<io.opencensus.trace.Span$Kind: int ordinal()>();

     label6:
        $r1[$i0] = 2;

        return;

     label7:
        $r4 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label5 to label6 with label7;
    }

