androidx.car.app.testing.TestCarContext
<androidx.car.app.testing.TestCarContext: java.util.Map mOverriddenService>
<androidx.car.app.testing.TestCarContext: androidx.car.app.IStartCarApp mStartCarApp>
<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.FakeHost mFakeHost>
<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestLifecycleOwner mTestLifecycleOwner>
<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestAppManager mTestAppManager>
<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.navigation.TestNavigationManager mTestNavigationManager>
<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestScreenManager mTestScreenManager>
<androidx.car.app.testing.TestCarContext: java.util.List mStartCarAppIntents>
<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestCarContext$PermissionRequestInfo mLastPermissionRequestInfo>
<androidx.car.app.testing.TestCarContext: boolean mHasCalledFinishCarApp>
    public void reset()
    {
        androidx.car.app.testing.TestCarContext r0;
        java.util.List $r1;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        $r1 = r0.<androidx.car.app.testing.TestCarContext: java.util.List mStartCarAppIntents>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public java.lang.Object getCarService(java.lang.Class)
    {
        androidx.car.app.testing.TestCarContext r0;
        java.lang.Class r1;
        androidx.car.app.testing.TestAppManager $r2;
        boolean $z0, $z1, $z2;
        androidx.car.app.testing.navigation.TestNavigationManager $r3;
        androidx.car.app.testing.TestScreenManager $r4;
        java.lang.String r5;
        java.lang.Object $r6, $r7, $r8;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestAppManager mTestAppManager>;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        r5 = "app";

        goto label4;

     label1:
        $r3 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.navigation.TestNavigationManager mTestNavigationManager>;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        r5 = "navigation";

        goto label4;

     label2:
        $r4 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestScreenManager mTestScreenManager>;

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r4);

        if $z2 == 0 goto label3;

        r5 = "screen";

        goto label4;

     label3:
        r5 = virtualinvoke r0.<androidx.car.app.testing.TestCarContext: java.lang.String getCarServiceName(java.lang.Class)>(r1);

     label4:
        $r6 = virtualinvoke r0.<androidx.car.app.testing.TestCarContext: java.lang.Object getCarService(java.lang.String)>(r5);

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r6);

        $r8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r7);

        return $r8;
    }

    public java.lang.Object getCarService(java.lang.String)
    {
        androidx.car.app.testing.TestCarContext r0;
        java.lang.String r1, r3;
        java.lang.Object r2, $r8;
        java.util.Map $r4;
        int $i0;
        boolean $z0, $z1, $z2;
        androidx.car.app.testing.TestScreenManager $r5;
        androidx.car.app.testing.navigation.TestNavigationManager $r6;
        androidx.car.app.testing.TestAppManager $r7;
        byte b1;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.car.app.testing.TestCarContext: java.util.Map mOverriddenService>;

        r2 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        r3 = r1;

        b1 = -1;

        $i0 = virtualinvoke r3.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -907689876: goto label4;
            case 96801: goto label2;
            case 1862666772: goto label3;
            default: goto label5;
        };

     label2:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("app");

        if $z1 == 0 goto label5;

        b1 = 0;

        goto label5;

     label3:
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("navigation");

        if $z0 == 0 goto label5;

        b1 = 1;

        goto label5;

     label4:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("screen");

        if $z2 == 0 goto label5;

        b1 = 2;

     label5:
        tableswitch(b1)
        {
            case 0: goto label6;
            case 1: goto label7;
            case 2: goto label8;
            default: goto label9;
        };

     label6:
        $r7 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestAppManager mTestAppManager>;

        return $r7;

     label7:
        $r6 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.navigation.TestNavigationManager mTestNavigationManager>;

        return $r6;

     label8:
        $r5 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestScreenManager mTestScreenManager>;

        return $r5;

     label9:
        $r8 = specialinvoke r0.<androidx.car.app.CarContext: java.lang.Object getCarService(java.lang.String)>(r1);

        return $r8;
    }

    public void startCarApp(android.content.Intent)
    {
        androidx.car.app.testing.TestCarContext r0;
        android.content.Intent r1;
        java.util.List $r2;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = r0.<androidx.car.app.testing.TestCarContext: java.util.List mStartCarAppIntents>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void finishCarApp()
    {
        androidx.car.app.testing.TestCarContext r0;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        r0.<androidx.car.app.testing.TestCarContext: boolean mHasCalledFinishCarApp> = 1;

        return;
    }

    public void requestPermissions(java.util.List, java.util.concurrent.Executor, androidx.car.app.OnRequestPermissionsListener)
    {
        androidx.car.app.testing.TestCarContext r0;
        java.util.List r1, $r6;
        java.util.concurrent.Executor r2;
        androidx.car.app.OnRequestPermissionsListener r3, $r8;
        androidx.car.app.testing.TestCarContext$PermissionRequestInfo $r4;
        java.lang.Object $r5, $r7;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.car.app.OnRequestPermissionsListener;

        $r4 = new androidx.car.app.testing.TestCarContext$PermissionRequestInfo;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r6 = (java.util.List) $r5;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r8 = (androidx.car.app.OnRequestPermissionsListener) $r7;

        specialinvoke $r4.<androidx.car.app.testing.TestCarContext$PermissionRequestInfo: void <init>(java.util.List,androidx.car.app.OnRequestPermissionsListener)>($r6, $r8);

        r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestCarContext$PermissionRequestInfo mLastPermissionRequestInfo> = $r4;

        specialinvoke r0.<androidx.car.app.CarContext: void requestPermissions(java.util.List,java.util.concurrent.Executor,androidx.car.app.OnRequestPermissionsListener)>(r1, r2, r3);

        return;
    }

    public static androidx.car.app.testing.TestCarContext createCarContext(android.content.Context)
    {
        android.content.Context r0;
        androidx.car.app.testing.TestCarContext r1, $r3;
        androidx.car.app.testing.TestLifecycleOwner $r4;
        androidx.car.app.HostDispatcher $r5;
        androidx.car.app.testing.FakeHost $r6;
        androidx.car.app.ICarHost $r7;

        r0 := @parameter0: android.content.Context;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r3 = new androidx.car.app.testing.TestCarContext;

        $r4 = new androidx.car.app.testing.TestLifecycleOwner;

        specialinvoke $r4.<androidx.car.app.testing.TestLifecycleOwner: void <init>()>();

        $r5 = new androidx.car.app.HostDispatcher;

        specialinvoke $r5.<androidx.car.app.HostDispatcher: void <init>()>();

        specialinvoke $r3.<androidx.car.app.testing.TestCarContext: void <init>(androidx.car.app.testing.TestLifecycleOwner,androidx.car.app.HostDispatcher)>($r4, $r5);

        r1 = $r3;

        virtualinvoke r1.<androidx.car.app.testing.TestCarContext: void attachBaseContext(android.content.Context)>(r0);

        $r6 = r1.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.FakeHost mFakeHost>;

        $r7 = virtualinvoke $r6.<androidx.car.app.testing.FakeHost: androidx.car.app.ICarHost getCarHost()>();

        virtualinvoke r1.<androidx.car.app.testing.TestCarContext: void setCarHost(androidx.car.app.ICarHost)>($r7);

        return r1;
    }

    public java.util.List getStartCarAppIntents()
    {
        androidx.car.app.testing.TestCarContext r0;
        java.util.List $r1, $r2;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        $r1 = r0.<androidx.car.app.testing.TestCarContext: java.util.List mStartCarAppIntents>;

        $r2 = staticinvoke <androidx.car.app.utils.CollectionUtils: java.util.List unmodifiableCopy(java.util.List)>($r1);

        return $r2;
    }

    public androidx.car.app.testing.TestCarContext$PermissionRequestInfo getLastPermissionRequestInfo()
    {
        androidx.car.app.testing.TestCarContext r0;
        androidx.car.app.testing.TestCarContext$PermissionRequestInfo $r1;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        $r1 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestCarContext$PermissionRequestInfo mLastPermissionRequestInfo>;

        return $r1;
    }

    public boolean hasCalledFinishCarApp()
    {
        androidx.car.app.testing.TestCarContext r0;
        boolean $z0;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        $z0 = r0.<androidx.car.app.testing.TestCarContext: boolean mHasCalledFinishCarApp>;

        return $z0;
    }

    public androidx.car.app.testing.FakeHost getFakeHost()
    {
        androidx.car.app.testing.TestCarContext r0;
        androidx.car.app.testing.FakeHost $r1;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        $r1 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.FakeHost mFakeHost>;

        return $r1;
    }

    public void overrideCarService(java.lang.Class, java.lang.Object)
    {
        androidx.car.app.testing.TestCarContext r0;
        java.lang.Class r1;
        java.lang.Object r2;
        java.lang.String r3;
        java.util.Map $r6;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r3 = virtualinvoke r0.<androidx.car.app.testing.TestCarContext: java.lang.String getCarServiceName(java.lang.Class)>(r1);

        $r6 = r0.<androidx.car.app.testing.TestCarContext: java.util.Map mOverriddenService>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

        return;
    }

    public androidx.car.app.testing.TestLifecycleOwner getLifecycleOwner()
    {
        androidx.car.app.testing.TestCarContext r0;
        androidx.car.app.testing.TestLifecycleOwner $r1;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        $r1 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestLifecycleOwner mTestLifecycleOwner>;

        return $r1;
    }

    public androidx.car.app.IStartCarApp getStartCarAppStub()
    {
        androidx.car.app.testing.TestCarContext r0;
        androidx.car.app.IStartCarApp $r1;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        $r1 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.IStartCarApp mStartCarApp>;

        return $r1;
    }

    androidx.car.app.ICarHost getCarHostStub()
    {
        androidx.car.app.testing.TestCarContext r0;
        androidx.car.app.testing.FakeHost $r1;
        androidx.car.app.ICarHost $r2;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        $r1 = r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.FakeHost mFakeHost>;

        $r2 = virtualinvoke $r1.<androidx.car.app.testing.FakeHost: androidx.car.app.ICarHost getCarHost()>();

        return $r2;
    }

    private void <init>(androidx.car.app.testing.TestLifecycleOwner, androidx.car.app.HostDispatcher)
    {
        androidx.car.app.testing.TestCarContext r0;
        androidx.car.app.testing.TestLifecycleOwner r1;
        androidx.car.app.HostDispatcher r2;
        androidx.lifecycle.LifecycleRegistry $r3;
        java.util.HashMap r11;
        androidx.car.app.testing.TestCarContext$StartCarAppStub r12;
        java.util.ArrayList r13;
        androidx.car.app.testing.FakeHost r14;
        androidx.car.app.testing.TestAppManager r15;
        androidx.car.app.testing.navigation.TestNavigationManager r16;
        androidx.car.app.testing.TestScreenManager r17;
        androidx.car.app.IStartCarApp r18;

        r0 := @this: androidx.car.app.testing.TestCarContext;

        r1 := @parameter0: androidx.car.app.testing.TestLifecycleOwner;

        r2 := @parameter1: androidx.car.app.HostDispatcher;

        $r3 = r1.<androidx.car.app.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry mRegistry>;

        specialinvoke r0.<androidx.car.app.CarContext: void <init>(androidx.lifecycle.Lifecycle,androidx.car.app.HostDispatcher)>($r3, r2);

        r11 = new java.util.HashMap;

        specialinvoke r11.<java.util.HashMap: void <init>()>();

        r0.<androidx.car.app.testing.TestCarContext: java.util.Map mOverriddenService> = r11;

        r12 = new androidx.car.app.testing.TestCarContext$StartCarAppStub;

        specialinvoke r12.<androidx.car.app.testing.TestCarContext$StartCarAppStub: void <init>(androidx.car.app.testing.TestCarContext)>(r0);

        r18 = (androidx.car.app.IStartCarApp) r12;

        r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.IStartCarApp mStartCarApp> = r18;

        r13 = new java.util.ArrayList;

        specialinvoke r13.<java.util.ArrayList: void <init>()>();

        r0.<androidx.car.app.testing.TestCarContext: java.util.List mStartCarAppIntents> = r13;

        r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestCarContext$PermissionRequestInfo mLastPermissionRequestInfo> = null;

        r14 = new androidx.car.app.testing.FakeHost;

        specialinvoke r14.<androidx.car.app.testing.FakeHost: void <init>(androidx.car.app.testing.TestCarContext)>(r0);

        r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.FakeHost mFakeHost> = r14;

        r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestLifecycleOwner mTestLifecycleOwner> = r1;

        r15 = new androidx.car.app.testing.TestAppManager;

        specialinvoke r15.<androidx.car.app.testing.TestAppManager: void <init>(androidx.car.app.testing.TestCarContext,androidx.car.app.HostDispatcher)>(r0, r2);

        r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestAppManager mTestAppManager> = r15;

        r16 = new androidx.car.app.testing.navigation.TestNavigationManager;

        specialinvoke r16.<androidx.car.app.testing.navigation.TestNavigationManager: void <init>(androidx.car.app.testing.TestCarContext,androidx.car.app.HostDispatcher)>(r0, r2);

        r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.navigation.TestNavigationManager mTestNavigationManager> = r16;

        r17 = new androidx.car.app.testing.TestScreenManager;

        specialinvoke r17.<androidx.car.app.testing.TestScreenManager: void <init>(androidx.car.app.testing.TestCarContext)>(r0);

        r0.<androidx.car.app.testing.TestCarContext: androidx.car.app.testing.TestScreenManager mTestScreenManager> = r17;

        return;
    }

