androidx.test.espresso.web.model.ModelCodec
<androidx.test.espresso.web.model.ModelCodec: java.lang.String TAG>
<androidx.test.espresso.web.model.ModelCodec: androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet VALUEABLE_CLASSES>
<androidx.test.espresso.web.model.ModelCodec: androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet TOP_LEVEL_CLASSES>
<androidx.test.espresso.web.model.ModelCodec: java.util.concurrent.CopyOnWriteArrayList DEJSONIZERS>
    public static androidx.test.espresso.web.model.Evaluation decodeEvaluation(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.Object r1;
        java.lang.IllegalArgumentException r2;
        java.lang.Object[] r3;
        boolean $z0;
        androidx.test.espresso.web.model.Evaluation $r4;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object decode(java.lang.String)>(r0);

        $z0 = r1 instanceof androidx.test.espresso.web.model.Evaluation;

        if $z0 != 0 goto label1;

        r2 = new java.lang.IllegalArgumentException;

        r3 = newarray (java.lang.Object)[2];

        r3[0] = r0;

        r3[1] = r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Document: \"%s\" did not decode to an evaluation. Instead: \"%s\"", r3);

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r2;

     label1:
        $r4 = (androidx.test.espresso.web.model.Evaluation) r1;

        return $r4;
    }

    private static java.lang.Number decodeNumber(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Throwable $r1, $r2, $r3, $r4;
        java.lang.Integer r5;
        java.lang.Long r6;
        java.lang.Double r7;
        java.math.BigInteger r8;
        java.math.BigDecimal r9;

        r0 := @parameter0: java.lang.String;

     label01:
        r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r0);

     label02:
        return r5;

     label03:
        $r1 := @caughtexception;

     label04:
        r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r0);

     label05:
        return r6;

     label06:
        $r3 := @caughtexception;

     label07:
        r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r0);

     label08:
        return r7;

     label09:
        $r2 := @caughtexception;

     label10:
        r8 = new java.math.BigInteger;

        specialinvoke r8.<java.math.BigInteger: void <init>(java.lang.String)>(r0);

     label11:
        return r8;

     label12:
        $r4 := @caughtexception;

        r9 = new java.math.BigDecimal;

        specialinvoke r9.<java.math.BigDecimal: void <init>(java.lang.String)>(r0);

        return r9;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
        catch java.lang.NumberFormatException from label10 to label11 with label12;
    }

    static java.lang.Object decode(java.lang.String)
    {
        java.lang.String r0, $r2, $r4, $r6;
        boolean $z0, z1;
        java.lang.Throwable $r3, $r5, r9, r12, r17, r18;
        int i0;
        java.lang.Object r7, r8;
        java.lang.RuntimeException r10, r13, r15, r16;
        java.lang.Object[] r11, r14;

        r0 := @parameter0: java.lang.String;

        staticinvoke <androidx.test.espresso.web.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label10;

        z1 = 1;

     label01:
        staticinvoke <androidx.test.espresso.web.internal.deps.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "Empty docs not supported.");

     label02:
        i0 = <android.os.Build$VERSION: int SDK_INT>;

     label03:
        if i0 >= 13 goto label06;

     label04:
        r7 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object decodeViaJSONObject(java.lang.String)>(r0);

     label05:
        return r7;

     label06:
        r8 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object decodeViaJSONReader(java.lang.String)>(r0);

     label07:
        return r8;

     label08:
        $r3 := @caughtexception;

        r9 = $r3;

        r15 = new java.lang.RuntimeException;

        r10 = r15;

        r11 = newarray (java.lang.Object)[1];

        r11[0] = r0;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not parse: %s", r11);

        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r4, r9);

        r17 = (java.lang.Throwable) r10;

        throw r17;

     label09:
        $r5 := @caughtexception;

        r12 = $r5;

        r16 = new java.lang.RuntimeException;

        r13 = r16;

        r14 = newarray (java.lang.Object)[1];

        r14[0] = r0;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not parse: %s", r14);

        specialinvoke r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r12);

        r18 = (java.lang.Throwable) r13;

        throw r18;

     label10:
        z1 = 0;

        goto label01;

        catch org.json.JSONException from label02 to label03 with label09;
        catch java.io.IOException from label02 to label03 with label08;
        catch org.json.JSONException from label04 to label05 with label09;
        catch java.io.IOException from label04 to label05 with label08;
        catch org.json.JSONException from label06 to label07 with label09;
        catch java.io.IOException from label06 to label07 with label08;
    }

    private static java.lang.Object decodeObject(android.util.JsonReader) throws java.io.IOException
    {
        java.lang.String r0, $r2, $r6, $r11, $r20;
        boolean $z0, $z1, $z3;
        java.lang.Object $r1, $r13, $r17, r24;
        int[] $r4;
        android.util.JsonToken $r5, $r19;
        int $i0, $i1;
        java.lang.Number $r7;
        java.lang.Boolean $r9;
        java.util.List $r15, r32, r37;
        android.util.JsonReader r21;
        java.util.HashMap r22;
        java.util.ArrayList r23;
        java.util.Iterator r25;
        java.lang.IllegalStateException r26, r28;
        java.lang.Object[] r27;
        java.util.Map r29, r30, r31, r33, r34, r35, r36, r38;

        r21 := @parameter0: android.util.JsonReader;

        r22 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.collect.Maps: java.util.HashMap newHashMap()>();

        r23 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        virtualinvoke r21.<android.util.JsonReader: void beginObject()>();

     label01:
        $z3 = virtualinvoke r21.<android.util.JsonReader: boolean hasNext()>();

        if $z3 == 0 goto label08;

        r0 = virtualinvoke r21.<android.util.JsonReader: java.lang.String nextName()>();

        $r4 = <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>;

        $r5 = virtualinvoke r21.<android.util.JsonReader: android.util.JsonToken peek()>();

        $i0 = virtualinvoke $r5.<android.util.JsonToken: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label07;
            case 2: goto label06;
            case 3: goto label05;
            case 4: goto label04;
            case 5: goto label03;
            case 6: goto label02;
            default: goto label11;
        };

     label02:
        $r6 = virtualinvoke r21.<android.util.JsonReader: java.lang.String nextString()>();

        $r7 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Number decodeNumber(java.lang.String)>($r6);

        r29 = (java.util.Map) r22;

        interfaceinvoke r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r7);

        goto label01;

     label03:
        $z1 = virtualinvoke r21.<android.util.JsonReader: boolean nextBoolean()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r30 = (java.util.Map) r22;

        interfaceinvoke r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9);

        goto label01;

     label04:
        $r11 = virtualinvoke r21.<android.util.JsonReader: java.lang.String nextString()>();

        r31 = (java.util.Map) r22;

        interfaceinvoke r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r11);

        goto label01;

     label05:
        virtualinvoke r21.<android.util.JsonReader: void nextNull()>();

        r32 = (java.util.List) r23;

        interfaceinvoke r32.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r13 = <org.json.JSONObject: java.lang.Object NULL>;

        r33 = (java.util.Map) r22;

        interfaceinvoke r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r13);

        goto label01;

     label06:
        $r15 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.util.List decodeArray(android.util.JsonReader)>(r21);

        r34 = (java.util.Map) r22;

        interfaceinvoke r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r15);

        goto label01;

     label07:
        $r17 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object decodeObject(android.util.JsonReader)>(r21);

        r35 = (java.util.Map) r22;

        interfaceinvoke r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r17);

        goto label01;

     label08:
        virtualinvoke r21.<android.util.JsonReader: void endObject()>();

        r36 = (java.util.Map) r22;

        r24 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object maybeReplaceMap(java.util.Map)>(r36);

        if r24 == null goto label09;

        return r24;

     label09:
        r37 = (java.util.List) r23;

        r25 = interfaceinvoke r37.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r1 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.String) $r1;

        r38 = (java.util.Map) r22;

        interfaceinvoke r38.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        goto label10;

     label11:
        r28 = new java.lang.IllegalStateException;

        r26 = r28;

        r27 = newarray (java.lang.Object)[1];

        $r19 = virtualinvoke r21.<android.util.JsonReader: android.util.JsonToken peek()>();

        r27[0] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: bogus token.", r27);

        specialinvoke r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw r26;

     label12:
        return r22;
    }

    private static java.lang.Object decodeObject(org.json.JSONObject) throws org.json.JSONException
    {
        java.util.ArrayList r0;
        java.util.HashMap r1;
        java.util.Iterator r2, r20;
        java.lang.String r3, $r6;
        java.lang.Object r4, $r5, $r8, $r14, $r16, r19;
        boolean $z0, $z1, $z2, $z3, $z5;
        org.json.JSONArray $r10;
        java.util.List $r11, r21, r27;
        org.json.JSONObject $r13, r18;
        java.util.Map r22, r23, r24, r25, r26, r28;

        r18 := @parameter0: org.json.JSONObject;

        r0 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        r1 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.collect.Maps: java.util.HashMap newHashMap()>();

        r2 = virtualinvoke r18.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r8;

        $z1 = virtualinvoke r18.<org.json.JSONObject: boolean isNull(java.lang.String)>(r3);

        if $z1 == 0 goto label2;

        r21 = (java.util.List) r0;

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r16 = <org.json.JSONObject: java.lang.Object NULL>;

        r22 = (java.util.Map) r1;

        interfaceinvoke r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r16);

        goto label1;

     label2:
        r4 = virtualinvoke r18.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(r3);

        $z2 = r4 instanceof org.json.JSONObject;

        if $z2 == 0 goto label3;

        $r13 = (org.json.JSONObject) r4;

        $r14 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object decodeObject(org.json.JSONObject)>($r13);

        r23 = (java.util.Map) r1;

        interfaceinvoke r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r14);

        goto label1;

     label3:
        $z3 = r4 instanceof org.json.JSONArray;

        if $z3 == 0 goto label4;

        $r10 = (org.json.JSONArray) r4;

        $r11 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.util.List decodeArray(org.json.JSONArray)>($r10);

        r24 = (java.util.Map) r1;

        interfaceinvoke r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);

        goto label1;

     label4:
        r25 = (java.util.Map) r1;

        interfaceinvoke r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        goto label1;

     label5:
        r26 = (java.util.Map) r1;

        r19 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object maybeReplaceMap(java.util.Map)>(r26);

        if r19 == null goto label6;

        return r19;

     label6:
        r27 = (java.util.List) r0;

        r20 = interfaceinvoke r27.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        r28 = (java.util.Map) r1;

        interfaceinvoke r28.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        goto label7;

     label8:
        return r1;
    }

    private static java.lang.Object decodeViaJSONObject(java.lang.String) throws org.json.JSONException
    {
        java.lang.String r0, $r6;
        java.lang.StringBuilder r1, $r4, $r5;
        boolean $z0, $z1;
        org.json.JSONObject $r2;
        java.lang.Object $r3, r10;
        org.json.JSONArray $r7;
        java.util.List $r8;
        org.json.JSONTokener r9;
        java.lang.IllegalArgumentException r11;

        r0 := @parameter0: java.lang.String;

        r9 = new org.json.JSONTokener;

        specialinvoke r9.<org.json.JSONTokener: void <init>(java.lang.String)>(r0);

        r10 = virtualinvoke r9.<org.json.JSONTokener: java.lang.Object nextValue()>();

        $z0 = r10 instanceof org.json.JSONArray;

        if $z0 == 0 goto label1;

        $r7 = (org.json.JSONArray) r10;

        $r8 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.util.List decodeArray(org.json.JSONArray)>($r7);

        return $r8;

     label1:
        $z1 = r10 instanceof org.json.JSONObject;

        if $z1 != 0 goto label2;

        r11 = new java.lang.IllegalArgumentException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No top level object or array: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw r11;

     label2:
        $r2 = (org.json.JSONObject) r10;

        $r3 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object decodeObject(org.json.JSONObject)>($r2);

        return $r3;
    }

    private static java.lang.Object decodeViaJSONReader(java.lang.String) throws java.io.IOException
    {
        java.lang.StringBuilder r0, $r3, $r4;
        int[] $r1;
        android.util.JsonToken $r2;
        int $i0, $i1;
        java.lang.String $r5, r11;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, r16, r18, r19, r20;
        android.util.JsonReader r12;
        java.io.StringReader r13;
        java.util.List r14;
        java.lang.Object r15;
        java.lang.IllegalStateException r17;

        r11 := @parameter0: java.lang.String;

     label01:
        r12 = new android.util.JsonReader;

     label02:
        r13 = new java.io.StringReader;

        specialinvoke r13.<java.io.StringReader: void <init>(java.lang.String)>(r11);

        specialinvoke r12.<android.util.JsonReader: void <init>(java.io.Reader)>(r13);

     label03:
        $r1 = <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>;

        $r2 = virtualinvoke r12.<android.util.JsonReader: android.util.JsonToken peek()>();

        $i0 = virtualinvoke $r2.<android.util.JsonToken: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label07;
            case 2: goto label04;
            default: goto label14;
        };

     label04:
        r14 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.util.List decodeArray(android.util.JsonReader)>(r12);

     label05:
        virtualinvoke r12.<android.util.JsonReader: void close()>();

     label06:
        return r14;

     label07:
        r15 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object decodeObject(android.util.JsonReader)>(r12);

     label08:
        virtualinvoke r12.<android.util.JsonReader: void close()>();

     label09:
        return r15;

     label10:
        $r8 := @caughtexception;

        r16 = $r8;

        r12 = null;

     label11:
        if r12 == null goto label13;

     label12:
        virtualinvoke r12.<android.util.JsonReader: void close()>();

     label13:
        throw r16;

     label14:
        r17 = new java.lang.IllegalStateException;

        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bogus document: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw r17;

     label15:
        $r9 := @caughtexception;

        r16 = $r9;

        goto label11;

     label16:
        $r7 := @caughtexception;

        r18 = $r7;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("JS_CODEC", "json reader - close exception", r18);

        goto label06;

     label17:
        $r10 := @caughtexception;

        r19 = $r10;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("JS_CODEC", "json reader - close exception", r19);

        goto label09;

     label18:
        $r6 := @caughtexception;

        r20 = $r6;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("JS_CODEC", "json reader - close exception", r20);

        goto label13;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label05 with label15;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.io.IOException from label08 to label09 with label17;
        catch java.io.IOException from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    private static java.lang.Object maybeReplaceMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r1;
        java.lang.Object r2, $r4;
        java.util.concurrent.CopyOnWriteArrayList $r3;
        boolean $z0;
        androidx.test.espresso.web.model.JSONAble$DeJSONFactory $r5;

        r0 := @parameter0: java.util.Map;

        $r3 = <androidx.test.espresso.web.model.ModelCodec: java.util.concurrent.CopyOnWriteArrayList DEJSONIZERS>;

        r1 = virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (androidx.test.espresso.web.model.JSONAble$DeJSONFactory) $r4;

        r2 = interfaceinvoke $r5.<androidx.test.espresso.web.model.JSONAble$DeJSONFactory: java.lang.Object attemptDeJSONize(java.util.Map)>(r0);

        if r2 == null goto label1;

        return r2;

     label2:
        return null;
    }

    public static java.lang.String encode(java.lang.Object)
    {
        java.lang.Class $r1;
        androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet $r2;
        java.lang.String $r3, $r5, $r9, r11, r12, r14, r17, r20, r23;
        androidx.test.espresso.web.model.JSONAble $r4;
        java.lang.Throwable $r6, r18, r30;
        java.lang.StringBuilder $r7, $r8, r21, r27;
        java.lang.Object r10;
        boolean z0, z1, z2, z3, z4, z5;
        org.json.JSONObject r13, r25;
        org.json.JSONStringer r15, $r16, r26;
        java.lang.RuntimeException r19, r28;
        java.lang.IllegalArgumentException r22, r29;
        java.lang.Object[] r24;

        r10 := @parameter0: java.lang.Object;

        staticinvoke <androidx.test.espresso.web.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r10);

     label01:
        z0 = r10 instanceof org.json.JSONObject;

     label02:
        if z0 == 0 goto label05;

     label03:
        r11 = virtualinvoke r10.<java.lang.Object: java.lang.String toString()>();

     label04:
        return r11;

     label05:
        z1 = r10 instanceof org.json.JSONArray;

     label06:
        if z1 == 0 goto label09;

     label07:
        r12 = virtualinvoke r10.<java.lang.Object: java.lang.String toString()>();

     label08:
        return r12;

     label09:
        z2 = r10 instanceof androidx.test.espresso.web.model.JSONAble;

     label10:
        if z2 == 0 goto label13;

     label11:
        r25 = new org.json.JSONObject;

        r13 = r25;

        $r4 = (androidx.test.espresso.web.model.JSONAble) r10;

        $r5 = interfaceinvoke $r4.<androidx.test.espresso.web.model.JSONAble: java.lang.String toJSONString()>();

        specialinvoke r25.<org.json.JSONObject: void <init>(java.lang.String)>($r5);

        r14 = virtualinvoke r13.<org.json.JSONObject: java.lang.String toString()>();

     label12:
        return r14;

     label13:
        z3 = r10 instanceof java.lang.Iterable;

     label14:
        if z3 != 0 goto label19;

     label15:
        z4 = r10 instanceof java.util.Map;

     label16:
        if z4 != 0 goto label19;

     label17:
        z5 = r10 instanceof java.lang.Object[];

     label18:
        if z5 == 0 goto label22;

     label19:
        r26 = new org.json.JSONStringer;

        r15 = r26;

        specialinvoke r26.<org.json.JSONStringer: void <init>()>();

        $r16 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: org.json.JSONStringer encodeHelper(java.lang.Object,org.json.JSONStringer)>(r10, r15);

        r17 = virtualinvoke $r16.<org.json.JSONStringer: java.lang.String toString()>();

     label20:
        return r17;

     label21:
        $r6 := @caughtexception;

        r18 = $r6;

        r28 = new java.lang.RuntimeException;

        r19 = r28;

        r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r10);

        r27 = new java.lang.StringBuilder;

        r21 = r27;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encode failed: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r28.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r18);

        r30 = (java.lang.Throwable) r19;

        throw r30;

     label22:
        r29 = new java.lang.IllegalArgumentException;

        r22 = r29;

        r23 = "%s: not a valid top level class. Want one of: %s";

        r24 = newarray (java.lang.Object)[2];

     label23:
        $r1 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        r24[0] = $r1;

        goto label25;

     label24:
        $r2 = <androidx.test.espresso.web.model.ModelCodec: androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet TOP_LEVEL_CLASSES>;

        r24[1] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r23, r24);

        specialinvoke r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw r22;

     label25:
        goto label24;

        catch org.json.JSONException from label01 to label02 with label21;
        catch org.json.JSONException from label03 to label04 with label21;
        catch org.json.JSONException from label05 to label06 with label21;
        catch org.json.JSONException from label07 to label08 with label21;
        catch org.json.JSONException from label09 to label10 with label21;
        catch org.json.JSONException from label11 to label12 with label21;
        catch org.json.JSONException from label13 to label14 with label21;
        catch org.json.JSONException from label15 to label16 with label21;
        catch org.json.JSONException from label17 to label18 with label21;
        catch org.json.JSONException from label19 to label20 with label21;
        catch org.json.JSONException from label22 to label23 with label21;
        catch org.json.JSONException from label23 to label25 with label21;
    }

    private static java.util.List decodeArray(android.util.JsonReader) throws java.io.IOException
    {
        android.util.JsonReader r0;
        java.lang.Object[] r1;
        int[] $r2;
        android.util.JsonToken $r3, $r10;
        int $i0, $i1;
        java.lang.String $r4, $r7, $r11;
        java.lang.Number $r5;
        boolean $z1, $z7;
        java.lang.Boolean $r6;
        java.util.List $r8, r15, r16, r17, r18, r19, r20, r21;
        java.lang.Object $r9;
        java.util.ArrayList r12;
        java.lang.IllegalStateException r13, r14;

        r0 := @parameter0: android.util.JsonReader;

        r12 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        virtualinvoke r0.<android.util.JsonReader: void beginArray()>();

     label1:
        $z7 = virtualinvoke r0.<android.util.JsonReader: boolean hasNext()>();

        if $z7 == 0 goto label9;

        $r2 = <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>;

        $r3 = virtualinvoke r0.<android.util.JsonReader: android.util.JsonToken peek()>();

        $i0 = virtualinvoke $r3.<android.util.JsonToken: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label3;
            case 6: goto label2;
            default: goto label8;
        };

     label2:
        $r4 = virtualinvoke r0.<android.util.JsonReader: java.lang.String nextString()>();

        $r5 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Number decodeNumber(java.lang.String)>($r4);

        r15 = (java.util.List) r12;

        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label3:
        $z1 = virtualinvoke r0.<android.util.JsonReader: boolean nextBoolean()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r16 = (java.util.List) r12;

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label4:
        $r7 = virtualinvoke r0.<android.util.JsonReader: java.lang.String nextString()>();

        r17 = (java.util.List) r12;

        interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label5:
        virtualinvoke r0.<android.util.JsonReader: void nextNull()>();

        r18 = (java.util.List) r12;

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>(null);

        goto label1;

     label6:
        $r8 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.util.List decodeArray(android.util.JsonReader)>(r0);

        r19 = (java.util.List) r12;

        interfaceinvoke r19.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label7:
        $r9 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object decodeObject(android.util.JsonReader)>(r0);

        r20 = (java.util.List) r12;

        interfaceinvoke r20.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label8:
        r14 = new java.lang.IllegalStateException;

        r13 = r14;

        r1 = newarray (java.lang.Object)[1];

        $r10 = virtualinvoke r0.<android.util.JsonReader: android.util.JsonToken peek()>();

        r1[0] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: bogus token", r1);

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw r13;

     label9:
        virtualinvoke r0.<android.util.JsonReader: void endArray()>();

        r21 = (java.util.List) r12;

        return r21;
    }

    private static java.util.List decodeArray(org.json.JSONArray) throws org.json.JSONException
    {
        org.json.JSONArray r0, $r3;
        java.util.ArrayList r1;
        java.lang.Object r2, $r6;
        int $i0, i1;
        boolean $z0, $z1, $z2;
        java.util.List $r4, r7, r8, r9, r10, r11;
        org.json.JSONObject $r5;

        r0 := @parameter0: org.json.JSONArray;

        r1 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.json.JSONArray: int length()>();

        if i1 >= $i0 goto label6;

        $z0 = virtualinvoke r0.<org.json.JSONArray: boolean isNull(int)>(i1);

        if $z0 == 0 goto label3;

        r7 = (java.util.List) r1;

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(null);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r2 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object get(int)>(i1);

        $z1 = r2 instanceof org.json.JSONObject;

        if $z1 == 0 goto label4;

        $r5 = (org.json.JSONObject) r2;

        $r6 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.lang.Object decodeObject(org.json.JSONObject)>($r5);

        r8 = (java.util.List) r1;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label2;

     label4:
        $z2 = r2 instanceof org.json.JSONArray;

        if $z2 == 0 goto label5;

        $r3 = (org.json.JSONArray) r2;

        $r4 = staticinvoke <androidx.test.espresso.web.model.ModelCodec: java.util.List decodeArray(org.json.JSONArray)>($r3);

        r9 = (java.util.List) r1;

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label2;

     label5:
        r10 = (java.util.List) r1;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label2;

     label6:
        r11 = (java.util.List) r1;

        return r11;
    }

    private static org.json.JSONStringer encodeHelper(java.lang.Object, org.json.JSONStringer) throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8;
        androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet $r1, $r3;
        java.lang.Class $r2, $r5, $r6;
        java.lang.Object $r4, $r13, $r18, $r24, $r25, $r28, r31;
        androidx.test.espresso.web.model.JSONAble $r8;
        java.lang.String $r9, $r26;
        java.lang.Iterable $r16;
        java.util.Map $r21;
        java.util.Set $r22;
        java.util.Iterator r32, r34;
        java.util.Map$Entry r33;
        java.lang.Object[] r35;
        int i0, i1;
        org.json.JSONObject r36;
        androidx.test.espresso.web.internal.deps.guava.collect.UnmodifiableIterator r37;

        r31 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.json.JSONStringer;

        if r31 != null goto label02;

        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>(r31);

     label01:
        return r0;

     label02:
        $z0 = r31 instanceof java.util.Map;

        if $z0 == 0 goto label05;

        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer object()>();

        $r21 = (java.util.Map) r31;

        $r22 = interfaceinvoke $r21.<java.util.Map: java.util.Set entrySet()>();

        r32 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label04;

        $r24 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.util.Map$Entry) $r24;

        $r25 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer key(java.lang.String)>($r26);

        $r28 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <androidx.test.espresso.web.model.ModelCodec: org.json.JSONStringer encodeHelper(java.lang.Object,org.json.JSONStringer)>($r28, r0);

        goto label03;

     label04:
        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer endObject()>();

        goto label01;

     label05:
        $z1 = r31 instanceof java.lang.Iterable;

        if $z1 == 0 goto label08;

        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer array()>();

        $r16 = (java.lang.Iterable) r31;

        r34 = interfaceinvoke $r16.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label07;

        $r18 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <androidx.test.espresso.web.model.ModelCodec: org.json.JSONStringer encodeHelper(java.lang.Object,org.json.JSONStringer)>($r18, r0);

        goto label06;

     label07:
        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer endArray()>();

        goto label01;

     label08:
        $z2 = r31 instanceof java.lang.Object[];

        if $z2 == 0 goto label11;

        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer array()>();

        r35 = (java.lang.Object[]) r31;

        i0 = lengthof r35;

        i1 = 0;

     label09:
        if i1 >= i0 goto label10;

        $r13 = r35[i1];

        staticinvoke <androidx.test.espresso.web.model.ModelCodec: org.json.JSONStringer encodeHelper(java.lang.Object,org.json.JSONStringer)>($r13, r0);

        i1 = i1 + 1;

        goto label09;

     label10:
        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer endArray()>();

        goto label01;

     label11:
        $z3 = r31 instanceof androidx.test.espresso.web.model.JSONAble;

        if $z3 == 0 goto label12;

        r36 = new org.json.JSONObject;

        $r8 = (androidx.test.espresso.web.model.JSONAble) r31;

        $r9 = interfaceinvoke $r8.<androidx.test.espresso.web.model.JSONAble: java.lang.String toJSONString()>();

        specialinvoke r36.<org.json.JSONObject: void <init>(java.lang.String)>($r9);

        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>(r36);

        goto label01;

     label12:
        $r1 = <androidx.test.espresso.web.model.ModelCodec: androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet VALUEABLE_CLASSES>;

        r37 = virtualinvoke $r1.<androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.web.internal.deps.guava.collect.UnmodifiableIterator iterator()>();

        z7 = 0;

     label13:
        $z8 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label14;

        $r4 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Class) $r4;

        $r6 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>();

        $z4 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z4 == 0 goto label13;

        virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>(r31);

        z7 = 1;

        goto label13;

     label14:
        $r2 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = <androidx.test.espresso.web.model.ModelCodec: androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet VALUEABLE_CLASSES>;

        staticinvoke <androidx.test.espresso.web.internal.deps.guava.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)>(z7, "%s: not encodable. Want one of: %s", $r2, $r3);

        goto label01;
    }

    static void <clinit>()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        androidx.test.espresso.web.model.JSONAble$DeJSONFactory[] r1;
        androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet $r2, $r4;
        java.lang.Class[] $r3;
        androidx.test.espresso.web.model.JSONAble$DeJSONFactory $r5, $r6, $r7;
        java.util.ArrayList $r8;

        $r2 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", class "Ljava/lang/Number;", class "Ljava/lang/String;", class "Lorg/json/JSONObject;", class "Lorg/json/JSONArray;");

        <androidx.test.espresso.web.model.ModelCodec: androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet VALUEABLE_CLASSES> = $r2;

        $r3 = newarray (java.lang.Class)[0];

        $r4 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet: androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(class "Lorg/json/JSONObject;", class "Lorg/json/JSONArray;", class "Ljava/lang/Iterable;", class "[Ljava/lang/Object;", class "Ljava/util/Map;", class "Landroidx/test/espresso/web/model/JSONAble;", $r3);

        <androidx.test.espresso.web.model.ModelCodec: androidx.test.espresso.web.internal.deps.guava.collect.ImmutableSet TOP_LEVEL_CLASSES> = $r4;

        r0 = new java.util.concurrent.CopyOnWriteArrayList;

        r1 = newarray (androidx.test.espresso.web.model.JSONAble$DeJSONFactory)[3];

        $r5 = <androidx.test.espresso.web.model.Evaluation: androidx.test.espresso.web.model.JSONAble$DeJSONFactory DEJSONIZER>;

        r1[0] = $r5;

        $r6 = <androidx.test.espresso.web.model.WindowReference: androidx.test.espresso.web.model.JSONAble$DeJSONFactory DEJSONIZER>;

        r1[1] = $r6;

        $r7 = <androidx.test.espresso.web.model.ElementReference: androidx.test.espresso.web.model.JSONAble$DeJSONFactory DEJSONIZER>;

        r1[2] = $r7;

        $r8 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>(r1);

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>($r8);

        <androidx.test.espresso.web.model.ModelCodec: java.util.concurrent.CopyOnWriteArrayList DEJSONIZERS> = r0;

        return;
    }

    private void <init>()
    {
        androidx.test.espresso.web.model.ModelCodec r0;

        r0 := @this: androidx.test.espresso.web.model.ModelCodec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void addDeJSONFactory(androidx.test.espresso.web.model.JSONAble$DeJSONFactory)
    {
        androidx.test.espresso.web.model.JSONAble$DeJSONFactory r0, $r3;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        java.lang.Object $r2;

        r0 := @parameter0: androidx.test.espresso.web.model.JSONAble$DeJSONFactory;

        $r1 = <androidx.test.espresso.web.model.ModelCodec: java.util.concurrent.CopyOnWriteArrayList DEJSONIZERS>;

        $r2 = staticinvoke <androidx.test.espresso.web.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (androidx.test.espresso.web.model.JSONAble$DeJSONFactory) $r2;

        virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>($r3);

        return;
    }

    public static void removeDeJSONFactory(androidx.test.espresso.web.model.JSONAble$DeJSONFactory)
    {
        androidx.test.espresso.web.model.JSONAble$DeJSONFactory r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @parameter0: androidx.test.espresso.web.model.JSONAble$DeJSONFactory;

        $r1 = <androidx.test.espresso.web.model.ModelCodec: java.util.concurrent.CopyOnWriteArrayList DEJSONIZERS>;

        virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r0);

        return;
    }

androidx.test.espresso.web.model.ModelCodec$1
<androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>
    static void <clinit>()
    {
        android.util.JsonToken[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1, $r3, $r5, $r12, $r14, $r16, $r18;
        android.util.JsonToken $r2, $r4, $r13, $r15, $r17, $r19;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;

        $r0 = staticinvoke <android.util.JsonToken: android.util.JsonToken[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken> = $r1;

     label01:
        $r3 = <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>;

        $r2 = <android.util.JsonToken: android.util.JsonToken BEGIN_OBJECT>;

        $i1 = virtualinvoke $r2.<android.util.JsonToken: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        $r5 = <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>;

        $r4 = <android.util.JsonToken: android.util.JsonToken BEGIN_ARRAY>;

        $i2 = virtualinvoke $r4.<android.util.JsonToken: int ordinal()>();

        $r5[$i2] = 2;

     label03:
        $r12 = <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>;

        $r13 = <android.util.JsonToken: android.util.JsonToken NULL>;

        $i3 = virtualinvoke $r13.<android.util.JsonToken: int ordinal()>();

        $r12[$i3] = 3;

     label04:
        $r14 = <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>;

        $r15 = <android.util.JsonToken: android.util.JsonToken STRING>;

        $i4 = virtualinvoke $r15.<android.util.JsonToken: int ordinal()>();

        $r14[$i4] = 4;

     label05:
        $r16 = <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>;

        $r17 = <android.util.JsonToken: android.util.JsonToken BOOLEAN>;

        $i5 = virtualinvoke $r17.<android.util.JsonToken: int ordinal()>();

        $r16[$i5] = 5;

     label06:
        $r18 = <androidx.test.espresso.web.model.ModelCodec$1: int[] $SwitchMap$android$util$JsonToken>;

        $r19 = <android.util.JsonToken: android.util.JsonToken NUMBER>;

        $i6 = virtualinvoke $r19.<android.util.JsonToken: int ordinal()>();

        $r18[$i6] = 6;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

        goto label02;

     label09:
        $r11 := @caughtexception;

        goto label03;

     label10:
        $r6 := @caughtexception;

        goto label04;

     label11:
        $r10 := @caughtexception;

        goto label05;

     label12:
        $r7 := @caughtexception;

        goto label06;

     label13:
        $r9 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label08;
        catch java.lang.NoSuchFieldError from label02 to label03 with label09;
        catch java.lang.NoSuchFieldError from label03 to label04 with label10;
        catch java.lang.NoSuchFieldError from label04 to label05 with label11;
        catch java.lang.NoSuchFieldError from label05 to label06 with label12;
        catch java.lang.NoSuchFieldError from label06 to label07 with label13;
    }

