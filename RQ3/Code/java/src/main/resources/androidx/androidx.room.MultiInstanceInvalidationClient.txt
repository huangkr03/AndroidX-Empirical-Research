androidx.room.MultiInstanceInvalidationClient
<androidx.room.MultiInstanceInvalidationClient: java.lang.String name>
<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker invalidationTracker>
<androidx.room.MultiInstanceInvalidationClient: java.util.concurrent.Executor executor>
<androidx.room.MultiInstanceInvalidationClient: android.content.Context appContext>
<androidx.room.MultiInstanceInvalidationClient: int clientId>
<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker$Observer observer>
<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationService service>
<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationCallback callback>
<androidx.room.MultiInstanceInvalidationClient: java.util.concurrent.atomic.AtomicBoolean stopped>
<androidx.room.MultiInstanceInvalidationClient: android.content.ServiceConnection serviceConnection>
<androidx.room.MultiInstanceInvalidationClient: java.lang.Runnable setUpRunnable>
<androidx.room.MultiInstanceInvalidationClient: java.lang.Runnable removeObserverRunnable>
    public void <init>(android.content.Context, java.lang.String, android.content.Intent, androidx.room.InvalidationTracker, java.util.concurrent.Executor)
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        android.content.Context r1, $r9, $r24;
        java.lang.String r2;
        android.content.Intent r3;
        androidx.room.InvalidationTracker r4, $r17;
        java.util.concurrent.Executor r5;
        java.util.Set r6;
        java.lang.String[] r7, $r19;
        java.util.Collection r8;
        androidx.room.MultiInstanceInvalidationClient$callback$1 $r10;
        androidx.room.IMultiInstanceInvalidationCallback $r11;
        java.util.concurrent.atomic.AtomicBoolean $r12;
        androidx.room.MultiInstanceInvalidationClient$serviceConnection$1 $r13;
        android.content.ServiceConnection $r14, $r23;
        java.lang.Runnable $r15, $r16;
        java.util.Map $r18;
        java.lang.Object[] $r20;
        androidx.room.MultiInstanceInvalidationClient$1 $r21;
        androidx.room.InvalidationTracker$Observer $r22;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.Intent;

        r4 := @parameter3: androidx.room.InvalidationTracker;

        r5 := @parameter4: java.util.concurrent.Executor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "serviceIntent");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "invalidationTracker");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "executor");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.MultiInstanceInvalidationClient: java.lang.String name> = r2;

        r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker invalidationTracker> = r4;

        r0.<androidx.room.MultiInstanceInvalidationClient: java.util.concurrent.Executor executor> = r5;

        $r9 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<androidx.room.MultiInstanceInvalidationClient: android.content.Context appContext> = $r9;

        $r10 = new androidx.room.MultiInstanceInvalidationClient$callback$1;

        specialinvoke $r10.<androidx.room.MultiInstanceInvalidationClient$callback$1: void <init>(androidx.room.MultiInstanceInvalidationClient)>(r0);

        $r11 = (androidx.room.IMultiInstanceInvalidationCallback) $r10;

        r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationCallback callback> = $r11;

        $r12 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.room.MultiInstanceInvalidationClient: java.util.concurrent.atomic.AtomicBoolean stopped> = $r12;

        $r13 = new androidx.room.MultiInstanceInvalidationClient$serviceConnection$1;

        specialinvoke $r13.<androidx.room.MultiInstanceInvalidationClient$serviceConnection$1: void <init>(androidx.room.MultiInstanceInvalidationClient)>(r0);

        $r14 = (android.content.ServiceConnection) $r13;

        r0.<androidx.room.MultiInstanceInvalidationClient: android.content.ServiceConnection serviceConnection> = $r14;

        $r15 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.MultiInstanceInvalidationClient)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.MultiInstanceInvalidationClient: void setUpRunnable$lambda$1(androidx.room.MultiInstanceInvalidationClient)>, methodtype: void __METHODTYPE__());

        r0.<androidx.room.MultiInstanceInvalidationClient: java.lang.Runnable setUpRunnable> = $r15;

        $r16 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.MultiInstanceInvalidationClient)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.MultiInstanceInvalidationClient: void removeObserverRunnable$lambda$2(androidx.room.MultiInstanceInvalidationClient)>, methodtype: void __METHODTYPE__());

        r0.<androidx.room.MultiInstanceInvalidationClient: java.lang.Runnable removeObserverRunnable> = $r16;

        $r17 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker invalidationTracker>;

        $r18 = virtualinvoke $r17.<androidx.room.InvalidationTracker: java.util.Map getTableIdLookup$room_runtime_release()>();

        r6 = interfaceinvoke $r18.<java.util.Map: java.util.Set keySet()>();

        r8 = (java.util.Collection) r6;

        $r19 = newarray (java.lang.String)[0];

        $r20 = interfaceinvoke r8.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r20, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        r7 = (java.lang.String[]) $r20;

        $r21 = new androidx.room.MultiInstanceInvalidationClient$1;

        specialinvoke $r21.<androidx.room.MultiInstanceInvalidationClient$1: void <init>(androidx.room.MultiInstanceInvalidationClient,java.lang.String[])>(r0, r7);

        $r22 = (androidx.room.InvalidationTracker$Observer) $r21;

        virtualinvoke r0.<androidx.room.MultiInstanceInvalidationClient: void setObserver(androidx.room.InvalidationTracker$Observer)>($r22);

        $r24 = r0.<androidx.room.MultiInstanceInvalidationClient: android.content.Context appContext>;

        $r23 = r0.<androidx.room.MultiInstanceInvalidationClient: android.content.ServiceConnection serviceConnection>;

        virtualinvoke $r24.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r3, $r23, 1);

        return;
    }

    public final java.lang.String getName()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: java.lang.String name>;

        return $r1;
    }

    public final androidx.room.InvalidationTracker getInvalidationTracker()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        androidx.room.InvalidationTracker $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker invalidationTracker>;

        return $r1;
    }

    public final java.util.concurrent.Executor getExecutor()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: java.util.concurrent.Executor executor>;

        return $r1;
    }

    public final int getClientId()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        int $i0;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $i0 = r0.<androidx.room.MultiInstanceInvalidationClient: int clientId>;

        return $i0;
    }

    public final void setClientId(int)
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        int i0;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        i0 := @parameter0: int;

        r0.<androidx.room.MultiInstanceInvalidationClient: int clientId> = i0;

        return;
    }

    public final androidx.room.InvalidationTracker$Observer getObserver()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        androidx.room.InvalidationTracker$Observer $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker$Observer observer>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("observer");

        return null;
    }

    public final void setObserver(androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        androidx.room.InvalidationTracker$Observer r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        r1 := @parameter0: androidx.room.InvalidationTracker$Observer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker$Observer observer> = r1;

        return;
    }

    public final androidx.room.IMultiInstanceInvalidationService getService()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        androidx.room.IMultiInstanceInvalidationService $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationService service>;

        return $r1;
    }

    public final void setService(androidx.room.IMultiInstanceInvalidationService)
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        androidx.room.IMultiInstanceInvalidationService r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        r1 := @parameter0: androidx.room.IMultiInstanceInvalidationService;

        r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationService service> = r1;

        return;
    }

    public final androidx.room.IMultiInstanceInvalidationCallback getCallback()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        androidx.room.IMultiInstanceInvalidationCallback $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationCallback callback>;

        return $r1;
    }

    public final java.util.concurrent.atomic.AtomicBoolean getStopped()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: java.util.concurrent.atomic.AtomicBoolean stopped>;

        return $r1;
    }

    public final android.content.ServiceConnection getServiceConnection()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        android.content.ServiceConnection $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: android.content.ServiceConnection serviceConnection>;

        return $r1;
    }

    public final java.lang.Runnable getSetUpRunnable()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        java.lang.Runnable $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: java.lang.Runnable setUpRunnable>;

        return $r1;
    }

    public final java.lang.Runnable getRemoveObserverRunnable()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        java.lang.Runnable $r1;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: java.lang.Runnable removeObserverRunnable>;

        return $r1;
    }

    public final void stop()
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        java.lang.Throwable r1, $r7, $r8;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;
        androidx.room.InvalidationTracker $r3;
        androidx.room.InvalidationTracker$Observer $r4;
        androidx.room.IMultiInstanceInvalidationService $r5;
        int $i0;
        androidx.room.IMultiInstanceInvalidationCallback $r6;
        android.content.Context $r9;
        android.content.ServiceConnection $r10;

        r0 := @this: androidx.room.MultiInstanceInvalidationClient;

        $r2 = r0.<androidx.room.MultiInstanceInvalidationClient: java.util.concurrent.atomic.AtomicBoolean stopped>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label5;

        $r3 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker invalidationTracker>;

        $r4 = virtualinvoke r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker$Observer getObserver()>();

        virtualinvoke $r3.<androidx.room.InvalidationTracker: void removeObserver(androidx.room.InvalidationTracker$Observer)>($r4);

     label1:
        $r5 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationService service>;

        if $r5 == null goto label2;

        $r6 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationCallback callback>;

        $i0 = r0.<androidx.room.MultiInstanceInvalidationClient: int clientId>;

        interfaceinvoke $r5.<androidx.room.IMultiInstanceInvalidationService: void unregisterCallback(androidx.room.IMultiInstanceInvalidationCallback,int)>($r6, $i0);

        goto label4;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = (java.lang.Throwable) r1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ROOM", "Cannot unregister multi-instance invalidation callback", $r8);

     label4:
        $r9 = r0.<androidx.room.MultiInstanceInvalidationClient: android.content.Context appContext>;

        $r10 = r0.<androidx.room.MultiInstanceInvalidationClient: android.content.ServiceConnection serviceConnection>;

        virtualinvoke $r9.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r10);

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static final void setUpRunnable$lambda$1(androidx.room.MultiInstanceInvalidationClient)
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        java.lang.Throwable r1, $r8, $r9;
        androidx.room.IMultiInstanceInvalidationService r2, $r3;
        java.lang.String $r4;
        androidx.room.IMultiInstanceInvalidationCallback $r5;
        int $i0;
        androidx.room.InvalidationTracker $r6;
        androidx.room.InvalidationTracker$Observer $r7;

        r0 := @parameter0: androidx.room.MultiInstanceInvalidationClient;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

     label1:
        $r3 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationService service>;

        if $r3 == null goto label2;

        r2 = $r3;

        $r5 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.IMultiInstanceInvalidationCallback callback>;

        $r4 = r0.<androidx.room.MultiInstanceInvalidationClient: java.lang.String name>;

        $i0 = interfaceinvoke r2.<androidx.room.IMultiInstanceInvalidationService: int registerCallback(androidx.room.IMultiInstanceInvalidationCallback,java.lang.String)>($r5, $r4);

        r0.<androidx.room.MultiInstanceInvalidationClient: int clientId> = $i0;

        $r6 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker invalidationTracker>;

        $r7 = virtualinvoke r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker$Observer getObserver()>();

        virtualinvoke $r6.<androidx.room.InvalidationTracker: void addObserver(androidx.room.InvalidationTracker$Observer)>($r7);

        goto label4;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r1 = $r8;

        $r9 = (java.lang.Throwable) r1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ROOM", "Cannot register multi-instance invalidation callback", $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static final void removeObserverRunnable$lambda$2(androidx.room.MultiInstanceInvalidationClient)
    {
        androidx.room.MultiInstanceInvalidationClient r0;
        androidx.room.InvalidationTracker $r1;
        androidx.room.InvalidationTracker$Observer $r2;

        r0 := @parameter0: androidx.room.MultiInstanceInvalidationClient;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker invalidationTracker>;

        $r2 = virtualinvoke r0.<androidx.room.MultiInstanceInvalidationClient: androidx.room.InvalidationTracker$Observer getObserver()>();

        virtualinvoke $r1.<androidx.room.InvalidationTracker: void removeObserver(androidx.room.InvalidationTracker$Observer)>($r2);

        return;
    }

