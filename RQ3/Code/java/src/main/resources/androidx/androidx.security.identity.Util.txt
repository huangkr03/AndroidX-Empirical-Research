androidx.security.identity.Util
<androidx.security.identity.Util: java.lang.String TAG>
<androidx.security.identity.Util: int COSE_LABEL_ALG>
<androidx.security.identity.Util: int COSE_LABEL_X5CHAIN>
<androidx.security.identity.Util: int COSE_ALG_ECDSA_256>
<androidx.security.identity.Util: int COSE_ALG_HMAC_256_256>
<androidx.security.identity.Util: int CBOR_SEMANTIC_TAG_ENCODED_CBOR>
    private void <init>()
    {
        androidx.security.identity.Util r0;

        r0 := @this: androidx.security.identity.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] fromHex(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, $i10, $i11, i13;
        byte[] r1;
        char $c4, $c9;
        byte $b12;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = i0 & 1;

        if $i2 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid length of hex string");

        throw $r2;

     label1:
        i1 = i0 / 2;

        r1 = newarray (byte)[i1];

        i13 = 0;

     label2:
        if i13 >= i1 goto label3;

        $i3 = i13 * 2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i5 = staticinvoke <java.lang.Character: int digit(char,int)>($c4, 16);

        $i8 = $i5 << 4;

        $i6 = i13 * 2;

        $i7 = $i6 + 1;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        $i10 = staticinvoke <java.lang.Character: int digit(char,int)>($c9, 16);

        $i11 = $i8 + $i10;

        $b12 = (byte) $i11;

        r1[i13] = $b12;

        i13 = i13 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static java.lang.String toHex(byte[])
    {
        byte[] r0;
        java.lang.StringBuilder r1, $r2;
        byte b0;
        int $i1, i2;
        java.lang.String $r3, $r6;
        java.lang.Object[] $r4;
        java.lang.Byte $r5;

        r0 := @parameter0: byte[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        b0 = r0[i2];

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    static void hexdump(java.lang.String, byte[])
    {
        java.lang.String r0, $r12, $r14;
        byte[] r1;
        java.lang.StringBuilder r2, $r4, $r7, $r8, $r9, $r10, $r11, $r13;
        java.util.Formatter r3, $r5;
        short s0, $s17;
        int $i1, $i2, $i4, $i5, $i6, $i9, $i10, $i11, i13, i14, i15, i16;
        java.lang.Object[] $r15, $r20, $r26;
        java.lang.Integer $r16, $r22;
        byte $b7, $b12;
        boolean $z0;
        java.lang.Byte $r27;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r2 = $r4;

        $r5 = new java.util.Formatter;

        specialinvoke $r5.<java.util.Formatter: void <init>(java.lang.Appendable)>(r2);

        r3 = $r5;

        i13 = 0;

     label01:
        $i1 = lengthof r1;

        if i13 >= $i1 goto label10;

        $r15 = newarray (java.lang.Object)[1];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        $r15[0] = $r16;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%04x  ", $r15);

        i14 = 0;

     label02:
        if i14 >= 16 goto label03;

        $i10 = i13 + i14;

        $i9 = lengthof r1;

        if $i10 >= $i9 goto label03;

        $r26 = newarray (java.lang.Object)[1];

        $i11 = i13 + i14;

        $b12 = r1[$i11];

        $r27 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b12);

        $r26[0] = $r27;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%02x ", $r26);

        i14 = i14 + 1;

        goto label02;

     label03:
        i15 = i14;

     label04:
        if i15 >= 16 goto label05;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        i15 = i15 + 1;

        goto label04;

     label05:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i16 = 0;

     label06:
        if i16 >= 16 goto label09;

        $i5 = i13 + i16;

        $i4 = lengthof r1;

        if $i5 >= $i4 goto label09;

        $i6 = i13 + i16;

        $b7 = r1[$i6];

        s0 = $b7 & 255;

        $r20 = newarray (java.lang.Object)[1];

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(int)>(s0);

        if $z0 == 0 goto label07;

        $s17 = 46;

        goto label08;

     label07:
        $s17 = s0;

     label08:
        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s17);

        $r20[0] = $r22;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%c", $r20);

        i16 = i16 + 1;

        goto label06;

     label09:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i13 = i13 + 16;

        goto label01;

     label10:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": dumping ");

        $i2 = lengthof r1;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes\n");

        $r12 = virtualinvoke r3.<java.util.Formatter: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Util", $r14);

        return;
    }

    public static byte[] cborEncode(co.nstant.in.cbor.model.DataItem)
    {
        co.nstant.in.cbor.model.DataItem r0;
        java.io.ByteArrayOutputStream r1, $r3;
        java.lang.Throwable r2, $r6;
        co.nstant.in.cbor.CborEncoder $r4;
        byte[] $r5;
        java.lang.IllegalStateException $r7;

        r0 := @parameter0: co.nstant.in.cbor.model.DataItem;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r3;

     label1:
        $r4 = new co.nstant.in.cbor.CborEncoder;

        specialinvoke $r4.<co.nstant.in.cbor.CborEncoder: void <init>(java.io.OutputStream)>(r1);

        virtualinvoke $r4.<co.nstant.in.cbor.CborEncoder: void encode(co.nstant.in.cbor.model.DataItem)>(r0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected failure encoding data", r2);

        throw $r7;

     label4:
        $r5 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r5;

        catch co.nstant.in.cbor.CborException from label1 to label2 with label3;
    }

    static byte[] cborEncodeBoolean(boolean)
    {
        boolean z0;
        co.nstant.in.cbor.CborBuilder $r0, $r1;
        java.util.List $r2;
        java.lang.Object $r3;
        co.nstant.in.cbor.model.DataItem $r4;
        byte[] $r5;

        z0 := @parameter0: boolean;

        $r0 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r0.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.CborBuilder add(boolean)>(z0);

        $r2 = virtualinvoke $r1.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (co.nstant.in.cbor.model.DataItem) $r3;

        $r5 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r4);

        return $r5;
    }

    static byte[] cborEncodeString(java.lang.String)
    {
        java.lang.String r0;
        co.nstant.in.cbor.CborBuilder $r1, $r2;
        java.util.List $r3;
        java.lang.Object $r4;
        co.nstant.in.cbor.model.DataItem $r5;
        byte[] $r6;

        r0 := @parameter0: java.lang.String;

        $r1 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r1.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.CborBuilder add(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (co.nstant.in.cbor.model.DataItem) $r4;

        $r6 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r5);

        return $r6;
    }

    static byte[] cborEncodeNumber(long)
    {
        long l0;
        co.nstant.in.cbor.CborBuilder $r0, $r1;
        java.util.List $r2;
        java.lang.Object $r3;
        co.nstant.in.cbor.model.DataItem $r4;
        byte[] $r5;

        l0 := @parameter0: long;

        $r0 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r0.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.CborBuilder add(long)>(l0);

        $r2 = virtualinvoke $r1.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (co.nstant.in.cbor.model.DataItem) $r3;

        $r5 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r4);

        return $r5;
    }

    static byte[] cborEncodeBytestring(byte[])
    {
        byte[] r0, $r6;
        co.nstant.in.cbor.CborBuilder $r1, $r2;
        java.util.List $r3;
        java.lang.Object $r4;
        co.nstant.in.cbor.model.DataItem $r5;

        r0 := @parameter0: byte[];

        $r1 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r1.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.CborBuilder add(byte[])>(r0);

        $r3 = virtualinvoke $r2.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (co.nstant.in.cbor.model.DataItem) $r4;

        $r6 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r5);

        return $r6;
    }

    static byte[] cborEncodeDateTime(android.icu.util.Calendar)
    {
        android.icu.util.Calendar r0;
        co.nstant.in.cbor.model.DataItem $r1;
        byte[] $r2;

        r0 := @parameter0: android.icu.util.Calendar;

        $r1 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildDateTime(android.icu.util.Calendar)>(r0);

        $r2 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r1);

        return $r2;
    }

    public static co.nstant.in.cbor.model.DataItem cborBuildDateTime(android.icu.util.Calendar)
    {
        android.icu.util.Calendar r0;
        java.util.Date r1;
        java.lang.String r2;
        co.nstant.in.cbor.model.UnicodeString r3, $r8;
        android.icu.text.SimpleDateFormat $r4, $r5, r6;
        boolean $z0;
        int $i0;
        android.icu.util.TimeZone $r7;

        r0 := @parameter0: android.icu.util.Calendar;

        $r4 = new android.icu.text.SimpleDateFormat;

        specialinvoke $r4.<android.icu.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ssXXX");

        r6 = $r4;

        $z0 = virtualinvoke r0.<android.icu.util.Calendar: boolean isSet(int)>(14);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<android.icu.util.Calendar: int get(int)>(14);

        if $i0 == 0 goto label1;

        $r5 = new android.icu.text.SimpleDateFormat;

        specialinvoke $r5.<android.icu.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSXXX");

        r6 = $r5;

     label1:
        $r7 = virtualinvoke r0.<android.icu.util.Calendar: android.icu.util.TimeZone getTimeZone()>();

        virtualinvoke r6.<android.icu.text.DateFormat: void setTimeZone(android.icu.util.TimeZone)>($r7);

        r1 = virtualinvoke r0.<android.icu.util.Calendar: java.util.Date getTime()>();

        r2 = virtualinvoke r6.<android.icu.text.DateFormat: java.lang.String format(java.util.Date)>(r1);

        $r8 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r8.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>(r2);

        r3 = $r8;

        virtualinvoke r3.<co.nstant.in.cbor.model.DataItem: void setTag(int)>(0);

        return r3;
    }

    public static co.nstant.in.cbor.model.DataItem cborDecode(byte[])
    {
        byte[] r0;
        java.io.ByteArrayInputStream r1, $r3;
        java.lang.Throwable r2, $r12;
        co.nstant.in.cbor.CborDecoder $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        co.nstant.in.cbor.model.DataItem $r6;
        java.lang.IllegalArgumentException $r7, $r13;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        java.util.List r14;

        r0 := @parameter0: byte[];

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        r1 = $r3;

     label1:
        $r4 = new co.nstant.in.cbor.CborDecoder;

        specialinvoke $r4.<co.nstant.in.cbor.CborDecoder: void <init>(java.io.InputStream)>(r1);

        r14 = virtualinvoke $r4.<co.nstant.in.cbor.CborDecoder: java.util.List decode()>();

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r2 = $r12;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error decoding CBOR", r2);

        throw $r13;

     label4:
        $i0 = interfaceinvoke r14.<java.util.List: int size()>();

        if $i0 == 1 goto label5;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected number of items, expected 1 got ");

        $i1 = interfaceinvoke r14.<java.util.List: int size()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label5:
        $r5 = interfaceinvoke r14.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (co.nstant.in.cbor.model.DataItem) $r5;

        return $r6;

        catch co.nstant.in.cbor.CborException from label1 to label2 with label3;
    }

    static boolean cborDecodeBoolean(byte[])
    {
        byte[] r0;
        co.nstant.in.cbor.model.SimpleValue r1;
        co.nstant.in.cbor.model.DataItem $r2;
        co.nstant.in.cbor.model.SimpleValueType $r3, $r4;
        boolean $z0;

        r0 := @parameter0: byte[];

        $r2 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r0);

        r1 = (co.nstant.in.cbor.model.SimpleValue) $r2;

        $r3 = virtualinvoke r1.<co.nstant.in.cbor.model.SimpleValue: co.nstant.in.cbor.model.SimpleValueType getSimpleValueType()>();

        $r4 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType TRUE>;

        if $r3 != $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static java.lang.String cborDecodeString(byte[])
    {
        byte[] r0;
        co.nstant.in.cbor.model.DataItem $r1;
        co.nstant.in.cbor.model.UnicodeString $r2;
        java.lang.String $r3;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r0);

        $r2 = (co.nstant.in.cbor.model.UnicodeString) $r1;

        $r3 = virtualinvoke $r2.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        return $r3;
    }

    static long cborDecodeLong(byte[])
    {
        byte[] r0;
        co.nstant.in.cbor.model.DataItem $r1;
        co.nstant.in.cbor.model.Number $r2;
        java.math.BigInteger $r3;
        long $l0;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r0);

        $r2 = (co.nstant.in.cbor.model.Number) $r1;

        $r3 = virtualinvoke $r2.<co.nstant.in.cbor.model.Number: java.math.BigInteger getValue()>();

        $l0 = virtualinvoke $r3.<java.math.BigInteger: long longValue()>();

        return $l0;
    }

    static byte[] cborDecodeByteString(byte[])
    {
        byte[] r0, $r3;
        co.nstant.in.cbor.model.DataItem $r1;
        co.nstant.in.cbor.model.ByteString $r2;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r0);

        $r2 = (co.nstant.in.cbor.model.ByteString) $r1;

        $r3 = virtualinvoke $r2.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        return $r3;
    }

    static android.icu.util.Calendar cborDecodeDateTime(byte[])
    {
        byte[] r0;
        co.nstant.in.cbor.model.DataItem r1;
        java.lang.String r2, $r13, $r17, r26;
        java.lang.Throwable r3, $r19, $r21;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4, $r18;
        co.nstant.in.cbor.model.Tag $r5;
        long $l0;
        byte $b1;
        co.nstant.in.cbor.model.UnicodeString $r6;
        java.text.SimpleDateFormat $r7, $r22, r27, r29;
        java.util.Locale $r8, $r23;
        android.icu.util.GregorianCalendar $r9, r30;
        int $i2, $i3;
        java.lang.StringBuilder $r10, $r11, $r12, $r14, $r15, $r16;
        java.lang.RuntimeException $r20;
        android.icu.util.TimeZone r24;
        java.util.TimeZone r25;
        java.util.Date r28;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r0);

        $z0 = r1 instanceof co.nstant.in.cbor.model.UnicodeString;

        if $z0 != 0 goto label01;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Passed in data is not a Unicode-string");

        throw $r18;

     label01:
        $z1 = virtualinvoke r1.<co.nstant.in.cbor.model.DataItem: boolean hasTag()>();

        if $z1 == 0 goto label02;

        $r5 = virtualinvoke r1.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.Tag getTag()>();

        $l0 = virtualinvoke $r5.<co.nstant.in.cbor.model.Tag: long getValue()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label03;

     label02:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Passed in data is not tagged with tag 0");

        throw $r4;

     label03:
        $r6 = (co.nstant.in.cbor.model.UnicodeString) r1;

        r2 = virtualinvoke $r6.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        r24 = staticinvoke <android.icu.util.TimeZone: android.icu.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        r25 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        $z2 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("Z");

        if $z2 != 0 goto label04;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = $i2 - 6;

        r26 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GMT");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r24 = staticinvoke <android.icu.util.TimeZone: android.icu.util.TimeZone getTimeZone(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GMT");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r25 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r17);

     label04:
        $r7 = new java.text.SimpleDateFormat;

        $r8 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r7.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ss.SSS", $r8);

        r27 = $r7;

        virtualinvoke r27.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r25);

     label05:
        r28 = virtualinvoke r27.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2);

     label06:
        goto label11;

     label07:
        $r21 := @caughtexception;

        $r22 = new java.text.SimpleDateFormat;

        $r23 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r22.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ss", $r23);

        r29 = $r22;

        virtualinvoke r29.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r25);

     label08:
        r28 = virtualinvoke r29.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2);

     label09:
        goto label11;

     label10:
        $r19 := @caughtexception;

        r3 = $r19;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error parsing string", r3);

        throw $r20;

     label11:
        $r9 = new android.icu.util.GregorianCalendar;

        specialinvoke $r9.<android.icu.util.GregorianCalendar: void <init>()>();

        r30 = $r9;

        virtualinvoke r30.<android.icu.util.Calendar: void clear()>();

        virtualinvoke r30.<android.icu.util.Calendar: void setTimeZone(android.icu.util.TimeZone)>(r24);

        virtualinvoke r30.<android.icu.util.Calendar: void setTime(java.util.Date)>(r28);

        return r30;

        catch java.text.ParseException from label05 to label06 with label07;
        catch java.text.ParseException from label08 to label09 with label10;
    }

    static co.nstant.in.cbor.model.DataItem namespaceDataToCbor(androidx.security.identity.PersonalizationData$NamespaceData)
    {
        androidx.security.identity.PersonalizationData$NamespaceData r0;
        co.nstant.in.cbor.CborBuilder r1, r7, $r10, $r16;
        co.nstant.in.cbor.builder.ArrayBuilder r2, r8;
        java.util.Iterator r3, r28;
        java.lang.String r4;
        byte[] r5;
        java.util.Collection r6, $r11;
        androidx.security.identity.AccessControlProfileId r9;
        boolean $z0, $z1;
        java.util.List $r12, $r19;
        java.lang.Object $r13, $r15, $r20, $r26;
        co.nstant.in.cbor.model.DataItem $r14, $r21, $r24;
        co.nstant.in.cbor.model.UnicodeString $r18, $r23;
        int $i0;
        long $l1;
        co.nstant.in.cbor.builder.MapBuilder r29;

        r0 := @parameter0: androidx.security.identity.PersonalizationData$NamespaceData;

        $r10 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r10.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r1 = $r10;

        r2 = virtualinvoke r1.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        $r11 = virtualinvoke r0.<androidx.security.identity.PersonalizationData$NamespaceData: java.util.Collection getEntryNames()>();

        r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r15;

        r5 = virtualinvoke r0.<androidx.security.identity.PersonalizationData$NamespaceData: byte[] getEntryValue(java.lang.String)>(r4);

        r6 = virtualinvoke r0.<androidx.security.identity.PersonalizationData$NamespaceData: java.util.Collection getAccessControlProfileIds(java.lang.String)>(r4);

        $r16 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r16.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r7 = $r16;

        r8 = virtualinvoke r7.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        r28 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r26 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r9 = (androidx.security.identity.AccessControlProfileId) $r26;

        $i0 = virtualinvoke r9.<androidx.security.identity.AccessControlProfileId: int getId()>();

        $l1 = (long) $i0;

        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(long)>($l1);

        goto label2;

     label3:
        r29 = virtualinvoke r2.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        virtualinvoke r29.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,java.lang.String)>("name", r4);

        $r18 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r18.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("accessControlProfiles");

        $r19 = virtualinvoke r7.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(0);

        $r21 = (co.nstant.in.cbor.model.DataItem) $r20;

        virtualinvoke r29.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(co.nstant.in.cbor.model.DataItem,co.nstant.in.cbor.model.DataItem)>($r18, $r21);

        $r23 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r23.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("value");

        $r24 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r5);

        virtualinvoke r29.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(co.nstant.in.cbor.model.DataItem,co.nstant.in.cbor.model.DataItem)>($r23, $r24);

        goto label1;

     label4:
        $r12 = virtualinvoke r1.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (co.nstant.in.cbor.model.DataItem) $r13;

        return $r14;
    }

    public static androidx.security.identity.PersonalizationData$NamespaceData namespaceDataFromCbor(java.lang.String, co.nstant.in.cbor.model.DataItem)
    {
        java.lang.String r0, r7;
        co.nstant.in.cbor.model.DataItem r1, r5, $r16, $r20, r31, r32;
        co.nstant.in.cbor.model.Array r2, r9;
        androidx.security.identity.PersonalizationData$Builder r3, $r10;
        java.util.Iterator r4, r30;
        co.nstant.in.cbor.model.Map r6;
        java.util.ArrayList r8, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r11, $r21;
        androidx.security.identity.PersonalizationData $r12;
        androidx.security.identity.PersonalizationData$NamespaceData $r13;
        java.lang.Object $r14, $r24;
        co.nstant.in.cbor.model.UnicodeString $r15, $r17, $r19, $r22;
        androidx.security.identity.AccessControlProfileId $r25;
        co.nstant.in.cbor.model.Number $r26;
        java.math.BigInteger $r27;
        int $i0;
        java.lang.IllegalArgumentException $r28, $r29;
        byte[] r33;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: co.nstant.in.cbor.model.DataItem;

        $z0 = r1 instanceof co.nstant.in.cbor.model.Array;

        if $z0 != 0 goto label1;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item is not an Array");

        throw $r29;

     label1:
        r2 = (co.nstant.in.cbor.model.Array) r1;

        $r10 = new androidx.security.identity.PersonalizationData$Builder;

        specialinvoke $r10.<androidx.security.identity.PersonalizationData$Builder: void <init>()>();

        r3 = $r10;

        $r11 = virtualinvoke r2.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        r4 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (co.nstant.in.cbor.model.DataItem) $r14;

        $z2 = r5 instanceof co.nstant.in.cbor.model.Map;

        if $z2 != 0 goto label3;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item is not a map");

        throw $r28;

     label3:
        r6 = (co.nstant.in.cbor.model.Map) r5;

        $r15 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r15.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("name");

        $r16 = virtualinvoke r6.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r15);

        $r17 = (co.nstant.in.cbor.model.UnicodeString) $r16;

        r7 = virtualinvoke $r17.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r8 = $r18;

        $r19 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r19.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("accessControlProfiles");

        $r20 = virtualinvoke r6.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r19);

        r9 = (co.nstant.in.cbor.model.Array) $r20;

        $r21 = virtualinvoke r9.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        r30 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r24 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (co.nstant.in.cbor.model.DataItem) $r24;

        $r25 = new androidx.security.identity.AccessControlProfileId;

        $r26 = (co.nstant.in.cbor.model.Number) r31;

        $r27 = virtualinvoke $r26.<co.nstant.in.cbor.model.Number: java.math.BigInteger getValue()>();

        $i0 = virtualinvoke $r27.<java.math.BigInteger: int intValue()>();

        specialinvoke $r25.<androidx.security.identity.AccessControlProfileId: void <init>(int)>($i0);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r25);

        goto label4;

     label5:
        $r22 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r22.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("value");

        r32 = virtualinvoke r6.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r22);

        r33 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>(r32);

        virtualinvoke r3.<androidx.security.identity.PersonalizationData$Builder: androidx.security.identity.PersonalizationData$Builder putEntry(java.lang.String,java.lang.String,java.util.Collection,byte[])>(r0, r7, r8, r33);

        goto label2;

     label6:
        $r12 = virtualinvoke r3.<androidx.security.identity.PersonalizationData$Builder: androidx.security.identity.PersonalizationData build()>();

        $r13 = virtualinvoke $r12.<androidx.security.identity.PersonalizationData: androidx.security.identity.PersonalizationData$NamespaceData getNamespaceData(java.lang.String)>(r0);

        return $r13;
    }

    public static androidx.security.identity.AccessControlProfile accessControlProfileFromCbor(co.nstant.in.cbor.model.DataItem)
    {
        co.nstant.in.cbor.model.Map r0;
        int i0, $i1;
        androidx.security.identity.AccessControlProfile$Builder r1, $r8;
        byte[] r2;
        java.lang.Throwable r3, $r21;
        boolean $z0;
        co.nstant.in.cbor.model.UnicodeString $r4, $r10, $r11, $r12;
        co.nstant.in.cbor.model.DataItem $r5, r23, r24, r26, r27;
        co.nstant.in.cbor.model.Number $r6, $r13;
        java.math.BigInteger $r7, $r14;
        androidx.security.identity.AccessControlProfileId $r9;
        co.nstant.in.cbor.model.ByteString $r16;
        java.io.ByteArrayInputStream $r17;
        java.security.cert.Certificate $r18;
        java.security.cert.X509Certificate $r19;
        java.lang.IllegalArgumentException $r20, $r22;
        java.security.cert.CertificateFactory r25;
        long $l2;
        androidx.security.identity.AccessControlProfile $r28;

        r23 := @parameter0: co.nstant.in.cbor.model.DataItem;

        $z0 = r23 instanceof co.nstant.in.cbor.model.Map;

        if $z0 != 0 goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item is not a map");

        throw $r20;

     label1:
        r0 = (co.nstant.in.cbor.model.Map) r23;

        $r4 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r4.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("id");

        $r5 = virtualinvoke r0.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r4);

        $r6 = (co.nstant.in.cbor.model.Number) $r5;

        $r7 = virtualinvoke $r6.<co.nstant.in.cbor.model.Number: java.math.BigInteger getValue()>();

        i0 = virtualinvoke $r7.<java.math.BigInteger: int intValue()>();

        $r8 = new androidx.security.identity.AccessControlProfile$Builder;

        $r9 = new androidx.security.identity.AccessControlProfileId;

        specialinvoke $r9.<androidx.security.identity.AccessControlProfileId: void <init>(int)>(i0);

        specialinvoke $r8.<androidx.security.identity.AccessControlProfile$Builder: void <init>(androidx.security.identity.AccessControlProfileId)>($r9);

        r1 = $r8;

        $r10 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r10.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("readerCertificate");

        r24 = virtualinvoke r0.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r10);

        if r24 == null goto label5;

        $r16 = (co.nstant.in.cbor.model.ByteString) r24;

        r2 = virtualinvoke $r16.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

     label2:
        r25 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r17 = new java.io.ByteArrayInputStream;

        specialinvoke $r17.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        $r18 = virtualinvoke r25.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r17);

        $r19 = (java.security.cert.X509Certificate) $r18;

        virtualinvoke r1.<androidx.security.identity.AccessControlProfile$Builder: androidx.security.identity.AccessControlProfile$Builder setReaderCertificate(java.security.cert.X509Certificate)>($r19);

     label3:
        goto label5;

     label4:
        $r21 := @caughtexception;

        r3 = $r21;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error decoding readerCertificate", r3);

        throw $r22;

     label5:
        virtualinvoke r1.<androidx.security.identity.AccessControlProfile$Builder: androidx.security.identity.AccessControlProfile$Builder setUserAuthenticationRequired(boolean)>(0);

        $r11 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r11.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("capabilityType");

        r26 = virtualinvoke r0.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r11);

        if r26 == null goto label8;

        virtualinvoke r1.<androidx.security.identity.AccessControlProfile$Builder: androidx.security.identity.AccessControlProfile$Builder setUserAuthenticationRequired(boolean)>(1);

        $r12 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r12.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("timeout");

        r27 = virtualinvoke r0.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r12);

        if r27 != null goto label6;

        $l2 = 0L;

        goto label7;

     label6:
        $r13 = (co.nstant.in.cbor.model.Number) r27;

        $r14 = virtualinvoke $r13.<co.nstant.in.cbor.model.Number: java.math.BigInteger getValue()>();

        $i1 = virtualinvoke $r14.<java.math.BigInteger: int intValue()>();

        $l2 = (long) $i1;

     label7:
        virtualinvoke r1.<androidx.security.identity.AccessControlProfile$Builder: androidx.security.identity.AccessControlProfile$Builder setUserAuthenticationTimeout(long)>($l2);

     label8:
        $r28 = virtualinvoke r1.<androidx.security.identity.AccessControlProfile$Builder: androidx.security.identity.AccessControlProfile build()>();

        return $r28;

        catch java.security.cert.CertificateException from label2 to label3 with label4;
    }

    static co.nstant.in.cbor.model.DataItem accessControlProfileToCbor(androidx.security.identity.AccessControlProfile)
    {
        androidx.security.identity.AccessControlProfile r0;
        co.nstant.in.cbor.CborBuilder r1, $r4;
        co.nstant.in.cbor.builder.MapBuilder r2;
        java.security.cert.X509Certificate r3;
        androidx.security.identity.AccessControlProfileId $r5;
        int $i0;
        long $l1, l3;
        boolean $z0;
        byte $b2;
        byte[] $r9;
        java.lang.Throwable $r11, r13;
        java.lang.IllegalStateException $r12;
        java.util.List $r14;
        java.lang.Object $r15;
        co.nstant.in.cbor.model.DataItem $r16;

        r0 := @parameter0: androidx.security.identity.AccessControlProfile;

        $r4 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r4.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r1 = $r4;

        r2 = virtualinvoke r1.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        $r5 = virtualinvoke r0.<androidx.security.identity.AccessControlProfile: androidx.security.identity.AccessControlProfileId getAccessControlProfileId()>();

        $i0 = virtualinvoke $r5.<androidx.security.identity.AccessControlProfileId: int getId()>();

        $l1 = (long) $i0;

        virtualinvoke r2.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,long)>("id", $l1);

        r3 = virtualinvoke r0.<androidx.security.identity.AccessControlProfile: java.security.cert.X509Certificate getReaderCertificate()>();

        if r3 == null goto label4;

     label1:
        $r9 = virtualinvoke r3.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        virtualinvoke r2.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,byte[])>("readerCertificate", $r9);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r13 = $r11;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error encoding reader mCertificate", r13);

        throw $r12;

     label4:
        $z0 = virtualinvoke r0.<androidx.security.identity.AccessControlProfile: boolean isUserAuthenticationRequired()>();

        if $z0 == 0 goto label5;

        virtualinvoke r2.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,long)>("capabilityType", 1L);

        l3 = virtualinvoke r0.<androidx.security.identity.AccessControlProfile: long getUserAuthenticationTimeout()>();

        $b2 = l3 cmp 0L;

        if $b2 == 0 goto label5;

        virtualinvoke r2.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,long)>("timeout", l3);

     label5:
        $r14 = virtualinvoke r1.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (co.nstant.in.cbor.model.DataItem) $r15;

        return $r16;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
    }

    static java.security.cert.X509Certificate generateAuthenticationKeyCert(java.lang.String, java.lang.String, byte[])
    {
        java.lang.String r0, r1;
        byte[] r2, r11, r43;
        java.security.PublicKey r3;
        java.security.PrivateKey r4;
        org.bouncycastle.asn1.x500.X500Name r5, r6, $r18, $r19;
        java.util.Date r7, r8, $r20, $r21;
        java.math.BigInteger r9, $r22;
        org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder r10, $r23;
        java.security.cert.CertificateFactory r12;
        java.io.ByteArrayInputStream r13, $r26;
        java.security.cert.X509Certificate r14, r42;
        java.security.cert.Certificate $r15, $r27;
        java.security.KeyStore$Entry $r16;
        java.security.KeyStore$PrivateKeyEntry $r17;
        long $l0, $l1;
        org.bouncycastle.operator.jcajce.JcaContentSignerBuilder $r24;
        org.bouncycastle.cert.X509CertificateHolder $r25;
        co.nstant.in.cbor.CborBuilder $r28, $r33;
        co.nstant.in.cbor.builder.ArrayBuilder $r29, $r30, $r31;
        co.nstant.in.cbor.builder.AbstractBuilder $r32;
        java.util.List $r34;
        java.lang.Object $r35;
        co.nstant.in.cbor.model.DataItem $r36;
        org.bouncycastle.asn1.ASN1ObjectIdentifier $r37;
        java.lang.Throwable $r39, r45;
        java.lang.IllegalStateException $r40;
        java.security.KeyStore r41;
        org.bouncycastle.operator.ContentSigner r44;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

     label1:
        r41 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r41.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $r15 = virtualinvoke r41.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>(r0);

        r42 = (java.security.cert.X509Certificate) $r15;

        r3 = virtualinvoke r42.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $r16 = virtualinvoke r41.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>(r1, null);

        $r17 = (java.security.KeyStore$PrivateKeyEntry) $r16;

        r4 = virtualinvoke $r17.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();

        $r18 = new org.bouncycastle.asn1.x500.X500Name;

        specialinvoke $r18.<org.bouncycastle.asn1.x500.X500Name: void <init>(java.lang.String)>("CN=Android Identity Credential Key");

        r5 = $r18;

        $r19 = new org.bouncycastle.asn1.x500.X500Name;

        specialinvoke $r19.<org.bouncycastle.asn1.x500.X500Name: void <init>(java.lang.String)>("CN=Android Identity Credential Authentication Key");

        r6 = $r19;

        $r20 = new java.util.Date;

        specialinvoke $r20.<java.util.Date: void <init>()>();

        r7 = $r20;

        $r21 = new java.util.Date;

        $l0 = virtualinvoke r7.<java.util.Date: long getTime()>();

        $l1 = $l0 + 31536000000L;

        specialinvoke $r21.<java.util.Date: void <init>(long)>($l1);

        r8 = $r21;

        $r22 = new java.math.BigInteger;

        specialinvoke $r22.<java.math.BigInteger: void <init>(java.lang.String)>("1");

        r9 = $r22;

        $r23 = new org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;

        specialinvoke $r23.<org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder: void <init>(org.bouncycastle.asn1.x500.X500Name,java.math.BigInteger,java.util.Date,java.util.Date,org.bouncycastle.asn1.x500.X500Name,java.security.PublicKey)>(r5, r9, r7, r8, r6, r3);

        r10 = $r23;

        if r2 == null goto label2;

        $r28 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r28.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        $r30 = virtualinvoke $r29.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>("ProofOfBinding");

        $r31 = virtualinvoke $r30.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r2);

        $r32 = virtualinvoke $r31.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.AbstractBuilder end()>();

        $r33 = (co.nstant.in.cbor.CborBuilder) $r32;

        $r34 = virtualinvoke $r33.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r35 = interfaceinvoke $r34.<java.util.List: java.lang.Object get(int)>(0);

        $r36 = (co.nstant.in.cbor.model.DataItem) $r35;

        r43 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r36);

        $r37 = new org.bouncycastle.asn1.ASN1ObjectIdentifier;

        specialinvoke $r37.<org.bouncycastle.asn1.ASN1ObjectIdentifier: void <init>(java.lang.String)>("1.3.6.1.4.1.11129.2.1.26");

        virtualinvoke r10.<org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder: org.bouncycastle.cert.X509v3CertificateBuilder addExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,byte[])>($r37, 0, r43);

     label2:
        $r24 = new org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;

        specialinvoke $r24.<org.bouncycastle.operator.jcajce.JcaContentSignerBuilder: void <init>(java.lang.String)>("SHA256withECDSA");

        r44 = virtualinvoke $r24.<org.bouncycastle.operator.jcajce.JcaContentSignerBuilder: org.bouncycastle.operator.ContentSigner build(java.security.PrivateKey)>(r4);

        $r25 = virtualinvoke r10.<org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder: org.bouncycastle.cert.X509CertificateHolder build(org.bouncycastle.operator.ContentSigner)>(r44);

        r11 = virtualinvoke $r25.<org.bouncycastle.cert.X509CertificateHolder: byte[] getEncoded()>();

        r12 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r26 = new java.io.ByteArrayInputStream;

        specialinvoke $r26.<java.io.ByteArrayInputStream: void <init>(byte[])>(r11);

        r13 = $r26;

        $r27 = virtualinvoke r12.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r13);

        r14 = (java.security.cert.X509Certificate) $r27;

     label3:
        return r14;

     label4:
        $r39 := @caughtexception;

        r45 = $r39;

        $r40 = new java.lang.IllegalStateException;

        specialinvoke $r40.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error signing public key with private key", r45);

        throw $r40;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public static boolean validateCertificateChain(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.security.cert.X509Certificate r2, r7;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        java.lang.Object $r4;
        java.security.PublicKey $r5;

        r0 := @parameter0: java.util.Collection;

        r7 = null;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.security.cert.X509Certificate) $r4;

        if r7 == null goto label5;

     label2:
        $r5 = virtualinvoke r2.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        virtualinvoke r7.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>($r5);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        return 0;

     label5:
        r7 = r2;

        goto label1;

     label6:
        return 1;

        catch java.security.cert.CertificateException from label2 to label3 with label4;
        catch java.security.InvalidKeyException from label2 to label3 with label4;
        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
        catch java.security.NoSuchProviderException from label2 to label3 with label4;
        catch java.security.SignatureException from label2 to label3 with label4;
    }

    static byte[] computeHkdf(java.lang.String, byte[], byte[], byte[], int)
    {
        java.lang.String r0, $r17;
        byte[] r1, r2, r3, r4, $r6, r20, r21;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11, $i12;
        javax.crypto.spec.SecretKeySpec $r5, $r7, $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.Throwable $r10, $r12, r19, r22;
        java.lang.IllegalStateException $r11, $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        javax.crypto.Mac r18;
        byte $b10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        i0 := @parameter4: int;

     label01:
        r18 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(r0);

     label02:
        goto label04;

     label03:
        $r12 := @caughtexception;

        r19 = $r12;

        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such algorithm: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r17, r19);

        throw $r13;

     label04:
        $i1 = virtualinvoke r18.<javax.crypto.Mac: int getMacLength()>();

        $i2 = 255 * $i1;

        if i0 <= $i2 goto label05;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size too large");

        throw $r9;

     label05:
        if r2 == null goto label06;

        $i7 = lengthof r2;

        if $i7 != 0 goto label07;

     label06:
        $r5 = new javax.crypto.spec.SecretKeySpec;

        $i3 = virtualinvoke r18.<javax.crypto.Mac: int getMacLength()>();

        $r6 = newarray (byte)[$i3];

        specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, r0);

        virtualinvoke r18.<javax.crypto.Mac: void init(java.security.Key)>($r5);

        goto label08;

     label07:
        $r8 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, r0);

        virtualinvoke r18.<javax.crypto.Mac: void init(java.security.Key)>($r8);

     label08:
        r20 = virtualinvoke r18.<javax.crypto.Mac: byte[] doFinal(byte[])>(r1);

        r4 = newarray (byte)[i0];

        i8 = 1;

        i9 = 0;

        $r7 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r20, r0);

        virtualinvoke r18.<javax.crypto.Mac: void init(java.security.Key)>($r7);

        r21 = newarray (byte)[0];

     label09:
        virtualinvoke r18.<javax.crypto.Mac: void update(byte[])>(r21);

        virtualinvoke r18.<javax.crypto.Mac: void update(byte[])>(r3);

        $b10 = (byte) i8;

        virtualinvoke r18.<javax.crypto.Mac: void update(byte)>($b10);

        r21 = virtualinvoke r18.<javax.crypto.Mac: byte[] doFinal()>();

        $i11 = lengthof r21;

        $i12 = i9 + $i11;

        if $i12 >= i0 goto label10;

        $i5 = lengthof r21;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r21, 0, r4, i9, $i5);

        $i6 = lengthof r21;

        i9 = i9 + $i6;

        i8 = i8 + 1;

        goto label09;

     label10:
        $i4 = i0 - i9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r21, 0, r4, i9, $i4);

        goto label11;

     label11:
        return r4;

     label12:
        $r10 := @caughtexception;

        r22 = $r10;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error MACing", r22);

        throw $r11;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label03;
        catch java.security.InvalidKeyException from label05 to label11 with label12;
    }

    private static byte[] coseBuildToBeSigned(byte[], byte[], byte[])
    {
        byte[] r0, r1, r2, r5, $r16;
        co.nstant.in.cbor.CborBuilder r3, $r6;
        co.nstant.in.cbor.builder.ArrayBuilder r4;
        int $i0;
        java.util.List $r13;
        java.lang.Object $r14;
        co.nstant.in.cbor.model.DataItem $r15;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        $r6 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r6.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r3 = $r6;

        r4 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>("Signature1");

        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r0);

        r5 = newarray (byte)[0];

        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r5);

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r1);

        goto label2;

     label1:
        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r2);

     label2:
        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.AbstractBuilder end()>();

        $r13 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (co.nstant.in.cbor.model.DataItem) $r14;

        $r16 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r15);

        return $r16;
    }

    private static byte[] signatureDerToCose(byte[])
    {
        byte[] r0, r1, r2, $r4, $r5, $r7;
        byte b0, b1, b3, $b5, $b6, $b25, $b26;
        int i2, $i4, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i27, i28, i29;
        java.io.ByteArrayOutputStream r3, $r6;
        short $s7;
        java.lang.IllegalArgumentException $r8, $r14, $r20, $r26, $r32;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r30, $r33, $r34, $r35, $r36;
        java.lang.String $r13, $r19, $r25, $r31, $r37;
        java.lang.Throwable $r38, r39;

        r0 := @parameter0: byte[];

        $i4 = lengthof r0;

        if $i4 <= 128 goto label01;

        $r32 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected length ");

        $i27 = lengthof r0;

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected less than 128");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r37);

        throw $r32;

     label01:
        $b5 = r0[0];

        if $b5 == 48 goto label02;

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected first byte ");

        $b26 = r0[0];

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b26);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected 0x30");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label02:
        $b6 = r0[1];

        $s7 = $b6 & 128;

        if $s7 == 0 goto label03;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected second byte ");

        $b25 = r0[1];

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b25);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", bit 7 shouldn\'t be set");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label03:
        b0 = 2;

        $i8 = b0 + 1;

        b1 = r0[$i8];

        $i11 = b0 + 2;

        $i9 = b0 + b1;

        $i10 = $i9 + 2;

        $r4 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r0, $i11, $i10);

        r1 = staticinvoke <androidx.security.identity.Util: byte[] stripLeadingZeroes(byte[])>($r4);

        $i12 = b0 + 2;

        i2 = $i12 + b1;

        $i13 = i2 + 1;

        b3 = r0[$i13];

        $i16 = i2 + 2;

        $i14 = i2 + b3;

        $i15 = $i14 + 2;

        $r5 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r0, $i16, $i15);

        r2 = staticinvoke <androidx.security.identity.Util: byte[] stripLeadingZeroes(byte[])>($r5);

        $i17 = lengthof r1;

        if $i17 <= 32 goto label04;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rBytes.length is ");

        $i24 = lengthof r1;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is > 32");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label04:
        $i18 = lengthof r2;

        if $i18 <= 32 goto label05;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sBytes.length is ");

        $i23 = lengthof r2;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is > 32");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label05:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        r3 = $r6;

     label06:
        i28 = 0;

     label07:
        $i19 = lengthof r1;

        $i20 = 32 - $i19;

        if i28 >= $i20 goto label08;

        virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(int)>(0);

        i28 = i28 + 1;

        goto label07;

     label08:
        virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(byte[])>(r1);

        i29 = 0;

     label09:
        $i21 = lengthof r2;

        $i22 = 32 - $i21;

        if i29 >= $i22 goto label10;

        virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(int)>(0);

        i29 = i29 + 1;

        goto label09;

     label10:
        virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(byte[])>(r2);

     label11:
        goto label13;

     label12:
        $r38 := @caughtexception;

        r39 = $r38;

        virtualinvoke r39.<java.io.IOException: void printStackTrace()>();

        return null;

     label13:
        $r7 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r7;

        catch java.io.IOException from label06 to label11 with label12;
    }

    private static byte[] encodePositiveBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        java.io.ByteArrayOutputStream r1, $r3;
        java.lang.Throwable r2, $r4;
        byte $b0;
        short $s1;
        java.lang.IllegalStateException $r5;
        byte[] r6;

        r0 := @parameter0: java.math.BigInteger;

        r6 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();

        $b0 = r6[0];

        $s1 = $b0 & 128;

        if $s1 == 0 goto label5;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r3;

     label1:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(0);

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(byte[])>(r6);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed writing data", r2);

        throw $r5;

     label4:
        r6 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label5:
        return r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static byte[] signatureCoseToDer(byte[])
    {
        byte[] r0, r3, r4, $r8, $r10, $r12;
        java.math.BigInteger r1, r2, $r7, $r9;
        java.io.ByteArrayOutputStream r5, $r11;
        java.lang.Throwable r6, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        java.lang.String $r18;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 == 64 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("signature.length is ");

        $i8 = lengthof r0;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected 64");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label1:
        $r7 = new java.math.BigInteger;

        $r8 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r0, 0, 32);

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,byte[])>(1, $r8);

        r1 = $r7;

        $r9 = new java.math.BigInteger;

        $r10 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r0, 32, 64);

        specialinvoke $r9.<java.math.BigInteger: void <init>(int,byte[])>(1, $r10);

        r2 = $r9;

        r3 = staticinvoke <androidx.security.identity.Util: byte[] encodePositiveBigInteger(java.math.BigInteger)>(r1);

        r4 = staticinvoke <androidx.security.identity.Util: byte[] encodePositiveBigInteger(java.math.BigInteger)>(r2);

        $r11 = new java.io.ByteArrayOutputStream;

        specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>()>();

        r5 = $r11;

     label2:
        virtualinvoke r5.<java.io.ByteArrayOutputStream: void write(int)>(48);

        $i1 = lengthof r3;

        $i2 = 2 + $i1;

        $i4 = $i2 + 2;

        $i3 = lengthof r4;

        $i5 = $i4 + $i3;

        virtualinvoke r5.<java.io.ByteArrayOutputStream: void write(int)>($i5);

        virtualinvoke r5.<java.io.ByteArrayOutputStream: void write(int)>(2);

        $i6 = lengthof r3;

        virtualinvoke r5.<java.io.ByteArrayOutputStream: void write(int)>($i6);

        virtualinvoke r5.<java.io.ByteArrayOutputStream: void write(byte[])>(r3);

        virtualinvoke r5.<java.io.ByteArrayOutputStream: void write(int)>(2);

        $i7 = lengthof r4;

        virtualinvoke r5.<java.io.ByteArrayOutputStream: void write(int)>($i7);

        virtualinvoke r5.<java.io.ByteArrayOutputStream: void write(byte[])>(r4);

     label3:
        goto label5;

     label4:
        $r19 := @caughtexception;

        r6 = $r19;

        virtualinvoke r6.<java.io.IOException: void printStackTrace()>();

        return null;

     label5:
        $r12 = virtualinvoke r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r12;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public static co.nstant.in.cbor.model.DataItem coseSign1Sign(java.security.Signature, byte[], byte[], java.util.Collection) throws java.security.cert.CertificateEncodingException
    {
        java.security.Signature r0;
        byte[] r1, r2, r6, r7, $r23, $r26, r30, r31;
        java.util.Collection r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        co.nstant.in.cbor.CborBuilder r4, $r12, $r16, r33;
        co.nstant.in.cbor.builder.MapBuilder r5, r9;
        co.nstant.in.cbor.builder.ArrayBuilder r8, r35;
        java.util.Iterator r10, $r24;
        java.security.cert.X509Certificate r11, r34;
        java.util.List $r13, $r19;
        java.lang.Object $r14, $r20, $r22, $r25;
        co.nstant.in.cbor.model.DataItem $r15, $r21;
        co.nstant.in.cbor.model.SimpleValue $r17;
        co.nstant.in.cbor.model.SimpleValueType $r18;
        boolean $z0;
        java.lang.IllegalArgumentException $r27;
        java.lang.Throwable $r28, r32;
        java.lang.IllegalStateException $r29;

        r0 := @parameter0: java.security.Signature;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: java.util.Collection;

        if r1 == null goto label01;

        $i5 = lengthof r1;

        goto label02;

     label01:
        $i5 = 0;

     label02:
        i0 = $i5;

        if r2 == null goto label03;

        $i6 = lengthof r2;

        goto label04;

     label03:
        $i6 = 0;

     label04:
        i1 = $i6;

        if i0 <= 0 goto label05;

        if i1 <= 0 goto label05;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("data and detachedContent cannot both be non-empty");

        throw $r27;

     label05:
        $r12 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r12.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r4 = $r12;

        r5 = virtualinvoke r4.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        virtualinvoke r5.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(long,long)>(1L, -7L);

        $r13 = virtualinvoke r4.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (co.nstant.in.cbor.model.DataItem) $r14;

        r6 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r15);

        r7 = staticinvoke <androidx.security.identity.Util: byte[] coseBuildToBeSigned(byte[],byte[],byte[])>(r6, r1, r2);

     label06:
        virtualinvoke r0.<java.security.Signature: void update(byte[])>(r7);

        r30 = virtualinvoke r0.<java.security.Signature: byte[] sign()>();

        r31 = staticinvoke <androidx.security.identity.Util: byte[] signatureDerToCose(byte[])>(r30);

     label07:
        goto label09;

     label08:
        $r28 := @caughtexception;

        r32 = $r28;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error signing data", r32);

        throw $r29;

     label09:
        $r16 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r16.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r33 = $r16;

        r8 = virtualinvoke r33.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r6);

        r9 = virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        if r3 == null goto label12;

        $i3 = interfaceinvoke r3.<java.util.Collection: int size()>();

        if $i3 <= 0 goto label12;

        $i4 = interfaceinvoke r3.<java.util.Collection: int size()>();

        if $i4 != 1 goto label10;

        $r24 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r34 = (java.security.cert.X509Certificate) $r25;

        $r26 = virtualinvoke r34.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        virtualinvoke r9.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(long,byte[])>(33L, $r26);

        goto label12;

     label10:
        r35 = virtualinvoke r9.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.ArrayBuilder putArray(long)>(33L);

        r10 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r22 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.security.cert.X509Certificate) $r22;

        $r23 = virtualinvoke r11.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        virtualinvoke r35.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>($r23);

        goto label11;

     label12:
        if r1 == null goto label13;

        $i2 = lengthof r1;

        if $i2 != 0 goto label14;

     label13:
        $r17 = new co.nstant.in.cbor.model.SimpleValue;

        $r18 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType NULL>;

        specialinvoke $r17.<co.nstant.in.cbor.model.SimpleValue: void <init>(co.nstant.in.cbor.model.SimpleValueType)>($r18);

        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>($r17);

        goto label15;

     label14:
        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r1);

     label15:
        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r31);

        $r19 = virtualinvoke r33.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(0);

        $r21 = (co.nstant.in.cbor.model.DataItem) $r20;

        return $r21;

        catch java.security.SignatureException from label06 to label07 with label08;
    }

    public static co.nstant.in.cbor.model.DataItem coseSign1Sign(java.security.PrivateKey, byte[], byte[], java.util.Collection) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.cert.CertificateEncodingException
    {
        java.security.PrivateKey r0;
        byte[] r1, r2;
        java.util.Collection r3;
        java.security.Signature r4;
        co.nstant.in.cbor.model.DataItem $r5;

        r0 := @parameter0: java.security.PrivateKey;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: java.util.Collection;

        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA256withECDSA");

        virtualinvoke r4.<java.security.Signature: void initSign(java.security.PrivateKey)>(r0);

        $r5 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem coseSign1Sign(java.security.Signature,byte[],byte[],java.util.Collection)>(r4, r1, r2, r3);

        return $r5;
    }

    public static boolean coseSign1CheckSignature(co.nstant.in.cbor.model.DataItem, byte[], java.security.PublicKey)
    {
        co.nstant.in.cbor.model.DataItem r0, $r11, $r17, $r21, $r28;
        byte[] r1, r4, r5, r6, r49, r51;
        java.security.PublicKey r2;
        java.util.List r3;
        int i0, i1, $i2, $i3;
        co.nstant.in.cbor.model.MajorType $r7, $r8, $r12, $r13, $r18, $r19, $r22, $r23, $r29, $r30;
        co.nstant.in.cbor.model.Array $r9;
        java.lang.Object $r10, $r14, $r16, $r20, $r25, $r27, $r31, $r35, $r39;
        co.nstant.in.cbor.model.ByteString $r15, $r26, $r32;
        java.lang.IllegalArgumentException $r24, $r33, $r34, $r42, $r43, $r44, $r45, $r46;
        boolean $z0;
        co.nstant.in.cbor.model.Special $r36;
        co.nstant.in.cbor.model.SpecialType $r37, $r38;
        co.nstant.in.cbor.model.SimpleValueType $r40, $r41;
        java.lang.Throwable $r47, r53;
        java.lang.IllegalStateException $r48;
        co.nstant.in.cbor.model.SimpleValue r50;
        java.security.Signature r52;

        r0 := @parameter0: co.nstant.in.cbor.model.DataItem;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.security.PublicKey;

        $r7 = virtualinvoke r0.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r8 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType ARRAY>;

        if $r7 == $r8 goto label01;

        $r46 = new java.lang.IllegalArgumentException;

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Data item is not an array");

        throw $r46;

     label01:
        $r9 = (co.nstant.in.cbor.model.Array) r0;

        r3 = virtualinvoke $r9.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i2 >= 4 goto label02;

        $r45 = new java.lang.IllegalArgumentException;

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected at least four items in COSE_Sign1 array");

        throw $r45;

     label02:
        $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (co.nstant.in.cbor.model.DataItem) $r10;

        $r12 = virtualinvoke $r11.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r13 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType BYTE_STRING>;

        if $r12 == $r13 goto label03;

        $r44 = new java.lang.IllegalArgumentException;

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item 0 (protected headers) is not a byte-string");

        throw $r44;

     label03:
        $r14 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (co.nstant.in.cbor.model.ByteString) $r14;

        r4 = virtualinvoke $r15.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        r49 = newarray (byte)[0];

        $r16 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(2);

        $r17 = (co.nstant.in.cbor.model.DataItem) $r16;

        $r18 = virtualinvoke $r17.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r19 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType SPECIAL>;

        if $r18 != $r19 goto label06;

        $r35 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(2);

        $r36 = (co.nstant.in.cbor.model.Special) $r35;

        $r37 = virtualinvoke $r36.<co.nstant.in.cbor.model.Special: co.nstant.in.cbor.model.SpecialType getSpecialType()>();

        $r38 = <co.nstant.in.cbor.model.SpecialType: co.nstant.in.cbor.model.SpecialType SIMPLE_VALUE>;

        if $r37 == $r38 goto label04;

        $r43 = new java.lang.IllegalArgumentException;

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item 2 (payload) is a special but not a simple value");

        throw $r43;

     label04:
        $r39 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(2);

        r50 = (co.nstant.in.cbor.model.SimpleValue) $r39;

        $r40 = virtualinvoke r50.<co.nstant.in.cbor.model.SimpleValue: co.nstant.in.cbor.model.SimpleValueType getSimpleValueType()>();

        $r41 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType NULL>;

        if $r40 == $r41 goto label05;

        $r42 = new java.lang.IllegalArgumentException;

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item 2 (payload) is a simple but not the value null");

        throw $r42;

     label05:
        goto label08;

     label06:
        $r20 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(2);

        $r21 = (co.nstant.in.cbor.model.DataItem) $r20;

        $r22 = virtualinvoke $r21.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r23 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType BYTE_STRING>;

        if $r22 != $r23 goto label07;

        $r25 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(2);

        $r26 = (co.nstant.in.cbor.model.ByteString) $r25;

        r49 = virtualinvoke $r26.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        goto label08;

     label07:
        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item 2 (payload) is not nil or byte-string");

        throw $r24;

     label08:
        $r27 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(3);

        $r28 = (co.nstant.in.cbor.model.DataItem) $r27;

        $r29 = virtualinvoke $r28.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r30 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType BYTE_STRING>;

        if $r29 == $r30 goto label09;

        $r34 = new java.lang.IllegalArgumentException;

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item 3 (signature) is not a byte-string");

        throw $r34;

     label09:
        $r31 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(3);

        $r32 = (co.nstant.in.cbor.model.ByteString) $r31;

        r51 = virtualinvoke $r32.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        r5 = staticinvoke <androidx.security.identity.Util: byte[] signatureCoseToDer(byte[])>(r51);

        i0 = lengthof r49;

        if r1 == null goto label10;

        $i3 = lengthof r1;

        goto label11;

     label10:
        $i3 = 0;

     label11:
        i1 = $i3;

        if i0 <= 0 goto label12;

        if i1 <= 0 goto label12;

        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("data and detachedContent cannot both be non-empty");

        throw $r33;

     label12:
        r6 = staticinvoke <androidx.security.identity.Util: byte[] coseBuildToBeSigned(byte[],byte[],byte[])>(r4, r49, r1);

     label13:
        r52 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA256withECDSA");

        virtualinvoke r52.<java.security.Signature: void initVerify(java.security.PublicKey)>(r2);

        virtualinvoke r52.<java.security.Signature: void update(byte[])>(r6);

        $z0 = virtualinvoke r52.<java.security.Signature: boolean verify(byte[])>(r5);

     label14:
        return $z0;

     label15:
        $r47 := @caughtexception;

        r53 = $r47;

        $r48 = new java.lang.IllegalStateException;

        specialinvoke $r48.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error verifying signature", r53);

        throw $r48;

        catch java.security.SignatureException from label13 to label14 with label15;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label15;
        catch java.security.InvalidKeyException from label13 to label14 with label15;
    }

    private static byte[] coseBuildToBeMACed(byte[], byte[], byte[])
    {
        byte[] r0, r1, r2, r5, $r15;
        co.nstant.in.cbor.CborBuilder r3, $r6;
        co.nstant.in.cbor.builder.ArrayBuilder r4;
        int $i0;
        java.util.List $r12;
        java.lang.Object $r13;
        co.nstant.in.cbor.model.DataItem $r14;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        $r6 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r6.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r3 = $r6;

        r4 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>("MAC0");

        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r0);

        r5 = newarray (byte)[0];

        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r5);

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r1);

        goto label2;

     label1:
        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r2);

     label2:
        $r12 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (co.nstant.in.cbor.model.DataItem) $r13;

        $r15 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r14);

        return $r15;
    }

    public static co.nstant.in.cbor.model.DataItem coseMac0(javax.crypto.SecretKey, byte[], byte[])
    {
        javax.crypto.SecretKey r0;
        byte[] r1, r2, r5, r6, r7;
        int i0, i1, $i2, $i3, $i4;
        co.nstant.in.cbor.CborBuilder r3, $r9, $r14, r30;
        co.nstant.in.cbor.builder.MapBuilder r4;
        co.nstant.in.cbor.builder.ArrayBuilder r8;
        java.util.List $r11, $r21;
        java.lang.Object $r12, $r22;
        co.nstant.in.cbor.model.DataItem $r13, $r23;
        co.nstant.in.cbor.model.SimpleValue $r17;
        co.nstant.in.cbor.model.SimpleValueType $r18;
        java.lang.IllegalArgumentException $r25;
        java.lang.Throwable $r26, r29;
        java.lang.IllegalStateException $r27;
        javax.crypto.Mac r28;

        r0 := @parameter0: javax.crypto.SecretKey;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        if r1 == null goto label01;

        $i3 = lengthof r1;

        goto label02;

     label01:
        $i3 = 0;

     label02:
        i0 = $i3;

        if r2 == null goto label03;

        $i4 = lengthof r2;

        goto label04;

     label03:
        $i4 = 0;

     label04:
        i1 = $i4;

        if i0 <= 0 goto label05;

        if i1 <= 0 goto label05;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("data and detachedContent cannot both be non-empty");

        throw $r25;

     label05:
        $r9 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r9.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r3 = $r9;

        r4 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        virtualinvoke r4.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(long,long)>(1L, 5L);

        $r11 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (co.nstant.in.cbor.model.DataItem) $r12;

        r5 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r13);

        r6 = staticinvoke <androidx.security.identity.Util: byte[] coseBuildToBeMACed(byte[],byte[],byte[])>(r5, r1, r2);

     label06:
        r28 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA256");

        virtualinvoke r28.<javax.crypto.Mac: void init(java.security.Key)>(r0);

        virtualinvoke r28.<javax.crypto.Mac: void update(byte[])>(r6);

        r7 = virtualinvoke r28.<javax.crypto.Mac: byte[] doFinal()>();

     label07:
        goto label09;

     label08:
        $r26 := @caughtexception;

        r29 = $r26;

        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected error", r29);

        throw $r27;

     label09:
        $r14 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r14.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r30 = $r14;

        r8 = virtualinvoke r30.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r5);

        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        if r1 == null goto label10;

        $i2 = lengthof r1;

        if $i2 != 0 goto label11;

     label10:
        $r17 = new co.nstant.in.cbor.model.SimpleValue;

        $r18 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType NULL>;

        specialinvoke $r17.<co.nstant.in.cbor.model.SimpleValue: void <init>(co.nstant.in.cbor.model.SimpleValueType)>($r18);

        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>($r17);

        goto label12;

     label11:
        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r1);

     label12:
        virtualinvoke r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r7);

        $r21 = virtualinvoke r30.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = (co.nstant.in.cbor.model.DataItem) $r22;

        return $r23;

        catch java.security.NoSuchAlgorithmException from label06 to label07 with label08;
        catch java.security.InvalidKeyException from label06 to label07 with label08;
    }

    public static byte[] coseMac0GetTag(co.nstant.in.cbor.model.DataItem)
    {
        co.nstant.in.cbor.model.DataItem r0, r2;
        java.util.List r1;
        boolean $z0, $z1;
        co.nstant.in.cbor.model.Array $r3;
        int $i0;
        java.lang.Object $r4;
        co.nstant.in.cbor.model.ByteString $r5;
        byte[] $r6;
        java.lang.IllegalArgumentException $r7, $r8, $r9;

        r0 := @parameter0: co.nstant.in.cbor.model.DataItem;

        $z0 = r0 instanceof co.nstant.in.cbor.model.Array;

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("coseMac0 is not an array");

        throw $r9;

     label1:
        $r3 = (co.nstant.in.cbor.model.Array) r0;

        r1 = virtualinvoke $r3.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= 4 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("coseMac0 have less than 4 elements");

        throw $r8;

     label2:
        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(3);

        r2 = (co.nstant.in.cbor.model.DataItem) $r4;

        $z1 = r2 instanceof co.nstant.in.cbor.model.ByteString;

        if $z1 != 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tag in coseMac0 is not a ByteString");

        throw $r7;

     label3:
        $r5 = (co.nstant.in.cbor.model.ByteString) r2;

        $r6 = virtualinvoke $r5.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        return $r6;
    }

    static boolean hasSubByteArray(byte[], byte[])
    {
        byte[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i7, i8;
        byte $b5, $b6;
        boolean z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i7 = 0;

     label1:
        $i0 = lengthof r1;

        $i2 = $i0 + i7;

        $i1 = lengthof r0;

        if $i2 > $i1 goto label6;

        z0 = 1;

        i8 = 0;

     label2:
        $i3 = lengthof r1;

        if i8 >= $i3 goto label4;

        $b6 = r1[i8];

        $i4 = i7 + i8;

        $b5 = r0[$i4];

        if $b6 == $b5 goto label3;

        z0 = 0;

        goto label4;

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        if z0 == 0 goto label5;

        return 1;

     label5:
        i7 = i7 + 1;

        goto label1;

     label6:
        return 0;
    }

    static byte[] stripLeadingZeroes(byte[])
    {
        byte[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, i7, i8, $i9;
        byte $b5, $b6;

        r0 := @parameter0: byte[];

        i7 = 0;

     label1:
        $i1 = lengthof r0;

        if i7 >= $i1 goto label2;

        $b6 = r0[i7];

        if $b6 != 0 goto label2;

        i7 = i7 + 1;

        goto label1;

     label2:
        $i2 = lengthof r0;

        i0 = $i2 - i7;

        r1 = newarray (byte)[i0];

        i8 = 0;

     label3:
        $i9 = lengthof r0;

        if i7 >= $i9 goto label4;

        $i3 = i8;

        i8 = i8 + 1;

        $i4 = i7;

        i7 = i7 + 1;

        $b5 = r0[$i4];

        r1[$i3] = $b5;

        goto label3;

     label4:
        return r1;
    }

    public static co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])
    {
        byte[] r0;
        co.nstant.in.cbor.model.ByteString r1, $r2;

        r0 := @parameter0: byte[];

        $r2 = new co.nstant.in.cbor.model.ByteString;

        specialinvoke $r2.<co.nstant.in.cbor.model.ByteString: void <init>(byte[])>(r0);

        r1 = $r2;

        virtualinvoke r1.<co.nstant.in.cbor.model.DataItem: void setTag(int)>(24);

        return r1;
    }

    public static co.nstant.in.cbor.model.DataItem cborExtractTaggedAndEncodedCbor(co.nstant.in.cbor.model.DataItem)
    {
        co.nstant.in.cbor.model.DataItem r0, r2;
        byte[] r1;
        java.lang.IllegalArgumentException $r3, $r4;
        boolean $z0, $z1;
        co.nstant.in.cbor.model.Tag $r5;
        long $l0;
        byte $b1;
        co.nstant.in.cbor.model.ByteString $r6;

        r0 := @parameter0: co.nstant.in.cbor.model.DataItem;

        if r0 == null goto label1;

        $z0 = r0 instanceof co.nstant.in.cbor.model.ByteString;

        if $z0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item is not a ByteString");

        throw $r3;

     label2:
        $z1 = virtualinvoke r0.<co.nstant.in.cbor.model.DataItem: boolean hasTag()>();

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.Tag getTag()>();

        $l0 = virtualinvoke $r5.<co.nstant.in.cbor.model.Tag: long getValue()>();

        $b1 = $l0 cmp 24L;

        if $b1 == 0 goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ByteString is not tagged with tag 24");

        throw $r4;

     label4:
        $r6 = (co.nstant.in.cbor.model.ByteString) r0;

        r1 = virtualinvoke $r6.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        r2 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborDecode(byte[])>(r1);

        return r2;
    }

    public static byte[] coseSign1GetData(co.nstant.in.cbor.model.DataItem)
    {
        co.nstant.in.cbor.model.DataItem r0, $r7, $r11;
        java.util.List r1;
        co.nstant.in.cbor.model.SimpleValue r2;
        co.nstant.in.cbor.model.MajorType $r3, $r4, $r8, $r9, $r12, $r13;
        co.nstant.in.cbor.model.Array $r5;
        int $i0;
        java.lang.Object $r6, $r10, $r15, $r17, $r21;
        java.lang.IllegalArgumentException $r14, $r24, $r25, $r26, $r27;
        co.nstant.in.cbor.model.ByteString $r16;
        co.nstant.in.cbor.model.Special $r18;
        co.nstant.in.cbor.model.SpecialType $r19, $r20;
        co.nstant.in.cbor.model.SimpleValueType $r22, $r23;
        byte[] r28;

        r0 := @parameter0: co.nstant.in.cbor.model.DataItem;

        $r3 = virtualinvoke r0.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r4 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType ARRAY>;

        if $r3 == $r4 goto label1;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Data item is not an array");

        throw $r27;

     label1:
        $r5 = (co.nstant.in.cbor.model.Array) r0;

        r1 = virtualinvoke $r5.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= 4 goto label2;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected at least four items in COSE_Sign1 array");

        throw $r26;

     label2:
        r28 = newarray (byte)[0];

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        $r7 = (co.nstant.in.cbor.model.DataItem) $r6;

        $r8 = virtualinvoke $r7.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r9 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType SPECIAL>;

        if $r8 != $r9 goto label5;

        $r17 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        $r18 = (co.nstant.in.cbor.model.Special) $r17;

        $r19 = virtualinvoke $r18.<co.nstant.in.cbor.model.Special: co.nstant.in.cbor.model.SpecialType getSpecialType()>();

        $r20 = <co.nstant.in.cbor.model.SpecialType: co.nstant.in.cbor.model.SpecialType SIMPLE_VALUE>;

        if $r19 == $r20 goto label3;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item 2 (payload) is a special but not a simple value");

        throw $r25;

     label3:
        $r21 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        r2 = (co.nstant.in.cbor.model.SimpleValue) $r21;

        $r22 = virtualinvoke r2.<co.nstant.in.cbor.model.SimpleValue: co.nstant.in.cbor.model.SimpleValueType getSimpleValueType()>();

        $r23 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType NULL>;

        if $r22 == $r23 goto label4;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item 2 (payload) is a simple but not the value null");

        throw $r24;

     label4:
        goto label7;

     label5:
        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        $r11 = (co.nstant.in.cbor.model.DataItem) $r10;

        $r12 = virtualinvoke $r11.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r13 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType BYTE_STRING>;

        if $r12 != $r13 goto label6;

        $r15 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        $r16 = (co.nstant.in.cbor.model.ByteString) $r15;

        r28 = virtualinvoke $r16.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        goto label7;

     label6:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item 2 (payload) is not nil or byte-string");

        throw $r14;

     label7:
        return r28;
    }

    public static java.util.Collection coseSign1GetX5Chain(co.nstant.in.cbor.model.DataItem)
    {
        co.nstant.in.cbor.model.DataItem r0, r4, r5, $r12;
        java.util.ArrayList r1, $r7;
        java.util.List r2, $r19;
        co.nstant.in.cbor.model.Map r3;
        java.io.ByteArrayInputStream r6, $r21, $r27, r38;
        co.nstant.in.cbor.model.MajorType $r8, $r9, $r13, $r14;
        co.nstant.in.cbor.model.Array $r10, $r18;
        int $i0;
        java.lang.Object $r11, $r15, $r20;
        co.nstant.in.cbor.model.UnsignedInteger $r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r17, $r26, $r32, $r33, $r34, $r36;
        co.nstant.in.cbor.model.ByteString $r22, $r28;
        byte[] $r23, $r29;
        java.security.cert.Certificate $r24, $r30;
        java.security.cert.X509Certificate $r25, $r31;
        java.lang.Throwable $r35, r40;
        java.security.cert.CertificateFactory r37;
        java.util.Iterator r39;

        r0 := @parameter0: co.nstant.in.cbor.model.DataItem;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r1 = $r7;

        $r8 = virtualinvoke r0.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r9 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType ARRAY>;

        if $r8 == $r9 goto label01;

        $r34 = new java.lang.IllegalArgumentException;

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Data item is not an array");

        throw $r34;

     label01:
        $r10 = (co.nstant.in.cbor.model.Array) r0;

        r2 = virtualinvoke $r10.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 >= 4 goto label02;

        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected at least four items in COSE_Sign1 array");

        throw $r33;

     label02:
        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        $r12 = (co.nstant.in.cbor.model.DataItem) $r11;

        $r13 = virtualinvoke $r12.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $r14 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType MAP>;

        if $r13 == $r14 goto label03;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item 1 (unprotected headers) is not a map");

        throw $r32;

     label03:
        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        r3 = (co.nstant.in.cbor.model.Map) $r15;

        $r16 = new co.nstant.in.cbor.model.UnsignedInteger;

        specialinvoke $r16.<co.nstant.in.cbor.model.UnsignedInteger: void <init>(long)>(33L);

        r4 = virtualinvoke r3.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r16);

        if r4 == null goto label12;

     label04:
        r37 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $z0 = r4 instanceof co.nstant.in.cbor.model.ByteString;

        if $z0 == 0 goto label05;

        $r27 = new java.io.ByteArrayInputStream;

        $r28 = (co.nstant.in.cbor.model.ByteString) r4;

        $r29 = virtualinvoke $r28.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        specialinvoke $r27.<java.io.ByteArrayInputStream: void <init>(byte[])>($r29);

        r38 = $r27;

        $r30 = virtualinvoke r37.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r38);

        $r31 = (java.security.cert.X509Certificate) $r30;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r31);

        goto label10;

     label05:
        $z1 = r4 instanceof co.nstant.in.cbor.model.Array;

        if $z1 == 0 goto label09;

        $r18 = (co.nstant.in.cbor.model.Array) r4;

        $r19 = virtualinvoke $r18.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        r39 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r20 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r5 = (co.nstant.in.cbor.model.DataItem) $r20;

        $z3 = r5 instanceof co.nstant.in.cbor.model.ByteString;

        if $z3 != 0 goto label07;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unexpected type for array item in x5chain value");

        throw $r26;

     label07:
        $r21 = new java.io.ByteArrayInputStream;

        $r22 = (co.nstant.in.cbor.model.ByteString) r5;

        $r23 = virtualinvoke $r22.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        specialinvoke $r21.<java.io.ByteArrayInputStream: void <init>(byte[])>($r23);

        r6 = $r21;

        $r24 = virtualinvoke r37.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r6);

        $r25 = (java.security.cert.X509Certificate) $r24;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r25);

        goto label06;

     label08:
        goto label10;

     label09:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unexpected type for x5chain value");

        throw $r17;

     label10:
        goto label12;

     label11:
        $r35 := @caughtexception;

        r40 = $r35;

        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected error", r40);

        throw $r36;

     label12:
        return r1;

        catch java.security.cert.CertificateException from label04 to label10 with label11;
    }

    public static javax.crypto.SecretKey calcEMacKeyForReader(java.security.PublicKey, java.security.PrivateKey, byte[])
    {
        java.security.PublicKey r0;
        java.security.PrivateKey r1;
        byte[] r2, r3, r4, r5, r6, r7, $r12;
        javax.crypto.spec.SecretKeySpec r8, $r13;
        co.nstant.in.cbor.model.DataItem $r10;
        java.security.MessageDigest $r11;
        java.lang.Throwable $r14, r17;
        java.lang.IllegalStateException $r15;
        javax.crypto.KeyAgreement r16;

        r0 := @parameter0: java.security.PublicKey;

        r1 := @parameter1: java.security.PrivateKey;

        r2 := @parameter2: byte[];

     label1:
        r16 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>("ECDH");

        virtualinvoke r16.<javax.crypto.KeyAgreement: void init(java.security.Key)>(r1);

        virtualinvoke r16.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>(r0, 1);

        r3 = virtualinvoke r16.<javax.crypto.KeyAgreement: byte[] generateSecret()>();

        $r10 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])>(r2);

        r4 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r10);

        $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        r5 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest(byte[])>(r4);

        $r12 = newarray (byte)[7];

        $r12[0] = 69;

        $r12[1] = 77;

        $r12[2] = 97;

        $r12[3] = 99;

        $r12[4] = 75;

        $r12[5] = 101;

        $r12[6] = 121;

        r6 = $r12;

        r7 = staticinvoke <androidx.security.identity.Util: byte[] computeHkdf(java.lang.String,byte[],byte[],byte[],int)>("HmacSha256", r3, r5, r6, 32);

        $r13 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r7, "");

        r8 = $r13;

     label2:
        return r8;

     label3:
        $r14 := @caughtexception;

        r17 = $r14;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error performing key agreement", r17);

        throw $r15;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static java.lang.String cborPrettyPrint(co.nstant.in.cbor.model.DataItem)
    {
        co.nstant.in.cbor.model.DataItem r0;
        java.lang.StringBuilder r1, $r2;
        java.lang.String $r3;

        r0 := @parameter0: co.nstant.in.cbor.model.DataItem;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        staticinvoke <androidx.security.identity.Util: void cborPrettyPrintDataItem(java.lang.StringBuilder,int,co.nstant.in.cbor.model.DataItem)>(r1, 0, r0);

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String cborPrettyPrint(byte[])
    {
        byte[] r0;
        java.lang.StringBuilder r1, $r5;
        java.io.ByteArrayInputStream r2, $r6;
        java.util.Iterator r3;
        co.nstant.in.cbor.model.DataItem r4;
        co.nstant.in.cbor.CborDecoder $r7;
        boolean $z0;
        java.lang.String $r8;
        java.lang.Object $r9;
        java.lang.Throwable $r10, r13;
        java.lang.IllegalStateException $r11;
        java.util.List r12;
        int i0;

        r0 := @parameter0: byte[];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r1 = $r5;

        $r6 = new java.io.ByteArrayInputStream;

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        r2 = $r6;

     label1:
        $r7 = new co.nstant.in.cbor.CborDecoder;

        specialinvoke $r7.<co.nstant.in.cbor.CborDecoder: void <init>(java.io.InputStream)>(r2);

        r12 = virtualinvoke $r7.<co.nstant.in.cbor.CborDecoder: java.util.List decode()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r13 = $r10;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r13);

        throw $r11;

     label4:
        i0 = 0;

        r3 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (co.nstant.in.cbor.model.DataItem) $r9;

        if i0 <= 0 goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n");

     label6:
        staticinvoke <androidx.security.identity.Util: void cborPrettyPrintDataItem(java.lang.StringBuilder,int,co.nstant.in.cbor.model.DataItem)>(r1, 0, r4);

        i0 = i0 + 1;

        goto label5;

     label7:
        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

        catch co.nstant.in.cbor.CborException from label1 to label2 with label3;
    }

    private static boolean cborAreAllDataItemsNonCompound(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        co.nstant.in.cbor.model.DataItem r2;
        boolean $z0;
        java.lang.Object $r3;
        int[] $r4;
        co.nstant.in.cbor.model.MajorType $r5;
        int $i0, $i1;

        r0 := @parameter0: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (co.nstant.in.cbor.model.DataItem) $r3;

        $r4 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r5 = virtualinvoke r2.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $i0 = virtualinvoke $r5.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $i1 = $r4[$i0];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label2;
            default: goto label3;
        };

     label2:
        return 0;

     label3:
        goto label1;

     label4:
        return 1;
    }

    private static void cborPrettyPrintDataItem(java.lang.StringBuilder, int, co.nstant.in.cbor.model.DataItem)
    {
        java.lang.StringBuilder r0, r2, $r3, $r30, $r31, $r32, $r33, $r50, $r51, $r52, $r60, $r61, $r62, $r68, $r69, $r70, $r76, $r77, $r78;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i15, i16, i17, i18, i19, i20, i21;
        co.nstant.in.cbor.model.DataItem r1, r101, r103, r106, r107;
        byte b1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int[] $r4, $r20;
        co.nstant.in.cbor.model.MajorType $r5;
        java.text.DecimalFormat $r7, $r13, r108, r109;
        java.util.Locale $r8, $r14;
        java.text.DecimalFormatSymbols $r9, $r15;
        co.nstant.in.cbor.model.AbstractFloat $r10;
        float $f0;
        double $d0, $d1;
        java.lang.String $r11, $r17, $r34, $r41, $r53, $r63, $r71, $r79, $r90, r93, r98;
        co.nstant.in.cbor.model.DoublePrecisionFloat $r16;
        co.nstant.in.cbor.model.SimpleValue $r19;
        co.nstant.in.cbor.model.SimpleValueType $r21;
        java.lang.IllegalStateException $r28;
        co.nstant.in.cbor.model.UnicodeString $r29;
        co.nstant.in.cbor.model.ByteString $r36;
        java.lang.Object[] $r39, $r87;
        java.lang.Byte $r40;
        co.nstant.in.cbor.model.NegativeInteger $r44;
        co.nstant.in.cbor.model.UnsignedInteger $r46;
        co.nstant.in.cbor.model.Map $r49, $r58;
        java.lang.Object $r56, $r74, $r84;
        co.nstant.in.cbor.model.Array $r67;
        co.nstant.in.cbor.model.Tag $r88;
        long $l14;
        java.lang.Long $r89;
        java.math.BigInteger r94, r95;
        byte[] r96, r97;
        java.util.List r99;
        java.util.Iterator r100, r102, r105;
        java.util.Collection r104;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        r1 := @parameter2: co.nstant.in.cbor.model.DataItem;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r2 = $r3;

        i15 = 0;

     label01:
        if i15 >= i0 goto label02;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i15 = i15 + 1;

        goto label01;

     label02:
        r93 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r1.<co.nstant.in.cbor.model.DataItem: boolean hasTag()>();

        if $z0 == 0 goto label03;

        $r87 = newarray (java.lang.Object)[1];

        $r88 = virtualinvoke r1.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.Tag getTag()>();

        $l14 = virtualinvoke $r88.<co.nstant.in.cbor.model.Tag: long getValue()>();

        $r89 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l14);

        $r87[0] = $r89;

        $r90 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("tag %d ", $r87);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);

     label03:
        $r4 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r5 = virtualinvoke r1.<co.nstant.in.cbor.model.DataItem: co.nstant.in.cbor.model.MajorType getMajorType()>();

        $i2 = virtualinvoke $r5.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $i3 = $r4[$i2];

        tableswitch($i3)
        {
            case 1: goto label12;
            case 2: goto label22;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label11;
            case 8: goto label28;
            case 9: goto label29;
            default: goto label40;
        };

     label04:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<invalid>");

        goto label40;

     label05:
        $r46 = (co.nstant.in.cbor.model.UnsignedInteger) r1;

        r94 = virtualinvoke $r46.<co.nstant.in.cbor.model.UnsignedInteger: java.math.BigInteger getValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r94);

        goto label40;

     label06:
        $r44 = (co.nstant.in.cbor.model.NegativeInteger) r1;

        r95 = virtualinvoke $r44.<co.nstant.in.cbor.model.NegativeInteger: java.math.BigInteger getValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r95);

        goto label40;

     label07:
        $r36 = (co.nstant.in.cbor.model.ByteString) r1;

        r96 = virtualinvoke $r36.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        i16 = 0;

        r97 = r96;

        i17 = lengthof r97;

        i18 = 0;

     label08:
        if i18 >= i17 goto label10;

        b1 = r97[i18];

        if i16 <= 0 goto label09;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label09:
        $r39 = newarray (java.lang.Object)[1];

        $r40 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b1);

        $r39[0] = $r40;

        $r41 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0x%02x", $r39);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        i16 = i16 + 1;

        i18 = i18 + 1;

        goto label08;

     label10:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label40;

     label11:
        $r29 = (co.nstant.in.cbor.model.UnicodeString) r1;

        r98 = virtualinvoke $r29.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r98);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        goto label40;

     label12:
        $r67 = (co.nstant.in.cbor.model.Array) r1;

        r99 = virtualinvoke $r67.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        $i10 = interfaceinvoke r99.<java.util.List: int size()>();

        if $i10 != 0 goto label13;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        goto label21;

     label13:
        $z5 = staticinvoke <androidx.security.identity.Util: boolean cborAreAllDataItemsNonCompound(java.util.List)>(r99);

        if $z5 == 0 goto label17;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        i19 = 0;

        r100 = interfaceinvoke r99.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z7 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label16;

        $r84 = interfaceinvoke r100.<java.util.Iterator: java.lang.Object next()>();

        r101 = (co.nstant.in.cbor.model.DataItem) $r84;

        staticinvoke <androidx.security.identity.Util: void cborPrettyPrintDataItem(java.lang.StringBuilder,int,co.nstant.in.cbor.model.DataItem)>(r0, i0, r101);

        i19 = i19 + 1;

        $i13 = interfaceinvoke r99.<java.util.List: int size()>();

        if i19 >= $i13 goto label15;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label15:
        goto label14;

     label16:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label21;

     label17:
        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\n");

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        i20 = 0;

        r102 = interfaceinvoke r99.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z6 = interfaceinvoke r102.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label20;

        $r74 = interfaceinvoke r102.<java.util.Iterator: java.lang.Object next()>();

        r103 = (co.nstant.in.cbor.model.DataItem) $r74;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $i11 = i0 + 2;

        staticinvoke <androidx.security.identity.Util: void cborPrettyPrintDataItem(java.lang.StringBuilder,int,co.nstant.in.cbor.model.DataItem)>(r0, $i11, r103);

        i20 = i20 + 1;

        $i12 = interfaceinvoke r99.<java.util.List: int size()>();

        if i20 >= $i12 goto label19;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label19:
        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r79);

        goto label18;

     label20:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label21:
        goto label40;

     label22:
        $r49 = (co.nstant.in.cbor.model.Map) r1;

        r104 = virtualinvoke $r49.<co.nstant.in.cbor.model.Map: java.util.Collection getKeys()>();

        $i6 = interfaceinvoke r104.<java.util.Collection: int size()>();

        if $i6 != 0 goto label23;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{}");

        goto label27;

     label23:
        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\n");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        i21 = 0;

        r105 = interfaceinvoke r104.<java.util.Collection: java.util.Iterator iterator()>();

     label24:
        $z4 = interfaceinvoke r105.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label26;

        $r56 = interfaceinvoke r105.<java.util.Iterator: java.lang.Object next()>();

        r106 = (co.nstant.in.cbor.model.DataItem) $r56;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r58 = (co.nstant.in.cbor.model.Map) r1;

        r107 = virtualinvoke $r58.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>(r106);

        $i7 = i0 + 2;

        staticinvoke <androidx.security.identity.Util: void cborPrettyPrintDataItem(java.lang.StringBuilder,int,co.nstant.in.cbor.model.DataItem)>(r0, $i7, r106);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $i8 = i0 + 2;

        staticinvoke <androidx.security.identity.Util: void cborPrettyPrintDataItem(java.lang.StringBuilder,int,co.nstant.in.cbor.model.DataItem)>(r0, $i8, r107);

        i21 = i21 + 1;

        $i9 = interfaceinvoke r104.<java.util.Collection: int size()>();

        if i21 >= $i9 goto label25;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label25:
        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        goto label24;

     label26:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label27:
        goto label40;

     label28:
        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Semantic tag data item not expected");

        throw $r28;

     label29:
        $z1 = r1 instanceof co.nstant.in.cbor.model.SimpleValue;

        if $z1 == 0 goto label37;

        $r20 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$SimpleValueType>;

        $r19 = (co.nstant.in.cbor.model.SimpleValue) r1;

        $r21 = virtualinvoke $r19.<co.nstant.in.cbor.model.SimpleValue: co.nstant.in.cbor.model.SimpleValueType getSimpleValueType()>();

        $i4 = virtualinvoke $r21.<co.nstant.in.cbor.model.SimpleValueType: int ordinal()>();

        $i5 = $r20[$i4];

        tableswitch($i5)
        {
            case 1: goto label30;
            case 2: goto label31;
            case 3: goto label32;
            case 4: goto label33;
            case 5: goto label34;
            case 6: goto label35;
            default: goto label36;
        };

     label30:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("false");

        goto label36;

     label31:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("true");

        goto label36;

     label32:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        goto label36;

     label33:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("undefined");

        goto label36;

     label34:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reserved");

        goto label36;

     label35:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unallocated");

     label36:
        goto label40;

     label37:
        $z2 = r1 instanceof co.nstant.in.cbor.model.DoublePrecisionFloat;

        if $z2 == 0 goto label38;

        $r13 = new java.text.DecimalFormat;

        $r14 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r15 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>($r14);

        specialinvoke $r13.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>("0", $r15);

        r108 = $r13;

        virtualinvoke r108.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(340);

        $r16 = (co.nstant.in.cbor.model.DoublePrecisionFloat) r1;

        $d1 = virtualinvoke $r16.<co.nstant.in.cbor.model.DoublePrecisionFloat: double getValue()>();

        $r17 = virtualinvoke r108.<java.text.DecimalFormat: java.lang.String format(double)>($d1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        goto label40;

     label38:
        $z3 = r1 instanceof co.nstant.in.cbor.model.AbstractFloat;

        if $z3 == 0 goto label39;

        $r7 = new java.text.DecimalFormat;

        $r8 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r9 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>($r8);

        specialinvoke $r7.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>("0", $r9);

        r109 = $r7;

        virtualinvoke r109.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(340);

        $r10 = (co.nstant.in.cbor.model.AbstractFloat) r1;

        $f0 = virtualinvoke $r10.<co.nstant.in.cbor.model.AbstractFloat: float getValue()>();

        $d0 = (double) $f0;

        $r11 = virtualinvoke r109.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        goto label40;

     label39:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("break");

     label40:
        return;
    }

    static byte[] canonicalizeCbor(byte[]) throws co.nstant.in.cbor.CborException
    {
        byte[] r0, $r10;
        java.io.ByteArrayInputStream r1, $r7;
        java.util.List r2;
        java.io.ByteArrayOutputStream r3, $r9;
        java.util.Iterator r4;
        co.nstant.in.cbor.model.DataItem r5;
        co.nstant.in.cbor.CborEncoder r6, $r12;
        co.nstant.in.cbor.CborDecoder $r8;
        boolean $z0;
        java.lang.Object $r11;

        r0 := @parameter0: byte[];

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        r1 = $r7;

        $r8 = new co.nstant.in.cbor.CborDecoder;

        specialinvoke $r8.<co.nstant.in.cbor.CborDecoder: void <init>(java.io.InputStream)>(r1);

        r2 = virtualinvoke $r8.<co.nstant.in.cbor.CborDecoder: java.util.List decode()>();

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        r3 = $r9;

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (co.nstant.in.cbor.model.DataItem) $r11;

        $r12 = new co.nstant.in.cbor.CborEncoder;

        specialinvoke $r12.<co.nstant.in.cbor.CborEncoder: void <init>(java.io.OutputStream)>(r3);

        r6 = $r12;

        virtualinvoke r6.<co.nstant.in.cbor.CborEncoder: void encode(co.nstant.in.cbor.model.DataItem)>(r5);

        goto label1;

     label2:
        $r10 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r10;
    }

    public static java.lang.String replaceLine(java.lang.String, int, java.lang.String)
    {
        java.lang.String r0, r1, $r5, $r6;
        java.lang.String[] r2;
        int i0, $i1, $i2, i3, i4;
        java.lang.StringBuilder r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        i0 = lengthof r2;

        if i3 >= 0 goto label1;

        $i2 = neg i3;

        i3 = i0 - $i2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r3 = $r4;

        i4 = 0;

     label2:
        if i4 >= i0 goto label7;

        if i4 != i3 goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        goto label4;

     label3:
        $r6 = r2[i4];

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label4:
        $i1 = i0 - 1;

        if i4 != $i1 goto label5;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("\n");

        if $z0 == 0 goto label6;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label6;

     label5:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label6:
        i4 = i4 + 1;

        goto label2;

     label7:
        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static byte[] buildSessionTranscript(java.security.KeyPair)
    {
        java.security.KeyPair r0;
        co.nstant.in.cbor.model.DataItem r1, $r18, r50, r51;
        java.io.ByteArrayOutputStream $r2, $r21, r44, r52;
        java.security.PublicKey $r3;
        java.security.interfaces.ECPublicKey $r4;
        java.math.BigInteger $r5, $r7;
        byte[] $r6, $r8, $r9, $r10, $r19, $r20, $r22, $r41, r46, r47, r49, r53;
        co.nstant.in.cbor.CborBuilder $r11, $r15, $r23, $r29, $r33, $r39;
        co.nstant.in.cbor.builder.ArrayBuilder $r12, $r13, $r24, $r25, $r27, $r34, $r35, $r36, $r37;
        co.nstant.in.cbor.builder.AbstractBuilder $r14, $r28, $r38;
        java.util.List $r16, $r30, $r40;
        java.lang.Object $r17, $r31;
        co.nstant.in.cbor.model.SimpleValue $r26;
        co.nstant.in.cbor.CborEncoder $r32;
        java.lang.Throwable $r42, $r43, r48, r54;
        java.security.spec.ECPoint r45;

        r0 := @parameter0: java.security.KeyPair;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r44 = $r2;

     label1:
        $r3 = virtualinvoke r0.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r4 = (java.security.interfaces.ECPublicKey) $r3;

        r45 = interfaceinvoke $r4.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r5 = virtualinvoke r45.<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>();

        $r6 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        r46 = staticinvoke <androidx.security.identity.Util: byte[] stripLeadingZeroes(byte[])>($r6);

        $r7 = virtualinvoke r45.<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>();

        $r8 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>();

        r47 = staticinvoke <androidx.security.identity.Util: byte[] stripLeadingZeroes(byte[])>($r8);

        $r9 = newarray (byte)[1];

        $r9[0] = 42;

        virtualinvoke r44.<java.io.ByteArrayOutputStream: void write(byte[])>($r9);

        virtualinvoke r44.<java.io.ByteArrayOutputStream: void write(byte[])>(r46);

        virtualinvoke r44.<java.io.ByteArrayOutputStream: void write(byte[])>(r47);

        $r10 = newarray (byte)[2];

        $r10[0] = 43;

        $r10[1] = 44;

        virtualinvoke r44.<java.io.ByteArrayOutputStream: void write(byte[])>($r10);

     label2:
        goto label4;

     label3:
        $r42 := @caughtexception;

        r48 = $r42;

        virtualinvoke r48.<java.io.IOException: void printStackTrace()>();

        return null;

     label4:
        r49 = virtualinvoke r44.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r11 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r11.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        $r13 = virtualinvoke $r12.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r49);

        $r14 = virtualinvoke $r13.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.AbstractBuilder end()>();

        $r15 = (co.nstant.in.cbor.CborBuilder) $r14;

        $r16 = virtualinvoke $r15.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        $r18 = (co.nstant.in.cbor.model.DataItem) $r17;

        $r19 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r18);

        r50 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])>($r19);

        $r20 = staticinvoke <androidx.security.identity.Util: byte[] cborEncodeString(java.lang.String)>("doesn\'t matter");

        r51 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem cborBuildTaggedByteString(byte[])>($r20);

        $r21 = new java.io.ByteArrayOutputStream;

        specialinvoke $r21.<java.io.ByteArrayOutputStream: void <init>()>();

        r52 = $r21;

     label5:
        $r22 = newarray (byte)[3];

        $r22[0] = 1;

        $r22[1] = 2;

        $r22[2] = 3;

        r53 = $r22;

        $r23 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r23.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        $r25 = virtualinvoke $r24.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r53);

        $r26 = <co.nstant.in.cbor.model.SimpleValue: co.nstant.in.cbor.model.SimpleValue NULL>;

        $r27 = virtualinvoke $r25.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>($r26);

        $r28 = virtualinvoke $r27.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.AbstractBuilder end()>();

        $r29 = (co.nstant.in.cbor.CborBuilder) $r28;

        $r30 = virtualinvoke $r29.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(0);

        r1 = (co.nstant.in.cbor.model.DataItem) $r31;

        $r32 = new co.nstant.in.cbor.CborEncoder;

        specialinvoke $r32.<co.nstant.in.cbor.CborEncoder: void <init>(java.io.OutputStream)>(r52);

        $r33 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r33.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        $r35 = virtualinvoke $r34.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>(r50);

        $r36 = virtualinvoke $r35.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>(r51);

        $r37 = virtualinvoke $r36.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>(r1);

        $r38 = virtualinvoke $r37.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.AbstractBuilder end()>();

        $r39 = (co.nstant.in.cbor.CborBuilder) $r38;

        $r40 = virtualinvoke $r39.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        virtualinvoke $r32.<co.nstant.in.cbor.CborEncoder: void encode(java.util.List)>($r40);

     label6:
        goto label8;

     label7:
        $r43 := @caughtexception;

        r54 = $r43;

        virtualinvoke r54.<co.nstant.in.cbor.CborException: void printStackTrace()>();

        return null;

     label8:
        $r41 = virtualinvoke r52.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r41;

        catch java.io.IOException from label1 to label2 with label3;
        catch co.nstant.in.cbor.CborException from label5 to label6 with label7;
    }

    static androidx.security.identity.IdentityCredentialStore getIdentityCredentialStore(android.content.Context)
    {
        android.content.Context r0;
        androidx.security.identity.IdentityCredentialStore $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <androidx.security.identity.IdentityCredentialStore: androidx.security.identity.IdentityCredentialStore getSoftwareInstance(android.content.Context)>(r0);

        return $r1;
    }

    static java.security.cert.X509Certificate signPublicKeyWithPrivateKey(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r24, $r32;
        byte[] r2, r5, r6, r7, r8, r10, $r17, $r18, $r19;
        java.security.KeyStore$Entry r3;
        java.security.Signature r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12;
        java.io.ByteArrayOutputStream r9, r42;
        java.security.cert.CertificateFactory r11;
        java.io.ByteArrayInputStream r12, r43;
        java.security.cert.X509Certificate r13, r36;
        java.security.cert.Certificate $r14, $r27;
        java.security.KeyStore$PrivateKeyEntry $r15;
        java.security.PrivateKey $r16;
        java.lang.StringBuilder $r22, $r23, $r30, $r31, r38, r40;
        byte $b9, $b11, $b13;
        java.lang.Throwable $r33, r37, r45, r46;
        java.security.KeyStore r35;
        java.lang.Exception r39, r41;
        java.lang.IllegalStateException r44;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        r35 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r35.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $r14 = virtualinvoke r35.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>(r0);

        r36 = (java.security.cert.X509Certificate) $r14;

        r2 = virtualinvoke r36.<java.security.cert.X509Certificate: byte[] getTBSCertificate()>();

        r3 = virtualinvoke r35.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>(r1, null);

        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA256withECDSA");

        $r15 = (java.security.KeyStore$PrivateKeyEntry) r3;

        $r16 = virtualinvoke $r15.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();

        virtualinvoke r4.<java.security.Signature: void initSign(java.security.PrivateKey)>($r16);

        virtualinvoke r4.<java.security.Signature: void update(byte[])>(r2);

        r5 = virtualinvoke r4.<java.security.Signature: byte[] sign()>();

        $r17 = newarray (byte)[4];

        $r17[0] = 48;

        $r17[1] = -126;

        $r17[2] = 0;

        $r17[3] = 0;

        r6 = $r17;

        $r18 = newarray (byte)[12];

        $r18[0] = 48;

        $r18[1] = 10;

        $r18[2] = 6;

        $r18[3] = 8;

        $r18[4] = 42;

        $r18[5] = -122;

        $r18[6] = 72;

        $r18[7] = -50;

        $r18[8] = 61;

        $r18[9] = 4;

        $r18[10] = 3;

        $r18[11] = 2;

        r7 = $r18;

        $r19 = newarray (byte)[3];

        $r19[0] = 3;

        $r19[1] = 0;

        $r19[2] = 0;

        r8 = $r19;

        $i3 = lengthof r2;

        $i2 = lengthof r7;

        $i5 = $i3 + $i2;

        $i4 = lengthof r8;

        $i7 = $i5 + $i4;

        $i6 = lengthof r5;

        i0 = $i7 + $i6;

        if i0 < 128 goto label2;

        if i0 <= 65535 goto label3;

     label2:
        r39 = new java.lang.Exception;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected sequenceLength ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r39.<java.lang.Exception: void <init>(java.lang.String)>($r24);

        r45 = (java.lang.Throwable) r39;

        throw r45;

     label3:
        $i8 = i0 >> 8;

        $b9 = (byte) $i8;

        r6[2] = $b9;

        $i10 = i0 & 255;

        $b11 = (byte) $i10;

        r6[3] = $b11;

        $i12 = lengthof r5;

        i1 = $i12 + 1;

        if i1 < 128 goto label4;

        r41 = new java.lang.Exception;

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected signatureValueLength ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r41.<java.lang.Exception: void <init>(java.lang.String)>($r32);

        r46 = (java.lang.Throwable) r41;

        throw r46;

     label4:
        $b13 = (byte) i1;

        r8[1] = $b13;

        r42 = new java.io.ByteArrayOutputStream;

        specialinvoke r42.<java.io.ByteArrayOutputStream: void <init>()>();

        r9 = r42;

        virtualinvoke r9.<java.io.ByteArrayOutputStream: void write(byte[])>(r6);

        virtualinvoke r9.<java.io.ByteArrayOutputStream: void write(byte[])>(r2);

        virtualinvoke r9.<java.io.ByteArrayOutputStream: void write(byte[])>(r7);

        virtualinvoke r9.<java.io.ByteArrayOutputStream: void write(byte[])>(r8);

        virtualinvoke r9.<java.io.ByteArrayOutputStream: void write(byte[])>(r5);

        r10 = virtualinvoke r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r11 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        r43 = new java.io.ByteArrayInputStream;

        specialinvoke r43.<java.io.ByteArrayInputStream: void <init>(byte[])>(r10);

        r12 = r43;

        $r27 = virtualinvoke r11.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r12);

        r13 = (java.security.cert.X509Certificate) $r27;

     label5:
        return r13;

     label6:
        $r33 := @caughtexception;

        r37 = $r33;

        r44 = new java.lang.IllegalStateException;

        specialinvoke r44.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error signing public key with private key", r37);

        throw r44;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    static byte[] createItemsRequest(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1, r6, r10;
        co.nstant.in.cbor.CborBuilder r2, $r11;
        co.nstant.in.cbor.builder.MapBuilder r3, r4, r8;
        java.util.Iterator r5, r9;
        java.util.Collection r7;
        java.util.Set $r12;
        java.util.List $r13;
        java.lang.Object $r14, $r17, $r18, $r19;
        co.nstant.in.cbor.model.DataItem $r15;
        byte[] $r16;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r11 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r11.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r2 = $r11;

        r3 = virtualinvoke r2.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        if r1 == null goto label1;

        virtualinvoke r3.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,java.lang.String)>("docType", r1);

     label1:
        r4 = virtualinvoke r3.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder putMap(java.lang.String)>("nameSpaces");

        $r12 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        r5 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r17 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r17;

        $r18 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (java.util.Collection) $r18;

        r8 = virtualinvoke r4.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder putMap(java.lang.String)>(r6);

        r9 = interfaceinvoke r7.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r19 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r19;

        virtualinvoke r8.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,boolean)>(r10, 0);

        goto label3;

     label4:
        goto label2;

     label5:
        $r13 = virtualinvoke r2.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (co.nstant.in.cbor.model.DataItem) $r14;

        $r16 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r15);

        return $r16;
    }

    static java.security.KeyPair createEphemeralKeyPair()
    {
        java.security.spec.ECGenParameterSpec r0, $r2;
        java.security.KeyPair r1;
        java.lang.Throwable $r3, r6;
        java.lang.IllegalStateException $r4;
        java.security.KeyPairGenerator r5;

     label1:
        r5 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("EC");

        $r2 = new java.security.spec.ECGenParameterSpec;

        specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("prime256v1");

        r0 = $r2;

        virtualinvoke r5.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r0);

        r1 = virtualinvoke r5.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

     label2:
        return r1;

     label3:
        $r3 := @caughtexception;

        r6 = $r3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error generating ephemeral key-pair", r6);

        throw $r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    static byte[] getPopSha256FromAuthKeyCert(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r0;
        byte[] r1, r2, r8;
        java.io.ByteArrayInputStream r3, $r12;
        java.util.List r4, r6;
        co.nstant.in.cbor.model.Array r5;
        java.lang.String r7, $r26, $r32, $r38, $r44;
        org.bouncycastle.asn1.ASN1InputStream $r9, r49;
        org.bouncycastle.asn1.ASN1Primitive $r10;
        org.bouncycastle.asn1.ASN1OctetString $r11;
        co.nstant.in.cbor.CborDecoder $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r14, $r15, $r16, $r17, $r19, $r20;
        boolean $z0, $z1, $z2, $z3;
        co.nstant.in.cbor.model.UnicodeString $r18;
        co.nstant.in.cbor.model.ByteString $r21;
        java.lang.IllegalArgumentException $r22, $r27, $r28, $r33, $r34, $r39, $r40, $r46, $r48;
        java.lang.StringBuilder $r23, $r24, $r25, $r29, $r30, $r31, $r35, $r36, $r37, $r41, $r42, $r43;
        java.lang.Throwable $r45, $r47, r50, r51;

        r0 := @parameter0: java.security.cert.X509Certificate;

        r1 = virtualinvoke r0.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>("1.3.6.1.4.1.11129.2.1.26");

        if r1 != null goto label01;

        return null;

     label01:
        $r9 = new org.bouncycastle.asn1.ASN1InputStream;

        specialinvoke $r9.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>(r1);

        r49 = $r9;

        $r10 = virtualinvoke r49.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive readObject()>();

        $r11 = (org.bouncycastle.asn1.ASN1OctetString) $r10;

        r2 = virtualinvoke $r11.<org.bouncycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r12 = new java.io.ByteArrayInputStream;

        specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r3 = $r12;

        $r13 = new co.nstant.in.cbor.CborDecoder;

        specialinvoke $r13.<co.nstant.in.cbor.CborDecoder: void <init>(java.io.InputStream)>(r3);

        r4 = virtualinvoke $r13.<co.nstant.in.cbor.CborDecoder: java.util.List decode()>();

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i0 == 1 goto label02;

        $r40 = new java.lang.IllegalArgumentException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected 1 item, found ");

        $i5 = interfaceinvoke r4.<java.util.List: int size()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r44);

        throw $r40;

     label02:
        $r14 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $z0 = $r14 instanceof co.nstant.in.cbor.model.Array;

        if $z0 != 0 goto label03;

        $r39 = new java.lang.IllegalArgumentException;

        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Item is not a map");

        throw $r39;

     label03:
        $r15 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (co.nstant.in.cbor.model.Array) $r15;

        r6 = virtualinvoke r5.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i1 >= 2 goto label04;

        $r34 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected at least 2 array items, found ");

        $i4 = interfaceinvoke r6.<java.util.List: int size()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r34;

     label04:
        $r16 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $z1 = $r16 instanceof co.nstant.in.cbor.model.UnicodeString;

        if $z1 != 0 goto label05;

        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("First array item is not a string");

        throw $r33;

     label05:
        $r17 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r18 = (co.nstant.in.cbor.model.UnicodeString) $r17;

        r7 = virtualinvoke $r18.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        $z2 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("ProofOfBinding");

        if $z2 != 0 goto label06;

        $r28 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ProofOfBinding, got ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label06:
        $r19 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(1);

        $z3 = $r19 instanceof co.nstant.in.cbor.model.ByteString;

        if $z3 != 0 goto label07;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Second array item is not a bytestring");

        throw $r27;

     label07:
        $r20 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(1);

        $r21 = (co.nstant.in.cbor.model.ByteString) $r20;

        r8 = virtualinvoke $r21.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        $i2 = lengthof r8;

        if $i2 == 32 goto label08;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected bstr to be 32 bytes, it is ");

        $i3 = lengthof r8;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label08:
        return r8;

     label09:
        $r47 := @caughtexception;

        r50 = $r47;

        $r48 = new java.lang.IllegalArgumentException;

        specialinvoke $r48.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error decoding extension data", r50);

        throw $r48;

     label10:
        $r45 := @caughtexception;

        r51 = $r45;

        $r46 = new java.lang.IllegalArgumentException;

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error decoding data", r51);

        throw $r46;

        catch java.io.IOException from label01 to label08 with label09;
        catch co.nstant.in.cbor.CborException from label01 to label08 with label10;
    }

androidx.security.identity.Util$1
<androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>
<androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$SimpleValueType>
    static void <clinit>()
    {
        co.nstant.in.cbor.model.SimpleValueType[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        int[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33;
        co.nstant.in.cbor.model.SimpleValueType $r2, $r4, $r6, $r8, $r10, $r12;
        co.nstant.in.cbor.model.MajorType[] $r14;
        co.nstant.in.cbor.model.MajorType $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32;
        java.lang.Throwable $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63;

        $r0 = staticinvoke <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$SimpleValueType> = $r1;

     label01:
        $r3 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$SimpleValueType>;

        $r2 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType FALSE>;

        $i1 = virtualinvoke $r2.<co.nstant.in.cbor.model.SimpleValueType: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r46 := @caughtexception;

        r49 = $r46;

     label04:
        $r5 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$SimpleValueType>;

        $r4 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType TRUE>;

        $i2 = virtualinvoke $r4.<co.nstant.in.cbor.model.SimpleValueType: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r39 := @caughtexception;

        r50 = $r39;

     label07:
        $r7 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$SimpleValueType>;

        $r6 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType NULL>;

        $i3 = virtualinvoke $r6.<co.nstant.in.cbor.model.SimpleValueType: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r48 := @caughtexception;

        r51 = $r48;

     label10:
        $r9 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$SimpleValueType>;

        $r8 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType UNDEFINED>;

        $i4 = virtualinvoke $r8.<co.nstant.in.cbor.model.SimpleValueType: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r41 := @caughtexception;

        r52 = $r41;

     label13:
        $r11 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$SimpleValueType>;

        $r10 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType RESERVED>;

        $i5 = virtualinvoke $r10.<co.nstant.in.cbor.model.SimpleValueType: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r44 := @caughtexception;

        r53 = $r44;

     label16:
        $r13 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$SimpleValueType>;

        $r12 = <co.nstant.in.cbor.model.SimpleValueType: co.nstant.in.cbor.model.SimpleValueType UNALLOCATED>;

        $i6 = virtualinvoke $r12.<co.nstant.in.cbor.model.SimpleValueType: int ordinal()>();

        $r13[$i6] = 6;

     label17:
        goto label19;

     label18:
        $r45 := @caughtexception;

        r54 = $r45;

     label19:
        $r14 = staticinvoke <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType[] values()>();

        $i7 = lengthof $r14;

        $r15 = newarray (int)[$i7];

        <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType> = $r15;

     label20:
        $r17 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r16 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType ARRAY>;

        $i8 = virtualinvoke $r16.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $r17[$i8] = 1;

     label21:
        goto label23;

     label22:
        $r43 := @caughtexception;

        r55 = $r43;

     label23:
        $r19 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r18 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType MAP>;

        $i9 = virtualinvoke $r18.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $r19[$i9] = 2;

     label24:
        goto label26;

     label25:
        $r38 := @caughtexception;

        r56 = $r38;

     label26:
        $r21 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r20 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType INVALID>;

        $i10 = virtualinvoke $r20.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $r21[$i10] = 3;

     label27:
        goto label29;

     label28:
        $r40 := @caughtexception;

        r57 = $r40;

     label29:
        $r23 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r22 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType UNSIGNED_INTEGER>;

        $i11 = virtualinvoke $r22.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $r23[$i11] = 4;

     label30:
        goto label32;

     label31:
        $r42 := @caughtexception;

        r58 = $r42;

     label32:
        $r25 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r24 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType NEGATIVE_INTEGER>;

        $i12 = virtualinvoke $r24.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $r25[$i12] = 5;

     label33:
        goto label35;

     label34:
        $r36 := @caughtexception;

        r59 = $r36;

     label35:
        $r27 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r26 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType BYTE_STRING>;

        $i13 = virtualinvoke $r26.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $r27[$i13] = 6;

     label36:
        goto label38;

     label37:
        $r47 := @caughtexception;

        r60 = $r47;

     label38:
        $r29 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r28 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType UNICODE_STRING>;

        $i14 = virtualinvoke $r28.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $r29[$i14] = 7;

     label39:
        goto label41;

     label40:
        $r37 := @caughtexception;

        r61 = $r37;

     label41:
        $r31 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r30 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType TAG>;

        $i15 = virtualinvoke $r30.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $r31[$i15] = 8;

     label42:
        goto label44;

     label43:
        $r34 := @caughtexception;

        r62 = $r34;

     label44:
        $r33 = <androidx.security.identity.Util$1: int[] $SwitchMap$co$nstant$in$cbor$model$MajorType>;

        $r32 = <co.nstant.in.cbor.model.MajorType: co.nstant.in.cbor.model.MajorType SPECIAL>;

        $i16 = virtualinvoke $r32.<co.nstant.in.cbor.model.MajorType: int ordinal()>();

        $r33[$i16] = 9;

     label45:
        goto label47;

     label46:
        $r35 := @caughtexception;

        r63 = $r35;

     label47:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label16 to label17 with label18;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
        catch java.lang.NoSuchFieldError from label26 to label27 with label28;
        catch java.lang.NoSuchFieldError from label29 to label30 with label31;
        catch java.lang.NoSuchFieldError from label32 to label33 with label34;
        catch java.lang.NoSuchFieldError from label35 to label36 with label37;
        catch java.lang.NoSuchFieldError from label38 to label39 with label40;
        catch java.lang.NoSuchFieldError from label41 to label42 with label43;
        catch java.lang.NoSuchFieldError from label44 to label45 with label46;
    }

