androidx.media3.test.utils.FakeChunkSource
<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>
<androidx.media3.test.utils.FakeChunkSource: androidx.media3.datasource.DataSource dataSource>
<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>
    public void <init>(androidx.media3.exoplayer.trackselection.ExoTrackSelection, androidx.media3.datasource.DataSource, androidx.media3.test.utils.FakeAdaptiveDataSet)
    {
        androidx.media3.test.utils.FakeChunkSource r0;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r1;
        androidx.media3.datasource.DataSource r2;
        androidx.media3.test.utils.FakeAdaptiveDataSet r3;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource;

        r1 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection;

        r2 := @parameter1: androidx.media3.datasource.DataSource;

        r3 := @parameter2: androidx.media3.test.utils.FakeAdaptiveDataSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection> = r1;

        r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.datasource.DataSource dataSource> = r2;

        r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet> = r3;

        return;
    }

    public long getAdjustedSeekPositionUs(long, androidx.media3.exoplayer.SeekParameters)
    {
        androidx.media3.test.utils.FakeChunkSource r0;
        long l0, l2, l3, $l8, $l9;
        androidx.media3.exoplayer.SeekParameters r1;
        int i1, $i5, $i6, $i7;
        androidx.media3.test.utils.FakeAdaptiveDataSet $r2, $r3, $r4, $r5;
        byte $b4;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.media3.exoplayer.SeekParameters;

        $r2 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        i1 = virtualinvoke $r2.<androidx.media3.test.utils.FakeAdaptiveDataSet: int getChunkIndexByPosition(long)>(l0);

        $r3 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        l2 = virtualinvoke $r3.<androidx.media3.test.utils.FakeAdaptiveDataSet: long getStartTime(int)>(i1);

        $b4 = l2 cmp l0;

        if $b4 >= 0 goto label1;

        $r4 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        $i5 = virtualinvoke $r4.<androidx.media3.test.utils.FakeAdaptiveDataSet: int getChunkCount()>();

        $i6 = $i5 - 1;

        if i1 >= $i6 goto label1;

        $r5 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        $i7 = i1 + 1;

        $l8 = virtualinvoke $r5.<androidx.media3.test.utils.FakeAdaptiveDataSet: long getStartTime(int)>($i7);

        goto label2;

     label1:
        $l8 = l2;

     label2:
        l3 = $l8;

        $l9 = virtualinvoke r1.<androidx.media3.exoplayer.SeekParameters: long resolveSeekPositionUs(long,long,long)>(l0, l2, l3);

        return $l9;
    }

    public void maybeThrowError()
    {
        androidx.media3.test.utils.FakeChunkSource r0;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource;

        return;
    }

    public int getPreferredQueueSize(long, java.util.List)
    {
        androidx.media3.test.utils.FakeChunkSource r0;
        long l0;
        java.util.List r1;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection $r2;
        int $i1;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.List;

        $r2 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        $i1 = interfaceinvoke $r2.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int evaluateQueueSize(long,java.util.List)>(l0, r1);

        return $i1;
    }

    public boolean shouldCancelLoad(long, androidx.media3.exoplayer.source.chunk.Chunk, java.util.List)
    {
        androidx.media3.test.utils.FakeChunkSource r0;
        long l0;
        androidx.media3.exoplayer.source.chunk.Chunk r1;
        java.util.List r2;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection $r3;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.media3.exoplayer.source.chunk.Chunk;

        r2 := @parameter2: java.util.List;

        $r3 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        $z0 = interfaceinvoke $r3.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: boolean shouldCancelChunkLoad(long,androidx.media3.exoplayer.source.chunk.Chunk,java.util.List)>(l0, r1, r2);

        return $z0;
    }

    public void getNextChunk(long, long, java.util.List, androidx.media3.exoplayer.source.chunk.ChunkHolder)
    {
        androidx.media3.test.utils.FakeChunkSource r0;
        long l0, l1, l2, l4, $l9, $l12, $l15, $l16, $l18, l23;
        java.util.List r1, $r22;
        androidx.media3.exoplayer.source.chunk.ChunkHolder r2;
        int i3, i5, i6, $i7, $i8, $i10, $i11, $i13, $i14, $i17, $i19, i20, $i21, i22;
        java.lang.Object[] r3;
        java.lang.String r4, $r26;
        androidx.media3.test.utils.FakeDataSet$FakeData$Segment r5;
        androidx.media3.datasource.DataSpec r6, r38;
        boolean $z0;
        java.lang.Object $r7, $r20, $r23, $r31;
        androidx.media3.exoplayer.source.chunk.MediaChunk $r8;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection $r9, $r10, $r12, $r15, $r16, $r28, $r30, $r32;
        androidx.media3.test.utils.FakeAdaptiveDataSet $r11, $r13, $r14, $r17, $r18, $r34, $r35;
        androidx.media3.test.utils.FakeDataSet$FakeData $r19, $r21;
        android.net.Uri $r25;
        androidx.media3.datasource.DataSource $r29;
        androidx.media3.common.Format r36;
        androidx.media3.test.utils.FakeAdaptiveDataSet$Iterator r37;
        androidx.media3.exoplayer.source.chunk.SingleSampleMediaChunk r39;
        androidx.media3.exoplayer.source.chunk.MediaChunkIterator[] r40;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: androidx.media3.exoplayer.source.chunk.ChunkHolder;

        l2 = l1 - l0;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r35 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        $i19 = virtualinvoke $r35.<androidx.media3.test.utils.FakeAdaptiveDataSet: int getChunkIndexByPosition(long)>(l0);

        goto label2;

     label1:
        $i7 = interfaceinvoke r1.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i8);

        $r8 = (androidx.media3.exoplayer.source.chunk.MediaChunk) $r7;

        $l9 = virtualinvoke $r8.<androidx.media3.exoplayer.source.chunk.MediaChunk: long getNextChunkIndex()>();

        $i19 = (int) $l9;

     label2:
        i3 = $i19;

        $r9 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        $i10 = interfaceinvoke $r9.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int length()>();

        r3 = newarray (androidx.media3.exoplayer.source.chunk.MediaChunkIterator)[$i10];

        i20 = 0;

     label3:
        $i21 = lengthof r3;

        if i20 >= $i21 goto label4;

        $r32 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        i22 = interfaceinvoke $r32.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getIndexInTrackGroup(int)>(i20);

        r37 = new androidx.media3.test.utils.FakeAdaptiveDataSet$Iterator;

        $r34 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        specialinvoke r37.<androidx.media3.test.utils.FakeAdaptiveDataSet$Iterator: void <init>(androidx.media3.test.utils.FakeAdaptiveDataSet,int,int)>($r34, i22, i3);

        r3[i20] = r37;

        i20 = i20 + 1;

        goto label3;

     label4:
        $r10 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        r40 = (androidx.media3.exoplayer.source.chunk.MediaChunkIterator[]) r3;

        interfaceinvoke $r10.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: void updateSelectedTrack(long,long,long,java.util.List,androidx.media3.exoplayer.source.chunk.MediaChunkIterator[])>(l0, l2, -9223372036854775807L, r1, r40);

        $r11 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        $i11 = virtualinvoke $r11.<androidx.media3.test.utils.FakeAdaptiveDataSet: int getChunkCount()>();

        if i3 < $i11 goto label5;

        r2.<androidx.media3.exoplayer.source.chunk.ChunkHolder: boolean endOfStream> = 1;

        goto label6;

     label5:
        $r12 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        r36 = interfaceinvoke $r12.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.Format getSelectedFormat()>();

        $r13 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        l23 = virtualinvoke $r13.<androidx.media3.test.utils.FakeAdaptiveDataSet: long getStartTime(int)>(i3);

        $r14 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        $l12 = virtualinvoke $r14.<androidx.media3.test.utils.FakeAdaptiveDataSet: long getChunkDuration(int)>(i3);

        l4 = l23 + $l12;

        $r16 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        $r15 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        $i13 = interfaceinvoke $r15.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getSelectedIndex()>();

        i5 = interfaceinvoke $r16.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getIndexInTrackGroup(int)>($i13);

        $r17 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        r4 = virtualinvoke $r17.<androidx.media3.test.utils.FakeAdaptiveDataSet: java.lang.String getUri(int)>(i5);

        $r18 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.test.utils.FakeAdaptiveDataSet dataSet>;

        $r19 = virtualinvoke $r18.<androidx.media3.test.utils.FakeAdaptiveDataSet: androidx.media3.test.utils.FakeDataSet$FakeData getData(java.lang.String)>(r4);

        $r20 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r19);

        $r21 = (androidx.media3.test.utils.FakeDataSet$FakeData) $r20;

        $r22 = virtualinvoke $r21.<androidx.media3.test.utils.FakeDataSet$FakeData: java.util.List getSegments()>();

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i3);

        r5 = (androidx.media3.test.utils.FakeDataSet$FakeData$Segment) $r23;

        r38 = new androidx.media3.datasource.DataSpec;

        $r25 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r4);

        $l16 = r5.<androidx.media3.test.utils.FakeDataSet$FakeData$Segment: long byteOffset>;

        $i14 = r5.<androidx.media3.test.utils.FakeDataSet$FakeData$Segment: int length>;

        $l15 = (long) $i14;

        specialinvoke r38.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri,long,long)>($r25, $l16, $l15);

        r6 = r38;

        $r26 = r36.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        i6 = staticinvoke <androidx.media3.common.MimeTypes: int getTrackType(java.lang.String)>($r26);

        r39 = new androidx.media3.exoplayer.source.chunk.SingleSampleMediaChunk;

        $r29 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.datasource.DataSource dataSource>;

        $r28 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        $i17 = interfaceinvoke $r28.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getSelectionReason()>();

        $r30 = r0.<androidx.media3.test.utils.FakeChunkSource: androidx.media3.exoplayer.trackselection.ExoTrackSelection trackSelection>;

        $r31 = interfaceinvoke $r30.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: java.lang.Object getSelectionData()>();

        $l18 = (long) i3;

        specialinvoke r39.<androidx.media3.exoplayer.source.chunk.SingleSampleMediaChunk: void <init>(androidx.media3.datasource.DataSource,androidx.media3.datasource.DataSpec,androidx.media3.common.Format,int,java.lang.Object,long,long,long,int,androidx.media3.common.Format)>($r29, r6, r36, $i17, $r31, l23, l4, $l18, i6, r36);

        r2.<androidx.media3.exoplayer.source.chunk.ChunkHolder: androidx.media3.exoplayer.source.chunk.Chunk chunk> = r39;

     label6:
        return;
    }

    public void onChunkLoadCompleted(androidx.media3.exoplayer.source.chunk.Chunk)
    {
        androidx.media3.test.utils.FakeChunkSource r0;
        androidx.media3.exoplayer.source.chunk.Chunk r1;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.Chunk;

        return;
    }

    public boolean onChunkLoadError(androidx.media3.exoplayer.source.chunk.Chunk, boolean, androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy$LoadErrorInfo, androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy)
    {
        androidx.media3.test.utils.FakeChunkSource r0;
        androidx.media3.exoplayer.source.chunk.Chunk r1;
        boolean z0;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy$LoadErrorInfo r2;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy r3;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.Chunk;

        z0 := @parameter1: boolean;

        r2 := @parameter2: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy$LoadErrorInfo;

        r3 := @parameter3: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy;

        return 0;
    }

    public void release()
    {
        androidx.media3.test.utils.FakeChunkSource r0;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource;

        return;
    }

androidx.media3.test.utils.FakeChunkSource$Factory
<androidx.media3.test.utils.FakeChunkSource$Factory: androidx.media3.test.utils.FakeAdaptiveDataSet$Factory dataSetFactory>
<androidx.media3.test.utils.FakeChunkSource$Factory: androidx.media3.test.utils.FakeDataSource$Factory dataSourceFactory>
    public void <init>(androidx.media3.test.utils.FakeAdaptiveDataSet$Factory, androidx.media3.test.utils.FakeDataSource$Factory)
    {
        androidx.media3.test.utils.FakeChunkSource$Factory r0;
        androidx.media3.test.utils.FakeAdaptiveDataSet$Factory r1;
        androidx.media3.test.utils.FakeDataSource$Factory r2;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource$Factory;

        r1 := @parameter0: androidx.media3.test.utils.FakeAdaptiveDataSet$Factory;

        r2 := @parameter1: androidx.media3.test.utils.FakeDataSource$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.FakeChunkSource$Factory: androidx.media3.test.utils.FakeAdaptiveDataSet$Factory dataSetFactory> = r1;

        r0.<androidx.media3.test.utils.FakeChunkSource$Factory: androidx.media3.test.utils.FakeDataSource$Factory dataSourceFactory> = r2;

        return;
    }

    public androidx.media3.test.utils.FakeChunkSource createChunkSource(androidx.media3.exoplayer.trackselection.ExoTrackSelection, long, androidx.media3.datasource.TransferListener)
    {
        androidx.media3.test.utils.FakeChunkSource$Factory r0;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r1;
        long l0;
        androidx.media3.datasource.TransferListener r2;
        androidx.media3.test.utils.FakeAdaptiveDataSet r3;
        androidx.media3.test.utils.FakeDataSource r4;
        androidx.media3.test.utils.FakeAdaptiveDataSet$Factory $r5;
        androidx.media3.common.TrackGroup $r6;
        androidx.media3.test.utils.FakeDataSource$Factory $r7, $r9;
        androidx.media3.test.utils.FakeChunkSource r11;
        androidx.media3.datasource.DataSource r12;

        r0 := @this: androidx.media3.test.utils.FakeChunkSource$Factory;

        r1 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.media3.datasource.TransferListener;

        $r5 = r0.<androidx.media3.test.utils.FakeChunkSource$Factory: androidx.media3.test.utils.FakeAdaptiveDataSet$Factory dataSetFactory>;

        $r6 = interfaceinvoke r1.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.TrackGroup getTrackGroup()>();

        r3 = virtualinvoke $r5.<androidx.media3.test.utils.FakeAdaptiveDataSet$Factory: androidx.media3.test.utils.FakeAdaptiveDataSet createDataSet(androidx.media3.common.TrackGroup,long)>($r6, l0);

        $r7 = r0.<androidx.media3.test.utils.FakeChunkSource$Factory: androidx.media3.test.utils.FakeDataSource$Factory dataSourceFactory>;

        virtualinvoke $r7.<androidx.media3.test.utils.FakeDataSource$Factory: androidx.media3.test.utils.FakeDataSource$Factory setFakeDataSet(androidx.media3.test.utils.FakeDataSet)>(r3);

        $r9 = r0.<androidx.media3.test.utils.FakeChunkSource$Factory: androidx.media3.test.utils.FakeDataSource$Factory dataSourceFactory>;

        r4 = virtualinvoke $r9.<androidx.media3.test.utils.FakeDataSource$Factory: androidx.media3.test.utils.FakeDataSource createDataSource()>();

        if r2 == null goto label1;

        virtualinvoke r4.<androidx.media3.test.utils.FakeDataSource: void addTransferListener(androidx.media3.datasource.TransferListener)>(r2);

     label1:
        r11 = new androidx.media3.test.utils.FakeChunkSource;

        r12 = (androidx.media3.datasource.DataSource) r4;

        specialinvoke r11.<androidx.media3.test.utils.FakeChunkSource: void <init>(androidx.media3.exoplayer.trackselection.ExoTrackSelection,androidx.media3.datasource.DataSource,androidx.media3.test.utils.FakeAdaptiveDataSet)>(r1, r12, r3);

        return r11;
    }

