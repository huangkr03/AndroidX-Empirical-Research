com.google.common.base.Throwables
<com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceDepthMethod>
<com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceElementMethod>
<com.google.common.base.Throwables: java.lang.Object jla>
    static void <clinit>()
    {
        java.lang.Object $r0;
        java.lang.reflect.Method $r1, $r2;

        $r0 = staticinvoke <com.google.common.base.Throwables: java.lang.Object getJLA()>();

        <com.google.common.base.Throwables: java.lang.Object jla> = $r0;

        $r1 = null;

        if $r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = staticinvoke <com.google.common.base.Throwables: java.lang.reflect.Method getGetMethod()>();

     label2:
        <com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceElementMethod> = $r2;

        if $r0 != null goto label3;

        goto label4;

     label3:
        $r1 = staticinvoke <com.google.common.base.Throwables: java.lang.reflect.Method getSizeMethod(java.lang.Object)>($r0);

     label4:
        <com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceDepthMethod> = $r1;

        return;
    }

    private static java.lang.reflect.Method getGetMethod()
    {
        java.lang.Class $r0;
        java.lang.reflect.Method $r1;
        java.lang.Class[] $r2;

        $r2 = newarray (java.lang.Class)[2];

        $r2[0] = class "Ljava/lang/Throwable;";

        $r0 = <java.lang.Integer: java.lang.Class TYPE>;

        $r2[1] = $r0;

        $r1 = staticinvoke <com.google.common.base.Throwables: java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[])>("getStackTraceElement", $r2);

        return $r1;
    }

    private static java.lang.Object getJLA()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.misc.SharedSecrets", 0, null);

        $r0 = newarray (java.lang.Class)[0];

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getJavaLangAccess", $r0);

     label2:
        $r3 = newarray (java.lang.Object)[0];

     label3:
        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        return null;

     label6:
        $r6 := @caughtexception;

        throw $r6;

        catch java.lang.ThreadDeath from label1 to label2 with label6;
        catch java.lang.ThreadDeath from label3 to label4 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private static transient java.lang.reflect.Method getJlaMethod(java.lang.String, java.lang.Class[]) throws java.lang.ThreadDeath
    {
        java.lang.Class[] $r0;
        java.lang.String $r1;
        java.lang.Class $r2;
        java.lang.reflect.Method $r3;
        java.lang.Throwable $r4, $r5;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.misc.JavaLangAccess", 0, null);

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r1, $r0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

     label4:
        $r5 := @caughtexception;

        throw $r5;

        catch java.lang.ThreadDeath from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.reflect.Method getSizeMethod(java.lang.Object)
    {
        java.lang.reflect.Method $r0;
        java.lang.Object $r1;
        java.lang.Class[] $r2;
        java.lang.Object[] $r3;
        java.lang.Throwable $r4, $r5, $r6;

        $r1 := @parameter0: java.lang.Object;

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Ljava/lang/Throwable;";

        $r0 = staticinvoke <com.google.common.base.Throwables: java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[])>("getStackTraceDepth", $r2);

        if $r0 != null goto label1;

        return null;

     label1:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = new java.lang.Throwable;

     label2:
        specialinvoke $r4.<java.lang.Throwable: void <init>()>();

     label3:
        $r3[0] = $r4;

     label4:
        virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r3);

     label5:
        return $r0;

     label6:
        $r4 := @caughtexception;

        return null;

     label7:
        $r5 := @caughtexception;

        return null;

     label8:
        $r6 := @caughtexception;

        return null;

        catch java.lang.UnsupportedOperationException from label2 to label3 with label8;
        catch java.lang.UnsupportedOperationException from label4 to label5 with label8;
        catch java.lang.IllegalAccessException from label2 to label3 with label7;
        catch java.lang.IllegalAccessException from label4 to label5 with label7;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label6;
        catch java.lang.reflect.InvocationTargetException from label4 to label5 with label6;
    }

    public static java.lang.String getStackTraceAsString(java.lang.Throwable)
    {
        java.io.StringWriter $r0;
        java.io.PrintWriter $r1;
        java.lang.String $r2;
        java.lang.Throwable $r3;

        $r3 := @parameter0: java.lang.Throwable;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r1);

        $r2 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r2;
    }

    public static void throwIfUnchecked(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        boolean $z0;
        java.lang.Error $r1;
        java.lang.RuntimeException $r2;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r0 instanceof java.lang.RuntimeException;

        if $z0 != 0 goto label2;

        $z0 = $r0 instanceof java.lang.Error;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = (java.lang.Error) $r0;

        $r0 = (java.lang.Throwable) $r1;

        throw $r0;

     label2:
        $r2 = (java.lang.RuntimeException) $r0;

        $r0 = (java.lang.Throwable) $r2;

        throw $r0;
    }

