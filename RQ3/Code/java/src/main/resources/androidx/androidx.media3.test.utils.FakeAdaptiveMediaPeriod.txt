androidx.media3.test.utils.FakeAdaptiveMediaPeriod
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray trackGroupArray>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: long fakePreparationLoadTaskId>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.test.utils.FakeChunkSource$Factory chunkSourceFactory>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.upstream.Allocator allocator>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: long durationUs>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.datasource.TransferListener transferListener>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: java.util.List sampleStreams>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.MediaPeriod$Callback callback>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: boolean prepared>
<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader sequenceableLoader>
    public void <init>(androidx.media3.exoplayer.source.TrackGroupArray, androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher, androidx.media3.exoplayer.upstream.Allocator, androidx.media3.test.utils.FakeChunkSource$Factory, long, androidx.media3.datasource.TransferListener)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        androidx.media3.exoplayer.source.TrackGroupArray r1;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher r2;
        androidx.media3.exoplayer.upstream.Allocator r3;
        androidx.media3.test.utils.FakeChunkSource$Factory r4;
        long l0, $l1;
        androidx.media3.datasource.TransferListener r5;
        java.util.ArrayList $r6;
        androidx.media3.exoplayer.source.CompositeSequenceableLoader $r7;
        androidx.media3.exoplayer.source.SequenceableLoader[] $r8;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.source.TrackGroupArray;

        r2 := @parameter1: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher;

        r3 := @parameter2: androidx.media3.exoplayer.upstream.Allocator;

        r4 := @parameter3: androidx.media3.test.utils.FakeChunkSource$Factory;

        l0 := @parameter4: long;

        r5 := @parameter5: androidx.media3.datasource.TransferListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray trackGroupArray> = r1;

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher> = r2;

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.test.utils.FakeChunkSource$Factory chunkSourceFactory> = r4;

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.upstream.Allocator allocator> = r3;

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: long durationUs> = l0;

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.datasource.TransferListener transferListener> = r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: java.util.List sampleStreams> = $r6;

        $r7 = new androidx.media3.exoplayer.source.CompositeSequenceableLoader;

        $r8 = newarray (androidx.media3.exoplayer.source.SequenceableLoader)[0];

        specialinvoke $r7.<androidx.media3.exoplayer.source.CompositeSequenceableLoader: void <init>(androidx.media3.exoplayer.source.SequenceableLoader[])>($r8);

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader sequenceableLoader> = $r7;

        $l1 = staticinvoke <androidx.media3.exoplayer.source.LoadEventInfo: long getNewId()>();

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: long fakePreparationLoadTaskId> = $l1;

        return;
    }

    public void release()
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        java.util.Iterator r1;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r2;
        java.util.List $r3, $r4;
        boolean $z0;
        androidx.media3.exoplayer.source.CompositeSequenceableLoader $r5;
        androidx.media3.exoplayer.source.SequenceableLoader[] $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: boolean prepared> = 0;

        $r3 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: java.util.List sampleStreams>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.media3.exoplayer.source.chunk.ChunkSampleStream) $r7;

        virtualinvoke r2.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void release()>();

        goto label1;

     label2:
        $r4 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: java.util.List sampleStreams>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $r5 = new androidx.media3.exoplayer.source.CompositeSequenceableLoader;

        $r6 = newarray (androidx.media3.exoplayer.source.SequenceableLoader)[0];

        specialinvoke $r5.<androidx.media3.exoplayer.source.CompositeSequenceableLoader: void <init>(androidx.media3.exoplayer.source.SequenceableLoader[])>($r6);

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader sequenceableLoader> = $r5;

        return;
    }

    public void prepare(androidx.media3.exoplayer.source.MediaPeriod$Callback, long)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        androidx.media3.exoplayer.source.MediaPeriod$Callback r1, $r5, $r7;
        long l0, $l1, $l2, $l3, $l4;
        androidx.media3.exoplayer.source.LoadEventInfo $r2, $r8;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r3, $r10;
        androidx.media3.datasource.DataSpec $r4, $r9, $r11;
        java.lang.Object $r6;
        android.net.Uri $r12;
        com.google.common.collect.ImmutableMap $r13;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod$Callback;

        l0 := @parameter1: long;

        $r3 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        $r2 = new androidx.media3.exoplayer.source.LoadEventInfo;

        $l1 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: long fakePreparationLoadTaskId>;

        $r4 = <androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC>;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke $r2.<androidx.media3.exoplayer.source.LoadEventInfo: void <init>(long,androidx.media3.datasource.DataSpec,long)>($l1, $r4, $l2);

        virtualinvoke $r3.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void loadStarted(androidx.media3.exoplayer.source.LoadEventInfo,int,int,androidx.media3.common.Format,int,java.lang.Object,long,long)>($r2, 1, -1, null, 0, null, 0L, -9223372036854775807L);

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.MediaPeriod$Callback callback> = r1;

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: boolean prepared> = 1;

        $r5 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.MediaPeriod$Callback callback>;

        $r6 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r5);

        $r7 = (androidx.media3.exoplayer.source.MediaPeriod$Callback) $r6;

        interfaceinvoke $r7.<androidx.media3.exoplayer.source.MediaPeriod$Callback: void onPrepared(androidx.media3.exoplayer.source.MediaPeriod)>(r0);

        $r10 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        $r8 = new androidx.media3.exoplayer.source.LoadEventInfo;

        $l3 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: long fakePreparationLoadTaskId>;

        $r11 = <androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC>;

        $r9 = <androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC>;

        $r12 = $r9.<androidx.media3.datasource.DataSpec: android.net.Uri uri>;

        $r13 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke $r8.<androidx.media3.exoplayer.source.LoadEventInfo: void <init>(long,androidx.media3.datasource.DataSpec,android.net.Uri,java.util.Map,long,long,long)>($l3, $r11, $r12, $r13, $l4, 0L, 100L);

        virtualinvoke $r10.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void loadCompleted(androidx.media3.exoplayer.source.LoadEventInfo,int,int,androidx.media3.common.Format,int,java.lang.Object,long,long)>($r8, 1, -1, null, 0, null, 0L, -9223372036854775807L);

        return;
    }

    public void maybeThrowPrepareError() throws java.io.IOException
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        return;
    }

    public androidx.media3.exoplayer.source.TrackGroupArray getTrackGroups()
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        boolean $z0;
        java.lang.Boolean $r1;
        com.google.common.truth.BooleanSubject $r2;
        androidx.media3.exoplayer.source.TrackGroupArray $r3;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        $z0 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: boolean prepared>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r1);

        virtualinvoke $r2.<com.google.common.truth.BooleanSubject: void isTrue()>();

        $r3 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray trackGroupArray>;

        return $r3;
    }

    public long selectTracks(androidx.media3.exoplayer.trackselection.ExoTrackSelection[], boolean[], androidx.media3.exoplayer.source.SampleStream[], boolean[], long)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection[] r1;
        boolean[] r2, r4;
        java.lang.Object[] r3, $r14;
        long l0, $l3, $l8;
        int i1, i2, $i4, $i5, $i6, $i7, $i9, i10;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r5, $r17, $r42;
        androidx.media3.common.TrackGroup r6;
        androidx.media3.test.utils.FakeChunkSource r7;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r8, $r44, r50;
        boolean $z0, $z3;
        java.lang.Boolean $r9;
        com.google.common.truth.BooleanSubject $r10;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] $r12;
        java.util.List $r13, $r41, $r46;
        androidx.media3.exoplayer.source.SequenceableLoader[] $r15;
        java.lang.Object $r16, $r43, $r45, $r47;
        java.lang.Integer $r18, $r20, $r22, $r24, $r25, $r27, $r28, $r30;
        com.google.common.truth.IntegerSubject $r19, $r23, $r26, $r29;
        androidx.media3.exoplayer.source.TrackGroupArray $r21;
        androidx.media3.datasource.TransferListener $r31;
        androidx.media3.test.utils.FakeChunkSource$Factory $r32;
        androidx.media3.common.Format $r34;
        java.lang.String $r35;
        androidx.media3.exoplayer.upstream.Allocator $r37;
        androidx.media3.exoplayer.drm.DrmSessionManager $r38;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r40;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r48;
        androidx.media3.exoplayer.upstream.DefaultLoadErrorHandlingPolicy r49;
        androidx.media3.exoplayer.source.CompositeSequenceableLoader r51;
        java.lang.Comparable r52, r53, r54;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection[];

        r2 := @parameter1: boolean[];

        r3 := @parameter2: androidx.media3.exoplayer.source.SampleStream[];

        r4 := @parameter3: boolean[];

        l0 := @parameter4: long;

        $z0 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: boolean prepared>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r10 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r9);

        virtualinvoke $r10.<com.google.common.truth.BooleanSubject: void isTrue()>();

        i1 = lengthof r1;

        i10 = 0;

     label1:
        if i10 >= i1 goto label5;

        $r16 = r3[i10];

        if $r16 == null goto label3;

        $r42 = r1[i10];

        if $r42 == null goto label2;

        $z3 = r2[i10];

        if $z3 != 0 goto label3;

     label2:
        $r43 = r3[i10];

        $r44 = (androidx.media3.exoplayer.source.chunk.ChunkSampleStream) $r43;

        virtualinvoke $r44.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void release()>();

        $r46 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: java.util.List sampleStreams>;

        $r45 = r3[i10];

        interfaceinvoke $r46.<java.util.List: boolean remove(java.lang.Object)>($r45);

        r3[i10] = null;

     label3:
        $r47 = r3[i10];

        if $r47 != null goto label4;

        $r17 = r1[i10];

        if $r17 == null goto label4;

        r5 = r1[i10];

        $i4 = interfaceinvoke r5.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int length()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r19 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r18);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r52 = (java.lang.Comparable) $r20;

        virtualinvoke $r19.<com.google.common.truth.IntegerSubject: void isAtLeast(java.lang.Comparable)>(r52);

        r6 = interfaceinvoke r5.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.TrackGroup getTrackGroup()>();

        $r21 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray trackGroupArray>;

        $i5 = virtualinvoke $r21.<androidx.media3.exoplayer.source.TrackGroupArray: int indexOf(androidx.media3.common.TrackGroup)>(r6);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r23 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r22);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        virtualinvoke $r23.<com.google.common.truth.IntegerSubject: void isNotEqualTo(java.lang.Object)>($r24);

        $i6 = interfaceinvoke r5.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getSelectedIndex()>();

        i2 = interfaceinvoke r5.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getIndexInTrackGroup(int)>($i6);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r26 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r25);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r53 = (java.lang.Comparable) $r27;

        virtualinvoke $r26.<com.google.common.truth.IntegerSubject: void isAtLeast(java.lang.Comparable)>(r53);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r29 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r28);

        $i7 = r6.<androidx.media3.common.TrackGroup: int length>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r54 = (java.lang.Comparable) $r30;

        virtualinvoke $r29.<com.google.common.truth.IntegerSubject: void isLessThan(java.lang.Comparable)>(r54);

        $r32 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.test.utils.FakeChunkSource$Factory chunkSourceFactory>;

        $l8 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: long durationUs>;

        $r31 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.datasource.TransferListener transferListener>;

        r7 = virtualinvoke $r32.<androidx.media3.test.utils.FakeChunkSource$Factory: androidx.media3.test.utils.FakeChunkSource createChunkSource(androidx.media3.exoplayer.trackselection.ExoTrackSelection,long,androidx.media3.datasource.TransferListener)>(r5, $l8, $r31);

        r50 = new androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r34 = interfaceinvoke r5.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.Format getSelectedFormat()>();

        $r35 = $r34.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $i9 = staticinvoke <androidx.media3.common.MimeTypes: int getTrackType(java.lang.String)>($r35);

        $r37 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.upstream.Allocator allocator>;

        $r38 = <androidx.media3.exoplayer.drm.DrmSessionManager: androidx.media3.exoplayer.drm.DrmSessionManager DRM_UNSUPPORTED>;

        r48 = new androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        specialinvoke r48.<androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher: void <init>()>();

        r49 = new androidx.media3.exoplayer.upstream.DefaultLoadErrorHandlingPolicy;

        specialinvoke r49.<androidx.media3.exoplayer.upstream.DefaultLoadErrorHandlingPolicy: void <init>(int)>(3);

        $r40 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        specialinvoke r50.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void <init>(int,int[],androidx.media3.common.Format[],androidx.media3.exoplayer.source.chunk.ChunkSource,androidx.media3.exoplayer.source.SequenceableLoader$Callback,androidx.media3.exoplayer.upstream.Allocator,long,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher,androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy,androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher)>($i9, null, null, r7, r0, $r37, l0, $r38, r48, r49, $r40);

        r8 = r50;

        r3[i10] = r8;

        $r41 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: java.util.List sampleStreams>;

        interfaceinvoke $r41.<java.util.List: boolean add(java.lang.Object)>(r8);

        r4[i10] = 1;

     label4:
        i10 = i10 + 1;

        goto label1;

     label5:
        r51 = new androidx.media3.exoplayer.source.CompositeSequenceableLoader;

        $r13 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: java.util.List sampleStreams>;

        $r12 = newarray (androidx.media3.exoplayer.source.chunk.ChunkSampleStream)[0];

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r15 = (androidx.media3.exoplayer.source.SequenceableLoader[]) $r14;

        specialinvoke r51.<androidx.media3.exoplayer.source.CompositeSequenceableLoader: void <init>(androidx.media3.exoplayer.source.SequenceableLoader[])>($r15);

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader sequenceableLoader> = r51;

        $l3 = virtualinvoke r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: long seekToUs(long)>(l0);

        return $l3;
    }

    public void discardBuffer(long, boolean)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        long l0;
        boolean z0, $z1;
        java.util.Iterator r1;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r2;
        java.util.List $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r3 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: java.util.List sampleStreams>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.media3.exoplayer.source.chunk.ChunkSampleStream) $r4;

        virtualinvoke r2.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void discardBuffer(long,boolean)>(l0, z0);

        goto label1;

     label2:
        return;
    }

    public void reevaluateBuffer(long)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        long l0;
        androidx.media3.exoplayer.source.SequenceableLoader $r1;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader sequenceableLoader>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.source.SequenceableLoader: void reevaluateBuffer(long)>(l0);

        return;
    }

    public long readDiscontinuity()
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        boolean $z0;
        java.lang.Boolean $r1;
        com.google.common.truth.BooleanSubject $r2;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        $z0 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: boolean prepared>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r1);

        virtualinvoke $r2.<com.google.common.truth.BooleanSubject: void isTrue()>();

        return -9223372036854775807L;
    }

    public long getBufferedPositionUs()
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        boolean $z0;
        java.lang.Boolean $r1;
        com.google.common.truth.BooleanSubject $r2;
        androidx.media3.exoplayer.source.SequenceableLoader $r3;
        long $l0;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        $z0 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: boolean prepared>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r1);

        virtualinvoke $r2.<com.google.common.truth.BooleanSubject: void isTrue()>();

        $r3 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader sequenceableLoader>;

        $l0 = interfaceinvoke $r3.<androidx.media3.exoplayer.source.SequenceableLoader: long getBufferedPositionUs()>();

        return $l0;
    }

    public long seekToUs(long)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        long l0;
        java.util.Iterator r1;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r2;
        boolean $z0, $z1;
        java.lang.Boolean $r3;
        com.google.common.truth.BooleanSubject $r4;
        java.util.List $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        l0 := @parameter0: long;

        $z0 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: boolean prepared>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r3);

        virtualinvoke $r4.<com.google.common.truth.BooleanSubject: void isTrue()>();

        $r5 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: java.util.List sampleStreams>;

        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.media3.exoplayer.source.chunk.ChunkSampleStream) $r6;

        virtualinvoke r2.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void seekToUs(long)>(l0);

        goto label1;

     label2:
        return l0;
    }

    public long getAdjustedSeekPositionUs(long, androidx.media3.exoplayer.SeekParameters)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        long l0;
        androidx.media3.exoplayer.SeekParameters r1;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.media3.exoplayer.SeekParameters;

        return l0;
    }

    public long getNextLoadPositionUs()
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        boolean $z0;
        java.lang.Boolean $r1;
        com.google.common.truth.BooleanSubject $r2;
        androidx.media3.exoplayer.source.SequenceableLoader $r3;
        long $l0;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        $z0 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: boolean prepared>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r1);

        virtualinvoke $r2.<com.google.common.truth.BooleanSubject: void isTrue()>();

        $r3 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader sequenceableLoader>;

        $l0 = interfaceinvoke $r3.<androidx.media3.exoplayer.source.SequenceableLoader: long getNextLoadPositionUs()>();

        return $l0;
    }

    public boolean continueLoading(long)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        long l0;
        androidx.media3.exoplayer.source.SequenceableLoader $r1;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader sequenceableLoader>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.source.SequenceableLoader: boolean continueLoading(long)>(l0);

        return 1;
    }

    public boolean isLoading()
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        androidx.media3.exoplayer.source.SequenceableLoader $r1;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        $r1 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader sequenceableLoader>;

        $z0 = interfaceinvoke $r1.<androidx.media3.exoplayer.source.SequenceableLoader: boolean isLoading()>();

        return $z0;
    }

    public void onContinueLoadingRequested(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r1;
        androidx.media3.exoplayer.source.MediaPeriod$Callback $r2, $r4;
        java.lang.Object $r3;
        androidx.media3.exoplayer.source.SequenceableLoader r5;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r2 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.exoplayer.source.MediaPeriod$Callback callback>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r2);

        $r4 = (androidx.media3.exoplayer.source.MediaPeriod$Callback) $r3;

        r5 = (androidx.media3.exoplayer.source.SequenceableLoader) r0;

        interfaceinvoke $r4.<androidx.media3.exoplayer.source.MediaPeriod$Callback: void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)>(r5);

        return;
    }

    public volatile void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod r0;
        androidx.media3.exoplayer.source.SequenceableLoader r1;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream $r2;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.source.SequenceableLoader;

        $r2 = (androidx.media3.exoplayer.source.chunk.ChunkSampleStream) r1;

        virtualinvoke r0.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: void onContinueLoadingRequested(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r2);

        return;
    }

    static void <clinit>()
    {
        androidx.media3.datasource.DataSpec $r0;
        android.net.Uri $r1;

        $r0 = new androidx.media3.datasource.DataSpec;

        $r1 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("http://fake.test");

        specialinvoke $r0.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r1);

        <androidx.media3.test.utils.FakeAdaptiveMediaPeriod: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC> = $r0;

        return;
    }

