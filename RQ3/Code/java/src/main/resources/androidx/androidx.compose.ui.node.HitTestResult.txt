androidx.compose.ui.node.HitTestResult
<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>
<androidx.compose.ui.node.HitTestResult: long[] distanceFromEdgeAndInLayer>
<androidx.compose.ui.node.HitTestResult: int hitDepth>
<androidx.compose.ui.node.HitTestResult: int size>
    public void <init>()
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object[] $r1;
        long[] $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Object)[16];

        r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values> = $r1;

        $r2 = newarray (long)[16];

        r0.<androidx.compose.ui.node.HitTestResult: long[] distanceFromEdgeAndInLayer> = $r2;

        r0.<androidx.compose.ui.node.HitTestResult: int hitDepth> = -1;

        return;
    }

    public int getSize()
    {
        androidx.compose.ui.node.HitTestResult r0;
        int $i0;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        $i0 = r0.<androidx.compose.ui.node.HitTestResult: int size>;

        return $i0;
    }

    public final boolean hasHit()
    {
        androidx.compose.ui.node.HitTestResult r0;
        long l0;
        float $f0;
        byte $b1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        l0 = specialinvoke r0.<androidx.compose.ui.node.HitTestResult: long findBestHitDistance-ptXAw2c()>();

        $f0 = staticinvoke <androidx.compose.ui.node.DistanceAndInLayer: float getDistance-impl(long)>(l0);

        $b1 = $f0 cmpg 0.0F;

        if $b1 >= 0 goto label1;

        $z0 = staticinvoke <androidx.compose.ui.node.DistanceAndInLayer: boolean isInLayer-impl(long)>(l0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final void acceptHits()
    {
        androidx.compose.ui.node.HitTestResult r0;
        int $i0, $i1;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        $i0 = virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: int size()>();

        $i1 = $i0 - 1;

        r0.<androidx.compose.ui.node.HitTestResult: int hitDepth> = $i1;

        return;
    }

    private final void resizeToHitDepth()
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0, $i1, $i2, $i3, i4;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        $i1 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        i4 = $i1 + 1;

        $r1 = (java.util.List) r0;

        i0 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r1);

        if i4 > i0 goto label2;

     label1:
        $r2 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $r2[i4] = null;

        if i4 == i0 goto label2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i2 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $i3 = $i2 + 1;

        r0.<androidx.compose.ui.node.HitTestResult: int size> = $i3;

        return;
    }

    public final boolean isHitInMinimumTouchTargetBetter(float, boolean)
    {
        androidx.compose.ui.node.HitTestResult r0;
        float f0;
        boolean z0, $z1;
        long l0, l1;
        java.util.List $r1;
        int $i2, $i3, $i4;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        f0 := @parameter0: float;

        z0 := @parameter1: boolean;

        $i2 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $r1 = (java.util.List) r0;

        $i3 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r1);

        if $i2 != $i3 goto label1;

        return 1;

     label1:
        l0 = staticinvoke <androidx.compose.ui.node.HitTestResultKt: long access$DistanceAndInLayer(float,boolean)>(f0, z0);

        l1 = specialinvoke r0.<androidx.compose.ui.node.HitTestResult: long findBestHitDistance-ptXAw2c()>();

        $i4 = staticinvoke <androidx.compose.ui.node.DistanceAndInLayer: int compareTo-S_HNhKs(long,long)>(l1, l0);

        if $i4 <= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private final long findBestHitDistance-ptXAw2c()
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0, $i2, $i4, i7;
        long l1, $l3, l6, $l8;
        java.util.List $r1;
        long[] $r2;
        float $f0;
        byte $b5;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        l6 = staticinvoke <androidx.compose.ui.node.HitTestResultKt: long access$DistanceAndInLayer(float,boolean)>(#InfinityF, 0);

        $i2 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        i7 = $i2 + 1;

        $r1 = (java.util.List) r0;

        i0 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r1);

        if i7 > i0 goto label5;

     label1:
        $r2 = r0.<androidx.compose.ui.node.HitTestResult: long[] distanceFromEdgeAndInLayer>;

        $l3 = $r2[i7];

        l1 = staticinvoke <androidx.compose.ui.node.DistanceAndInLayer: long constructor-impl(long)>($l3);

        $i4 = staticinvoke <androidx.compose.ui.node.DistanceAndInLayer: int compareTo-S_HNhKs(long,long)>(l1, l6);

        if $i4 >= 0 goto label2;

        $l8 = l1;

        goto label3;

     label2:
        $l8 = l6;

     label3:
        l6 = $l8;

        $f0 = staticinvoke <androidx.compose.ui.node.DistanceAndInLayer: float getDistance-impl(long)>(l6);

        $b5 = $f0 cmpg 0.0F;

        if $b5 >= 0 goto label4;

        $z0 = staticinvoke <androidx.compose.ui.node.DistanceAndInLayer: boolean isInLayer-impl(long)>(l6);

        if $z0 == 0 goto label4;

        return l6;

     label4:
        if i7 == i0 goto label5;

        i7 = i7 + 1;

        goto label1;

     label5:
        return l6;
    }

    public final void hit(java.lang.Object, boolean, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object r1;
        boolean z0;
        kotlin.jvm.functions.Function0 r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "childHitTest");

        virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: void hitInMinimumTouchTarget(java.lang.Object,float,boolean,kotlin.jvm.functions.Function0)>(r1, -1.0F, z0, r2);

        return;
    }

    public final void hitInMinimumTouchTarget(java.lang.Object, float, boolean, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object r1;
        float f0;
        boolean z0;
        kotlin.jvm.functions.Function0 r2;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object[] $r3;
        long[] $r4;
        long $l5;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.lang.Object;

        f0 := @parameter1: float;

        z0 := @parameter2: boolean;

        r2 := @parameter3: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "childHitTest");

        i0 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        i1 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $i2 = i1 + 1;

        r0.<androidx.compose.ui.node.HitTestResult: int hitDepth> = $i2;

        specialinvoke r0.<androidx.compose.ui.node.HitTestResult: void ensureContainerSize()>();

        $r3 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $i3 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $r3[$i3] = r1;

        $r4 = r0.<androidx.compose.ui.node.HitTestResult: long[] distanceFromEdgeAndInLayer>;

        $i4 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $l5 = staticinvoke <androidx.compose.ui.node.HitTestResultKt: long access$DistanceAndInLayer(float,boolean)>(f0, z0);

        $r4[$i4] = $l5;

        specialinvoke r0.<androidx.compose.ui.node.HitTestResult: void resizeToHitDepth()>();

        interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        r0.<androidx.compose.ui.node.HitTestResult: int hitDepth> = i0;

        return;
    }

    public final void speculativeHit(java.lang.Object, float, boolean, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object r1;
        float f0;
        boolean z0;
        kotlin.jvm.functions.Function0 r2;
        long l0, $l10;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.util.List $r3, $r4, $r5, $r12;
        java.lang.Object[] $r6, $r7;
        long[] $r9, $r10;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.lang.Object;

        f0 := @parameter1: float;

        z0 := @parameter2: boolean;

        r2 := @parameter3: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "childHitTest");

        $i4 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $r3 = (java.util.List) r0;

        $i5 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r3);

        if $i4 != $i5 goto label2;

        virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: void hitInMinimumTouchTarget(java.lang.Object,float,boolean,kotlin.jvm.functions.Function0)>(r1, f0, z0, r2);

        $i20 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $i21 = $i20 + 1;

        $r12 = (java.util.List) r0;

        $i22 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r12);

        if $i21 != $i22 goto label1;

        specialinvoke r0.<androidx.compose.ui.node.HitTestResult: void resizeToHitDepth()>();

     label1:
        return;

     label2:
        l0 = specialinvoke r0.<androidx.compose.ui.node.HitTestResult: long findBestHitDistance-ptXAw2c()>();

        i1 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $r4 = (java.util.List) r0;

        $i6 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r4);

        r0.<androidx.compose.ui.node.HitTestResult: int hitDepth> = $i6;

        virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: void hitInMinimumTouchTarget(java.lang.Object,float,boolean,kotlin.jvm.functions.Function0)>(r1, f0, z0, r2);

        $i7 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $i8 = $i7 + 1;

        $r5 = (java.util.List) r0;

        $i9 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r5);

        if $i8 >= $i9 goto label3;

        $l10 = specialinvoke r0.<androidx.compose.ui.node.HitTestResult: long findBestHitDistance-ptXAw2c()>();

        $i11 = staticinvoke <androidx.compose.ui.node.DistanceAndInLayer: int compareTo-S_HNhKs(long,long)>(l0, $l10);

        if $i11 <= 0 goto label3;

        $i12 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        i2 = $i12 + 1;

        i3 = i1 + 1;

        $r6 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $r7 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $i13 = virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: int size()>();

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r6, $r7, i3, i2, $i13);

        $r9 = r0.<androidx.compose.ui.node.HitTestResult: long[] distanceFromEdgeAndInLayer>;

        $r10 = r0.<androidx.compose.ui.node.HitTestResult: long[] distanceFromEdgeAndInLayer>;

        $i14 = virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: int size()>();

        staticinvoke <kotlin.collections.ArraysKt: long[] copyInto(long[],long[],int,int,int)>($r9, $r10, i3, i2, $i14);

        $i15 = virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: int size()>();

        $i17 = i1 + $i15;

        $i16 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $i18 = $i17 - $i16;

        $i19 = $i18 - 1;

        r0.<androidx.compose.ui.node.HitTestResult: int hitDepth> = $i19;

     label3:
        specialinvoke r0.<androidx.compose.ui.node.HitTestResult: void resizeToHitDepth()>();

        r0.<androidx.compose.ui.node.HitTestResult: int hitDepth> = i1;

        return;
    }

    public final void siblingHits(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.HitTestResult r0;
        kotlin.jvm.functions.Function0 r1;
        int i0;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        i0 = staticinvoke <androidx.compose.ui.node.HitTestResult: int access$getHitDepth$p(androidx.compose.ui.node.HitTestResult)>(r0);

        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        staticinvoke <androidx.compose.ui.node.HitTestResult: void access$setHitDepth$p(androidx.compose.ui.node.HitTestResult,int)>(r0, i0);

        return;
    }

    private final void ensureContainerSize()
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r1, $r2, $r3, $r4;
        long[] $r5, $r6;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        $i2 = r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        $r1 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label1;

        $r2 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $i3 = lengthof $r2;

        i0 = $i3 + 16;

        $r3 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "copyOf(this, newSize)");

        r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values> = $r4;

        $r5 = r0.<androidx.compose.ui.node.HitTestResult: long[] distanceFromEdgeAndInLayer>;

        $r6 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r5, i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "copyOf(this, newSize)");

        r0.<androidx.compose.ui.node.HitTestResult: long[] distanceFromEdgeAndInLayer> = $r6;

     label1:
        return;
    }

    public boolean contains(java.lang.Object)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: int indexOf(java.lang.Object)>(r1);

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.util.Collection r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4, r5;
        boolean $z2, $z3;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "elements");

        $r2 = (java.lang.Iterable) r1;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = r4;

        $z3 = virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: boolean contains(java.lang.Object)>(r5);

        if $z3 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public java.lang.Object get(int)
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int indexOf(java.lang.Object)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object r1, $r4;
        int i0, i1;
        java.util.List $r2;
        java.lang.Object[] $r3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.lang.Object;

        i1 = 0;

        $r2 = (java.util.List) r0;

        i0 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r2);

        if i1 > i0 goto label3;

     label1:
        $r3 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $r4 = $r3[i1];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, r1);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        if i1 == i0 goto label3;

        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public boolean isEmpty()
    {
        androidx.compose.ui.node.HitTestResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        $i0 = virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        androidx.compose.ui.node.HitTestResult r0;
        androidx.compose.ui.node.HitTestResult$HitTestResultIterator $r1;
        java.util.Iterator $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        $r1 = new androidx.compose.ui.node.HitTestResult$HitTestResultIterator;

        specialinvoke $r1.<androidx.compose.ui.node.HitTestResult$HitTestResultIterator: void <init>(androidx.compose.ui.node.HitTestResult,int,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r0, 0, 0, 0, 7, null);

        $r2 = (java.util.Iterator) $r1;

        return $r2;
    }

    public int lastIndexOf(java.lang.Object)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object r1, $r4;
        java.util.List $r2;
        java.lang.Object[] $r3;
        boolean $z0;
        int i0;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.List) r0;

        i0 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r2);

     label1:
        if -1 >= i0 goto label3;

        $r3 = r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        $r4 = $r3[i0];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, r1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        return -1;
    }

    public java.util.ListIterator listIterator()
    {
        androidx.compose.ui.node.HitTestResult r0;
        androidx.compose.ui.node.HitTestResult$HitTestResultIterator $r1;
        java.util.ListIterator $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        $r1 = new androidx.compose.ui.node.HitTestResult$HitTestResultIterator;

        specialinvoke $r1.<androidx.compose.ui.node.HitTestResult$HitTestResultIterator: void <init>(androidx.compose.ui.node.HitTestResult,int,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r0, 0, 0, 0, 7, null);

        $r2 = (java.util.ListIterator) $r1;

        return $r2;
    }

    public java.util.ListIterator listIterator(int)
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0;
        androidx.compose.ui.node.HitTestResult$HitTestResultIterator $r1;
        java.util.ListIterator $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        i0 := @parameter0: int;

        $r1 = new androidx.compose.ui.node.HitTestResult$HitTestResultIterator;

        specialinvoke $r1.<androidx.compose.ui.node.HitTestResult$HitTestResultIterator: void <init>(androidx.compose.ui.node.HitTestResult,int,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r0, i0, 0, 0, 6, null);

        $r2 = (java.util.ListIterator) $r1;

        return $r2;
    }

    public java.util.List subList(int, int)
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0, i1;
        androidx.compose.ui.node.HitTestResult$SubList $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new androidx.compose.ui.node.HitTestResult$SubList;

        specialinvoke $r1.<androidx.compose.ui.node.HitTestResult$SubList: void <init>(androidx.compose.ui.node.HitTestResult,int,int)>(r0, i0, i1);

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public final void clear()
    {
        androidx.compose.ui.node.HitTestResult r0;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r0.<androidx.compose.ui.node.HitTestResult: int hitDepth> = -1;

        specialinvoke r0.<androidx.compose.ui.node.HitTestResult: void resizeToHitDepth()>();

        return;
    }

    public boolean add(java.lang.Object)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void add(int, java.lang.Object)
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(int, java.util.Collection)
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean remove(java.lang.Object)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public java.lang.Object remove(int)
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public void replaceAll(java.util.function.UnaryOperator)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.util.function.UnaryOperator r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.util.function.UnaryOperator;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        androidx.compose.ui.node.HitTestResult r0;
        int i0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void sort(java.util.Comparator)
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.util.Comparator r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.util.Comparator;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile int size()
    {
        androidx.compose.ui.node.HitTestResult r0;
        int $i0;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        $i0 = virtualinvoke r0.<androidx.compose.ui.node.HitTestResult: int getSize()>();

        return $i0;
    }

    public static final int access$getHitDepth$p(androidx.compose.ui.node.HitTestResult)
    {
        androidx.compose.ui.node.HitTestResult $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.ui.node.HitTestResult;

        $i0 = $r0.<androidx.compose.ui.node.HitTestResult: int hitDepth>;

        return $i0;
    }

    public static final void access$setHitDepth$p(androidx.compose.ui.node.HitTestResult, int)
    {
        androidx.compose.ui.node.HitTestResult $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.ui.node.HitTestResult;

        i0 := @parameter1: int;

        $r0.<androidx.compose.ui.node.HitTestResult: int hitDepth> = i0;

        return;
    }

    public static final java.lang.Object[] access$getValues$p(androidx.compose.ui.node.HitTestResult)
    {
        androidx.compose.ui.node.HitTestResult $r0;
        java.lang.Object[] $r1;

        $r0 := @parameter0: androidx.compose.ui.node.HitTestResult;

        $r1 = $r0.<androidx.compose.ui.node.HitTestResult: java.lang.Object[] values>;

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.lang.Object[] r1, $r3;
        java.util.Collection $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "array");

        $r2 = (java.util.Collection) r0;

        $r3 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r2, r1);

        return $r3;
    }

    public java.lang.Object[] toArray()
    {
        androidx.compose.ui.node.HitTestResult r0;
        java.util.Collection $r1;
        java.lang.Object[] $r2;

        r0 := @this: androidx.compose.ui.node.HitTestResult;

        $r1 = (java.util.Collection) r0;

        $r2 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>($r1);

        return $r2;
    }

