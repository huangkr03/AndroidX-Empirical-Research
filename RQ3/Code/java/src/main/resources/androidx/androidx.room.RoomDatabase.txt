androidx.room.RoomDatabase
<androidx.room.RoomDatabase: androidx.room.RoomDatabase$Companion Companion>
<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteDatabase mDatabase>
<androidx.room.RoomDatabase: java.util.concurrent.Executor internalQueryExecutor>
<androidx.room.RoomDatabase: java.util.concurrent.Executor internalTransactionExecutor>
<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper internalOpenHelper>
<androidx.room.RoomDatabase: androidx.room.InvalidationTracker invalidationTracker>
<androidx.room.RoomDatabase: boolean allowMainThreadQueries>
<androidx.room.RoomDatabase: boolean writeAheadLoggingEnabled>
<androidx.room.RoomDatabase: java.util.List mCallbacks>
<androidx.room.RoomDatabase: java.util.Map autoMigrationSpecs>
<androidx.room.RoomDatabase: java.util.concurrent.locks.ReentrantReadWriteLock readWriteLock>
<androidx.room.RoomDatabase: androidx.room.AutoCloser autoCloser>
<androidx.room.RoomDatabase: java.lang.ThreadLocal suspendingTransactionId>
<androidx.room.RoomDatabase: java.util.Map backingFieldMap>
<androidx.room.RoomDatabase: java.util.Map typeConverters>
<androidx.room.RoomDatabase: int MAX_BIND_PARAMETER_CNT>
    public void <init>()
    {
        androidx.room.RoomDatabase r0;
        androidx.room.InvalidationTracker $r1;
        java.util.LinkedHashMap $r2, $r6, $r9;
        java.util.Map $r3, $r7, $r8, $r10;
        java.util.concurrent.locks.ReentrantReadWriteLock $r4;
        java.lang.ThreadLocal $r5;

        r0 := @this: androidx.room.RoomDatabase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker createInvalidationTracker()>();

        r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker invalidationTracker> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = (java.util.Map) $r2;

        r0.<androidx.room.RoomDatabase: java.util.Map autoMigrationSpecs> = $r3;

        $r4 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<androidx.room.RoomDatabase: java.util.concurrent.locks.ReentrantReadWriteLock readWriteLock> = $r4;

        $r5 = new java.lang.ThreadLocal;

        specialinvoke $r5.<java.lang.ThreadLocal: void <init>()>();

        r0.<androidx.room.RoomDatabase: java.lang.ThreadLocal suspendingTransactionId> = $r5;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        $r7 = (java.util.Map) $r6;

        $r8 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r7);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "synchronizedMap(mutableMapOf())");

        r0.<androidx.room.RoomDatabase: java.util.Map backingFieldMap> = $r8;

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>()>();

        $r10 = (java.util.Map) $r9;

        r0.<androidx.room.RoomDatabase: java.util.Map typeConverters> = $r10;

        return;
    }

    protected static void getMDatabase$annotations()
    {
        return;
    }

    public java.util.concurrent.Executor getQueryExecutor()
    {
        androidx.room.RoomDatabase r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = r0.<androidx.room.RoomDatabase: java.util.concurrent.Executor internalQueryExecutor>;

        if $r1 != null goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("internalQueryExecutor");

        $r1 = null;

     label1:
        return $r1;
    }

    public java.util.concurrent.Executor getTransactionExecutor()
    {
        androidx.room.RoomDatabase r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = r0.<androidx.room.RoomDatabase: java.util.concurrent.Executor internalTransactionExecutor>;

        if $r1 != null goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("internalTransactionExecutor");

        $r1 = null;

     label1:
        return $r1;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper internalOpenHelper>;

        if $r1 != null goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("internalOpenHelper");

        $r1 = null;

     label1:
        return $r1;
    }

    public androidx.room.InvalidationTracker getInvalidationTracker()
    {
        androidx.room.RoomDatabase r0;
        androidx.room.InvalidationTracker $r1;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker invalidationTracker>;

        return $r1;
    }

    protected static void getMCallbacks$annotations()
    {
        return;
    }

    protected final java.util.Map getAutoMigrationSpecs()
    {
        androidx.room.RoomDatabase r0;
        java.util.Map $r1;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = r0.<androidx.room.RoomDatabase: java.util.Map autoMigrationSpecs>;

        return $r1;
    }

    protected final void setAutoMigrationSpecs(java.util.Map)
    {
        androidx.room.RoomDatabase r0;
        java.util.Map r1;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.room.RoomDatabase: java.util.Map autoMigrationSpecs> = r1;

        return;
    }

    public final java.util.concurrent.locks.Lock getCloseLock$room_runtime_release()
    {
        androidx.room.RoomDatabase r0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r2;
        java.util.concurrent.locks.Lock $r3;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = r0.<androidx.room.RoomDatabase: java.util.concurrent.locks.ReentrantReadWriteLock readWriteLock>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "readWriteLock.readLock()");

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        return $r3;
    }

    public final java.lang.ThreadLocal getSuspendingTransactionId()
    {
        androidx.room.RoomDatabase r0;
        java.lang.ThreadLocal $r1;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = r0.<androidx.room.RoomDatabase: java.lang.ThreadLocal suspendingTransactionId>;

        return $r1;
    }

    public final java.util.Map getBackingFieldMap()
    {
        androidx.room.RoomDatabase r0;
        java.util.Map $r1;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = r0.<androidx.room.RoomDatabase: java.util.Map backingFieldMap>;

        return $r1;
    }

    public java.lang.Object getTypeConverter(java.lang.Class)
    {
        androidx.room.RoomDatabase r0;
        java.lang.Class r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "klass");

        $r2 = r0.<androidx.room.RoomDatabase: java.util.Map typeConverters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public void init(androidx.room.DatabaseConfiguration)
    {
        androidx.room.RoomDatabase r0;
        androidx.room.DatabaseConfiguration r1;
        java.util.Set r2, $r26;
        java.util.BitSet r3, $r12, $r25;
        java.util.Map$Entry r4, r5;
        java.lang.Class r6, r9, $r54, $r87, r89;
        java.util.List r7, $r13, $r19, $r27, $r28, $r39, $r40, $r53, $r74, $r75, $r86, r93;
        java.util.Iterator r8, r88, r94, r104;
        java.lang.Object r10, $r16, $r18, $r35, $r36, $r37, $r38, $r42, $r68, $r73, $r77, r90, r106;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r11, $r15, $r17, $r64;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z11, $z12, z13, $z14, z15, $z16, z17, z18, $z19, $z20, z21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16;
        java.util.Map $r14, $r41, $r76, r101, r103;
        java.util.concurrent.Executor $r20, $r22, $r23;
        androidx.room.TransactionExecutor $r21;
        android.content.Intent $r24, $r57;
        java.lang.IllegalArgumentException $r29, $r51, $r60, $r71, $r84;
        java.lang.StringBuilder $r30, $r31, $r32, $r33, $r44, $r45, $r46, $r47, $r49, $r50, $r79, $r80, $r82, $r83;
        java.lang.String $r34, $r48, $r52, $r55, $r58, $r61, $r72, $r81, $r85, r91, $r92, $r100, r105;
        androidx.room.InvalidationTracker $r56, $r66;
        android.content.Context $r59;
        androidx.room.RoomDatabase$JournalMode $r62, $r63;
        androidx.room.AutoCloser $r65, $r67;
        androidx.room.RoomDatabase$MigrationContainer $r69, $r70;
        androidx.room.migration.Migration r95;
        androidx.room.migration.Migration[] r96;
        androidx.room.SQLiteCopyOpenHelper r97;
        androidx.room.AutoClosingRoomOpenHelper r98;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: androidx.room.DatabaseConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "configuration");

        $r11 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper createOpenHelper(androidx.room.DatabaseConfiguration)>(r1);

        r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper internalOpenHelper> = $r11;

        r2 = virtualinvoke r0.<androidx.room.RoomDatabase: java.util.Set getRequiredAutoMigrationSpecs()>();

        $r12 = new java.util.BitSet;

        specialinvoke $r12.<java.util.BitSet: void <init>()>();

        r3 = $r12;

        r88 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r88.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r73 = interfaceinvoke r88.<java.util.Iterator: java.lang.Object next()>();

        r89 = (java.lang.Class) $r73;

        i7 = -1;

        $r74 = r1.<androidx.room.DatabaseConfiguration: java.util.List autoMigrationSpecs>;

        $i6 = interfaceinvoke $r74.<java.util.List: int size()>();

        $i8 = $i6 + -1;

        if 0 > $i8 goto label04;

     label02:
        i9 = $i8;

        $i8 = $i8 + -1;

        $r86 = r1.<androidx.room.DatabaseConfiguration: java.util.List autoMigrationSpecs>;

        r90 = interfaceinvoke $r86.<java.util.List: java.lang.Object get(int)>(i9);

        $r87 = virtualinvoke r90.<java.lang.Object: java.lang.Class getClass()>();

        $z7 = virtualinvoke r89.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r87);

        if $z7 == 0 goto label03;

        i7 = i9;

        virtualinvoke r3.<java.util.BitSet: void set(int)>(i7);

        goto label04;

     label03:
        if 0 <= $i8 goto label02;

     label04:
        if i7 < 0 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        if $z8 != 0 goto label07;

        z9 = 0;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A required auto migration spec (");

        $r81 = virtualinvoke r89.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is missing in the database configuration.");

        r91 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        $r84 = new java.lang.IllegalArgumentException;

        $r85 = virtualinvoke r91.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r84.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r85);

        throw $r84;

     label07:
        $r76 = r0.<androidx.room.RoomDatabase: java.util.Map autoMigrationSpecs>;

        $r75 = r1.<androidx.room.DatabaseConfiguration: java.util.List autoMigrationSpecs>;

        $r77 = interfaceinvoke $r75.<java.util.List: java.lang.Object get(int)>(i7);

        interfaceinvoke $r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r89, $r77);

        goto label01;

     label08:
        $r13 = r1.<androidx.room.DatabaseConfiguration: java.util.List autoMigrationSpecs>;

        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        i10 = $i0 + -1;

        if 0 > i10 goto label11;

     label09:
        i11 = i10;

        i10 = i10 + -1;

        $z6 = virtualinvoke r3.<java.util.BitSet: boolean get(int)>(i11);

        if $z6 != 0 goto label10;

        $r92 = "Unexpected auto migration specs found. Annotate AutoMigrationSpec implementation with @ProvidedAutoMigrationSpec annotation or remove this spec from the builder.";

        $r71 = new java.lang.IllegalArgumentException;

        $r72 = virtualinvoke $r92.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r71.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r72);

        throw $r71;

     label10:
        if 0 <= i10 goto label09;

     label11:
        $r14 = r0.<androidx.room.RoomDatabase: java.util.Map autoMigrationSpecs>;

        r93 = virtualinvoke r0.<androidx.room.RoomDatabase: java.util.List getAutoMigrations(java.util.Map)>($r14);

        r94 = interfaceinvoke r93.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z11 = interfaceinvoke r94.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label13;

        $r68 = interfaceinvoke r94.<java.util.Iterator: java.lang.Object next()>();

        r95 = (androidx.room.migration.Migration) $r68;

        $r69 = r1.<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$MigrationContainer migrationContainer>;

        $i5 = r95.<androidx.room.migration.Migration: int startVersion>;

        $i4 = r95.<androidx.room.migration.Migration: int endVersion>;

        $z12 = virtualinvoke $r69.<androidx.room.RoomDatabase$MigrationContainer: boolean contains(int,int)>($i5, $i4);

        if $z12 != 0 goto label12;

        $r70 = r1.<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$MigrationContainer migrationContainer>;

        r96 = newarray (androidx.room.migration.Migration)[1];

        r96[0] = r95;

        virtualinvoke $r70.<androidx.room.RoomDatabase$MigrationContainer: void addMigrations(androidx.room.migration.Migration[])>(r96);

        goto label12;

     label13:
        $r15 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r16 = specialinvoke r0.<androidx.room.RoomDatabase: java.lang.Object unwrapOpenHelper(java.lang.Class,androidx.sqlite.db.SupportSQLiteOpenHelper)>(class "Landroidx/room/SQLiteCopyOpenHelper;", $r15);

        r97 = (androidx.room.SQLiteCopyOpenHelper) $r16;

        if r97 == null goto label14;

        virtualinvoke r97.<androidx.room.SQLiteCopyOpenHelper: void setDatabaseConfiguration(androidx.room.DatabaseConfiguration)>(r1);

     label14:
        $r17 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r18 = specialinvoke r0.<androidx.room.RoomDatabase: java.lang.Object unwrapOpenHelper(java.lang.Class,androidx.sqlite.db.SupportSQLiteOpenHelper)>(class "Landroidx/room/AutoClosingRoomOpenHelper;", $r17);

        r98 = (androidx.room.AutoClosingRoomOpenHelper) $r18;

        if r98 == null goto label15;

        z13 = 0;

        $r65 = r98.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoCloser autoCloser>;

        r0.<androidx.room.RoomDatabase: androidx.room.AutoCloser autoCloser> = $r65;

        $r66 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r67 = r98.<androidx.room.AutoClosingRoomOpenHelper: androidx.room.AutoCloser autoCloser>;

        virtualinvoke $r66.<androidx.room.InvalidationTracker: void setAutoCloser$room_runtime_release(androidx.room.AutoCloser)>($r67);

        goto label15;

     label15:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 16 goto label18;

        $r63 = r1.<androidx.room.DatabaseConfiguration: androidx.room.RoomDatabase$JournalMode journalMode>;

        $r62 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode WRITE_AHEAD_LOGGING>;

        if $r63 != $r62 goto label16;

        $z14 = 1;

        goto label17;

     label16:
        $z14 = 0;

     label17:
        z15 = $z14;

        $r64 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        interfaceinvoke $r64.<androidx.sqlite.db.SupportSQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)>(z15);

        $z16 = z15;

        goto label19;

     label18:
        $z16 = 0;

     label19:
        z17 = $z16;

        $r19 = r1.<androidx.room.DatabaseConfiguration: java.util.List callbacks>;

        r0.<androidx.room.RoomDatabase: java.util.List mCallbacks> = $r19;

        $r20 = r1.<androidx.room.DatabaseConfiguration: java.util.concurrent.Executor queryExecutor>;

        r0.<androidx.room.RoomDatabase: java.util.concurrent.Executor internalQueryExecutor> = $r20;

        $r21 = new androidx.room.TransactionExecutor;

        $r22 = r1.<androidx.room.DatabaseConfiguration: java.util.concurrent.Executor transactionExecutor>;

        specialinvoke $r21.<androidx.room.TransactionExecutor: void <init>(java.util.concurrent.Executor)>($r22);

        $r23 = (java.util.concurrent.Executor) $r21;

        r0.<androidx.room.RoomDatabase: java.util.concurrent.Executor internalTransactionExecutor> = $r23;

        $z2 = r1.<androidx.room.DatabaseConfiguration: boolean allowMainThreadQueries>;

        r0.<androidx.room.RoomDatabase: boolean allowMainThreadQueries> = $z2;

        r0.<androidx.room.RoomDatabase: boolean writeAheadLoggingEnabled> = z17;

        $r24 = r1.<androidx.room.DatabaseConfiguration: android.content.Intent multiInstanceInvalidationServiceIntent>;

        if $r24 == null goto label21;

        $r55 = r1.<androidx.room.DatabaseConfiguration: java.lang.String name>;

        if $r55 != null goto label20;

        $r100 = "Required value was null.";

        $r60 = new java.lang.IllegalArgumentException;

        $r61 = virtualinvoke $r100.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r60.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r61);

        throw $r60;

     label20:
        $r56 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r59 = r1.<androidx.room.DatabaseConfiguration: android.content.Context context>;

        $r58 = r1.<androidx.room.DatabaseConfiguration: java.lang.String name>;

        $r57 = r1.<androidx.room.DatabaseConfiguration: android.content.Intent multiInstanceInvalidationServiceIntent>;

        virtualinvoke $r56.<androidx.room.InvalidationTracker: void startMultiInstanceInvalidation$room_runtime_release(android.content.Context,java.lang.String,android.content.Intent)>($r59, $r58, $r57);

     label21:
        r101 = virtualinvoke r0.<androidx.room.RoomDatabase: java.util.Map getRequiredTypeConverters()>();

        $r25 = new java.util.BitSet;

        specialinvoke $r25.<java.util.BitSet: void <init>()>();

        r103 = r101;

        z18 = 0;

        $r26 = interfaceinvoke r103.<java.util.Map: java.util.Set entrySet()>();

        r104 = interfaceinvoke $r26.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z19 = interfaceinvoke r104.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label31;

        $r35 = interfaceinvoke r104.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r35;

        r5 = r4;

        $r36 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.Class) $r36;

        $r37 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (java.util.List) $r37;

        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label23:
        $z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label30;

        $r38 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.Class) $r38;

        i12 = -1;

        $r39 = r1.<androidx.room.DatabaseConfiguration: java.util.List typeConverters>;

        $i3 = interfaceinvoke $r39.<java.util.List: int size()>();

        i13 = $i3 + -1;

        if 0 > i13 goto label26;

     label24:
        i14 = i13;

        i13 = i13 + -1;

        $r53 = r1.<androidx.room.DatabaseConfiguration: java.util.List typeConverters>;

        r10 = interfaceinvoke $r53.<java.util.List: java.lang.Object get(int)>(i14);

        $r54 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        $z5 = virtualinvoke r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r54);

        if $z5 == 0 goto label25;

        i12 = i14;

        virtualinvoke $r25.<java.util.BitSet: void set(int)>(i12);

        goto label26;

     label25:
        if 0 <= i13 goto label24;

     label26:
        if i12 < 0 goto label27;

        $z20 = 1;

        goto label28;

     label27:
        $z20 = 0;

     label28:
        if $z20 != 0 goto label29;

        z21 = 0;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A required type converter (");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for ");

        $r48 = virtualinvoke r6.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is missing in the database configuration.");

        r105 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51 = new java.lang.IllegalArgumentException;

        $r52 = virtualinvoke r105.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r51.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r52);

        throw $r51;

     label29:
        $r41 = r0.<androidx.room.RoomDatabase: java.util.Map typeConverters>;

        $r40 = r1.<androidx.room.DatabaseConfiguration: java.util.List typeConverters>;

        $r42 = interfaceinvoke $r40.<java.util.List: java.lang.Object get(int)>(i12);

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r42);

        goto label23;

     label30:
        goto label22;

     label31:
        $r27 = r1.<androidx.room.DatabaseConfiguration: java.util.List typeConverters>;

        $i2 = interfaceinvoke $r27.<java.util.List: int size()>();

        i15 = $i2 + -1;

        if 0 > i15 goto label34;

     label32:
        i16 = i15;

        i15 = i15 + -1;

        $z3 = virtualinvoke $r25.<java.util.BitSet: boolean get(int)>(i16);

        if $z3 != 0 goto label33;

        $r28 = r1.<androidx.room.DatabaseConfiguration: java.util.List typeConverters>;

        r106 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i16);

        $r29 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected type converter ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r106);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Annotate TypeConverter class with @ProvidedTypeConverter annotation or remove this converter from the builder.");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label33:
        if 0 <= i15 goto label32;

     label34:
        return;
    }

    public java.util.List getAutoMigrations(java.util.Map)
    {
        androidx.room.RoomDatabase r0;
        java.util.Map r1;
        java.util.List $r2;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "autoMigrationSpecs");

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r2;
    }

    private final java.lang.Object unwrapOpenHelper(java.lang.Class, androidx.sqlite.db.SupportSQLiteOpenHelper)
    {
        androidx.room.RoomDatabase r0;
        java.lang.Class r1;
        androidx.sqlite.db.SupportSQLiteOpenHelper r2, $r4;
        boolean $z0, $z1;
        androidx.room.DelegatingOpenHelper $r3;
        java.lang.Object $r5, $r6;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: androidx.sqlite.db.SupportSQLiteOpenHelper;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r5 = (java.lang.Object) r2;

        return $r5;

     label1:
        $z1 = r2 instanceof androidx.room.DelegatingOpenHelper;

        if $z1 == 0 goto label2;

        $r3 = (androidx.room.DelegatingOpenHelper) r2;

        $r4 = interfaceinvoke $r3.<androidx.room.DelegatingOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()>();

        $r6 = specialinvoke r0.<androidx.room.RoomDatabase: java.lang.Object unwrapOpenHelper(java.lang.Class,androidx.sqlite.db.SupportSQLiteOpenHelper)>(r1, $r4);

        goto label3;

     label2:
        $r6 = null;

     label3:
        return $r6;
    }

<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper createOpenHelper(androidx.room.DatabaseConfiguration)>
<androidx.room.RoomDatabase: androidx.room.InvalidationTracker createInvalidationTracker()>
    protected java.util.Map getRequiredTypeConverters()
    {
        androidx.room.RoomDatabase r0;
        java.util.Map $r1;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        return $r1;
    }

    public java.util.Set getRequiredAutoMigrationSpecs()
    {
        androidx.room.RoomDatabase r0;
        java.util.Set $r1;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

        return $r1;
    }

<androidx.room.RoomDatabase: void clearAllTables()>
    public boolean isOpen()
    {
        androidx.room.RoomDatabase r0;
        androidx.room.AutoCloser $r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r3, $r4;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = r0.<androidx.room.RoomDatabase: androidx.room.AutoCloser autoCloser>;

        if $r1 == null goto label1;

        $z1 = virtualinvoke $r1.<androidx.room.AutoCloser: boolean isActive()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        goto label3;

     label1:
        $r2 = r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteDatabase mDatabase>;

        if $r2 == null goto label2;

        $z0 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isOpen()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        goto label3;

     label2:
        $r3 = null;

     label3:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        return $z2;
    }

    public static void isOpen$annotations()
    {
        return;
    }

    public void close()
    {
        androidx.room.RoomDatabase r0;
        java.util.concurrent.locks.Lock r1;
        java.lang.Throwable r2, $r7;
        boolean $z0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r4;
        androidx.room.InvalidationTracker $r5;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r6;

        r0 := @this: androidx.room.RoomDatabase;

        $z0 = virtualinvoke r0.<androidx.room.RoomDatabase: boolean isOpen()>();

        if $z0 == 0 goto label5;

        $r3 = r0.<androidx.room.RoomDatabase: java.util.concurrent.locks.ReentrantReadWriteLock readWriteLock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "readWriteLock.writeLock()");

        r1 = (java.util.concurrent.locks.Lock) $r4;

        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r5 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r5.<androidx.room.InvalidationTracker: void stopMultiInstanceInvalidation$room_runtime_release()>();

        $r6 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteOpenHelper: void close()>();

     label2:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

     label4:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final boolean isMainThread$room_runtime_release()
    {
        androidx.room.RoomDatabase r0;
        android.os.Looper $r1;
        java.lang.Thread $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r2 = virtualinvoke $r1.<android.os.Looper: java.lang.Thread getThread()>();

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void assertNotMainThread()
    {
        androidx.room.RoomDatabase r0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r1;
        java.lang.String $r2, $r3;

        r0 := @this: androidx.room.RoomDatabase;

        $z0 = r0.<androidx.room.RoomDatabase: boolean allowMainThreadQueries>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<androidx.room.RoomDatabase: boolean isMainThread$room_runtime_release()>();

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 != 0 goto label4;

        $r3 = "Cannot access database on the main thread since it may potentially lock the UI for a long period of time.";

        $r1 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label4:
        return;
    }

    public void assertNotSuspendingTransaction()
    {
        androidx.room.RoomDatabase r0;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r1;
        java.lang.String $r2, $r5;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.room.RoomDatabase;

        $z0 = virtualinvoke r0.<androidx.room.RoomDatabase: boolean inTransaction()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.room.RoomDatabase: java.lang.ThreadLocal suspendingTransactionId>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r4 != null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 != 0 goto label4;

        $r5 = "Cannot access database on a different coroutine context inherited from a suspending transaction.";

        $r1 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label4:
        return;
    }

    public android.database.Cursor query(java.lang.String, java.lang.Object[])
    {
        androidx.room.RoomDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;
        androidx.sqlite.db.SimpleSQLiteQuery $r5;
        androidx.sqlite.db.SupportSQLiteQuery $r6;
        android.database.Cursor $r7;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        $r3 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r4 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        $r5 = new androidx.sqlite.db.SimpleSQLiteQuery;

        specialinvoke $r5.<androidx.sqlite.db.SimpleSQLiteQuery: void <init>(java.lang.String,java.lang.Object[])>(r1, r2);

        $r6 = (androidx.sqlite.db.SupportSQLiteQuery) $r5;

        $r7 = interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>($r6);

        return $r7;
    }

    public android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery, android.os.CancellationSignal)
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        android.os.CancellationSignal r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r3, $r5;
        androidx.sqlite.db.SupportSQLiteDatabase $r4, $r6;
        int $i0;
        android.database.Cursor $r7;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        r2 := @parameter1: android.os.CancellationSignal;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        virtualinvoke r0.<androidx.room.RoomDatabase: void assertNotMainThread()>();

        virtualinvoke r0.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        if r2 == null goto label1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        $r5 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r6 = interfaceinvoke $r5.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        $r7 = interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery,android.os.CancellationSignal)>(r1, r2);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r4 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        $r7 = interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>(r1);

     label2:
        return $r7;
    }

    public static android.database.Cursor query$default(androidx.room.RoomDatabase, androidx.sqlite.db.SupportSQLiteQuery, android.os.CancellationSignal, int, java.lang.Object)
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        int i0, $i1;
        java.lang.Object r2;
        android.database.Cursor $r3;
        java.lang.UnsupportedOperationException $r4;
        android.os.CancellationSignal r5;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: androidx.sqlite.db.SupportSQLiteQuery;

        r5 := @parameter2: android.os.CancellationSignal;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        if r2 == null goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: query");

        throw $r4;

     label1:
        $i1 = i0 & 2;

        if $i1 == 0 goto label2;

        r5 = null;

     label2:
        $r3 = virtualinvoke r0.<androidx.room.RoomDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery,android.os.CancellationSignal)>(r1, r5);

        return $r3;
    }

    public androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)
    {
        androidx.room.RoomDatabase r0;
        java.lang.String r1;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;
        androidx.sqlite.db.SupportSQLiteStatement $r4;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sql");

        virtualinvoke r0.<androidx.room.RoomDatabase: void assertNotMainThread()>();

        virtualinvoke r0.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        $r2 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r3 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        $r4 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteDatabase: androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)>(r1);

        return $r4;
    }

    public void beginTransaction()
    {
        androidx.room.RoomDatabase r0;
        androidx.room.AutoCloser r1;
        androidx.room.RoomDatabase$beginTransaction$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.room.RoomDatabase;

        virtualinvoke r0.<androidx.room.RoomDatabase: void assertNotMainThread()>();

        r1 = r0.<androidx.room.RoomDatabase: androidx.room.AutoCloser autoCloser>;

        if r1 != null goto label1;

        specialinvoke r0.<androidx.room.RoomDatabase: void internalBeginTransaction()>();

        goto label2;

     label1:
        $r2 = new androidx.room.RoomDatabase$beginTransaction$1;

        specialinvoke $r2.<androidx.room.RoomDatabase$beginTransaction$1: void <init>(androidx.room.RoomDatabase)>(r0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        virtualinvoke r1.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r3);

     label2:
        return;
    }

    private final void internalBeginTransaction()
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r2;
        androidx.room.InvalidationTracker $r3;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.room.RoomDatabase;

        virtualinvoke r0.<androidx.room.RoomDatabase: void assertNotMainThread()>();

        $r2 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        r1 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        $r3 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r3.<androidx.room.InvalidationTracker: void syncTriggers$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        $z0 = interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isWriteAheadLoggingEnabled()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransactionNonExclusive()>();

        goto label2;

     label1:
        interfaceinvoke r1.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransaction()>();

     label2:
        return;
    }

    public void endTransaction()
    {
        androidx.room.RoomDatabase r0;
        androidx.room.AutoCloser r1;
        androidx.room.RoomDatabase$endTransaction$1 $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: androidx.room.RoomDatabase;

        r1 = r0.<androidx.room.RoomDatabase: androidx.room.AutoCloser autoCloser>;

        if r1 != null goto label1;

        specialinvoke r0.<androidx.room.RoomDatabase: void internalEndTransaction()>();

        goto label2;

     label1:
        $r2 = new androidx.room.RoomDatabase$endTransaction$1;

        specialinvoke $r2.<androidx.room.RoomDatabase$endTransaction$1: void <init>(androidx.room.RoomDatabase)>(r0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        virtualinvoke r1.<androidx.room.AutoCloser: java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)>($r3);

     label2:
        return;
    }

    private final void internalEndTransaction()
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        boolean $z0;
        androidx.room.InvalidationTracker $r3;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>();

        $z0 = virtualinvoke r0.<androidx.room.RoomDatabase: boolean inTransaction()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r3.<androidx.room.InvalidationTracker: void refreshVersionsAsync()>();

     label1:
        return;
    }

    public void setTransactionSuccessful()
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: void setTransactionSuccessful()>();

        return;
    }

    public void runInTransaction(java.lang.Runnable)
    {
        androidx.room.RoomDatabase r0;
        java.lang.Runnable r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "body");

        virtualinvoke r0.<androidx.room.RoomDatabase: void beginTransaction()>();

     label1:
        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        virtualinvoke r0.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label2:
        virtualinvoke r0.<androidx.room.RoomDatabase: void endTransaction()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        virtualinvoke r0.<androidx.room.RoomDatabase: void endTransaction()>();

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object runInTransaction(java.util.concurrent.Callable)
    {
        androidx.room.RoomDatabase r0;
        java.util.concurrent.Callable r1;
        java.lang.Throwable r2, $r3;
        java.lang.Object r4, r5;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: java.util.concurrent.Callable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "body");

        virtualinvoke r0.<androidx.room.RoomDatabase: void beginTransaction()>();

     label1:
        r4 = interfaceinvoke r1.<java.util.concurrent.Callable: java.lang.Object call()>();

        virtualinvoke r0.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

        r5 = r4;

     label2:
        virtualinvoke r0.<androidx.room.RoomDatabase: void endTransaction()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        virtualinvoke r0.<androidx.room.RoomDatabase: void endTransaction()>();

        throw r2;

     label5:
        return r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void internalInitInvalidationTracker(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        androidx.room.InvalidationTracker $r2;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r2 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        virtualinvoke $r2.<androidx.room.InvalidationTracker: void internalInit$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)>(r1);

        return;
    }

    public boolean inTransaction()
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        boolean $z0;

        r0 := @this: androidx.room.RoomDatabase;

        $r1 = virtualinvoke r0.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        $z0 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: boolean inTransaction()>();

        return $z0;
    }

    public final android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        android.database.Cursor $r2;

        r0 := @this: androidx.room.RoomDatabase;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteQuery;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "query");

        $r2 = staticinvoke <androidx.room.RoomDatabase: android.database.Cursor query$default(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,android.os.CancellationSignal,int,java.lang.Object)>(r0, r1, null, 2, null);

        return $r2;
    }

    public static final void access$internalBeginTransaction(androidx.room.RoomDatabase)
    {
        androidx.room.RoomDatabase $r0;

        $r0 := @parameter0: androidx.room.RoomDatabase;

        specialinvoke $r0.<androidx.room.RoomDatabase: void internalBeginTransaction()>();

        return;
    }

    public static final void access$internalEndTransaction(androidx.room.RoomDatabase)
    {
        androidx.room.RoomDatabase $r0;

        $r0 := @parameter0: androidx.room.RoomDatabase;

        specialinvoke $r0.<androidx.room.RoomDatabase: void internalEndTransaction()>();

        return;
    }

    static void <clinit>()
    {
        androidx.room.RoomDatabase$Companion $r0;

        $r0 = new androidx.room.RoomDatabase$Companion;

        specialinvoke $r0.<androidx.room.RoomDatabase$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.RoomDatabase: androidx.room.RoomDatabase$Companion Companion> = $r0;

        return;
    }

androidx.room.RoomDatabase$beginTransaction$1
<androidx.room.RoomDatabase$beginTransaction$1: androidx.room.RoomDatabase this$0>
    void <init>(androidx.room.RoomDatabase)
    {
        androidx.room.RoomDatabase$beginTransaction$1 r0;
        androidx.room.RoomDatabase $r1;

        r0 := @this: androidx.room.RoomDatabase$beginTransaction$1;

        $r1 := @parameter0: androidx.room.RoomDatabase;

        r0.<androidx.room.RoomDatabase$beginTransaction$1: androidx.room.RoomDatabase this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomDatabase$beginTransaction$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        androidx.room.RoomDatabase $r2;

        r0 := @this: androidx.room.RoomDatabase$beginTransaction$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.room.RoomDatabase$beginTransaction$1: androidx.room.RoomDatabase this$0>;

        staticinvoke <androidx.room.RoomDatabase: void access$internalBeginTransaction(androidx.room.RoomDatabase)>($r2);

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.RoomDatabase$beginTransaction$1 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.RoomDatabase$beginTransaction$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.RoomDatabase$beginTransaction$1: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.RoomDatabase$Builder
<androidx.room.RoomDatabase$Builder: android.content.Context context>
<androidx.room.RoomDatabase$Builder: java.lang.Class klass>
<androidx.room.RoomDatabase$Builder: java.lang.String name>
<androidx.room.RoomDatabase$Builder: java.util.List callbacks>
<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$PrepackagedDatabaseCallback prepackagedDatabaseCallback>
<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$QueryCallback queryCallback>
<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryCallbackExecutor>
<androidx.room.RoomDatabase$Builder: java.util.List typeConverters>
<androidx.room.RoomDatabase$Builder: java.util.List autoMigrationSpecs>
<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor>
<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor transactionExecutor>
<androidx.room.RoomDatabase$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory factory>
<androidx.room.RoomDatabase$Builder: boolean allowMainThreadQueries>
<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$JournalMode journalMode>
<androidx.room.RoomDatabase$Builder: android.content.Intent multiInstanceInvalidationIntent>
<androidx.room.RoomDatabase$Builder: boolean requireMigration>
<androidx.room.RoomDatabase$Builder: boolean allowDestructiveMigrationOnDowngrade>
<androidx.room.RoomDatabase$Builder: long autoCloseTimeout>
<androidx.room.RoomDatabase$Builder: java.util.concurrent.TimeUnit autoCloseTimeUnit>
<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$MigrationContainer migrationContainer>
<androidx.room.RoomDatabase$Builder: java.util.Set migrationsNotRequiredFrom>
<androidx.room.RoomDatabase$Builder: java.util.Set migrationStartAndEndVersions>
<androidx.room.RoomDatabase$Builder: java.lang.String copyFromAssetPath>
<androidx.room.RoomDatabase$Builder: java.io.File copyFromFile>
<androidx.room.RoomDatabase$Builder: java.util.concurrent.Callable copyFromInputStream>
    public void <init>(android.content.Context, java.lang.Class, java.lang.String)
    {
        androidx.room.RoomDatabase$Builder r0;
        android.content.Context r1;
        java.lang.Class r2;
        java.lang.String r3;
        java.util.ArrayList $r4, $r6, $r8;
        java.util.List $r5, $r7, $r9;
        androidx.room.RoomDatabase$JournalMode $r10;
        androidx.room.RoomDatabase$MigrationContainer $r11;
        java.util.LinkedHashSet $r12;
        java.util.Set $r13;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "klass");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.RoomDatabase$Builder: android.content.Context context> = r1;

        r0.<androidx.room.RoomDatabase$Builder: java.lang.Class klass> = r2;

        r0.<androidx.room.RoomDatabase$Builder: java.lang.String name> = r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = (java.util.List) $r4;

        r0.<androidx.room.RoomDatabase$Builder: java.util.List callbacks> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = (java.util.List) $r6;

        r0.<androidx.room.RoomDatabase$Builder: java.util.List typeConverters> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = (java.util.List) $r8;

        r0.<androidx.room.RoomDatabase$Builder: java.util.List autoMigrationSpecs> = $r9;

        $r10 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode AUTOMATIC>;

        r0.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$JournalMode journalMode> = $r10;

        r0.<androidx.room.RoomDatabase$Builder: boolean requireMigration> = 1;

        r0.<androidx.room.RoomDatabase$Builder: long autoCloseTimeout> = -1L;

        $r11 = new androidx.room.RoomDatabase$MigrationContainer;

        specialinvoke $r11.<androidx.room.RoomDatabase$MigrationContainer: void <init>()>();

        r0.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$MigrationContainer migrationContainer> = $r11;

        $r12 = new java.util.LinkedHashSet;

        specialinvoke $r12.<java.util.LinkedHashSet: void <init>()>();

        $r13 = (java.util.Set) $r12;

        r0.<androidx.room.RoomDatabase$Builder: java.util.Set migrationsNotRequiredFrom> = $r13;

        return;
    }

    public androidx.room.RoomDatabase$Builder createFromAsset(java.lang.String)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r4;
        java.lang.String r1;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "databaseFilePath");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r3.<androidx.room.RoomDatabase$Builder: java.lang.String copyFromAssetPath> = r1;

        $r4 = (androidx.room.RoomDatabase$Builder) r2;

        return $r4;
    }

    public androidx.room.RoomDatabase$Builder createFromAsset(java.lang.String, androidx.room.RoomDatabase$PrepackagedDatabaseCallback)
    {
        androidx.room.RoomDatabase$Builder r0, r3, $r4, $r5;
        java.lang.String r1;
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback r2;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.room.RoomDatabase$PrepackagedDatabaseCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "databaseFilePath");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "callback");

        r3 = r0;

        $r4 = (androidx.room.RoomDatabase$Builder) r3;

        $r4.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$PrepackagedDatabaseCallback prepackagedDatabaseCallback> = r2;

        $r4.<androidx.room.RoomDatabase$Builder: java.lang.String copyFromAssetPath> = r1;

        $r5 = (androidx.room.RoomDatabase$Builder) r3;

        return $r5;
    }

    public androidx.room.RoomDatabase$Builder createFromFile(java.io.File)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r4;
        java.io.File r1;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "databaseFile");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r3.<androidx.room.RoomDatabase$Builder: java.io.File copyFromFile> = r1;

        $r4 = (androidx.room.RoomDatabase$Builder) r2;

        return $r4;
    }

    public androidx.room.RoomDatabase$Builder createFromFile(java.io.File, androidx.room.RoomDatabase$PrepackagedDatabaseCallback)
    {
        androidx.room.RoomDatabase$Builder r0, r3, $r4, $r5;
        java.io.File r1;
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback r2;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: androidx.room.RoomDatabase$PrepackagedDatabaseCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "databaseFile");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "callback");

        r3 = r0;

        $r4 = (androidx.room.RoomDatabase$Builder) r3;

        $r4.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$PrepackagedDatabaseCallback prepackagedDatabaseCallback> = r2;

        $r4.<androidx.room.RoomDatabase$Builder: java.io.File copyFromFile> = r1;

        $r5 = (androidx.room.RoomDatabase$Builder) r3;

        return $r5;
    }

    public androidx.room.RoomDatabase$Builder createFromInputStream(java.util.concurrent.Callable)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r4;
        java.util.concurrent.Callable r1;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: java.util.concurrent.Callable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "inputStreamCallable");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r3.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Callable copyFromInputStream> = r1;

        $r4 = (androidx.room.RoomDatabase$Builder) r2;

        return $r4;
    }

    public androidx.room.RoomDatabase$Builder createFromInputStream(java.util.concurrent.Callable, androidx.room.RoomDatabase$PrepackagedDatabaseCallback)
    {
        androidx.room.RoomDatabase$Builder r0, r3, $r4, $r5;
        java.util.concurrent.Callable r1;
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback r2;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: androidx.room.RoomDatabase$PrepackagedDatabaseCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "inputStreamCallable");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "callback");

        r3 = r0;

        $r4 = (androidx.room.RoomDatabase$Builder) r3;

        $r4.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$PrepackagedDatabaseCallback prepackagedDatabaseCallback> = r2;

        $r4.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Callable copyFromInputStream> = r1;

        $r5 = (androidx.room.RoomDatabase$Builder) r3;

        return $r5;
    }

    public androidx.room.RoomDatabase$Builder openHelperFactory(androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r4;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r1;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r3.<androidx.room.RoomDatabase$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory factory> = r1;

        $r4 = (androidx.room.RoomDatabase$Builder) r2;

        return $r4;
    }

    public transient androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r9;
        androidx.room.migration.Migration[] r1, $r8;
        int i0, $i1, $i2, $i3, i4;
        androidx.room.migration.Migration r4;
        java.util.Set $r5, $r10, $r12, $r15;
        androidx.room.RoomDatabase$MigrationContainer $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r11, $r13;
        java.util.HashSet $r14;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: androidx.room.migration.Migration[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "migrations");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r5 = $r3.<androidx.room.RoomDatabase$Builder: java.util.Set migrationStartAndEndVersions>;

        if $r5 != null goto label1;

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        $r15 = (java.util.Set) $r14;

        $r3.<androidx.room.RoomDatabase$Builder: java.util.Set migrationStartAndEndVersions> = $r15;

     label1:
        i4 = 0;

        i0 = lengthof r1;

     label2:
        if i4 >= i0 goto label3;

        r4 = r1[i4];

        $r10 = $r3.<androidx.room.RoomDatabase$Builder: java.util.Set migrationStartAndEndVersions>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r10);

        $i2 = r4.<androidx.room.migration.Migration: int startVersion>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r11);

        $r12 = $r3.<androidx.room.RoomDatabase$Builder: java.util.Set migrationStartAndEndVersions>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r12);

        $i3 = r4.<androidx.room.migration.Migration: int endVersion>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r13);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r6 = $r3.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$MigrationContainer migrationContainer>;

        $i1 = lengthof r1;

        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i1);

        $r8 = (androidx.room.migration.Migration[]) $r7;

        virtualinvoke $r6.<androidx.room.RoomDatabase$MigrationContainer: void addMigrations(androidx.room.migration.Migration[])>($r8);

        $r9 = (androidx.room.RoomDatabase$Builder) r2;

        return $r9;
    }

    public androidx.room.RoomDatabase$Builder addAutoMigrationSpec(androidx.room.migration.AutoMigrationSpec)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r5;
        androidx.room.migration.AutoMigrationSpec r1;
        java.util.List $r4;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: androidx.room.migration.AutoMigrationSpec;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "autoMigrationSpec");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r4 = $r3.<androidx.room.RoomDatabase$Builder: java.util.List autoMigrationSpecs>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = (androidx.room.RoomDatabase$Builder) r2;

        return $r5;
    }

    public androidx.room.RoomDatabase$Builder allowMainThreadQueries()
    {
        androidx.room.RoomDatabase$Builder r0, r1, $r2, $r3;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 = r0;

        $r2 = (androidx.room.RoomDatabase$Builder) r1;

        $r2.<androidx.room.RoomDatabase$Builder: boolean allowMainThreadQueries> = 1;

        $r3 = (androidx.room.RoomDatabase$Builder) r1;

        return $r3;
    }

    public androidx.room.RoomDatabase$Builder setJournalMode(androidx.room.RoomDatabase$JournalMode)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r4;
        androidx.room.RoomDatabase$JournalMode r1;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: androidx.room.RoomDatabase$JournalMode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "journalMode");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r3.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$JournalMode journalMode> = r1;

        $r4 = (androidx.room.RoomDatabase$Builder) r2;

        return $r4;
    }

    public androidx.room.RoomDatabase$Builder setQueryExecutor(java.util.concurrent.Executor)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r4;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "executor");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r3.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor> = r1;

        $r4 = (androidx.room.RoomDatabase$Builder) r2;

        return $r4;
    }

    public androidx.room.RoomDatabase$Builder setTransactionExecutor(java.util.concurrent.Executor)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r4;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "executor");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r3.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor transactionExecutor> = r1;

        $r4 = (androidx.room.RoomDatabase$Builder) r2;

        return $r4;
    }

    public androidx.room.RoomDatabase$Builder enableMultiInstanceInvalidation()
    {
        androidx.room.RoomDatabase$Builder r0, r1, $r2, $r4;
        java.lang.String $r3;
        android.content.Context $r5;
        android.content.Intent $r7;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 = r0;

        $r2 = (androidx.room.RoomDatabase$Builder) r1;

        $r3 = $r2.<androidx.room.RoomDatabase$Builder: java.lang.String name>;

        if $r3 == null goto label1;

        $r7 = new android.content.Intent;

        $r5 = $r2.<androidx.room.RoomDatabase$Builder: android.content.Context context>;

        specialinvoke $r7.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r5, class "Landroidx/room/MultiInstanceInvalidationService;");

        goto label2;

     label1:
        $r7 = (android.content.Intent) null;

     label2:
        $r2.<androidx.room.RoomDatabase$Builder: android.content.Intent multiInstanceInvalidationIntent> = $r7;

        $r4 = (androidx.room.RoomDatabase$Builder) r1;

        return $r4;
    }

    public androidx.room.RoomDatabase$Builder setMultiInstanceInvalidationServiceIntent(android.content.Intent)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r5;
        android.content.Intent r1, $r7;
        java.lang.String $r4;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: android.content.Intent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "invalidationServiceIntent");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r4 = $r3.<androidx.room.RoomDatabase$Builder: java.lang.String name>;

        if $r4 == null goto label1;

        $r7 = r1;

        goto label2;

     label1:
        $r7 = null;

     label2:
        $r3.<androidx.room.RoomDatabase$Builder: android.content.Intent multiInstanceInvalidationIntent> = $r7;

        $r5 = (androidx.room.RoomDatabase$Builder) r2;

        return $r5;
    }

    public androidx.room.RoomDatabase$Builder fallbackToDestructiveMigration()
    {
        androidx.room.RoomDatabase$Builder r0, r1, $r2, $r3;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 = r0;

        $r2 = (androidx.room.RoomDatabase$Builder) r1;

        $r2.<androidx.room.RoomDatabase$Builder: boolean requireMigration> = 0;

        $r2.<androidx.room.RoomDatabase$Builder: boolean allowDestructiveMigrationOnDowngrade> = 1;

        $r3 = (androidx.room.RoomDatabase$Builder) r1;

        return $r3;
    }

    public androidx.room.RoomDatabase$Builder fallbackToDestructiveMigrationOnDowngrade()
    {
        androidx.room.RoomDatabase$Builder r0, r1, $r2, $r3;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 = r0;

        $r2 = (androidx.room.RoomDatabase$Builder) r1;

        $r2.<androidx.room.RoomDatabase$Builder: boolean requireMigration> = 1;

        $r2.<androidx.room.RoomDatabase$Builder: boolean allowDestructiveMigrationOnDowngrade> = 1;

        $r3 = (androidx.room.RoomDatabase$Builder) r1;

        return $r3;
    }

    public transient androidx.room.RoomDatabase$Builder fallbackToDestructiveMigrationFrom(int[])
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r4;
        int[] r1;
        int i0, i1, i2;
        java.util.Set $r5;
        java.lang.Integer $r6;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "startVersions");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        i2 = 0;

        i0 = lengthof r1;

     label1:
        if i2 >= i0 goto label2;

        i1 = r1[i2];

        $r5 = $r3.<androidx.room.RoomDatabase$Builder: java.util.Set migrationsNotRequiredFrom>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = (androidx.room.RoomDatabase$Builder) r2;

        return $r4;
    }

    public androidx.room.RoomDatabase$Builder addCallback(androidx.room.RoomDatabase$Callback)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r5;
        androidx.room.RoomDatabase$Callback r1;
        java.util.List $r4;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: androidx.room.RoomDatabase$Callback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r4 = $r3.<androidx.room.RoomDatabase$Builder: java.util.List callbacks>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = (androidx.room.RoomDatabase$Builder) r2;

        return $r5;
    }

    public androidx.room.RoomDatabase$Builder setQueryCallback(androidx.room.RoomDatabase$QueryCallback, java.util.concurrent.Executor)
    {
        androidx.room.RoomDatabase$Builder r0, r3, $r4, $r5;
        androidx.room.RoomDatabase$QueryCallback r1;
        java.util.concurrent.Executor r2;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: androidx.room.RoomDatabase$QueryCallback;

        r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "queryCallback");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "executor");

        r3 = r0;

        $r4 = (androidx.room.RoomDatabase$Builder) r3;

        $r4.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$QueryCallback queryCallback> = r1;

        $r4.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryCallbackExecutor> = r2;

        $r5 = (androidx.room.RoomDatabase$Builder) r3;

        return $r5;
    }

    public androidx.room.RoomDatabase$Builder addTypeConverter(java.lang.Object)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r5;
        java.lang.Object r1;
        java.util.List $r4;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "typeConverter");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $r4 = $r3.<androidx.room.RoomDatabase$Builder: java.util.List typeConverters>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = (androidx.room.RoomDatabase$Builder) r2;

        return $r5;
    }

    public androidx.room.RoomDatabase$Builder setAutoCloseTimeout(long, java.util.concurrent.TimeUnit)
    {
        androidx.room.RoomDatabase$Builder r0, r2, $r3, $r4;
        long l0;
        java.util.concurrent.TimeUnit r1;
        byte $b1;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, $r7;
        boolean $z1;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "autoCloseTimeUnit");

        r2 = r0;

        $r3 = (androidx.room.RoomDatabase$Builder) r2;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r7 = "autoCloseTimeout must be >= 0";

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label3:
        $r3.<androidx.room.RoomDatabase$Builder: long autoCloseTimeout> = l0;

        $r3.<androidx.room.RoomDatabase$Builder: java.util.concurrent.TimeUnit autoCloseTimeUnit> = r1;

        $r4 = (androidx.room.RoomDatabase$Builder) r2;

        return $r4;
    }

    public androidx.room.RoomDatabase build()
    {
        androidx.room.RoomDatabase$Builder r0;
        int i0, $i3, i5;
        java.util.concurrent.Executor $r1, $r2, $r3, $r14, $r15, $r31, $r56, $r75, $r76, $r77, $r78, $r79, $r80;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory $r4, $r84, r85, r86, $r91, r92, $r96, r97, $r101, r102;
        androidx.room.RoomDatabase$QueryCallback $r5, $r32;
        androidx.room.DatabaseConfiguration $r6, r105;
        android.content.Context $r7, $r9;
        androidx.room.RoomDatabase$JournalMode $r8, $r13;
        java.lang.String $r10, $r21, $r27, $r29, $r34, $r36, $r38, $r39, $r40, $r46, $r48, $r50, $r53, $r59, $r61, $r63, $r74, $r83, $r87, r88, r89, $r93, $r94, $r95, r98, $r99, $r100, $r103, $r104;
        androidx.room.RoomDatabase$MigrationContainer $r11;
        java.util.List $r12, $r16, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z11;
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback $r18;
        java.util.concurrent.Callable $r19, $r42, $r44, $r52;
        java.io.File $r20, $r41, $r45, $r51;
        java.util.Set $r22, $r65, $r68, $r81;
        android.content.Intent $r23;
        java.lang.Class $r24;
        java.lang.Object $r25, $r66;
        java.lang.IllegalArgumentException $r26, $r28, $r33, $r35, $r37, $r47, $r49, $r58, $r60, $r62, $r73;
        androidx.room.QueryInterceptorOpenHelperFactory $r30;
        long $l1, $l4;
        byte $b2, $b6, b7, $b8, $b9, $b10, b11;
        androidx.room.SQLiteCopyOpenHelperFactory $r43;
        androidx.room.AutoCloser $r54, r90;
        java.util.concurrent.TimeUnit $r55;
        androidx.room.AutoClosingRoomOpenHelperFactory $r57;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory $r64;
        java.lang.Number $r67;
        java.lang.Integer $r69;
        java.lang.StringBuilder $r70, $r71, $r72;
        java.util.Iterator r82;
        androidx.room.RoomDatabase r106;

        r0 := @this: androidx.room.RoomDatabase$Builder;

        $r1 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor>;

        if $r1 != null goto label01;

        $r78 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor transactionExecutor>;

        if $r78 != null goto label01;

        $r79 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor getIOThreadExecutor()>();

        r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor transactionExecutor> = $r79;

        $r80 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor transactionExecutor>;

        r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor> = $r80;

        goto label03;

     label01:
        $r2 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor>;

        if $r2 == null goto label02;

        $r76 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor transactionExecutor>;

        if $r76 != null goto label02;

        $r77 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor>;

        r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor transactionExecutor> = $r77;

        goto label03;

     label02:
        $r3 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor>;

        if $r3 != null goto label03;

        $r75 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor transactionExecutor>;

        r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor> = $r75;

     label03:
        $r81 = r0.<androidx.room.RoomDatabase$Builder: java.util.Set migrationStartAndEndVersions>;

        if $r81 == null goto label07;

        $r65 = r0.<androidx.room.RoomDatabase$Builder: java.util.Set migrationStartAndEndVersions>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r65);

        r82 = interfaceinvoke $r65.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r82.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r66 = interfaceinvoke r82.<java.util.Iterator: java.lang.Object next()>();

        $r67 = (java.lang.Number) $r66;

        i5 = virtualinvoke $r67.<java.lang.Number: int intValue()>();

        $r68 = r0.<androidx.room.RoomDatabase$Builder: java.util.Set migrationsNotRequiredFrom>;

        $r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $z4 = interfaceinvoke $r68.<java.util.Set: boolean contains(java.lang.Object)>($r69);

        if $z4 != 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        if $z5 != 0 goto label04;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inconsistency detected. A Migration was supplied to addMigration(Migration... migrations) that has a start or end version equal to a start version supplied to fallbackToDestructiveMigrationFrom(int... startVersions). Start version: ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r83 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        $r73 = new java.lang.IllegalArgumentException;

        $r74 = virtualinvoke $r83.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r73.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r74);

        throw $r73;

     label07:
        $r4 = r0.<androidx.room.RoomDatabase$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory factory>;

        if $r4 != null goto label08;

        $r64 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory;

        specialinvoke $r64.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory: void <init>()>();

        $r84 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Factory) $r64;

        goto label09;

     label08:
        $r84 = r0.<androidx.room.RoomDatabase$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory factory>;

     label09:
        r85 = $r84;

        if r85 == null goto label28;

        r86 = r85;

        $l1 = r0.<androidx.room.RoomDatabase$Builder: long autoCloseTimeout>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label13;

        $r53 = r0.<androidx.room.RoomDatabase$Builder: java.lang.String name>;

        if $r53 != null goto label10;

        $r87 = "Cannot create auto-closing database for an in-memory database.";

        $r62 = new java.lang.IllegalArgumentException;

        $r63 = virtualinvoke $r87.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r62.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r63);

        throw $r62;

     label10:
        $r54 = new androidx.room.AutoCloser;

        $l4 = r0.<androidx.room.RoomDatabase$Builder: long autoCloseTimeout>;

        $r55 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.TimeUnit autoCloseTimeUnit>;

        if $r55 != null goto label11;

        r88 = "Required value was null.";

        $r60 = new java.lang.IllegalArgumentException;

        $r61 = virtualinvoke r88.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r60.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r61);

        throw $r60;

     label11:
        $r56 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor>;

        if $r56 != null goto label12;

        r89 = "Required value was null.";

        $r58 = new java.lang.IllegalArgumentException;

        $r59 = virtualinvoke r89.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r58.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r59);

        throw $r58;

     label12:
        specialinvoke $r54.<androidx.room.AutoCloser: void <init>(long,java.util.concurrent.TimeUnit,java.util.concurrent.Executor)>($l4, $r55, $r56);

        r90 = $r54;

        $r57 = new androidx.room.AutoClosingRoomOpenHelperFactory;

        specialinvoke $r57.<androidx.room.AutoClosingRoomOpenHelperFactory: void <init>(androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.AutoCloser)>(r86, r90);

        $r91 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Factory) $r57;

        goto label14;

     label13:
        $r91 = r86;

     label14:
        r92 = $r91;

        $r39 = r0.<androidx.room.RoomDatabase$Builder: java.lang.String copyFromAssetPath>;

        if $r39 != null goto label15;

        $r51 = r0.<androidx.room.RoomDatabase$Builder: java.io.File copyFromFile>;

        if $r51 != null goto label15;

        $r52 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Callable copyFromInputStream>;

        if $r52 == null goto label26;

     label15:
        $r93 = r0.<androidx.room.RoomDatabase$Builder: java.lang.String name>;

        if $r93 != null goto label16;

        $r94 = "Cannot create from asset or file for an in-memory database.";

        $r49 = new java.lang.IllegalArgumentException;

        $r50 = virtualinvoke $r94.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r50);

        throw $r49;

     label16:
        $r40 = r0.<androidx.room.RoomDatabase$Builder: java.lang.String copyFromAssetPath>;

        if $r40 != null goto label17;

        $b6 = 0;

        goto label18;

     label17:
        $b6 = 1;

     label18:
        b7 = $b6;

        $r41 = r0.<androidx.room.RoomDatabase$Builder: java.io.File copyFromFile>;

        if $r41 != null goto label19;

        $b8 = 0;

        goto label20;

     label19:
        $b8 = 1;

     label20:
        $b9 = $b8;

        $r42 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Callable copyFromInputStream>;

        if $r42 != null goto label21;

        $b10 = 0;

        goto label22;

     label21:
        $b10 = 1;

     label22:
        b11 = $b10;

        $i3 = b7 + $b9;

        i0 = $i3 + b11;

        if i0 != 1 goto label23;

        $z11 = 1;

        goto label24;

     label23:
        $z11 = 0;

     label24:
        if $z11 != 0 goto label25;

        $r95 = "More than one of createFromAsset(), createFromInputStream(), and createFromFile() were called on this Builder, but the database can only be created using one of the three configurations.";

        $r47 = new java.lang.IllegalArgumentException;

        $r48 = virtualinvoke $r95.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r48);

        throw $r47;

     label25:
        $r43 = new androidx.room.SQLiteCopyOpenHelperFactory;

        $r46 = r0.<androidx.room.RoomDatabase$Builder: java.lang.String copyFromAssetPath>;

        $r45 = r0.<androidx.room.RoomDatabase$Builder: java.io.File copyFromFile>;

        $r44 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Callable copyFromInputStream>;

        specialinvoke $r43.<androidx.room.SQLiteCopyOpenHelperFactory: void <init>(java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)>($r46, $r45, $r44, r92);

        $r96 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Factory) $r43;

        goto label27;

     label26:
        $r96 = r92;

     label27:
        goto label29;

     label28:
        $r96 = null;

     label29:
        r97 = $r96;

        if r97 != null goto label30;

        r98 = "Required value was null.";

        $r37 = new java.lang.IllegalArgumentException;

        $r38 = virtualinvoke r98.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r37;

     label30:
        $r5 = r0.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        if $r5 == null goto label33;

        $r30 = new androidx.room.QueryInterceptorOpenHelperFactory;

        $r31 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryCallbackExecutor>;

        if $r31 != null goto label31;

        $r99 = "Required value was null.";

        $r35 = new java.lang.IllegalArgumentException;

        $r36 = virtualinvoke $r99.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r35;

     label31:
        $r32 = r0.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        if $r32 != null goto label32;

        $r100 = "Required value was null.";

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = virtualinvoke $r100.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label32:
        specialinvoke $r30.<androidx.room.QueryInterceptorOpenHelperFactory: void <init>(androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,java.util.concurrent.Executor,androidx.room.RoomDatabase$QueryCallback)>(r97, $r31, $r32);

        $r101 = (androidx.sqlite.db.SupportSQLiteOpenHelper$Factory) $r30;

        goto label34;

     label33:
        $r101 = r97;

     label34:
        r102 = $r101;

        $r6 = new androidx.room.DatabaseConfiguration;

        $r9 = r0.<androidx.room.RoomDatabase$Builder: android.content.Context context>;

        $r10 = r0.<androidx.room.RoomDatabase$Builder: java.lang.String name>;

        $r11 = r0.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$MigrationContainer migrationContainer>;

        $r12 = r0.<androidx.room.RoomDatabase$Builder: java.util.List callbacks>;

        $z0 = r0.<androidx.room.RoomDatabase$Builder: boolean allowMainThreadQueries>;

        $r8 = r0.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$JournalMode journalMode>;

        $r7 = r0.<androidx.room.RoomDatabase$Builder: android.content.Context context>;

        $r13 = virtualinvoke $r8.<androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode resolve$room_runtime_release(android.content.Context)>($r7);

        $r14 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor queryExecutor>;

        if $r14 != null goto label35;

        $r103 = "Required value was null.";

        $r28 = new java.lang.IllegalArgumentException;

        $r29 = virtualinvoke $r103.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label35:
        $r15 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Executor transactionExecutor>;

        if $r15 != null goto label36;

        $r104 = "Required value was null.";

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = virtualinvoke $r104.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r26;

     label36:
        $r23 = r0.<androidx.room.RoomDatabase$Builder: android.content.Intent multiInstanceInvalidationIntent>;

        $z2 = r0.<androidx.room.RoomDatabase$Builder: boolean requireMigration>;

        $z1 = r0.<androidx.room.RoomDatabase$Builder: boolean allowDestructiveMigrationOnDowngrade>;

        $r22 = r0.<androidx.room.RoomDatabase$Builder: java.util.Set migrationsNotRequiredFrom>;

        $r21 = r0.<androidx.room.RoomDatabase$Builder: java.lang.String copyFromAssetPath>;

        $r20 = r0.<androidx.room.RoomDatabase$Builder: java.io.File copyFromFile>;

        $r19 = r0.<androidx.room.RoomDatabase$Builder: java.util.concurrent.Callable copyFromInputStream>;

        $r18 = r0.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$PrepackagedDatabaseCallback prepackagedDatabaseCallback>;

        $r17 = r0.<androidx.room.RoomDatabase$Builder: java.util.List typeConverters>;

        $r16 = r0.<androidx.room.RoomDatabase$Builder: java.util.List autoMigrationSpecs>;

        specialinvoke $r6.<androidx.room.DatabaseConfiguration: void <init>(android.content.Context,java.lang.String,androidx.sqlite.db.SupportSQLiteOpenHelper$Factory,androidx.room.RoomDatabase$MigrationContainer,java.util.List,boolean,androidx.room.RoomDatabase$JournalMode,java.util.concurrent.Executor,java.util.concurrent.Executor,android.content.Intent,boolean,boolean,java.util.Set,java.lang.String,java.io.File,java.util.concurrent.Callable,androidx.room.RoomDatabase$PrepackagedDatabaseCallback,java.util.List,java.util.List)>($r9, $r10, r102, $r11, $r12, $z0, $r13, $r14, $r15, $r23, $z2, $z1, $r22, $r21, $r20, $r19, $r18, $r17, $r16);

        r105 = $r6;

        $r24 = r0.<androidx.room.RoomDatabase$Builder: java.lang.Class klass>;

        $r25 = staticinvoke <androidx.room.Room: java.lang.Object getGeneratedImplementation(java.lang.Class,java.lang.String)>($r24, "_Impl");

        r106 = (androidx.room.RoomDatabase) $r25;

        virtualinvoke r106.<androidx.room.RoomDatabase: void init(androidx.room.DatabaseConfiguration)>(r105);

        return r106;
    }

androidx.room.RoomDatabase$Callback
    public void <init>()
    {
        androidx.room.RoomDatabase$Callback r0;

        r0 := @this: androidx.room.RoomDatabase$Callback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onCreate(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomDatabase$Callback r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.RoomDatabase$Callback;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        return;
    }

    public void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomDatabase$Callback r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.RoomDatabase$Callback;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        return;
    }

    public void onDestructiveMigration(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomDatabase$Callback r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.RoomDatabase$Callback;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        return;
    }

androidx.room.RoomDatabase$Companion
    private void <init>()
    {
        androidx.room.RoomDatabase$Companion r0;

        r0 := @this: androidx.room.RoomDatabase$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.RoomDatabase$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.RoomDatabase$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.RoomDatabase$Companion: void <init>()>();

        return;
    }

androidx.room.RoomDatabase$endTransaction$1
<androidx.room.RoomDatabase$endTransaction$1: androidx.room.RoomDatabase this$0>
    void <init>(androidx.room.RoomDatabase)
    {
        androidx.room.RoomDatabase$endTransaction$1 r0;
        androidx.room.RoomDatabase $r1;

        r0 := @this: androidx.room.RoomDatabase$endTransaction$1;

        $r1 := @parameter0: androidx.room.RoomDatabase;

        r0.<androidx.room.RoomDatabase$endTransaction$1: androidx.room.RoomDatabase this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomDatabase$endTransaction$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        androidx.room.RoomDatabase $r2;

        r0 := @this: androidx.room.RoomDatabase$endTransaction$1;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.room.RoomDatabase$endTransaction$1: androidx.room.RoomDatabase this$0>;

        staticinvoke <androidx.room.RoomDatabase: void access$internalEndTransaction(androidx.room.RoomDatabase)>($r2);

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.RoomDatabase$endTransaction$1 r0;
        java.lang.Object r1, $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;

        r0 := @this: androidx.room.RoomDatabase$endTransaction$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.sqlite.db.SupportSQLiteDatabase) r1;

        $r3 = virtualinvoke r0.<androidx.room.RoomDatabase$endTransaction$1: java.lang.Object invoke(androidx.sqlite.db.SupportSQLiteDatabase)>($r2);

        return $r3;
    }

androidx.room.RoomDatabase$JournalMode
<androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode AUTOMATIC>
<androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode TRUNCATE>
<androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode WRITE_AHEAD_LOGGING>
<androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.room.RoomDatabase$JournalMode r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.room.RoomDatabase$JournalMode;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public final androidx.room.RoomDatabase$JournalMode resolve$room_runtime_release(android.content.Context)
    {
        androidx.room.RoomDatabase$JournalMode r0, $r3, $r4, $r6;
        android.content.Context r1;
        android.app.ActivityManager r2;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: androidx.room.RoomDatabase$JournalMode;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        $r3 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode AUTOMATIC>;

        if r0 == $r3 goto label1;

        return r0;

     label1:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label2;

        $r5 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type android.app.ActivityManager");

        r2 = (android.app.ActivityManager) $r5;

        $z0 = specialinvoke r0.<androidx.room.RoomDatabase$JournalMode: boolean isLowRamDevice(android.app.ActivityManager)>(r2);

        if $z0 != 0 goto label2;

        $r6 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode WRITE_AHEAD_LOGGING>;

        return $r6;

     label2:
        $r4 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode TRUNCATE>;

        return $r4;
    }

    private final boolean isLowRamDevice(android.app.ActivityManager)
    {
        androidx.room.RoomDatabase$JournalMode r0;
        android.app.ActivityManager r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.room.RoomDatabase$JournalMode;

        r1 := @parameter0: android.app.ActivityManager;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label1;

        $z0 = staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api19Impl: boolean isLowRamDevice(android.app.ActivityManager)>(r1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static androidx.room.RoomDatabase$JournalMode[] values()
    {
        androidx.room.RoomDatabase$JournalMode[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.room.RoomDatabase$JournalMode[]) $r1;

        return $r2;
    }

    public static androidx.room.RoomDatabase$JournalMode valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.room.RoomDatabase$JournalMode $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/room/RoomDatabase$JournalMode;", r0);

        $r2 = (androidx.room.RoomDatabase$JournalMode) $r1;

        return $r2;
    }

    private static final androidx.room.RoomDatabase$JournalMode[] $values()
    {
        androidx.room.RoomDatabase$JournalMode[] r0;
        androidx.room.RoomDatabase$JournalMode $r1, $r2, $r3;

        r0 = newarray (androidx.room.RoomDatabase$JournalMode)[3];

        $r1 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode AUTOMATIC>;

        r0[0] = $r1;

        $r2 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode TRUNCATE>;

        r0[1] = $r2;

        $r3 = <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode WRITE_AHEAD_LOGGING>;

        r0[2] = $r3;

        return r0;
    }

    static void <clinit>()
    {
        androidx.room.RoomDatabase$JournalMode $r0, $r1, $r2;
        androidx.room.RoomDatabase$JournalMode[] $r3;

        $r0 = new androidx.room.RoomDatabase$JournalMode;

        specialinvoke $r0.<androidx.room.RoomDatabase$JournalMode: void <init>(java.lang.String,int)>("AUTOMATIC", 0);

        <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode AUTOMATIC> = $r0;

        $r1 = new androidx.room.RoomDatabase$JournalMode;

        specialinvoke $r1.<androidx.room.RoomDatabase$JournalMode: void <init>(java.lang.String,int)>("TRUNCATE", 1);

        <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode TRUNCATE> = $r1;

        $r2 = new androidx.room.RoomDatabase$JournalMode;

        specialinvoke $r2.<androidx.room.RoomDatabase$JournalMode: void <init>(java.lang.String,int)>("WRITE_AHEAD_LOGGING", 2);

        <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode WRITE_AHEAD_LOGGING> = $r2;

        $r3 = staticinvoke <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode[] $values()>();

        <androidx.room.RoomDatabase$JournalMode: androidx.room.RoomDatabase$JournalMode[] $VALUES> = $r3;

        return;
    }

androidx.room.RoomDatabase$MigrationContainer
<androidx.room.RoomDatabase$MigrationContainer: java.util.Map migrations>
    public void <init>()
    {
        androidx.room.RoomDatabase$MigrationContainer r0;
        java.util.LinkedHashMap $r1;
        java.util.Map $r2;

        r0 := @this: androidx.room.RoomDatabase$MigrationContainer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r2 = (java.util.Map) $r1;

        r0.<androidx.room.RoomDatabase$MigrationContainer: java.util.Map migrations> = $r2;

        return;
    }

    public transient void addMigrations(androidx.room.migration.Migration[])
    {
        androidx.room.RoomDatabase$MigrationContainer r0;
        androidx.room.migration.Migration[] r1;
        int i0, i1;
        androidx.room.migration.Migration r3, r4;

        r0 := @this: androidx.room.RoomDatabase$MigrationContainer;

        r1 := @parameter0: androidx.room.migration.Migration[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "migrations");

        i1 = 0;

        i0 = lengthof r1;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        r4 = r3;

        specialinvoke r0.<androidx.room.RoomDatabase$MigrationContainer: void addMigration(androidx.room.migration.Migration)>(r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void addMigrations(java.util.List)
    {
        androidx.room.RoomDatabase$MigrationContainer r0;
        java.util.List r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        androidx.room.migration.Migration r5;
        boolean $z2;

        r0 := @this: androidx.room.RoomDatabase$MigrationContainer;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "migrations");

        $r2 = (java.lang.Iterable) r1;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.room.migration.Migration) r4;

        specialinvoke r0.<androidx.room.RoomDatabase$MigrationContainer: void addMigration(androidx.room.migration.Migration)>(r5);

        goto label1;

     label2:
        return;
    }

    private final void addMigration(androidx.room.migration.Migration)
    {
        androidx.room.RoomDatabase$MigrationContainer r0;
        androidx.room.migration.Migration r1;
        int i0, i1;
        java.util.TreeMap r2, $r16;
        java.util.Map $r3, $r5, $r6;
        java.lang.Object r4, $r11, $r20;
        boolean $z1;
        java.lang.StringBuilder $r8, $r9, $r12, $r13, $r14;
        java.lang.Integer $r10, r18, r21, r22;
        java.lang.String $r15;

        r0 := @this: androidx.room.RoomDatabase$MigrationContainer;

        r1 := @parameter0: androidx.room.migration.Migration;

        i0 = r1.<androidx.room.migration.Migration: int startVersion>;

        i1 = r1.<androidx.room.migration.Migration: int endVersion>;

        $r3 = r0.<androidx.room.RoomDatabase$MigrationContainer: java.util.Map migrations>;

        r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18);

        if r4 != null goto label1;

        $r16 = new java.util.TreeMap;

        specialinvoke $r16.<java.util.TreeMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r16);

        $r20 = $r16;

        goto label2;

     label1:
        $r20 = r4;

     label2:
        r2 = (java.util.TreeMap) $r20;

        r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5 = (java.util.Map) r2;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r21);

        if $z1 == 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overriding migration ");

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r11 = virtualinvoke r2.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ROOM", $r15);

     label3:
        r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = (java.util.Map) r2;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, r1);

        return;
    }

    public java.util.Map getMigrations()
    {
        androidx.room.RoomDatabase$MigrationContainer r0;
        java.util.Map $r1;

        r0 := @this: androidx.room.RoomDatabase$MigrationContainer;

        $r1 = r0.<androidx.room.RoomDatabase$MigrationContainer: java.util.Map migrations>;

        return $r1;
    }

    public java.util.List findMigrationPath(int, int)
    {
        androidx.room.RoomDatabase$MigrationContainer r0;
        int i0, i1;
        boolean z0, $z1;
        java.util.List r1, $r3, $r4;
        java.util.ArrayList $r2;

        r0 := @this: androidx.room.RoomDatabase$MigrationContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r4;

     label1:
        if i1 <= i0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.List) $r2;

        $r3 = specialinvoke r0.<androidx.room.RoomDatabase$MigrationContainer: java.util.List findUpMigrationPath(java.util.List,boolean,int,int)>(r1, z0, i0, i1);

        return $r3;
    }

    private final java.util.List findUpMigrationPath(java.util.List, boolean, int, int)
    {
        androidx.room.RoomDatabase$MigrationContainer r0;
        java.util.List r1;
        boolean z0, z1, $z3, z4, $z5, $z6;
        int i0, i1, i2, i3, i4, i5;
        java.util.TreeMap r2, $r9;
        java.util.Set r3, $r13;
        java.util.Iterator r4;
        java.lang.Integer r5, $r7;
        java.util.Map $r6;
        java.lang.Object $r8, $r10, $r11;
        java.util.NavigableSet $r12;

        r0 := @this: androidx.room.RoomDatabase$MigrationContainer;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i3 = i0;

     label01:
        if z0 == 0 goto label03;

        if i3 >= i1 goto label02;

        $z3 = 1;

        goto label05;

     label02:
        $z3 = 0;

        goto label05;

     label03:
        if i3 <= i1 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        if $z3 == 0 goto label17;

        $r6 = r0.<androidx.room.RoomDatabase$MigrationContainer: java.util.Map migrations>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (java.util.TreeMap) $r8;

        if $r9 != null goto label06;

        return null;

     label06:
        r2 = $r9;

        if z0 == 0 goto label07;

        $r12 = virtualinvoke r2.<java.util.TreeMap: java.util.NavigableSet descendingKeySet()>();

        $r13 = (java.util.Set) $r12;

        goto label08;

     label07:
        $r13 = virtualinvoke r2.<java.util.TreeMap: java.util.Set keySet()>();

     label08:
        r3 = $r13;

        z4 = 0;

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label16;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Integer) $r10;

        if z0 == 0 goto label12;

        i4 = i3 + 1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "targetVersion");

        i2 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if i4 > i2 goto label11;

        if i2 > i1 goto label10;

        $z6 = 1;

        goto label15;

     label10:
        $z6 = 0;

        goto label15;

     label11:
        $z6 = 0;

        goto label15;

     label12:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "targetVersion");

        i5 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if i1 > i5 goto label14;

        if i5 >= i3 goto label13;

        $z6 = 1;

        goto label15;

     label13:
        $z6 = 0;

        goto label15;

     label14:
        $z6 = 0;

     label15:
        z1 = $z6;

        if z1 == 0 goto label09;

        $r11 = virtualinvoke r2.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r11);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r11);

        i3 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        z4 = 1;

        goto label16;

     label16:
        if z4 != 0 goto label01;

        return null;

     label17:
        return r1;
    }

    public final boolean contains(int, int)
    {
        androidx.room.RoomDatabase$MigrationContainer r0;
        int i0, i1;
        java.util.Map r1, r2, $r7;
        java.lang.Integer $r3, $r4, $r6;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: androidx.room.RoomDatabase$MigrationContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<androidx.room.RoomDatabase$MigrationContainer: java.util.Map getMigrations()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (java.util.Map) $r5;

        if $r7 != null goto label1;

        $r7 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

     label1:
        r2 = $r7;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z1 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        return $z1;

     label2:
        return 0;
    }

androidx.room.RoomDatabase$PrepackagedDatabaseCallback
    public void <init>()
    {
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback r0;

        r0 := @this: androidx.room.RoomDatabase$PrepackagedDatabaseCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onOpenPrepackagedDatabase(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.RoomDatabase$PrepackagedDatabaseCallback r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.RoomDatabase$PrepackagedDatabaseCallback;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        return;
    }

androidx.room.RoomDatabase$QueryCallback
<androidx.room.RoomDatabase$QueryCallback: void onQuery(java.lang.String,java.util.List)>
