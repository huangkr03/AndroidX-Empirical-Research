kotlin.collections.CollectionsKt__CollectionsJVMKt
    public void <init>()
    {
        kotlin.collections.CollectionsKt__CollectionsJVMKt $r0;

        $r0 := @this: kotlin.collections.CollectionsKt__CollectionsJVMKt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final boolean brittleContainsOptimizationEnabled()
    {
        boolean z0;

        z0 = <kotlin.collections.CollectionSystemProperties: boolean brittleContainsOptimizationEnabled>;

        return z0;
    }

    public static final java.util.List build(java.util.List)
    {
        java.util.List $r0;
        kotlin.collections.builders.ListBuilder $r1;

        $r0 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builder");

        $r1 = (kotlin.collections.builders.ListBuilder) $r0;

        $r0 = virtualinvoke $r1.<kotlin.collections.builders.ListBuilder: java.util.List build()>();

        return $r0;
    }

    private static final java.util.List buildListInternal(int, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0;
        java.util.List $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builderAction");

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder(int)>($i0);

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>($r1);

        return $r1;
    }

    private static final java.util.List buildListInternal(kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.List $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builderAction");

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>($r1);

        return $r1;
    }

    private static final int checkCountOverflow(int)
    {
        boolean $z0;
        int $i0;
        java.lang.ArithmeticException $r0;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label2;

        $z0 = staticinvoke <kotlin.internal.PlatformImplementationsKt: boolean apiVersionIsAtLeast(int,int,int)>(1, 3, 0);

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        return $i0;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Count overflow has happened.");

        throw $r0;

     label2:
        return $i0;
    }

    private static final int checkIndexOverflow(int)
    {
        boolean $z0;
        int $i0;
        java.lang.ArithmeticException $r0;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label2;

        $z0 = staticinvoke <kotlin.internal.PlatformImplementationsKt: boolean apiVersionIsAtLeast(int,int,int)>(1, 3, 0);

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

        return $i0;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Index overflow has happened.");

        throw $r0;

     label2:
        return $i0;
    }

    private static final java.lang.Object[] copyToArrayImpl(java.util.Collection)
    {
        java.lang.Object[] $r0;
        java.util.Collection $r1;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "collection");

        $r0 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>($r1);

        return $r0;
    }

    private static final java.lang.Object[] copyToArrayImpl(java.util.Collection, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.util.Collection $r1;

        $r1 := @parameter0: java.util.Collection;

        $r0 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "collection");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "array");

        $r0 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r1, $r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.CollectionsKt__CollectionsJVMKt.copyToArrayImpl>");

        return $r0;
    }

    public static final java.lang.Object[] copyToArrayOfAny(java.lang.Object[], boolean)
    {
        java.lang.Object[] $r0;
        boolean $z0;
        java.lang.Class $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Object[];

        $z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "[Ljava/lang/Object;");

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r0, $i0, class "[Ljava/lang/Object;");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copyOf(this, this.size, Array<Any?>::class.java)");

        return $r0;
    }

    public static final java.util.List createListBuilder()
    {
        kotlin.collections.builders.ListBuilder $r0;

        $r0 = new kotlin.collections.builders.ListBuilder;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void <init>()>();

        return $r0;
    }

    public static final java.util.List createListBuilder(int)
    {
        int $i0;
        kotlin.collections.builders.ListBuilder $r0;

        $i0 := @parameter0: int;

        $r0 = new kotlin.collections.builders.ListBuilder;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void <init>(int)>($i0);

        return $r0;
    }

    public static final java.util.List listOf(java.lang.Object)
    {
        java.util.List $r0;
        java.lang.Object $r1;

        $r1 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "singletonList(element)");

        return $r0;
    }

    public static final java.util.List shuffled(java.lang.Iterable)
    {
        java.util.List $r0;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.lang.Iterable)>($r1);

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r0);

        return $r0;
    }

    public static final java.util.List shuffled(java.lang.Iterable, java.util.Random)
    {
        java.util.Random $r0;
        java.util.List $r1;
        java.lang.Iterable $r2;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.util.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "random");

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.lang.Iterable)>($r2);

        staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>($r1, $r0);

        return $r1;
    }

    private static final java.util.List toList(java.util.Enumeration)
    {
        java.util.ArrayList $r0;
        java.util.Enumeration $r1;
        java.util.List r2;

        $r1 := @parameter0: java.util.Enumeration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "list(this)");

        r2 = (java.util.List) $r0;

        return r2;
    }

