okio.SegmentedByteString
<okio.SegmentedByteString: int[] directory>
<okio.SegmentedByteString: byte[][] segments>
    public void <init>(byte[][], int[])
    {
        okio.SegmentedByteString $r0;
        byte[][] $r1;
        int[] $r2;
        byte[] $r3;
        okio.ByteString $r4;

        $r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: byte[][];

        $r2 := @parameter1: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "segments");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "directory");

        $r4 = <okio.ByteString: okio.ByteString EMPTY>;

        $r3 = virtualinvoke $r4.<okio.ByteString: byte[] getData$third_party_java_src_okio_okio()>();

        specialinvoke $r0.<okio.ByteString: void <init>(byte[])>($r3);

        $r0.<okio.SegmentedByteString: byte[][] segments> = $r1;

        $r0.<okio.SegmentedByteString: int[] directory> = $r2;

        return;
    }

    private final okio.ByteString toByteString()
    {
        okio.SegmentedByteString $r0;
        okio.ByteString $r1;
        byte[] $r2;

        $r0 := @this: okio.SegmentedByteString;

        $r1 = new okio.ByteString;

        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: byte[] toByteArray()>();

        specialinvoke $r1.<okio.ByteString: void <init>(byte[])>($r2);

        return $r1;
    }

    private final java.lang.Object writeReplace()
    {
        okio.SegmentedByteString $r0;
        okio.ByteString $r1;

        $r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke $r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type java.lang.Object");

        return $r1;
    }

    public java.lang.String base64()
    {
        okio.SegmentedByteString $r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        $r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke $r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String base64()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        okio.SegmentedByteString $r0;
        java.lang.Object $r1;
        boolean $z0, $z1;
        okio.ByteString $r2;
        int $i0, $i1;

        $r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: java.lang.Object;

        $z0 = 1;

        if $r1 != $r0 goto label1;

        goto label4;

     label1:
        $z1 = $r1 instanceof okio.ByteString;

        if $z1 == 0 goto label3;

        $r2 = (okio.ByteString) $r1;

        $i0 = virtualinvoke $r2.<okio.ByteString: int size()>();

        $i1 = virtualinvoke $r0.<okio.SegmentedByteString: int size()>();

        if $i0 != $i1 goto label2;

        $i0 = virtualinvoke $r0.<okio.SegmentedByteString: int size()>();

        $z1 = virtualinvoke $r0.<okio.SegmentedByteString: boolean rangeEquals(int,okio.ByteString,int,int)>(0, $r2, 0, $i0);

        if $z1 == 0 goto label2;

        goto label4;

     label2:
        $z0 = 0;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public final int[] getDirectory$third_party_java_src_okio_okio()
    {
        okio.SegmentedByteString $r0;
        int[] r1;

        $r0 := @this: okio.SegmentedByteString;

        r1 = $r0.<okio.SegmentedByteString: int[] directory>;

        return r1;
    }

    public final byte[][] getSegments$third_party_java_src_okio_okio()
    {
        okio.SegmentedByteString $r0;
        byte[][] r1;

        $r0 := @this: okio.SegmentedByteString;

        r1 = $r0.<okio.SegmentedByteString: byte[][] segments>;

        return r1;
    }

    public int getSize$third_party_java_src_okio_okio()
    {
        okio.SegmentedByteString $r0;
        int[] $r1;
        byte[][] $r2;
        java.lang.Object[] $r3;
        int $i0;

        $r0 := @this: okio.SegmentedByteString;

        $r1 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r3 = (java.lang.Object[]) $r2;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        $i0 = $r1[$i0];

        return $i0;
    }

    public int hashCode()
    {
        okio.SegmentedByteString $r0;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        byte[][] $r1;
        java.lang.Object[] $r2;
        int[] $r3;
        byte[] $r4;

        $r0 := @this: okio.SegmentedByteString;

        $i1 = virtualinvoke $r0.<okio.SegmentedByteString: int getHashCode$third_party_java_src_okio_okio()>();

        if $i1 == 0 goto label1;

        return $i1;

     label1:
        $r1 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r2 = (java.lang.Object[]) $r1;

        $i1 = lengthof $r2;

        $i2 = 0;

        $i3 = 1;

        $i4 = 0;

     label2:
        if $i2 >= $i1 goto label5;

        $r3 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i5 = $i1 + $i2;

        $i5 = $r3[$i5];

        $r3 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i6 = $r3[$i2];

        $r1 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r4 = $r1[$i2];

        $i4 = $i6 - $i4;

        $i4 = $i4 + $i5;

     label3:
        if $i5 >= $i4 goto label4;

        $i3 = $i3 * 31;

        $b0 = $r4[$i5];

        $i3 = $i3 + $b0;

        $i5 = $i5 + 1;

        goto label3;

     label4:
        $i2 = $i2 + 1;

        $i4 = $i6;

        goto label2;

     label5:
        virtualinvoke $r0.<okio.SegmentedByteString: void setHashCode$third_party_java_src_okio_okio(int)>($i3);

        return $i3;
    }

    public java.lang.String hex()
    {
        okio.SegmentedByteString $r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        $r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke $r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String hex()>();

        return $r2;
    }

    public byte[] internalArray$third_party_java_src_okio_okio()
    {
        okio.SegmentedByteString $r0;
        byte[] $r1;

        $r0 := @this: okio.SegmentedByteString;

        $r1 = virtualinvoke $r0.<okio.SegmentedByteString: byte[] toByteArray()>();

        return $r1;
    }

    public byte internalGet$third_party_java_src_okio_okio(int)
    {
        okio.SegmentedByteString $r0;
        int $i0, $i1, $i4, $i5;
        int[] $r1;
        byte[][] $r2;
        java.lang.Object[] $r3;
        long $l2, $l3;
        byte[] $r4;
        byte $b6;

        $r0 := @this: okio.SegmentedByteString;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r3 = (java.lang.Object[]) $r2;

        $i1 = lengthof $r3;

        $i1 = $i1 + -1;

        $i1 = $r1[$i1];

        $l2 = (long) $i1;

        $l3 = (long) $i0;

        staticinvoke <okio._UtilKt: void checkOffsetAndCount(long,long,long)>($l2, $l3, 1L);

        $i1 = staticinvoke <okio.internal._SegmentedByteStringKt: int segment(okio.SegmentedByteString,int)>($r0, $i0);

        if $i1 != 0 goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $r1 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i4 = $i1 + -1;

        $i4 = $r1[$i4];

     label2:
        $r1 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r3 = (java.lang.Object[]) $r2;

        $i5 = lengthof $r3;

        $i5 = $i5 + $i1;

        $i5 = $r1[$i5];

        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r4 = $r2[$i1];

        $i0 = $i0 - $i4;

        $i0 = $i0 + $i5;

        $b6 = $r4[$i0];

        return $b6;
    }

    public boolean rangeEquals(int, okio.ByteString, int, int)
    {
        okio.SegmentedByteString $r0;
        okio.ByteString $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;
        int[] $r2;
        byte[][] $r3;
        java.lang.Object[] $r4;
        byte[] $r5;

        $r0 := @this: okio.SegmentedByteString;

        $i0 := @parameter0: int;

        $r1 := @parameter1: okio.ByteString;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $z0 = 0;

        if $i0 < 0 goto label7;

        $i3 = virtualinvoke $r0.<okio.SegmentedByteString: int size()>();

        $i3 = $i3 - $i2;

        if $i0 <= $i3 goto label1;

        goto label7;

     label1:
        $i2 = $i2 + $i0;

        $i3 = staticinvoke <okio.internal._SegmentedByteStringKt: int segment(okio.SegmentedByteString,int)>($r0, $i0);

     label2:
        if $i0 >= $i2 goto label6;

        if $i3 != 0 goto label3;

        $i4 = 0;

        goto label4;

     label3:
        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i4 = $i3 + -1;

        $i4 = $r2[$i4];

     label4:
        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i5 = $r2[$i3];

        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $r3 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r4 = (java.lang.Object[]) $r3;

        $i6 = lengthof $r4;

        $i6 = $i6 + $i3;

        $i6 = $r2[$i6];

        $i5 = $i5 - $i4;

        $i5 = $i5 + $i4;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i5);

        $i5 = $i5 - $i0;

        $r3 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r5 = $r3[$i3];

        $i4 = $i0 - $i4;

        $i4 = $i6 + $i4;

        $z1 = virtualinvoke $r1.<okio.ByteString: boolean rangeEquals(int,byte[],int,int)>($i1, $r5, $i4, $i5);

        if $z1 != 0 goto label5;

        goto label7;

     label5:
        $i1 = $i1 + $i5;

        $i0 = $i0 + $i5;

        $i3 = $i3 + 1;

        goto label2;

     label6:
        $z0 = 1;

        goto label7;

     label7:
        return $z0;
    }

    public boolean rangeEquals(int, byte[], int, int)
    {
        okio.SegmentedByteString $r0;
        byte[] $r1, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;
        int[] $r2;
        byte[][] $r3;
        java.lang.Object[] $r4;

        $r0 := @this: okio.SegmentedByteString;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $z0 = 0;

        if $i0 < 0 goto label7;

        $i3 = virtualinvoke $r0.<okio.SegmentedByteString: int size()>();

        $i3 = $i3 - $i2;

        if $i0 > $i3 goto label7;

        if $i1 < 0 goto label7;

        $i3 = lengthof $r1;

        $i3 = $i3 - $i2;

        if $i1 <= $i3 goto label1;

        goto label7;

     label1:
        $i2 = $i2 + $i0;

        $i3 = staticinvoke <okio.internal._SegmentedByteStringKt: int segment(okio.SegmentedByteString,int)>($r0, $i0);

     label2:
        if $i0 >= $i2 goto label6;

        if $i3 != 0 goto label3;

        $i4 = 0;

        goto label4;

     label3:
        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i4 = $i3 + -1;

        $i4 = $r2[$i4];

     label4:
        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i5 = $r2[$i3];

        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $r3 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r4 = (java.lang.Object[]) $r3;

        $i6 = lengthof $r4;

        $i6 = $i6 + $i3;

        $i6 = $r2[$i6];

        $i5 = $i5 - $i4;

        $i5 = $i5 + $i4;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i5);

        $i5 = $i5 - $i0;

        $r3 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r5 = $r3[$i3];

        $i4 = $i0 - $i4;

        $i4 = $i6 + $i4;

        $z1 = staticinvoke <okio._UtilKt: boolean arrayRangeEquals(byte[],int,byte[],int,int)>($r5, $i4, $r1, $i1, $i5);

        if $z1 != 0 goto label5;

        goto label7;

     label5:
        $i1 = $i1 + $i5;

        $i0 = $i0 + $i5;

        $i3 = $i3 + 1;

        goto label2;

     label6:
        $z0 = 1;

        goto label7;

     label7:
        return $z0;
    }

    public okio.ByteString toAsciiLowercase()
    {
        okio.SegmentedByteString $r0;
        okio.ByteString $r1;

        $r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke $r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r1.<okio.ByteString: okio.ByteString toAsciiLowercase()>();

        return $r1;
    }

    public byte[] toByteArray()
    {
        okio.SegmentedByteString $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r1, $r5;
        byte[][] $r2;
        java.lang.Object[] $r3;
        int[] $r4;

        $r0 := @this: okio.SegmentedByteString;

        $i1 = virtualinvoke $r0.<okio.SegmentedByteString: int size()>();

        $r1 = newarray (byte)[$i1];

        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r3 = (java.lang.Object[]) $r2;

        $i1 = lengthof $r3;

        $i2 = 0;

        $i0 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r4 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i4 = $i1 + $i2;

        $i4 = $r4[$i4];

        $r4 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i5 = $r4[$i2];

        $i6 = $i5 - $i0;

        $r2 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r5 = $r2[$i2];

        $i0 = $i4 + $i6;

        staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r5, $r1, $i3, $i4, $i0);

        $i3 = $i3 + $i6;

        $i2 = $i2 + 1;

        $i0 = $i5;

        goto label1;

     label2:
        return $r1;
    }

    public java.lang.String toString()
    {
        okio.SegmentedByteString $r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        $r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke $r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String toString()>();

        return $r2;
    }

    public void write$third_party_java_src_okio_okio(okio.Buffer, int, int)
    {
        okio.SegmentedByteString $r0;
        okio.Buffer $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r2;
        int[] $r3;
        byte[][] $r4;
        java.lang.Object[] $r5;
        okio.Segment $r6, $r7;
        long $l7, $l8;

        $r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: okio.Buffer;

        $i3 := @parameter1: int;

        $i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "buffer");

        $i4 = $i3 + $i0;

        $i5 = staticinvoke <okio.internal._SegmentedByteStringKt: int segment(okio.SegmentedByteString,int)>($r0, $i3);

     label1:
        if $i3 >= $i4 goto label6;

        if $i5 != 0 goto label2;

        $i1 = 0;

        goto label3;

     label2:
        $r3 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i1 = $i5 + -1;

        $i1 = $r3[$i1];

     label3:
        $r3 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $i6 = $r3[$i5];

        $r3 = virtualinvoke $r0.<okio.SegmentedByteString: int[] getDirectory$third_party_java_src_okio_okio()>();

        $r4 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r5 = (java.lang.Object[]) $r4;

        $i2 = lengthof $r5;

        $i2 = $i2 + $i5;

        $i2 = $r3[$i2];

        $i6 = $i6 - $i1;

        $i6 = $i6 + $i1;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i6);

        $i6 = $i6 - $i3;

        $i1 = $i3 - $i1;

        $i1 = $i2 + $i1;

        $r4 = virtualinvoke $r0.<okio.SegmentedByteString: byte[][] getSegments$third_party_java_src_okio_okio()>();

        $r2 = $r4[$i5];

        $r6 = new okio.Segment;

        $i2 = $i1 + $i6;

        specialinvoke $r6.<okio.Segment: void <init>(byte[],int,int,boolean,boolean)>($r2, $i1, $i2, 1, 0);

        $r7 = $r1.<okio.Buffer: okio.Segment head>;

        if $r7 != null goto label4;

        $r6.<okio.Segment: okio.Segment prev> = $r6;

        $r7 = $r6.<okio.Segment: okio.Segment prev>;

        $r6.<okio.Segment: okio.Segment next> = $r7;

        $r6 = $r6.<okio.Segment: okio.Segment next>;

        $r1.<okio.Buffer: okio.Segment head> = $r6;

        goto label5;

     label4:
        $r7 = $r1.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        $r7 = $r7.<okio.Segment: okio.Segment prev>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        virtualinvoke $r7.<okio.Segment: okio.Segment push(okio.Segment)>($r6);

     label5:
        $i3 = $i3 + $i6;

        $i5 = $i5 + 1;

        goto label1;

     label6:
        $l7 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $l8 = (long) $i0;

        $l7 = $l7 + $l8;

        virtualinvoke $r1.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l7);

        return;
    }

