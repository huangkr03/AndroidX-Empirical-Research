androidx.camera.video.Recording
<androidx.camera.video.Recording: java.util.concurrent.atomic.AtomicBoolean mIsStopped>
<androidx.camera.video.Recording: androidx.camera.video.Recorder mRecorder>
<androidx.camera.video.Recording: long mRecordingId>
<androidx.camera.video.Recording: androidx.camera.video.OutputOptions mOutputOptions>
<androidx.camera.video.Recording: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard>
    void <init>(androidx.camera.video.Recorder, long, androidx.camera.video.OutputOptions, boolean)
    {
        androidx.camera.video.Recording r0;
        androidx.camera.video.Recorder r1;
        long l0;
        androidx.camera.video.OutputOptions r2;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r3, $r6;
        androidx.camera.core.impl.utils.CloseGuardHelper $r4, $r5;

        r0 := @this: androidx.camera.video.Recording;

        r1 := @parameter0: androidx.camera.video.Recorder;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.camera.video.OutputOptions;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.camera.video.Recording: java.util.concurrent.atomic.AtomicBoolean mIsStopped> = $r3;

        $r4 = staticinvoke <androidx.camera.core.impl.utils.CloseGuardHelper: androidx.camera.core.impl.utils.CloseGuardHelper create()>();

        r0.<androidx.camera.video.Recording: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard> = $r4;

        r0.<androidx.camera.video.Recording: androidx.camera.video.Recorder mRecorder> = r1;

        r0.<androidx.camera.video.Recording: long mRecordingId> = l0;

        r0.<androidx.camera.video.Recording: androidx.camera.video.OutputOptions mOutputOptions> = r2;

        if z0 == 0 goto label1;

        $r6 = r0.<androidx.camera.video.Recording: java.util.concurrent.atomic.AtomicBoolean mIsStopped>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        goto label2;

     label1:
        $r5 = r0.<androidx.camera.video.Recording: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard>;

        virtualinvoke $r5.<androidx.camera.core.impl.utils.CloseGuardHelper: void open(java.lang.String)>("stop");

     label2:
        return;
    }

    static androidx.camera.video.Recording 'from'(androidx.camera.video.PendingRecording, long)
    {
        androidx.camera.video.PendingRecording r0;
        long l0;
        androidx.camera.video.Recording $r2;
        androidx.camera.video.Recorder $r3;
        androidx.camera.video.OutputOptions $r4;

        r0 := @parameter0: androidx.camera.video.PendingRecording;

        l0 := @parameter1: long;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "The given PendingRecording cannot be null.");

        $r2 = new androidx.camera.video.Recording;

        $r3 = virtualinvoke r0.<androidx.camera.video.PendingRecording: androidx.camera.video.Recorder getRecorder()>();

        $r4 = virtualinvoke r0.<androidx.camera.video.PendingRecording: androidx.camera.video.OutputOptions getOutputOptions()>();

        specialinvoke $r2.<androidx.camera.video.Recording: void <init>(androidx.camera.video.Recorder,long,androidx.camera.video.OutputOptions,boolean)>($r3, l0, $r4, 0);

        return $r2;
    }

    static androidx.camera.video.Recording createFinalizedFrom(androidx.camera.video.PendingRecording, long)
    {
        androidx.camera.video.PendingRecording r0;
        long l0;
        androidx.camera.video.Recording $r2;
        androidx.camera.video.Recorder $r3;
        androidx.camera.video.OutputOptions $r4;

        r0 := @parameter0: androidx.camera.video.PendingRecording;

        l0 := @parameter1: long;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "The given PendingRecording cannot be null.");

        $r2 = new androidx.camera.video.Recording;

        $r3 = virtualinvoke r0.<androidx.camera.video.PendingRecording: androidx.camera.video.Recorder getRecorder()>();

        $r4 = virtualinvoke r0.<androidx.camera.video.PendingRecording: androidx.camera.video.OutputOptions getOutputOptions()>();

        specialinvoke $r2.<androidx.camera.video.Recording: void <init>(androidx.camera.video.Recorder,long,androidx.camera.video.OutputOptions,boolean)>($r3, l0, $r4, 1);

        return $r2;
    }

    androidx.camera.video.OutputOptions getOutputOptions()
    {
        androidx.camera.video.Recording r0;
        androidx.camera.video.OutputOptions $r1;

        r0 := @this: androidx.camera.video.Recording;

        $r1 = r0.<androidx.camera.video.Recording: androidx.camera.video.OutputOptions mOutputOptions>;

        return $r1;
    }

    public void pause()
    {
        androidx.camera.video.Recording r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        androidx.camera.video.Recorder $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.camera.video.Recording;

        $r1 = r0.<androidx.camera.video.Recording: java.util.concurrent.atomic.AtomicBoolean mIsStopped>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The recording has been stopped.");

        throw $r3;

     label1:
        $r2 = r0.<androidx.camera.video.Recording: androidx.camera.video.Recorder mRecorder>;

        virtualinvoke $r2.<androidx.camera.video.Recorder: void pause(androidx.camera.video.Recording)>(r0);

        return;
    }

    public void resume()
    {
        androidx.camera.video.Recording r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        androidx.camera.video.Recorder $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.camera.video.Recording;

        $r1 = r0.<androidx.camera.video.Recording: java.util.concurrent.atomic.AtomicBoolean mIsStopped>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The recording has been stopped.");

        throw $r3;

     label1:
        $r2 = r0.<androidx.camera.video.Recording: androidx.camera.video.Recorder mRecorder>;

        virtualinvoke $r2.<androidx.camera.video.Recorder: void resume(androidx.camera.video.Recording)>(r0);

        return;
    }

    public void stop()
    {
        androidx.camera.video.Recording r0;
        androidx.camera.core.impl.utils.CloseGuardHelper $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;
        androidx.camera.video.Recorder $r3;

        r0 := @this: androidx.camera.video.Recording;

        $r1 = r0.<androidx.camera.video.Recording: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard>;

        virtualinvoke $r1.<androidx.camera.core.impl.utils.CloseGuardHelper: void close()>();

        $r2 = r0.<androidx.camera.video.Recording: java.util.concurrent.atomic.AtomicBoolean mIsStopped>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.camera.video.Recording: androidx.camera.video.Recorder mRecorder>;

        virtualinvoke $r3.<androidx.camera.video.Recorder: void stop(androidx.camera.video.Recording)>(r0);

        return;
    }

    public void close()
    {
        androidx.camera.video.Recording r0;

        r0 := @this: androidx.camera.video.Recording;

        virtualinvoke r0.<androidx.camera.video.Recording: void stop()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        androidx.camera.video.Recording r0;
        java.lang.Throwable r1, $r3;
        androidx.camera.core.impl.utils.CloseGuardHelper $r2;

        r0 := @this: androidx.camera.video.Recording;

     label1:
        $r2 = r0.<androidx.camera.video.Recording: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard>;

        virtualinvoke $r2.<androidx.camera.core.impl.utils.CloseGuardHelper: void warnIfOpen()>();

        virtualinvoke r0.<androidx.camera.video.Recording: void stop()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    long getRecordingId()
    {
        androidx.camera.video.Recording r0;
        long $l0;

        r0 := @this: androidx.camera.video.Recording;

        $l0 = r0.<androidx.camera.video.Recording: long mRecordingId>;

        return $l0;
    }

