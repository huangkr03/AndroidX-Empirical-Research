androidx.work.rxjava3.RxWorker
<androidx.work.rxjava3.RxWorker: java.util.concurrent.Executor INSTANT_EXECUTOR>
<androidx.work.rxjava3.RxWorker: androidx.work.rxjava3.RxWorker$SingleFutureAdapter mSingleFutureObserverAdapter>
    public void <init>(android.content.Context, androidx.work.WorkerParameters)
    {
        androidx.work.rxjava3.RxWorker r0;
        android.content.Context r1;
        androidx.work.WorkerParameters r2;

        r0 := @this: androidx.work.rxjava3.RxWorker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.WorkerParameters;

        specialinvoke r0.<androidx.work.ListenableWorker: void <init>(android.content.Context,androidx.work.WorkerParameters)>(r1, r2);

        return;
    }

    public final com.google.common.util.concurrent.ListenableFuture startWork()
    {
        androidx.work.rxjava3.RxWorker r0;
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter $r1, $r2;
        io.reactivex.rxjava3.core.Single $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        r0 := @this: androidx.work.rxjava3.RxWorker;

        $r1 = new androidx.work.rxjava3.RxWorker$SingleFutureAdapter;

        specialinvoke $r1.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: void <init>()>();

        r0.<androidx.work.rxjava3.RxWorker: androidx.work.rxjava3.RxWorker$SingleFutureAdapter mSingleFutureObserverAdapter> = $r1;

        $r2 = r0.<androidx.work.rxjava3.RxWorker: androidx.work.rxjava3.RxWorker$SingleFutureAdapter mSingleFutureObserverAdapter>;

        $r3 = virtualinvoke r0.<androidx.work.rxjava3.RxWorker: io.reactivex.rxjava3.core.Single createWork()>();

        $r4 = specialinvoke r0.<androidx.work.rxjava3.RxWorker: com.google.common.util.concurrent.ListenableFuture convert(androidx.work.rxjava3.RxWorker$SingleFutureAdapter,io.reactivex.rxjava3.core.Single)>($r2, $r3);

        return $r4;
    }

    protected io.reactivex.rxjava3.core.Scheduler getBackgroundScheduler()
    {
        androidx.work.rxjava3.RxWorker r0;
        java.util.concurrent.Executor $r1;
        io.reactivex.rxjava3.core.Scheduler $r2;

        r0 := @this: androidx.work.rxjava3.RxWorker;

        $r1 = virtualinvoke r0.<androidx.work.rxjava3.RxWorker: java.util.concurrent.Executor getBackgroundExecutor()>();

        $r2 = staticinvoke <io.reactivex.rxjava3.schedulers.Schedulers: io.reactivex.rxjava3.core.Scheduler 'from'(java.util.concurrent.Executor,boolean,boolean)>($r1, 1, 1);

        return $r2;
    }

<androidx.work.rxjava3.RxWorker: io.reactivex.rxjava3.core.Single createWork()>
    public final io.reactivex.rxjava3.core.Completable setCompletableProgress(androidx.work.Data)
    {
        androidx.work.rxjava3.RxWorker r0;
        androidx.work.Data r1;
        com.google.common.util.concurrent.ListenableFuture $r2;
        io.reactivex.rxjava3.core.Completable $r3;

        r0 := @this: androidx.work.rxjava3.RxWorker;

        r1 := @parameter0: androidx.work.Data;

        $r2 = virtualinvoke r0.<androidx.work.rxjava3.RxWorker: com.google.common.util.concurrent.ListenableFuture setProgressAsync(androidx.work.Data)>(r1);

        $r3 = staticinvoke <io.reactivex.rxjava3.core.Completable: io.reactivex.rxjava3.core.Completable fromFuture(java.util.concurrent.Future)>($r2);

        return $r3;
    }

    public void onStopped()
    {
        androidx.work.rxjava3.RxWorker r0;
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter r1;

        r0 := @this: androidx.work.rxjava3.RxWorker;

        specialinvoke r0.<androidx.work.ListenableWorker: void onStopped()>();

        r1 = r0.<androidx.work.rxjava3.RxWorker: androidx.work.rxjava3.RxWorker$SingleFutureAdapter mSingleFutureObserverAdapter>;

        if r1 == null goto label1;

        virtualinvoke r1.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: void dispose()>();

        r0.<androidx.work.rxjava3.RxWorker: androidx.work.rxjava3.RxWorker$SingleFutureAdapter mSingleFutureObserverAdapter> = null;

     label1:
        return;
    }

    public com.google.common.util.concurrent.ListenableFuture getForegroundInfoAsync()
    {
        androidx.work.rxjava3.RxWorker r0;
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter $r1;
        io.reactivex.rxjava3.core.Single $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.work.rxjava3.RxWorker;

        $r1 = new androidx.work.rxjava3.RxWorker$SingleFutureAdapter;

        specialinvoke $r1.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: void <init>()>();

        $r2 = virtualinvoke r0.<androidx.work.rxjava3.RxWorker: io.reactivex.rxjava3.core.Single getForegroundInfo()>();

        $r3 = specialinvoke r0.<androidx.work.rxjava3.RxWorker: com.google.common.util.concurrent.ListenableFuture convert(androidx.work.rxjava3.RxWorker$SingleFutureAdapter,io.reactivex.rxjava3.core.Single)>($r1, $r2);

        return $r3;
    }

    public io.reactivex.rxjava3.core.Single getForegroundInfo()
    {
        androidx.work.rxjava3.RxWorker r0;
        java.lang.String r1;
        java.lang.IllegalStateException $r2;
        io.reactivex.rxjava3.core.Single $r3;

        r0 := @this: androidx.work.rxjava3.RxWorker;

        r1 = "Expedited WorkRequests require a RxWorker to provide an implementation for `getForegroundInfo()`";

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        $r3 = staticinvoke <io.reactivex.rxjava3.core.Single: io.reactivex.rxjava3.core.Single error(java.lang.Throwable)>($r2);

        return $r3;
    }

    public final io.reactivex.rxjava3.core.Completable setForeground(androidx.work.ForegroundInfo)
    {
        androidx.work.rxjava3.RxWorker r0;
        androidx.work.ForegroundInfo r1;
        com.google.common.util.concurrent.ListenableFuture $r2;
        io.reactivex.rxjava3.core.Completable $r3;

        r0 := @this: androidx.work.rxjava3.RxWorker;

        r1 := @parameter0: androidx.work.ForegroundInfo;

        $r2 = virtualinvoke r0.<androidx.work.rxjava3.RxWorker: com.google.common.util.concurrent.ListenableFuture setForegroundAsync(androidx.work.ForegroundInfo)>(r1);

        $r3 = staticinvoke <io.reactivex.rxjava3.core.Completable: io.reactivex.rxjava3.core.Completable fromFuture(java.util.concurrent.Future)>($r2);

        return $r3;
    }

    private com.google.common.util.concurrent.ListenableFuture convert(androidx.work.rxjava3.RxWorker$SingleFutureAdapter, io.reactivex.rxjava3.core.Single)
    {
        androidx.work.rxjava3.RxWorker r0;
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter r1;
        io.reactivex.rxjava3.core.Single r2, $r4, $r8;
        io.reactivex.rxjava3.core.Scheduler r3, $r7;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r5;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r6;
        androidx.work.impl.utils.futures.SettableFuture $r9;

        r0 := @this: androidx.work.rxjava3.RxWorker;

        r1 := @parameter0: androidx.work.rxjava3.RxWorker$SingleFutureAdapter;

        r2 := @parameter1: io.reactivex.rxjava3.core.Single;

        r3 = virtualinvoke r0.<androidx.work.rxjava3.RxWorker: io.reactivex.rxjava3.core.Scheduler getBackgroundScheduler()>();

        $r4 = virtualinvoke r2.<io.reactivex.rxjava3.core.Single: io.reactivex.rxjava3.core.Single subscribeOn(io.reactivex.rxjava3.core.Scheduler)>(r3);

        $r5 = virtualinvoke r0.<androidx.work.rxjava3.RxWorker: androidx.work.impl.utils.taskexecutor.TaskExecutor getTaskExecutor()>();

        $r6 = interfaceinvoke $r5.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r7 = staticinvoke <io.reactivex.rxjava3.schedulers.Schedulers: io.reactivex.rxjava3.core.Scheduler 'from'(java.util.concurrent.Executor,boolean,boolean)>($r6, 1, 1);

        $r8 = virtualinvoke $r4.<io.reactivex.rxjava3.core.Single: io.reactivex.rxjava3.core.Single observeOn(io.reactivex.rxjava3.core.Scheduler)>($r7);

        virtualinvoke $r8.<io.reactivex.rxjava3.core.Single: void subscribe(io.reactivex.rxjava3.core.SingleObserver)>(r1);

        $r9 = r1.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: androidx.work.impl.utils.futures.SettableFuture mFuture>;

        return $r9;
    }

    static void <clinit>()
    {
        androidx.work.impl.utils.SynchronousExecutor $r0;

        $r0 = new androidx.work.impl.utils.SynchronousExecutor;

        specialinvoke $r0.<androidx.work.impl.utils.SynchronousExecutor: void <init>()>();

        <androidx.work.rxjava3.RxWorker: java.util.concurrent.Executor INSTANT_EXECUTOR> = $r0;

        return;
    }

androidx.work.rxjava3.RxWorker$SingleFutureAdapter
<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: androidx.work.impl.utils.futures.SettableFuture mFuture>
<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: io.reactivex.rxjava3.disposables.Disposable mDisposable>
    void <init>()
    {
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter r0;
        androidx.work.impl.utils.futures.SettableFuture $r1, $r3;
        java.util.concurrent.Executor $r2;

        r0 := @this: androidx.work.rxjava3.RxWorker$SingleFutureAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <androidx.work.impl.utils.futures.SettableFuture: androidx.work.impl.utils.futures.SettableFuture create()>();

        r0.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: androidx.work.impl.utils.futures.SettableFuture mFuture> = $r1;

        $r3 = r0.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: androidx.work.impl.utils.futures.SettableFuture mFuture>;

        $r2 = <androidx.work.rxjava3.RxWorker: java.util.concurrent.Executor INSTANT_EXECUTOR>;

        virtualinvoke $r3.<androidx.work.impl.utils.futures.SettableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r0, $r2);

        return;
    }

    public void onSubscribe(io.reactivex.rxjava3.disposables.Disposable)
    {
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter r0;
        io.reactivex.rxjava3.disposables.Disposable r1;

        r0 := @this: androidx.work.rxjava3.RxWorker$SingleFutureAdapter;

        r1 := @parameter0: io.reactivex.rxjava3.disposables.Disposable;

        r0.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: io.reactivex.rxjava3.disposables.Disposable mDisposable> = r1;

        return;
    }

    public void onSuccess(java.lang.Object)
    {
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter r0;
        java.lang.Object r1;
        androidx.work.impl.utils.futures.SettableFuture $r2;

        r0 := @this: androidx.work.rxjava3.RxWorker$SingleFutureAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: androidx.work.impl.utils.futures.SettableFuture mFuture>;

        virtualinvoke $r2.<androidx.work.impl.utils.futures.SettableFuture: boolean set(java.lang.Object)>(r1);

        return;
    }

    public void onError(java.lang.Throwable)
    {
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter r0;
        java.lang.Throwable r1;
        androidx.work.impl.utils.futures.SettableFuture $r2;

        r0 := @this: androidx.work.rxjava3.RxWorker$SingleFutureAdapter;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: androidx.work.impl.utils.futures.SettableFuture mFuture>;

        virtualinvoke $r2.<androidx.work.impl.utils.futures.SettableFuture: boolean setException(java.lang.Throwable)>(r1);

        return;
    }

    public void run()
    {
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter r0;
        androidx.work.impl.utils.futures.SettableFuture $r1;
        boolean $z0;

        r0 := @this: androidx.work.rxjava3.RxWorker$SingleFutureAdapter;

        $r1 = r0.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: androidx.work.impl.utils.futures.SettableFuture mFuture>;

        $z0 = virtualinvoke $r1.<androidx.work.impl.utils.futures.SettableFuture: boolean isCancelled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: void dispose()>();

     label1:
        return;
    }

    void dispose()
    {
        androidx.work.rxjava3.RxWorker$SingleFutureAdapter r0;
        io.reactivex.rxjava3.disposables.Disposable r1;

        r0 := @this: androidx.work.rxjava3.RxWorker$SingleFutureAdapter;

        r1 = r0.<androidx.work.rxjava3.RxWorker$SingleFutureAdapter: io.reactivex.rxjava3.disposables.Disposable mDisposable>;

        if r1 == null goto label1;

        interfaceinvoke r1.<io.reactivex.rxjava3.disposables.Disposable: void dispose()>();

     label1:
        return;
    }

