androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor
<androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: java.lang.String LOG_TAG>
<androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>
    public java.lang.String getName()
    {
        androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        androidx.test.espresso.idling.CountingIdlingResource $r1;
        java.lang.String $r2;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        $r1 = r0.<androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $r2 = virtualinvoke $r1.<androidx.test.espresso.idling.CountingIdlingResource: java.lang.String getName()>();

        return $r2;
    }

    public void <init>(java.lang.String, int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory)
    {
        androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        java.lang.String r1, r5, $r10;
        int i0, i1;
        long l2;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.BlockingQueue r3;
        java.util.concurrent.ThreadFactory r4;
        java.lang.StringBuilder $r8, $r9, r14;
        androidx.test.espresso.IdlingRegistry $r11;
        java.lang.Object[] $r12;
        androidx.test.espresso.idling.CountingIdlingResource r13;
        androidx.test.espresso.IdlingResource[] r15;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r2 := @parameter4: java.util.concurrent.TimeUnit;

        r3 := @parameter5: java.util.concurrent.BlockingQueue;

        r4 := @parameter6: java.util.concurrent.ThreadFactory;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(i0, i1, l2, r2, r3, r4);

        r13 = new androidx.test.espresso.idling.CountingIdlingResource;

        specialinvoke r13.<androidx.test.espresso.idling.CountingIdlingResource: void <init>(java.lang.String)>(r1);

        r0.<androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource> = r13;

        r5 = r1;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Register idling resource for thread pool ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("IdlingThreadPoolExec", $r10);

        $r11 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r12 = newarray (androidx.test.espresso.IdlingResource)[1];

        $r12[0] = r0;

        r15 = (androidx.test.espresso.IdlingResource[]) $r12;

        virtualinvoke $r11.<androidx.test.espresso.IdlingRegistry: boolean register(androidx.test.espresso.IdlingResource[])>(r15);

        return;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.Throwable r2;
        androidx.test.espresso.idling.CountingIdlingResource $r3;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r3.<androidx.test.espresso.idling.CountingIdlingResource: void decrement()>();

        return;
    }

    public synchronized void execute(java.lang.Runnable)
    {
        androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        java.lang.Runnable r1;
        androidx.test.espresso.idling.CountingIdlingResource $r2;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r2.<androidx.test.espresso.idling.CountingIdlingResource: void increment()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public void registerIdleTransitionCallback(androidx.test.espresso.IdlingResource$ResourceCallback)
    {
        androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        androidx.test.espresso.IdlingResource$ResourceCallback r1;
        androidx.test.espresso.idling.CountingIdlingResource $r2;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        r1 := @parameter0: androidx.test.espresso.IdlingResource$ResourceCallback;

        $r2 = r0.<androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r2.<androidx.test.espresso.idling.CountingIdlingResource: void registerIdleTransitionCallback(androidx.test.espresso.IdlingResource$ResourceCallback)>(r1);

        return;
    }

    protected void terminated()
    {
        androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        java.lang.String r1, $r6;
        androidx.test.espresso.idling.CountingIdlingResource $r2;
        java.lang.StringBuilder $r4, $r5, r9;
        androidx.test.espresso.IdlingRegistry $r7;
        java.lang.Object[] $r8;
        androidx.test.espresso.IdlingResource[] r10;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void terminated()>();

        $r2 = r0.<androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        r1 = virtualinvoke $r2.<androidx.test.espresso.idling.CountingIdlingResource: java.lang.String getName()>();

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread pool terminated, unregistering ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("IdlingThreadPoolExec", $r6);

        $r7 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r8 = newarray (androidx.test.espresso.IdlingResource)[1];

        $r8[0] = r0;

        r10 = (androidx.test.espresso.IdlingResource[]) $r8;

        virtualinvoke $r7.<androidx.test.espresso.IdlingRegistry: boolean unregister(androidx.test.espresso.IdlingResource[])>(r10);

        return;
    }

    public boolean isIdleNow()
    {
        androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        androidx.test.espresso.idling.CountingIdlingResource $r1;
        boolean $z0;

        r0 := @this: androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        $r1 = r0.<androidx.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: androidx.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $z0 = virtualinvoke $r1.<androidx.test.espresso.idling.CountingIdlingResource: boolean isIdleNow()>();

        return $z0;
    }

