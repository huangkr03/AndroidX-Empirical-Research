androidx.media3.exoplayer.audio.SonicAudioProcessor
<androidx.media3.exoplayer.audio.SonicAudioProcessor: int SAMPLE_RATE_NO_CHANGE>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: float CLOSE_THRESHOLD>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: int MIN_BYTES_FOR_DURATION_SCALING_CALCULATION>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: int pendingOutputSampleRate>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: float speed>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: float pitch>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean pendingSonicRecreation>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ShortBuffer shortBuffer>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer outputBuffer>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: long inputBytes>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: long outputBytes>
<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean inputEnded>
    public void <init>()
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r1, $r2, $r3, $r4;
        java.nio.ByteBuffer $r5, $r6, $r8;
        java.nio.ShortBuffer $r7;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float speed> = 1.0F;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float pitch> = 1.0F;

        $r1 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat> = $r1;

        $r2 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat> = $r2;

        $r3 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat> = $r3;

        $r4 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat> = $r4;

        $r5 = <androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer> = $r5;

        $r6 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer>;

        $r7 = virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>();

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ShortBuffer shortBuffer> = $r7;

        $r8 = <androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer outputBuffer> = $r8;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: int pendingOutputSampleRate> = -1;

        return;
    }

    public void setSpeed(float)
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        f0 := @parameter0: float;

        $f1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float speed>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float speed> = f0;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean pendingSonicRecreation> = 1;

     label1:
        return;
    }

    public void setPitch(float)
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        f0 := @parameter0: float;

        $f1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float pitch>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float pitch> = f0;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean pendingSonicRecreation> = 1;

     label1:
        return;
    }

    public void setOutputSampleRateHz(int)
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        int i0;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        i0 := @parameter0: int;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: int pendingOutputSampleRate> = i0;

        return;
    }

    public long getMediaDuration(long)
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        long l0, l1, $l2, $l4, $l5, $l7, $l11, $l13, $l14, $l15, $l16, $l17, $l18;
        byte $b3;
        float $f0;
        double $d0, $d1, $d2;
        androidx.media3.exoplayer.audio.Sonic $r1, $r3;
        java.lang.Object $r2;
        int $i6, $i8, $i9, $i10, $i12;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r4, $r5, $r6, $r7;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        l0 := @parameter0: long;

        $l2 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long outputBytes>;

        $b3 = $l2 cmp 1024L;

        if $b3 < 0 goto label3;

        $l5 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long inputBytes>;

        $r1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>;

        $r2 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = (androidx.media3.exoplayer.audio.Sonic) $r2;

        $i6 = virtualinvoke $r3.<androidx.media3.exoplayer.audio.Sonic: int getPendingInputBytes()>();

        $l7 = (long) $i6;

        l1 = $l5 - $l7;

        $r4 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat>;

        $i9 = $r4.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        $r5 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i8 = $r5.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        if $i9 != $i8 goto label1;

        $l17 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long outputBytes>;

        $l18 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>(l0, l1, $l17);

        goto label2;

     label1:
        $r6 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat>;

        $i10 = $r6.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        $l11 = (long) $i10;

        $l16 = l1 * $l11;

        $l14 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long outputBytes>;

        $r7 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i12 = $r7.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        $l13 = (long) $i12;

        $l15 = $l14 * $l13;

        $l18 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>(l0, $l16, $l15);

     label2:
        return $l18;

     label3:
        $f0 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float speed>;

        $d1 = (double) $f0;

        $d0 = (double) l0;

        $d2 = $d1 * $d0;

        $l4 = (long) $d2;

        return $l4;
    }

    public androidx.media3.common.audio.AudioProcessor$AudioFormat configure(androidx.media3.common.audio.AudioProcessor$AudioFormat) throws androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4;
        androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException $r4;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessor$AudioFormat;

        $i1 = r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int encoding>;

        if $i1 == 2 goto label1;

        $r4 = new androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException;

        specialinvoke $r4.<androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException: void <init>(androidx.media3.common.audio.AudioProcessor$AudioFormat)>(r1);

        throw $r4;

     label1:
        $i2 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: int pendingOutputSampleRate>;

        if $i2 != -1 goto label2;

        $i4 = r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        goto label3;

     label2:
        $i4 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: int pendingOutputSampleRate>;

     label3:
        i0 = $i4;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat> = r1;

        $r2 = new androidx.media3.common.audio.AudioProcessor$AudioFormat;

        $i3 = r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int channelCount>;

        specialinvoke $r2.<androidx.media3.common.audio.AudioProcessor$AudioFormat: void <init>(int,int,int)>(i0, $i3, 2);

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat> = $r2;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean pendingSonicRecreation> = 1;

        $r3 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat>;

        return $r3;
    }

    public boolean isActive()
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r1, $r2, $r3;
        int $i0, $i3, $i4;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        byte $b1, $b2;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        $r1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat>;

        $i0 = $r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        if $i0 == -1 goto label2;

        $f0 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float speed>;

        $f1 = $f0 - 1.0F;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $b1 = $f2 cmpl 1.0E-4F;

        if $b1 >= 0 goto label1;

        $f3 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float pitch>;

        $f4 = $f3 - 1.0F;

        $f5 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        $b2 = $f5 cmpl 1.0E-4F;

        if $b2 >= 0 goto label1;

        $r2 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat>;

        $i4 = $r2.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        $r3 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat>;

        $i3 = $r3.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        if $i4 == $i3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void queueInput(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        java.nio.ByteBuffer r1;
        androidx.media3.exoplayer.audio.Sonic r2, $r4;
        java.nio.ShortBuffer r3;
        int i0, $i4, $i5;
        boolean $z0;
        java.lang.Object $r5;
        long $l1, $l2, $l3;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>;

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        r2 = (androidx.media3.exoplayer.audio.Sonic) $r5;

        r3 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>();

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $l2 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long inputBytes>;

        $l1 = (long) i0;

        $l3 = $l2 + $l1;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long inputBytes> = $l3;

        virtualinvoke r2.<androidx.media3.exoplayer.audio.Sonic: void queueInput(java.nio.ShortBuffer)>(r3);

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i5 = $i4 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i5);

        return;
    }

    public void queueEndOfStream()
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        androidx.media3.exoplayer.audio.Sonic $r1, $r2;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        $r1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>;

        virtualinvoke $r2.<androidx.media3.exoplayer.audio.Sonic: void queueEndOfStream()>();

     label1:
        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean inputEnded> = 1;

        return;
    }

    public java.nio.ByteBuffer getOutput()
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        androidx.media3.exoplayer.audio.Sonic r1;
        java.nio.ByteBuffer $r2, $r3, $r8, $r10, $r11, $r13, $r14, r17, $r18;
        int $i0, i4;
        java.nio.ShortBuffer $r5, $r7, $r15;
        long $l1, $l2, $l3;
        java.nio.ByteOrder $r12;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        r1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>;

        if r1 == null goto label3;

        i4 = virtualinvoke r1.<androidx.media3.exoplayer.audio.Sonic: int getOutputSize()>();

        if i4 <= 0 goto label3;

        $r2 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int capacity()>();

        if $i0 >= i4 goto label1;

        $r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i4);

        $r12 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r13 = virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r12);

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer> = $r13;

        $r14 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer>;

        $r15 = virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>();

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ShortBuffer shortBuffer> = $r15;

        goto label2;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r5 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ShortBuffer shortBuffer>;

        virtualinvoke $r5.<java.nio.ShortBuffer: java.nio.Buffer clear()>();

     label2:
        $r7 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ShortBuffer shortBuffer>;

        virtualinvoke r1.<androidx.media3.exoplayer.audio.Sonic: void getOutput(java.nio.ShortBuffer)>($r7);

        $l2 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long outputBytes>;

        $l1 = (long) i4;

        $l3 = $l2 + $l1;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long outputBytes> = $l3;

        $r8 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer>;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i4);

        $r10 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer outputBuffer> = $r10;

     label3:
        r17 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer outputBuffer>;

        $r18 = <androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer outputBuffer> = $r18;

        return r17;
    }

    public boolean isEnded()
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        boolean $z0, $z1;
        androidx.media3.exoplayer.audio.Sonic $r1, $r2;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        $z0 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean inputEnded>;

        if $z0 == 0 goto label2;

        $r1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>;

        $i0 = virtualinvoke $r2.<androidx.media3.exoplayer.audio.Sonic: int getOutputSize()>();

        if $i0 != 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void flush()
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        boolean $z0, $z1;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r1, $r2, $r6, $r7, $r8;
        androidx.media3.exoplayer.audio.Sonic $r3, $r4, $r5;
        int $i0, $i1, $i2;
        float $f0, $f1;
        java.nio.ByteBuffer $r9;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean isActive()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat> = $r1;

        $r2 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat> = $r2;

        $z1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean pendingSonicRecreation>;

        if $z1 == 0 goto label1;

        $r5 = new androidx.media3.exoplayer.audio.Sonic;

        $r6 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i2 = $r6.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        $r7 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i1 = $r7.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int channelCount>;

        $f1 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float speed>;

        $f0 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float pitch>;

        $r8 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat>;

        $i0 = $r8.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        specialinvoke $r5.<androidx.media3.exoplayer.audio.Sonic: void <init>(int,int,float,float,int)>($i2, $i1, $f1, $f0, $i0);

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic> = $r5;

        goto label2;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>;

        if $r3 == null goto label2;

        $r4 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic>;

        virtualinvoke $r4.<androidx.media3.exoplayer.audio.Sonic: void flush()>();

     label2:
        $r9 = <androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer outputBuffer> = $r9;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long inputBytes> = 0L;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long outputBytes> = 0L;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean inputEnded> = 0;

        return;
    }

    public void reset()
    {
        androidx.media3.exoplayer.audio.SonicAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r1, $r2, $r3, $r4;
        java.nio.ByteBuffer $r5, $r6, $r8;
        java.nio.ShortBuffer $r7;

        r0 := @this: androidx.media3.exoplayer.audio.SonicAudioProcessor;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float speed> = 1.0F;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: float pitch> = 1.0F;

        $r1 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat> = $r1;

        $r2 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat> = $r2;

        $r3 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat> = $r3;

        $r4 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat> = $r4;

        $r5 = <androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer> = $r5;

        $r6 = r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer buffer>;

        $r7 = virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>();

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ShortBuffer shortBuffer> = $r7;

        $r8 = <androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: java.nio.ByteBuffer outputBuffer> = $r8;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: int pendingOutputSampleRate> = -1;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean pendingSonicRecreation> = 0;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: androidx.media3.exoplayer.audio.Sonic sonic> = null;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long inputBytes> = 0L;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: long outputBytes> = 0L;

        r0.<androidx.media3.exoplayer.audio.SonicAudioProcessor: boolean inputEnded> = 0;

        return;
    }

