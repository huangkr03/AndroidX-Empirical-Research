androidx.media3.test.utils.FakeMediaSource
<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.MediaItem FAKE_MEDIA_ITEM>
<androidx.media3.test.utils.FakeMediaSource: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC>
<androidx.media3.test.utils.FakeMediaSource: int MANIFEST_LOAD_BYTES>
<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.source.TrackGroupArray trackGroupArray>
<androidx.media3.test.utils.FakeMediaSource: androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory trackDataFactory>
<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList activeMediaPeriods>
<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList createdMediaPeriods>
<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>
<androidx.media3.test.utils.FakeMediaSource: boolean preparationAllowed>
<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>
<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource>
<androidx.media3.test.utils.FakeMediaSource: boolean releasedSource>
<androidx.media3.test.utils.FakeMediaSource: android.os.Handler sourceInfoRefreshHandler>
<androidx.media3.test.utils.FakeMediaSource: androidx.media3.datasource.TransferListener transferListener>
    public static androidx.media3.test.utils.FakeMediaSource createWithWindowId(java.lang.Object)
    {
        java.lang.Object r0;
        androidx.media3.test.utils.FakeMediaSource $r1;
        androidx.media3.test.utils.FakeTimeline $r2;
        androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition[] $r3;
        androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition $r4;
        androidx.media3.common.Format[] $r5;

        r0 := @parameter0: java.lang.Object;

        $r1 = new androidx.media3.test.utils.FakeMediaSource;

        $r2 = new androidx.media3.test.utils.FakeTimeline;

        $r3 = newarray (androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition)[1];

        $r4 = new androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition;

        specialinvoke $r4.<androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition: void <init>(int,java.lang.Object)>(1, r0);

        $r3[0] = $r4;

        specialinvoke $r2.<androidx.media3.test.utils.FakeTimeline: void <init>(androidx.media3.test.utils.FakeTimeline$TimelineWindowDefinition[])>($r3);

        $r5 = newarray (androidx.media3.common.Format)[0];

        specialinvoke $r1.<androidx.media3.test.utils.FakeMediaSource: void <init>(androidx.media3.common.Timeline,androidx.media3.common.Format[])>($r2, $r5);

        return $r1;
    }

    public void <init>()
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.test.utils.FakeTimeline $r1;
        androidx.media3.common.Format[] $r2;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $r1 = new androidx.media3.test.utils.FakeTimeline;

        specialinvoke $r1.<androidx.media3.test.utils.FakeTimeline: void <init>()>();

        $r2 = newarray (androidx.media3.common.Format)[0];

        specialinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void <init>(androidx.media3.common.Timeline,androidx.media3.common.Format[])>($r1, $r2);

        return;
    }

    public transient void <init>(androidx.media3.common.Timeline, androidx.media3.common.Format[])
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline r1;
        androidx.media3.common.Format[] r2;
        androidx.media3.exoplayer.drm.DrmSessionManager $r3;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.common.Timeline;

        r2 := @parameter1: androidx.media3.common.Format[];

        $r3 = <androidx.media3.exoplayer.drm.DrmSessionManager: androidx.media3.exoplayer.drm.DrmSessionManager DRM_UNSUPPORTED>;

        specialinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void <init>(androidx.media3.common.Timeline,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.common.Format[])>(r1, $r3, r2);

        return;
    }

    public transient void <init>(androidx.media3.common.Timeline, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.common.Format[])
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline r1;
        androidx.media3.exoplayer.drm.DrmSessionManager r2;
        androidx.media3.common.Format[] r3;
        androidx.media3.exoplayer.source.TrackGroupArray $r4;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.common.Timeline;

        r2 := @parameter1: androidx.media3.exoplayer.drm.DrmSessionManager;

        r3 := @parameter2: androidx.media3.common.Format[];

        $r4 = staticinvoke <androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.source.TrackGroupArray buildTrackGroupArray(androidx.media3.common.Format[])>(r3);

        specialinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void <init>(androidx.media3.common.Timeline,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory,androidx.media3.exoplayer.source.TrackGroupArray)>(r1, r2, null, $r4);

        return;
    }

    public transient void <init>(androidx.media3.common.Timeline, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory, androidx.media3.common.Format[])
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline r1;
        androidx.media3.exoplayer.drm.DrmSessionManager r2;
        androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory r3;
        androidx.media3.common.Format[] r4;
        androidx.media3.exoplayer.source.TrackGroupArray $r5;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.common.Timeline;

        r2 := @parameter1: androidx.media3.exoplayer.drm.DrmSessionManager;

        r3 := @parameter2: androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory;

        r4 := @parameter3: androidx.media3.common.Format[];

        $r5 = staticinvoke <androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.source.TrackGroupArray buildTrackGroupArray(androidx.media3.common.Format[])>(r4);

        specialinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void <init>(androidx.media3.common.Timeline,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory,androidx.media3.exoplayer.source.TrackGroupArray)>(r1, r2, r3, $r5);

        return;
    }

    public void <init>(androidx.media3.common.Timeline, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory, androidx.media3.exoplayer.source.TrackGroupArray)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline r1;
        androidx.media3.exoplayer.drm.DrmSessionManager r2;
        androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory r3;
        androidx.media3.exoplayer.source.TrackGroupArray r4;
        java.util.ArrayList $r5, $r6;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.common.Timeline;

        r2 := @parameter1: androidx.media3.exoplayer.drm.DrmSessionManager;

        r3 := @parameter2: androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory;

        r4 := @parameter3: androidx.media3.exoplayer.source.TrackGroupArray;

        specialinvoke r0.<androidx.media3.exoplayer.source.BaseMediaSource: void <init>()>();

        if r1 == null goto label1;

        r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline> = r1;

     label1:
        r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.source.TrackGroupArray trackGroupArray> = r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList activeMediaPeriods> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList createdMediaPeriods> = $r6;

        r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager> = r2;

        r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory trackDataFactory> = r3;

        r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparationAllowed> = 1;

        return;
    }

    public synchronized void setAllowPreparation(boolean)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        boolean z0;
        android.os.Handler $r1, $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparationAllowed> = z0;

        if z0 == 0 goto label1;

        $r1 = r0.<androidx.media3.test.utils.FakeMediaSource: android.os.Handler sourceInfoRefreshHandler>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.test.utils.FakeMediaSource: android.os.Handler sourceInfoRefreshHandler>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.FakeMediaSource)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.FakeMediaSource: void lambda$setAllowPreparation$0()>, methodtype: void __METHODTYPE__());

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

     label1:
        return;
    }

    protected androidx.media3.common.Timeline getTimeline()
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline $r1;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $r1 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        return $r1;
    }

    public androidx.media3.common.MediaItem getMediaItem()
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline $r1, $r3, $r5;
        androidx.media3.common.MediaItem $r2, $r7;
        boolean $z0;
        androidx.media3.common.Timeline$Window $r4, $r6;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $r1 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $z0 = virtualinvoke $r3.<androidx.media3.common.Timeline: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r2 = <androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.MediaItem FAKE_MEDIA_ITEM>;

        return $r2;

     label2:
        $r5 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $r4 = new androidx.media3.common.Timeline$Window;

        specialinvoke $r4.<androidx.media3.common.Timeline$Window: void <init>()>();

        $r6 = virtualinvoke $r5.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Window getWindow(int,androidx.media3.common.Timeline$Window)>(0, $r4);

        $r7 = $r6.<androidx.media3.common.Timeline$Window: androidx.media3.common.MediaItem mediaItem>;

        return $r7;
    }

    public androidx.media3.common.Timeline getInitialTimeline()
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline $r1, $r2, $r3, $r4;
        boolean $z0;
        int $i0;
        androidx.media3.test.utils.FakeMediaSource$InitialTimeline $r5;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $r1 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $z0 = virtualinvoke $r2.<androidx.media3.common.Timeline: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $i0 = virtualinvoke $r3.<androidx.media3.common.Timeline: int getWindowCount()>();

        if $i0 != 1 goto label2;

     label1:
        $r5 = null;

        goto label3;

     label2:
        $r5 = new androidx.media3.test.utils.FakeMediaSource$InitialTimeline;

        $r4 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        specialinvoke $r5.<androidx.media3.test.utils.FakeMediaSource$InitialTimeline: void <init>(androidx.media3.common.Timeline)>($r4);

     label3:
        return $r5;
    }

    public boolean isSingleWindow()
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $r1 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $z0 = virtualinvoke $r2.<androidx.media3.common.Timeline: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $i0 = virtualinvoke $r3.<androidx.media3.common.Timeline: int getWindowCount()>();

        if $i0 != 1 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public synchronized void prepareSourceInternal(androidx.media3.datasource.TransferListener)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.datasource.TransferListener r1;
        boolean $z0, $z1;
        java.lang.Boolean $r2;
        com.google.common.truth.BooleanSubject $r3;
        androidx.media3.exoplayer.drm.DrmSessionManager $r4, $r5;
        android.os.Looper $r6, $r8;
        java.lang.Object $r7;
        androidx.media3.exoplayer.analytics.PlayerId $r9;
        android.os.Handler $r10;
        androidx.media3.common.Timeline $r11;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.datasource.TransferListener;

        $z0 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r2);

        virtualinvoke $r3.<com.google.common.truth.BooleanSubject: void isFalse()>();

        r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.datasource.TransferListener transferListener> = r1;

        $r4 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        interfaceinvoke $r4.<androidx.media3.exoplayer.drm.DrmSessionManager: void prepare()>();

        $r5 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r7 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        $r8 = (android.os.Looper) $r7;

        $r9 = virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.analytics.PlayerId getPlayerId()>();

        interfaceinvoke $r5.<androidx.media3.exoplayer.drm.DrmSessionManager: void setPlayer(android.os.Looper,androidx.media3.exoplayer.analytics.PlayerId)>($r8, $r9);

        r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource> = 1;

        r0.<androidx.media3.test.utils.FakeMediaSource: boolean releasedSource> = 0;

        $r10 = staticinvoke <androidx.media3.common.util.Util: android.os.Handler createHandlerForCurrentLooper()>();

        r0.<androidx.media3.test.utils.FakeMediaSource: android.os.Handler sourceInfoRefreshHandler> = $r10;

        $z1 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparationAllowed>;

        if $z1 == 0 goto label1;

        $r11 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        if $r11 == null goto label1;

        specialinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void finishSourcePreparation(boolean)>(1);

     label1:
        return;
    }

    public void maybeThrowSourceInfoRefreshError() throws java.io.IOException
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        boolean $z0;
        java.lang.Boolean $r1;
        com.google.common.truth.BooleanSubject $r2;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $z0 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r1);

        virtualinvoke $r2.<com.google.common.truth.BooleanSubject: void isTrue()>();

        return;
    }

    public androidx.media3.exoplayer.source.MediaPeriod createPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.upstream.Allocator, long)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.upstream.Allocator r2;
        long l0, $l3;
        int i1, $i2, $i4;
        androidx.media3.common.Timeline$Period r3, $r15;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher r4;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r5;
        androidx.media3.exoplayer.source.MediaPeriod r6;
        boolean $z0, $z1, $z4;
        java.lang.Boolean $r7, $r9;
        com.google.common.truth.BooleanSubject $r8, $r10;
        androidx.media3.common.Timeline $r11, $r14, $r16;
        java.lang.Object $r12, $r13;
        androidx.media3.datasource.TransferListener $r17;
        androidx.media3.exoplayer.drm.DrmSessionManager $r18;
        androidx.media3.exoplayer.source.TrackGroupArray $r19;
        java.util.ArrayList $r20, $r21;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter1: androidx.media3.exoplayer.upstream.Allocator;

        l0 := @parameter2: long;

        $z0 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r8 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r7);

        virtualinvoke $r8.<com.google.common.truth.BooleanSubject: void isTrue()>();

        $z1 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean releasedSource>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r10 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r9);

        virtualinvoke $r10.<com.google.common.truth.BooleanSubject: void isFalse()>();

        $r11 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $r12 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r11);

        $r14 = (androidx.media3.common.Timeline) $r12;

        $r13 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: java.lang.Object periodUid>;

        i1 = virtualinvoke $r14.<androidx.media3.common.Timeline: int getIndexOfPeriod(java.lang.Object)>($r13);

        if i1 == -1 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z4);

        $r16 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $r15 = new androidx.media3.common.Timeline$Period;

        specialinvoke $r15.<androidx.media3.common.Timeline$Period: void <init>()>();

        r3 = virtualinvoke $r16.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Period getPeriod(int,androidx.media3.common.Timeline$Period)>(i1, $r15);

        $i2 = r3.<androidx.media3.common.Timeline$Period: int windowIndex>;

        $l3 = virtualinvoke r3.<androidx.media3.common.Timeline$Period: long getPositionInWindowMs()>();

        r4 = virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher createEventDispatcher(int,androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,long)>($i2, r1, $l3);

        $i4 = r3.<androidx.media3.common.Timeline$Period: int windowIndex>;

        r5 = virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher createDrmEventDispatcher(int,androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)>($i4, r1);

        $r19 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.source.TrackGroupArray trackGroupArray>;

        $r18 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        $r17 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.datasource.TransferListener transferListener>;

        r6 = virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.source.MediaPeriod createMediaPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,androidx.media3.exoplayer.source.TrackGroupArray,androidx.media3.exoplayer.upstream.Allocator,androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher,androidx.media3.datasource.TransferListener)>(r1, $r19, r2, r4, $r18, r5, $r17);

        $r20 = r0.<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList activeMediaPeriods>;

        virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        $r21 = r0.<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList createdMediaPeriods>;

        virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r6;
    }

    public void releasePeriod(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r2, $r4, $r7;
        com.google.common.truth.BooleanSubject $r3, $r5, $r8;
        java.util.ArrayList $r6;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        $z0 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r2);

        virtualinvoke $r3.<com.google.common.truth.BooleanSubject: void isTrue()>();

        $z1 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean releasedSource>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r5 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r4);

        virtualinvoke $r5.<com.google.common.truth.BooleanSubject: void isFalse()>();

        $r6 = r0.<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList activeMediaPeriods>;

        $z2 = virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r8 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r7);

        virtualinvoke $r8.<com.google.common.truth.BooleanSubject: void isTrue()>();

        virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void releaseMediaPeriod(androidx.media3.exoplayer.source.MediaPeriod)>(r1);

        return;
    }

    protected void releaseSourceInternal()
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r1, $r3, $r6;
        com.google.common.truth.BooleanSubject $r2, $r4, $r7;
        java.util.ArrayList $r5;
        androidx.media3.exoplayer.drm.DrmSessionManager $r8;
        android.os.Handler $r9, $r11;
        java.lang.Object $r10;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $z0 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r1);

        virtualinvoke $r2.<com.google.common.truth.BooleanSubject: void isTrue()>();

        $z1 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean releasedSource>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r3);

        virtualinvoke $r4.<com.google.common.truth.BooleanSubject: void isFalse()>();

        $r5 = r0.<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList activeMediaPeriods>;

        $z2 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r7 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r6);

        virtualinvoke $r7.<com.google.common.truth.BooleanSubject: void isTrue()>();

        $r8 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        interfaceinvoke $r8.<androidx.media3.exoplayer.drm.DrmSessionManager: void release()>();

        r0.<androidx.media3.test.utils.FakeMediaSource: boolean releasedSource> = 1;

        r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource> = 0;

        $r9 = r0.<androidx.media3.test.utils.FakeMediaSource: android.os.Handler sourceInfoRefreshHandler>;

        $r10 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r9);

        $r11 = (android.os.Handler) $r10;

        virtualinvoke $r11.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        r0.<androidx.media3.test.utils.FakeMediaSource: android.os.Handler sourceInfoRefreshHandler> = null;

        return;
    }

    public void setNewSourceInfo(androidx.media3.common.Timeline)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline r1;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.common.Timeline;

        virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void setNewSourceInfo(androidx.media3.common.Timeline,boolean)>(r1, 1);

        return;
    }

    public synchronized void setNewSourceInfo(androidx.media3.common.Timeline, boolean)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline r1;
        boolean z0, $z1;
        android.os.Handler $r2, $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.common.Timeline;

        z0 := @parameter1: boolean;

        $z1 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparationAllowed>;

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        $r2 = r0.<androidx.media3.test.utils.FakeMediaSource: android.os.Handler sourceInfoRefreshHandler>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.media3.test.utils.FakeMediaSource: android.os.Handler sourceInfoRefreshHandler>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.FakeMediaSource,androidx.media3.common.Timeline,boolean)>(r0, r1, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.FakeMediaSource: void lambda$setNewSourceInfo$1(androidx.media3.common.Timeline,boolean)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        goto label2;

     label1:
        r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline> = r1;

     label2:
        return;
    }

    public boolean isPrepared()
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $z0 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource>;

        return $z0;
    }

    public void assertReleased()
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r1;
        com.google.common.truth.BooleanSubject $r2;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $z0 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean releasedSource>;

        if $z0 != 0 goto label1;

        $z1 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource>;

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r1);

        virtualinvoke $r2.<com.google.common.truth.BooleanSubject: void isTrue()>();

        return;
    }

    public void assertMediaPeriodCreated(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        java.util.ArrayList $r2;
        com.google.common.truth.IterableSubject $r3;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r2 = r0.<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList createdMediaPeriods>;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r2);

        virtualinvoke $r3.<com.google.common.truth.IterableSubject: void contains(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getCreatedMediaPeriods()
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        java.util.ArrayList $r1;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        $r1 = r0.<androidx.media3.test.utils.FakeMediaSource: java.util.ArrayList createdMediaPeriods>;

        return $r1;
    }

    protected androidx.media3.exoplayer.source.MediaPeriod createMediaPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.source.TrackGroupArray, androidx.media3.exoplayer.upstream.Allocator, androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher, androidx.media3.datasource.TransferListener)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.source.TrackGroupArray r2;
        androidx.media3.exoplayer.upstream.Allocator r3;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher r4;
        androidx.media3.exoplayer.drm.DrmSessionManager r5;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r6;
        androidx.media3.datasource.TransferListener r7;
        long l0, l1, $l3;
        androidx.media3.common.Timeline$Period $r8, $r11;
        androidx.media3.common.Timeline $r9;
        java.lang.Object $r10;
        byte $b2;
        androidx.media3.test.utils.FakeMediaPeriod $r12;
        androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory $r13, $r16;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter1: androidx.media3.exoplayer.source.TrackGroupArray;

        r3 := @parameter2: androidx.media3.exoplayer.upstream.Allocator;

        r4 := @parameter3: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher;

        r5 := @parameter4: androidx.media3.exoplayer.drm.DrmSessionManager;

        r6 := @parameter5: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        r7 := @parameter6: androidx.media3.datasource.TransferListener;

        $r9 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $r10 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: java.lang.Object periodUid>;

        $r8 = new androidx.media3.common.Timeline$Period;

        specialinvoke $r8.<androidx.media3.common.Timeline$Period: void <init>()>();

        $r11 = virtualinvoke $r9.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Period getPeriodByUid(java.lang.Object,androidx.media3.common.Timeline$Period)>($r10, $r8);

        l0 = virtualinvoke $r11.<androidx.media3.common.Timeline$Period: long getPositionInWindowUs()>();

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $z0 = virtualinvoke r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: boolean isAd()>();

        if $z0 == 0 goto label2;

     label1:
        $l3 = 0L;

        goto label3;

     label2:
        $l3 = neg l0;

     label3:
        l1 = $l3;

        $r12 = new androidx.media3.test.utils.FakeMediaPeriod;

        $r13 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory trackDataFactory>;

        if $r13 == null goto label4;

        $r16 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory trackDataFactory>;

        goto label5;

     label4:
        $r16 = staticinvoke <androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory: androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory singleSampleWithTimeUs(long)>(l1);

     label5:
        specialinvoke $r12.<androidx.media3.test.utils.FakeMediaPeriod: void <init>(androidx.media3.exoplayer.source.TrackGroupArray,androidx.media3.exoplayer.upstream.Allocator,androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory,androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher,boolean)>(r2, r3, $r16, r4, r5, r6, 0);

        return $r12;
    }

    protected void releaseMediaPeriod(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        androidx.media3.test.utils.FakeMediaPeriod $r2;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        $r2 = (androidx.media3.test.utils.FakeMediaPeriod) r1;

        virtualinvoke $r2.<androidx.media3.test.utils.FakeMediaPeriod: void release()>();

        return;
    }

    private void finishSourcePreparation(boolean)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        boolean z0, $z1;
        androidx.media3.exoplayer.source.MediaLoadData r1, $r7;
        long l0, l1;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher r2;
        androidx.media3.common.Timeline $r3, $r5, $r6;
        java.lang.Object $r4;
        androidx.media3.exoplayer.source.LoadEventInfo $r8, $r13;
        androidx.media3.datasource.DataSpec $r9, $r10, $r14, $r15;
        android.net.Uri $r11, $r16;
        com.google.common.collect.ImmutableMap $r12, $r17;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        z0 := @parameter0: boolean;

        $r3 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $r4 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r3);

        $r5 = (androidx.media3.common.Timeline) $r4;

        virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void refreshSourceInfo(androidx.media3.common.Timeline)>($r5);

        $r6 = r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline>;

        $z1 = virtualinvoke $r6.<androidx.media3.common.Timeline: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        if z0 == 0 goto label1;

        $r7 = new androidx.media3.exoplayer.source.MediaLoadData;

        specialinvoke $r7.<androidx.media3.exoplayer.source.MediaLoadData: void <init>(int,int,androidx.media3.common.Format,int,java.lang.Object,long,long)>(4, -1, null, 0, null, -9223372036854775807L, -9223372036854775807L);

        r1 = $r7;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r2 = virtualinvoke r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher createEventDispatcher(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)>(null);

        l1 = staticinvoke <androidx.media3.exoplayer.source.LoadEventInfo: long getNewId()>();

        $r8 = new androidx.media3.exoplayer.source.LoadEventInfo;

        $r10 = <androidx.media3.test.utils.FakeMediaSource: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC>;

        $r9 = <androidx.media3.test.utils.FakeMediaSource: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC>;

        $r11 = $r9.<androidx.media3.datasource.DataSpec: android.net.Uri uri>;

        $r12 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        specialinvoke $r8.<androidx.media3.exoplayer.source.LoadEventInfo: void <init>(long,androidx.media3.datasource.DataSpec,android.net.Uri,java.util.Map,long,long,long)>(l1, $r10, $r11, $r12, l0, 0L, 0L);

        virtualinvoke r2.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void loadStarted(androidx.media3.exoplayer.source.LoadEventInfo,androidx.media3.exoplayer.source.MediaLoadData)>($r8, r1);

        $r13 = new androidx.media3.exoplayer.source.LoadEventInfo;

        $r15 = <androidx.media3.test.utils.FakeMediaSource: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC>;

        $r14 = <androidx.media3.test.utils.FakeMediaSource: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC>;

        $r16 = $r14.<androidx.media3.datasource.DataSpec: android.net.Uri uri>;

        $r17 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        specialinvoke $r13.<androidx.media3.exoplayer.source.LoadEventInfo: void <init>(long,androidx.media3.datasource.DataSpec,android.net.Uri,java.util.Map,long,long,long)>(l1, $r15, $r16, $r17, l0, 0L, 100L);

        virtualinvoke r2.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void loadCompleted(androidx.media3.exoplayer.source.LoadEventInfo,androidx.media3.exoplayer.source.MediaLoadData)>($r13, r1);

     label1:
        return;
    }

    private static transient androidx.media3.exoplayer.source.TrackGroupArray buildTrackGroupArray(androidx.media3.common.Format[])
    {
        androidx.media3.common.Format[] r0, $r4;
        androidx.media3.common.TrackGroup[] r1;
        int $i0, $i1, i2;
        androidx.media3.exoplayer.source.TrackGroupArray $r2;
        androidx.media3.common.TrackGroup $r3;
        androidx.media3.common.Format $r5;

        r0 := @parameter0: androidx.media3.common.Format[];

        $i0 = lengthof r0;

        r1 = newarray (androidx.media3.common.TrackGroup)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r3 = new androidx.media3.common.TrackGroup;

        $r4 = newarray (androidx.media3.common.Format)[1];

        $r5 = r0[i2];

        $r4[0] = $r5;

        specialinvoke $r3.<androidx.media3.common.TrackGroup: void <init>(androidx.media3.common.Format[])>($r4);

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = new androidx.media3.exoplayer.source.TrackGroupArray;

        specialinvoke $r2.<androidx.media3.exoplayer.source.TrackGroupArray: void <init>(androidx.media3.common.TrackGroup[])>(r1);

        return $r2;
    }

    private void lambda$setNewSourceInfo$1(androidx.media3.common.Timeline, boolean)
    {
        androidx.media3.test.utils.FakeMediaSource r0;
        androidx.media3.common.Timeline r1;
        boolean z0, $z1, $z2;
        java.lang.Boolean $r2, $r4;
        com.google.common.truth.BooleanSubject $r3, $r5;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        r1 := @parameter0: androidx.media3.common.Timeline;

        z0 := @parameter1: boolean;

        $z1 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean releasedSource>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r2);

        virtualinvoke $r3.<com.google.common.truth.BooleanSubject: void isFalse()>();

        $z2 = r0.<androidx.media3.test.utils.FakeMediaSource: boolean preparedSource>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r5 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r4);

        virtualinvoke $r5.<com.google.common.truth.BooleanSubject: void isTrue()>();

        r0.<androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.Timeline timeline> = r1;

        specialinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void finishSourcePreparation(boolean)>(z0);

        return;
    }

    private void lambda$setAllowPreparation$0()
    {
        androidx.media3.test.utils.FakeMediaSource r0;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource;

        specialinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void finishSourcePreparation(boolean)>(1);

        return;
    }

    static void <clinit>()
    {
        androidx.media3.common.MediaItem$Builder $r0, $r1, $r2;
        androidx.media3.common.MediaItem $r3, $r5;
        androidx.media3.datasource.DataSpec $r4;
        androidx.media3.common.MediaItem$LocalConfiguration $r6, $r8;
        java.lang.Object $r7;
        android.net.Uri $r9;

        $r0 = new androidx.media3.common.MediaItem$Builder;

        specialinvoke $r0.<androidx.media3.common.MediaItem$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setMediaId(java.lang.String)>("FakeMediaSource");

        $r2 = virtualinvoke $r1.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setUri(java.lang.String)>("http://manifest.uri");

        $r3 = virtualinvoke $r2.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem build()>();

        <androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.MediaItem FAKE_MEDIA_ITEM> = $r3;

        $r4 = new androidx.media3.datasource.DataSpec;

        $r5 = <androidx.media3.test.utils.FakeMediaSource: androidx.media3.common.MediaItem FAKE_MEDIA_ITEM>;

        $r6 = $r5.<androidx.media3.common.MediaItem: androidx.media3.common.MediaItem$LocalConfiguration localConfiguration>;

        $r7 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r6);

        $r8 = (androidx.media3.common.MediaItem$LocalConfiguration) $r7;

        $r9 = $r8.<androidx.media3.common.MediaItem$LocalConfiguration: android.net.Uri uri>;

        specialinvoke $r4.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r9);

        <androidx.media3.test.utils.FakeMediaSource: androidx.media3.datasource.DataSpec FAKE_DATA_SPEC> = $r4;

        return;
    }

androidx.media3.test.utils.FakeMediaSource$InitialTimeline
    public void <init>(androidx.media3.common.Timeline)
    {
        androidx.media3.test.utils.FakeMediaSource$InitialTimeline r0;
        androidx.media3.common.Timeline r1;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource$InitialTimeline;

        r1 := @parameter0: androidx.media3.common.Timeline;

        specialinvoke r0.<androidx.media3.exoplayer.source.ForwardingTimeline: void <init>(androidx.media3.common.Timeline)>(r1);

        return;
    }

    public androidx.media3.common.Timeline$Window getWindow(int, androidx.media3.common.Timeline$Window, long)
    {
        androidx.media3.test.utils.FakeMediaSource$InitialTimeline r0;
        int i0;
        androidx.media3.common.Timeline$Window r1, r2;
        long l1;
        androidx.media3.common.Timeline $r3;

        r0 := @this: androidx.media3.test.utils.FakeMediaSource$InitialTimeline;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.Timeline$Window;

        l1 := @parameter2: long;

        $r3 = r0.<androidx.media3.test.utils.FakeMediaSource$InitialTimeline: androidx.media3.common.Timeline timeline>;

        r2 = virtualinvoke $r3.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Window getWindow(int,androidx.media3.common.Timeline$Window,long)>(i0, r1, l1);

        r2.<androidx.media3.common.Timeline$Window: boolean isDynamic> = 1;

        r2.<androidx.media3.common.Timeline$Window: boolean isSeekable> = 0;

        return r2;
    }

