androidx.lifecycle.BlockRunner
<androidx.lifecycle.BlockRunner: androidx.lifecycle.CoroutineLiveData liveData>
<androidx.lifecycle.BlockRunner: kotlin.jvm.functions.Function2 block>
<androidx.lifecycle.BlockRunner: long timeoutInMs>
<androidx.lifecycle.BlockRunner: kotlinx.coroutines.CoroutineScope scope>
<androidx.lifecycle.BlockRunner: kotlin.jvm.functions.Function0 onDone>
<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job runningJob>
<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job cancellationJob>
    public void <init>(androidx.lifecycle.CoroutineLiveData, kotlin.jvm.functions.Function2, long, kotlinx.coroutines.CoroutineScope, kotlin.jvm.functions.Function0)
    {
        androidx.lifecycle.BlockRunner r0;
        androidx.lifecycle.CoroutineLiveData r1;
        kotlin.jvm.functions.Function2 r2;
        long l0;
        kotlinx.coroutines.CoroutineScope r3;
        kotlin.jvm.functions.Function0 r4;

        r0 := @this: androidx.lifecycle.BlockRunner;

        r1 := @parameter0: androidx.lifecycle.CoroutineLiveData;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        l0 := @parameter2: long;

        r3 := @parameter3: kotlinx.coroutines.CoroutineScope;

        r4 := @parameter4: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "liveData");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "scope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "onDone");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.lifecycle.BlockRunner: androidx.lifecycle.CoroutineLiveData liveData> = r1;

        r0.<androidx.lifecycle.BlockRunner: kotlin.jvm.functions.Function2 block> = r2;

        r0.<androidx.lifecycle.BlockRunner: long timeoutInMs> = l0;

        r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.CoroutineScope scope> = r3;

        r0.<androidx.lifecycle.BlockRunner: kotlin.jvm.functions.Function0 onDone> = r4;

        return;
    }

    public final void maybeRun()
    {
        androidx.lifecycle.BlockRunner r0;
        kotlinx.coroutines.Job $r1, $r2, $r6;
        androidx.lifecycle.BlockRunner$maybeRun$1 $r3;
        kotlinx.coroutines.CoroutineScope $r4;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.lifecycle.BlockRunner;

        $r1 = r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job cancellationJob>;

        if $r1 == null goto label1;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r1, null, 1, null);

        goto label1;

     label1:
        r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job cancellationJob> = null;

        $r2 = r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job runningJob>;

        if $r2 == null goto label2;

        return;

     label2:
        $r4 = r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.CoroutineScope scope>;

        $r3 = new androidx.lifecycle.BlockRunner$maybeRun$1;

        specialinvoke $r3.<androidx.lifecycle.BlockRunner$maybeRun$1: void <init>(androidx.lifecycle.BlockRunner,kotlin.coroutines.Continuation)>(r0, null);

        $r5 = (kotlin.jvm.functions.Function2) $r3;

        $r6 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r4, null, null, $r5, 3, null);

        r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job runningJob> = $r6;

        return;
    }

    public final void cancel()
    {
        androidx.lifecycle.BlockRunner r0;
        kotlinx.coroutines.Job $r1, $r8;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlinx.coroutines.MainCoroutineDispatcher $r3, $r4;
        androidx.lifecycle.BlockRunner$cancel$1 $r5;
        kotlin.coroutines.CoroutineContext $r6;
        kotlin.jvm.functions.Function2 $r7;
        java.lang.IllegalStateException $r9;
        java.lang.String $r10, $r11;

        r0 := @this: androidx.lifecycle.BlockRunner;

        $r1 = r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job cancellationJob>;

        if $r1 == null goto label1;

        $r9 = new java.lang.IllegalStateException;

        $r10 = "Cancel call cannot happen without a maybeRun";

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label1:
        $r2 = r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.CoroutineScope scope>;

        $r3 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>();

        $r4 = virtualinvoke $r3.<kotlinx.coroutines.MainCoroutineDispatcher: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()>();

        $r6 = (kotlin.coroutines.CoroutineContext) $r4;

        $r5 = new androidx.lifecycle.BlockRunner$cancel$1;

        specialinvoke $r5.<androidx.lifecycle.BlockRunner$cancel$1: void <init>(androidx.lifecycle.BlockRunner,kotlin.coroutines.Continuation)>(r0, null);

        $r7 = (kotlin.jvm.functions.Function2) $r5;

        $r8 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r2, $r6, null, $r7, 2, null);

        r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job cancellationJob> = $r8;

        return;
    }

    public static final androidx.lifecycle.CoroutineLiveData access$getLiveData$p(androidx.lifecycle.BlockRunner)
    {
        androidx.lifecycle.BlockRunner $r0;
        androidx.lifecycle.CoroutineLiveData $r1;

        $r0 := @parameter0: androidx.lifecycle.BlockRunner;

        $r1 = $r0.<androidx.lifecycle.BlockRunner: androidx.lifecycle.CoroutineLiveData liveData>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function2 access$getBlock$p(androidx.lifecycle.BlockRunner)
    {
        androidx.lifecycle.BlockRunner $r0;
        kotlin.jvm.functions.Function2 $r1;

        $r0 := @parameter0: androidx.lifecycle.BlockRunner;

        $r1 = $r0.<androidx.lifecycle.BlockRunner: kotlin.jvm.functions.Function2 block>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function0 access$getOnDone$p(androidx.lifecycle.BlockRunner)
    {
        androidx.lifecycle.BlockRunner $r0;
        kotlin.jvm.functions.Function0 $r1;

        $r0 := @parameter0: androidx.lifecycle.BlockRunner;

        $r1 = $r0.<androidx.lifecycle.BlockRunner: kotlin.jvm.functions.Function0 onDone>;

        return $r1;
    }

    public static final long access$getTimeoutInMs$p(androidx.lifecycle.BlockRunner)
    {
        androidx.lifecycle.BlockRunner $r0;
        long $l0;

        $r0 := @parameter0: androidx.lifecycle.BlockRunner;

        $l0 = $r0.<androidx.lifecycle.BlockRunner: long timeoutInMs>;

        return $l0;
    }

    public static final kotlinx.coroutines.Job access$getRunningJob$p(androidx.lifecycle.BlockRunner)
    {
        androidx.lifecycle.BlockRunner $r0;
        kotlinx.coroutines.Job $r1;

        $r0 := @parameter0: androidx.lifecycle.BlockRunner;

        $r1 = $r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job runningJob>;

        return $r1;
    }

    public static final void access$setRunningJob$p(androidx.lifecycle.BlockRunner, kotlinx.coroutines.Job)
    {
        androidx.lifecycle.BlockRunner $r0;
        kotlinx.coroutines.Job r1;

        $r0 := @parameter0: androidx.lifecycle.BlockRunner;

        r1 := @parameter1: kotlinx.coroutines.Job;

        $r0.<androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job runningJob> = r1;

        return;
    }

androidx.lifecycle.BlockRunner$cancel$1
<androidx.lifecycle.BlockRunner$cancel$1: int label>
<androidx.lifecycle.BlockRunner$cancel$1: androidx.lifecycle.BlockRunner this$0>
    void <init>(androidx.lifecycle.BlockRunner, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.BlockRunner$cancel$1 r0;
        androidx.lifecycle.BlockRunner $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.lifecycle.BlockRunner$cancel$1;

        $r1 := @parameter0: androidx.lifecycle.BlockRunner;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.lifecycle.BlockRunner$cancel$1: androidx.lifecycle.BlockRunner this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.lifecycle.BlockRunner$cancel$1 r0;
        java.lang.Object $r1, r2, $r10;
        int $i0;
        androidx.lifecycle.BlockRunner $r3, $r5, $r7, $r8;
        androidx.lifecycle.CoroutineLiveData $r4;
        boolean $z0;
        kotlinx.coroutines.Job $r6;
        long $l1;
        kotlin.coroutines.Continuation $r9;
        java.lang.IllegalStateException $r11;
        kotlin.Unit $r12;

        r0 := @this: androidx.lifecycle.BlockRunner$cancel$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.lifecycle.BlockRunner$cancel$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label6;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r8 = r0.<androidx.lifecycle.BlockRunner$cancel$1: androidx.lifecycle.BlockRunner this$0>;

        $l1 = staticinvoke <androidx.lifecycle.BlockRunner: long access$getTimeoutInMs$p(androidx.lifecycle.BlockRunner)>($r8);

        $r9 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.lifecycle.BlockRunner$cancel$1: int label> = 1;

        $r10 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>($l1, $r9);

        if $r10 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r3 = r0.<androidx.lifecycle.BlockRunner$cancel$1: androidx.lifecycle.BlockRunner this$0>;

        $r4 = staticinvoke <androidx.lifecycle.BlockRunner: androidx.lifecycle.CoroutineLiveData access$getLiveData$p(androidx.lifecycle.BlockRunner)>($r3);

        $z0 = virtualinvoke $r4.<androidx.lifecycle.CoroutineLiveData: boolean hasActiveObservers()>();

        if $z0 != 0 goto label5;

        $r5 = r0.<androidx.lifecycle.BlockRunner$cancel$1: androidx.lifecycle.BlockRunner this$0>;

        $r6 = staticinvoke <androidx.lifecycle.BlockRunner: kotlinx.coroutines.Job access$getRunningJob$p(androidx.lifecycle.BlockRunner)>($r5);

        if $r6 == null goto label4;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r6, null, 1, null);

        goto label4;

     label4:
        $r7 = r0.<androidx.lifecycle.BlockRunner$cancel$1: androidx.lifecycle.BlockRunner this$0>;

        staticinvoke <androidx.lifecycle.BlockRunner: void access$setRunningJob$p(androidx.lifecycle.BlockRunner,kotlinx.coroutines.Job)>($r7, null);

     label5:
        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r12;

     label6:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r11;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.BlockRunner$cancel$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        androidx.lifecycle.BlockRunner $r4;

        r0 := @this: androidx.lifecycle.BlockRunner$cancel$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.lifecycle.BlockRunner$cancel$1;

        $r4 = r0.<androidx.lifecycle.BlockRunner$cancel$1: androidx.lifecycle.BlockRunner this$0>;

        specialinvoke $r3.<androidx.lifecycle.BlockRunner$cancel$1: void <init>(androidx.lifecycle.BlockRunner,kotlin.coroutines.Continuation)>($r4, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.BlockRunner$cancel$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.lifecycle.BlockRunner$cancel$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.lifecycle.BlockRunner$cancel$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.lifecycle.BlockRunner$cancel$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.lifecycle.BlockRunner$cancel$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.lifecycle.BlockRunner$cancel$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.lifecycle.BlockRunner$cancel$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.lifecycle.BlockRunner$cancel$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.lifecycle.BlockRunner$maybeRun$1
<androidx.lifecycle.BlockRunner$maybeRun$1: int label>
<androidx.lifecycle.BlockRunner$maybeRun$1: java.lang.Object L$0>
<androidx.lifecycle.BlockRunner$maybeRun$1: androidx.lifecycle.BlockRunner this$0>
    void <init>(androidx.lifecycle.BlockRunner, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.BlockRunner$maybeRun$1 r0;
        androidx.lifecycle.BlockRunner $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.lifecycle.BlockRunner$maybeRun$1;

        $r1 := @parameter0: androidx.lifecycle.BlockRunner;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.lifecycle.BlockRunner$maybeRun$1: androidx.lifecycle.BlockRunner this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.lifecycle.BlockRunner$maybeRun$1 r0;
        java.lang.Object $r1, r4, $r9, $r16;
        kotlinx.coroutines.CoroutineScope $r2;
        androidx.lifecycle.LiveDataScopeImpl r3, $r10;
        int $i0;
        androidx.lifecycle.BlockRunner $r5, $r11, $r14;
        kotlin.jvm.functions.Function0 $r6;
        kotlin.Unit $r8;
        androidx.lifecycle.CoroutineLiveData $r12;
        kotlin.coroutines.CoroutineContext $r13;
        kotlin.jvm.functions.Function2 $r15;
        java.lang.IllegalStateException $r17;

        r0 := @this: androidx.lifecycle.BlockRunner$maybeRun$1;

        $r1 := @parameter0: java.lang.Object;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.lifecycle.BlockRunner$maybeRun$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r9 = r0.<androidx.lifecycle.BlockRunner$maybeRun$1: java.lang.Object L$0>;

        $r2 = (kotlinx.coroutines.CoroutineScope) $r9;

        $r10 = new androidx.lifecycle.LiveDataScopeImpl;

        $r11 = r0.<androidx.lifecycle.BlockRunner$maybeRun$1: androidx.lifecycle.BlockRunner this$0>;

        $r12 = staticinvoke <androidx.lifecycle.BlockRunner: androidx.lifecycle.CoroutineLiveData access$getLiveData$p(androidx.lifecycle.BlockRunner)>($r11);

        $r13 = interfaceinvoke $r2.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        specialinvoke $r10.<androidx.lifecycle.LiveDataScopeImpl: void <init>(androidx.lifecycle.CoroutineLiveData,kotlin.coroutines.CoroutineContext)>($r12, $r13);

        r3 = $r10;

        $r14 = r0.<androidx.lifecycle.BlockRunner$maybeRun$1: androidx.lifecycle.BlockRunner this$0>;

        $r15 = staticinvoke <androidx.lifecycle.BlockRunner: kotlin.jvm.functions.Function2 access$getBlock$p(androidx.lifecycle.BlockRunner)>($r14);

        r0.<androidx.lifecycle.BlockRunner$maybeRun$1: int label> = 1;

        $r16 = interfaceinvoke $r15.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r3, r0);

        if $r16 != r4 goto label3;

        return r4;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r5 = r0.<androidx.lifecycle.BlockRunner$maybeRun$1: androidx.lifecycle.BlockRunner this$0>;

        $r6 = staticinvoke <androidx.lifecycle.BlockRunner: kotlin.jvm.functions.Function0 access$getOnDone$p(androidx.lifecycle.BlockRunner)>($r5);

        interfaceinvoke $r6.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;

     label4:
        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r17;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.BlockRunner$maybeRun$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.lifecycle.BlockRunner $r5;

        r0 := @this: androidx.lifecycle.BlockRunner$maybeRun$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.lifecycle.BlockRunner$maybeRun$1;

        $r5 = r0.<androidx.lifecycle.BlockRunner$maybeRun$1: androidx.lifecycle.BlockRunner this$0>;

        specialinvoke $r4.<androidx.lifecycle.BlockRunner$maybeRun$1: void <init>(androidx.lifecycle.BlockRunner,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        r3.<androidx.lifecycle.BlockRunner$maybeRun$1: java.lang.Object L$0> = r1;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.BlockRunner$maybeRun$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.lifecycle.BlockRunner$maybeRun$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.lifecycle.BlockRunner$maybeRun$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.lifecycle.BlockRunner$maybeRun$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.lifecycle.BlockRunner$maybeRun$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.lifecycle.BlockRunner$maybeRun$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.lifecycle.BlockRunner$maybeRun$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.lifecycle.BlockRunner$maybeRun$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

