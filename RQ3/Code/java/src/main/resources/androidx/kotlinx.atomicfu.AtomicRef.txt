kotlinx.atomicfu.AtomicRef
<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.AtomicRef$Companion Companion>
<kotlinx.atomicfu.AtomicRef: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FU>
<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace>
<kotlinx.atomicfu.AtomicRef: java.lang.Object value>
    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;
        kotlinx.atomicfu.AtomicRef$Companion $r1;

        $r1 = new kotlinx.atomicfu.AtomicRef$Companion;

        specialinvoke $r1.<kotlinx.atomicfu.AtomicRef$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.AtomicRef$Companion Companion> = $r1;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/atomicfu/AtomicRef;", class "Ljava/lang/Object;", "value");

        <kotlinx.atomicfu.AtomicRef: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FU> = $r0;

        return;
    }

    public void <init>(java.lang.Object, kotlinx.atomicfu.TraceBase)
    {
        kotlinx.atomicfu.AtomicRef $r0;
        java.lang.Object $r1;
        kotlinx.atomicfu.TraceBase $r2;

        $r0 := @this: kotlinx.atomicfu.AtomicRef;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlinx.atomicfu.TraceBase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "trace");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace> = $r2;

        $r0.<kotlinx.atomicfu.AtomicRef: java.lang.Object value> = $r1;

        return;
    }

    public final boolean compareAndSet(java.lang.Object, java.lang.Object)
    {
        kotlinx.atomicfu.AtomicRef $r0;
        java.lang.Object $r1, $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        boolean $z0;
        kotlinx.atomicfu.TraceBase $r4;
        kotlinx.atomicfu.TraceBase$None $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @this: kotlinx.atomicfu.AtomicRef;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = <kotlinx.atomicfu.AtomicRef: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FU>;

        $z0 = staticinvoke <kotlinx.atomicfu.AtomicRef$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r0, $r1, $r2);

        if $z0 == 0 goto label1;

        $r4 = $r0.<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace>;

        $r5 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        if $r4 == $r5 goto label1;

        $r4 = $r0.<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CAS(");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<kotlinx.atomicfu.TraceBase: void append(java.lang.Object)>($r7);

     label1:
        return $z0;
    }

    public final java.lang.Object getAndSet(java.lang.Object)
    {
        kotlinx.atomicfu.AtomicRef $r0;
        java.lang.Object $r1, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        kotlinx.atomicfu.TraceBase $r4;
        kotlinx.atomicfu.TraceBase$None $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @this: kotlinx.atomicfu.AtomicRef;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <kotlinx.atomicfu.AtomicRef: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r4 = $r0.<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace>;

        $r5 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        if $r4 == $r5 goto label1;

        $r4 = $r0.<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAndSet(");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("):");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<kotlinx.atomicfu.TraceBase: void append(java.lang.Object)>($r7);

     label1:
        return $r3;
    }

    public final java.lang.Object getValue()
    {
        kotlinx.atomicfu.AtomicRef $r0;
        java.lang.Object r1;

        $r0 := @this: kotlinx.atomicfu.AtomicRef;

        r1 = $r0.<kotlinx.atomicfu.AtomicRef: java.lang.Object value>;

        return r1;
    }

    public final void lazySet(java.lang.Object)
    {
        kotlinx.atomicfu.AtomicRef $r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        kotlinx.atomicfu.TraceBase $r3;
        kotlinx.atomicfu.TraceBase$None $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: kotlinx.atomicfu.AtomicRef;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <kotlinx.atomicfu.AtomicRef: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FU>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r3 = $r0.<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace>;

        $r4 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        if $r3 == $r4 goto label1;

        $r3 = $r0.<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lazySet(");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<kotlinx.atomicfu.TraceBase: void append(java.lang.Object)>($r6);

     label1:
        return;
    }

    public final void setValue(java.lang.Object)
    {
        kotlinx.atomicfu.AtomicRef $r0;
        java.lang.Object $r1;
        kotlinx.atomicfu.TraceBase $r2;
        kotlinx.atomicfu.TraceBase$None $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: kotlinx.atomicfu.AtomicRef;

        $r1 := @parameter0: java.lang.Object;

        $r0.<kotlinx.atomicfu.AtomicRef: java.lang.Object value> = $r1;

        $r2 = $r0.<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace>;

        $r3 = <kotlinx.atomicfu.TraceBase$None: kotlinx.atomicfu.TraceBase$None INSTANCE>;

        if $r2 == $r3 goto label1;

        $r2 = $r0.<kotlinx.atomicfu.AtomicRef: kotlinx.atomicfu.TraceBase trace>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set(");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<kotlinx.atomicfu.TraceBase: void append(java.lang.Object)>($r5);

     label1:
        return;
    }

    public java.lang.String toString()
    {
        kotlinx.atomicfu.AtomicRef $r0;
        java.lang.String $r1;
        java.lang.Object $r2;

        $r0 := @this: kotlinx.atomicfu.AtomicRef;

        $r2 = $r0.<kotlinx.atomicfu.AtomicRef: java.lang.Object value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        return $r1;
    }

kotlinx.atomicfu.AtomicRef$$ExternalSyntheticBackportWithForwarding0
    public static boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1, $r2, $r4;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        boolean $z0;

        $r3 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

     label1:
        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        if $r4 == $r1 goto label1;

        return 0;
    }

kotlinx.atomicfu.AtomicRef$Companion
    private void <init>()
    {
        kotlinx.atomicfu.AtomicRef$Companion $r0;

        $r0 := @this: kotlinx.atomicfu.AtomicRef$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.atomicfu.AtomicRef$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlinx.atomicfu.AtomicRef$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlinx.atomicfu.AtomicRef$Companion: void <init>()>();

        return;
    }

