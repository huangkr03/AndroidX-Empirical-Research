androidx.compose.runtime.CompositionContext
<androidx.compose.runtime.CompositionContext: int $stable>
    public void <init>()
    {
        androidx.compose.runtime.CompositionContext r0;

        r0 := @this: androidx.compose.runtime.CompositionContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

<androidx.compose.runtime.CompositionContext: int getCompoundHashKey$runtime_release()>
<androidx.compose.runtime.CompositionContext: boolean getCollectingParameterInformation$runtime_release()>
<androidx.compose.runtime.CompositionContext: kotlin.coroutines.CoroutineContext getEffectCoroutineContext$runtime_release()>
<androidx.compose.runtime.CompositionContext: kotlin.coroutines.CoroutineContext getRecomposeCoroutineContext$runtime_release()>
<androidx.compose.runtime.CompositionContext: void composeInitial$runtime_release(androidx.compose.runtime.ControlledComposition,kotlin.jvm.functions.Function2)>
<androidx.compose.runtime.CompositionContext: void invalidate$runtime_release(androidx.compose.runtime.ControlledComposition)>
<androidx.compose.runtime.CompositionContext: void invalidateScope$runtime_release(androidx.compose.runtime.RecomposeScopeImpl)>
    public void recordInspectionTable$runtime_release(java.util.Set)
    {
        androidx.compose.runtime.CompositionContext r0;
        java.util.Set r1;

        r0 := @this: androidx.compose.runtime.CompositionContext;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        return;
    }

    public void registerComposer$runtime_release(androidx.compose.runtime.Composer)
    {
        androidx.compose.runtime.CompositionContext r0;
        androidx.compose.runtime.Composer r1;

        r0 := @this: androidx.compose.runtime.CompositionContext;

        r1 := @parameter0: androidx.compose.runtime.Composer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composer");

        return;
    }

    public void unregisterComposer$runtime_release(androidx.compose.runtime.Composer)
    {
        androidx.compose.runtime.CompositionContext r0;
        androidx.compose.runtime.Composer r1;

        r0 := @this: androidx.compose.runtime.CompositionContext;

        r1 := @parameter0: androidx.compose.runtime.Composer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composer");

        return;
    }

<androidx.compose.runtime.CompositionContext: void registerComposition$runtime_release(androidx.compose.runtime.ControlledComposition)>
<androidx.compose.runtime.CompositionContext: void unregisterComposition$runtime_release(androidx.compose.runtime.ControlledComposition)>
    public androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap getCompositionLocalScope$runtime_release()
    {
        androidx.compose.runtime.CompositionContext r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r1;

        r0 := @this: androidx.compose.runtime.CompositionContext;

        $r1 = staticinvoke <androidx.compose.runtime.CompositionContextKt: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap access$getEmptyCompositionLocalMap$p()>();

        return $r1;
    }

    public void startComposing$runtime_release()
    {
        androidx.compose.runtime.CompositionContext r0;

        r0 := @this: androidx.compose.runtime.CompositionContext;

        return;
    }

    public void doneComposing$runtime_release()
    {
        androidx.compose.runtime.CompositionContext r0;

        r0 := @this: androidx.compose.runtime.CompositionContext;

        return;
    }

<androidx.compose.runtime.CompositionContext: void insertMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)>
<androidx.compose.runtime.CompositionContext: void deletedMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)>
<androidx.compose.runtime.CompositionContext: void movableContentStateReleased$runtime_release(androidx.compose.runtime.MovableContentStateReference,androidx.compose.runtime.MovableContentState)>
    public androidx.compose.runtime.MovableContentState movableContentStateResolve$runtime_release(androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.CompositionContext r0;
        androidx.compose.runtime.MovableContentStateReference r1;

        r0 := @this: androidx.compose.runtime.CompositionContext;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reference");

        return null;
    }

    static void <clinit>()
    {
        return;
    }

