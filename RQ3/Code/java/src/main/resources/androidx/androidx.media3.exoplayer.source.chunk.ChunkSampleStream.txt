androidx.media3.exoplayer.source.chunk.ChunkSampleStream
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.lang.String TAG>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int[] embeddedTrackTypes>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.common.Format[] embeddedTrackFormats>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean[] embeddedTracksSelected>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SequenceableLoader$Callback callback>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkHolder nextChunkHolder>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.List readOnlyMediaChunks>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunkOutput chunkOutput>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.Chunk loadingChunk>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.common.Format primaryDownstreamTrackFormat>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback releaseCallback>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long lastSeekPositionUs>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk canceledMediaChunk>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>
    public void <init>(int, int[], androidx.media3.common.Format[], androidx.media3.exoplayer.source.chunk.ChunkSource, androidx.media3.exoplayer.source.SequenceableLoader$Callback, androidx.media3.exoplayer.upstream.Allocator, long, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher, androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy, androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        int i0, i2, $i3, $i4, $i5, $i6, $i7, i8;
        int[] r1, r10, $r18, $r25, $r28;
        androidx.media3.common.Format[] r2, $r29;
        androidx.media3.exoplayer.source.chunk.ChunkSource r3;
        androidx.media3.exoplayer.source.SequenceableLoader$Callback r4;
        androidx.media3.exoplayer.upstream.Allocator r5;
        long l1;
        androidx.media3.exoplayer.drm.DrmSessionManager r6;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r7;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy r8;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher r9;
        androidx.media3.exoplayer.source.SampleQueue[] r11, $r19, $r24;
        androidx.media3.exoplayer.source.SampleQueue r12, $r21, $r22;
        androidx.media3.exoplayer.upstream.Loader $r13;
        androidx.media3.exoplayer.source.chunk.ChunkHolder $r14;
        java.util.ArrayList $r15, $r16;
        java.util.List $r17;
        boolean[] $r20;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunkOutput $r23;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 := @parameter2: androidx.media3.common.Format[];

        r3 := @parameter3: androidx.media3.exoplayer.source.chunk.ChunkSource;

        r4 := @parameter4: androidx.media3.exoplayer.source.SequenceableLoader$Callback;

        r5 := @parameter5: androidx.media3.exoplayer.upstream.Allocator;

        l1 := @parameter6: long;

        r6 := @parameter7: androidx.media3.exoplayer.drm.DrmSessionManager;

        r7 := @parameter8: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        r8 := @parameter9: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy;

        r9 := @parameter10: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType> = i0;

        if r1 != null goto label1;

        $r28 = newarray (int)[0];

        goto label2;

     label1:
        $r28 = r1;

     label2:
        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int[] embeddedTrackTypes> = $r28;

        if r2 != null goto label3;

        $r29 = newarray (androidx.media3.common.Format)[0];

        goto label4;

     label3:
        $r29 = r2;

     label4:
        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.common.Format[] embeddedTrackFormats> = $r29;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource> = r3;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SequenceableLoader$Callback callback> = r4;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher> = r9;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy> = r8;

        $r13 = new androidx.media3.exoplayer.upstream.Loader;

        specialinvoke $r13.<androidx.media3.exoplayer.upstream.Loader: void <init>(java.lang.String)>("ChunkSampleStream");

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader> = $r13;

        $r14 = new androidx.media3.exoplayer.source.chunk.ChunkHolder;

        specialinvoke $r14.<androidx.media3.exoplayer.source.chunk.ChunkHolder: void <init>()>();

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkHolder nextChunkHolder> = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks> = $r15;

        $r16 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $r17 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r16);

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.List readOnlyMediaChunks> = $r17;

        $r18 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int[] embeddedTrackTypes>;

        i2 = lengthof $r18;

        $r19 = newarray (androidx.media3.exoplayer.source.SampleQueue)[i2];

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues> = $r19;

        $r20 = newarray (boolean)[i2];

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean[] embeddedTracksSelected> = $r20;

        $i3 = 1 + i2;

        r10 = newarray (int)[$i3];

        $i4 = 1 + i2;

        r11 = newarray (androidx.media3.exoplayer.source.SampleQueue)[$i4];

        $r21 = staticinvoke <androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue createWithDrm(androidx.media3.exoplayer.upstream.Allocator,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>(r5, r6, r7);

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue> = $r21;

        r10[0] = i0;

        $r22 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        r11[0] = $r22;

        i8 = 0;

     label5:
        if i8 >= i2 goto label6;

        r12 = staticinvoke <androidx.media3.exoplayer.source.SampleQueue: androidx.media3.exoplayer.source.SampleQueue createWithoutDrm(androidx.media3.exoplayer.upstream.Allocator)>(r5);

        $r24 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $r24[i8] = r12;

        $i5 = i8 + 1;

        r11[$i5] = r12;

        $i7 = i8 + 1;

        $r25 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int[] embeddedTrackTypes>;

        $i6 = $r25[i8];

        r10[$i7] = $i6;

        i8 = i8 + 1;

        goto label5;

     label6:
        $r23 = new androidx.media3.exoplayer.source.chunk.BaseMediaChunkOutput;

        specialinvoke $r23.<androidx.media3.exoplayer.source.chunk.BaseMediaChunkOutput: void <init>(int[],androidx.media3.exoplayer.source.SampleQueue[])>(r10, r11);

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunkOutput chunkOutput> = $r23;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs> = l1;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long lastSeekPositionUs> = l1;

        return;
    }

    public void discardBuffer(long, boolean)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        long l0, l3;
        boolean z0, $z1, $z2;
        int i1, i2, $i4, i5;
        androidx.media3.exoplayer.source.SampleQueue $r1, $r2, $r3, $r4, $r8;
        androidx.media3.exoplayer.source.SampleQueue[] $r5, $r6;
        boolean[] $r7;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        i1 = virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleQueue: int getFirstIndex()>();

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        virtualinvoke $r2.<androidx.media3.exoplayer.source.SampleQueue: void discardTo(long,boolean,boolean)>(l0, z0, 1);

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        i2 = virtualinvoke $r3.<androidx.media3.exoplayer.source.SampleQueue: int getFirstIndex()>();

        if i2 <= i1 goto label3;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        l3 = virtualinvoke $r4.<androidx.media3.exoplayer.source.SampleQueue: long getFirstTimestampUs()>();

        i5 = 0;

     label2:
        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $i4 = lengthof $r5;

        if i5 >= $i4 goto label3;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $r8 = $r6[i5];

        $r7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean[] embeddedTracksSelected>;

        $z2 = $r7[i5];

        virtualinvoke $r8.<androidx.media3.exoplayer.source.SampleQueue: void discardTo(long,boolean,boolean)>(l3, z0, $z2);

        i5 = i5 + 1;

        goto label2;

     label3:
        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void discardDownstreamMediaChunks(int)>(i2);

        return;
    }

    public androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream selectEmbeddedTrack(long, int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        long l0;
        int i1, $i2, $i3, i4;
        androidx.media3.exoplayer.source.SampleQueue[] $r1, $r6, $r9;
        java.lang.IllegalStateException $r2;
        int[] $r3;
        boolean[] $r4, $r5;
        boolean $z0, $z2;
        androidx.media3.exoplayer.source.SampleQueue $r7, $r10;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream $r8;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i4 = 0;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $i2 = lengthof $r1;

        if i4 >= $i2 goto label5;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int[] embeddedTrackTypes>;

        $i3 = $r3[i4];

        if $i3 != i1 goto label4;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean[] embeddedTracksSelected>;

        $z0 = $r4[i4];

        if $z0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z2);

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean[] embeddedTracksSelected>;

        $r5[i4] = 1;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $r7 = $r6[i4];

        virtualinvoke $r7.<androidx.media3.exoplayer.source.SampleQueue: boolean seekTo(long,boolean)>(l0, 1);

        $r8 = new androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream;

        $r9 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $r10 = $r9[i4];

        specialinvoke $r8.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: void <init>(androidx.media3.exoplayer.source.chunk.ChunkSampleStream,androidx.media3.exoplayer.source.chunk.ChunkSampleStream,androidx.media3.exoplayer.source.SampleQueue,int)>(r0, r0, $r10, i4);

        return $r8;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public androidx.media3.exoplayer.source.chunk.ChunkSource getChunkSource()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r1;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>;

        return $r1;
    }

    public long getBufferedPositionUs()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk r1, r2, $r8;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r3, $r5, $r6;
        int $i0, $i4, $i5;
        androidx.media3.exoplayer.source.SampleQueue $r4;
        long $l1, $l2, $l3, $l6, l7;
        java.lang.Object $r7;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $z0 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>;

        if $z0 == 0 goto label1;

        return -9223372036854775808L;

     label1:
        $z1 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z1 == 0 goto label2;

        $l6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs>;

        return $l6;

     label2:
        l7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long lastSeekPositionUs>;

        r1 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk getLastMediaChunk()>();

        $z2 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: boolean isLoadCompleted()>();

        if $z2 == 0 goto label3;

        $r8 = r1;

        goto label5;

     label3:
        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 <= 1 goto label4;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i4 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $i5 = $i4 - 2;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r8 = (androidx.media3.exoplayer.source.chunk.BaseMediaChunk) $r7;

        goto label5;

     label4:
        $r8 = null;

     label5:
        r2 = $r8;

        if r2 == null goto label6;

        $l3 = r2.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: long endTimeUs>;

        l7 = staticinvoke <java.lang.Math: long max(long,long)>(l7, $l3);

     label6:
        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $l1 = virtualinvoke $r4.<androidx.media3.exoplayer.source.SampleQueue: long getLargestQueuedTimestampUs()>();

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>(l7, $l1);

        return $l2;
    }

    public long getAdjustedSeekPositionUs(long, androidx.media3.exoplayer.SeekParameters)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        long l0, $l1;
        androidx.media3.exoplayer.SeekParameters r1;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r2;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.media3.exoplayer.SeekParameters;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>;

        $l1 = interfaceinvoke $r2.<androidx.media3.exoplayer.source.chunk.ChunkSource: long getAdjustedSeekPositionUs(long,androidx.media3.exoplayer.SeekParameters)>(l0, r1);

        return $l1;
    }

    public void seekToUs(long)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        long l0, $l2, $l10, l13;
        boolean $z0, $z1, z3, $z4;
        java.util.ArrayList $r1, $r3, $r10;
        int $i1, $i4, $i5, $i7, i12, i14, i15, i16, i17;
        androidx.media3.exoplayer.source.SampleQueue $r2, $r6, $r8, $r9, r15, r17;
        byte $b3, $b8, $b9, $b11;
        androidx.media3.exoplayer.upstream.Loader $r4, $r5, $r7;
        java.lang.Object $r11;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk r12, r13;
        androidx.media3.exoplayer.source.SampleQueue[] r14, r16;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        l0 := @parameter0: long;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long lastSeekPositionUs> = l0;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z0 == 0 goto label01;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs> = l0;

        return;

     label01:
        r12 = null;

        i12 = 0;

     label02:
        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i12 >= $i1 goto label05;

        $r10 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i12);

        r13 = (androidx.media3.exoplayer.source.chunk.BaseMediaChunk) $r11;

        l13 = r13.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: long startTimeUs>;

        $b8 = l13 cmp l0;

        if $b8 != 0 goto label03;

        $l10 = r13.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: long clippedStartTimeUs>;

        $b11 = $l10 cmp -9223372036854775807L;

        if $b11 != 0 goto label03;

        r12 = r13;

        goto label05;

     label03:
        $b9 = l13 cmp l0;

        if $b9 <= 0 goto label04;

        goto label05;

     label04:
        i12 = i12 + 1;

        goto label02;

     label05:
        if r12 == null goto label06;

        $r9 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $i7 = virtualinvoke r12.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>(0);

        z3 = virtualinvoke $r9.<androidx.media3.exoplayer.source.SampleQueue: boolean seekTo(int)>($i7);

        goto label09;

     label06:
        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $l2 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long getNextLoadPositionUs()>();

        $b3 = l0 cmp $l2;

        if $b3 >= 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        z3 = virtualinvoke $r2.<androidx.media3.exoplayer.source.SampleQueue: boolean seekTo(long,boolean)>(l0, $z4);

     label09:
        if z3 == 0 goto label12;

        $r8 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $i4 = virtualinvoke $r8.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        $i5 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primarySampleIndexToMediaChunkIndex(int,int)>($i4, 0);

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex> = $i5;

        r14 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        i14 = lengthof r14;

        i15 = 0;

     label10:
        if i15 >= i14 goto label11;

        r15 = r14[i15];

        virtualinvoke r15.<androidx.media3.exoplayer.source.SampleQueue: boolean seekTo(long,boolean)>(l0, 1);

        i15 = i15 + 1;

        goto label10;

     label11:
        goto label16;

     label12:
        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs> = l0;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished> = 0;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex> = 0;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        $z1 = virtualinvoke $r4.<androidx.media3.exoplayer.upstream.Loader: boolean isLoading()>();

        if $z1 == 0 goto label15;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        virtualinvoke $r6.<androidx.media3.exoplayer.source.SampleQueue: void discardToEnd()>();

        r16 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        i16 = lengthof r16;

        i17 = 0;

     label13:
        if i17 >= i16 goto label14;

        r17 = r16[i17];

        virtualinvoke r17.<androidx.media3.exoplayer.source.SampleQueue: void discardToEnd()>();

        i17 = i17 + 1;

        goto label13;

     label14:
        $r7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        virtualinvoke $r7.<androidx.media3.exoplayer.upstream.Loader: void cancelLoading()>();

        goto label16;

     label15:
        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        virtualinvoke $r5.<androidx.media3.exoplayer.upstream.Loader: void clearFatalError()>();

        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void resetSampleQueues()>();

     label16:
        return;
    }

    public void release()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void release(androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback)>(null);

        return;
    }

    public void release(androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback r1;
        androidx.media3.exoplayer.source.SampleQueue[] r2;
        int i0, i1;
        androidx.media3.exoplayer.source.SampleQueue r3, $r4;
        androidx.media3.exoplayer.upstream.Loader $r5;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback releaseCallback> = r1;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        virtualinvoke $r4.<androidx.media3.exoplayer.source.SampleQueue: void preRelease()>();

        r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        virtualinvoke r3.<androidx.media3.exoplayer.source.SampleQueue: void preRelease()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        virtualinvoke $r5.<androidx.media3.exoplayer.upstream.Loader: void release(androidx.media3.exoplayer.upstream.Loader$ReleaseCallback)>(r0);

        return;
    }

    public void onLoaderReleased()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.SampleQueue[] r1;
        int i0, i1;
        androidx.media3.exoplayer.source.SampleQueue r2, $r3;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r4;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback $r5, $r6;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        virtualinvoke $r3.<androidx.media3.exoplayer.source.SampleQueue: void release()>();

        r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<androidx.media3.exoplayer.source.SampleQueue: void release()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>;

        interfaceinvoke $r4.<androidx.media3.exoplayer.source.chunk.ChunkSource: void release()>();

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback releaseCallback>;

        if $r5 == null goto label3;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback releaseCallback>;

        interfaceinvoke $r6.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback: void onSampleStreamReleased(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>(r0);

     label3:
        return;
    }

    public boolean isReady()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        boolean $z0, $z1, $z2, $z3;
        androidx.media3.exoplayer.source.SampleQueue $r1;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $z1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>;

        $z2 = virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleQueue: boolean isReady(boolean)>($z1);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public void maybeThrowError() throws java.io.IOException
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.upstream.Loader $r1, $r3;
        androidx.media3.exoplayer.source.SampleQueue $r2;
        boolean $z0;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r4;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        virtualinvoke $r1.<androidx.media3.exoplayer.upstream.Loader: void maybeThrowError()>();

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        virtualinvoke $r2.<androidx.media3.exoplayer.source.SampleQueue: void maybeThrowError()>();

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        $z0 = virtualinvoke $r3.<androidx.media3.exoplayer.upstream.Loader: boolean isLoading()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>;

        interfaceinvoke $r4.<androidx.media3.exoplayer.source.chunk.ChunkSource: void maybeThrowError()>();

     label1:
        return;
    }

    public int readData(androidx.media3.exoplayer.FormatHolder, androidx.media3.decoder.DecoderInputBuffer, int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.FormatHolder r1;
        androidx.media3.decoder.DecoderInputBuffer r2;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r3, $r5;
        androidx.media3.exoplayer.source.SampleQueue $r4, $r6;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.FormatHolder;

        r2 := @parameter1: androidx.media3.decoder.DecoderInputBuffer;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z0 == 0 goto label1;

        return -3;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk canceledMediaChunk>;

        if $r3 == null goto label2;

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk canceledMediaChunk>;

        $i2 = virtualinvoke $r5.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>(0);

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $i3 = virtualinvoke $r6.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        if $i2 > $i3 goto label2;

        return -3;

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void maybeNotifyPrimaryTrackFormatChanged()>();

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $z1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>;

        $i1 = virtualinvoke $r4.<androidx.media3.exoplayer.source.SampleQueue: int read(androidx.media3.exoplayer.FormatHolder,androidx.media3.decoder.DecoderInputBuffer,int,boolean)>(r1, r2, i0, $z1);

        return $i1;
    }

    public int skipData(long)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        long l0;
        int i1, $i2, $i3, i4;
        boolean $z0, $z1;
        androidx.media3.exoplayer.source.SampleQueue $r1, $r3, $r5;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r2, $r4;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $z1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>;

        i4 = virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleQueue: int getSkipCount(long,boolean)>(l0, $z1);

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk canceledMediaChunk>;

        if $r2 == null goto label2;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk canceledMediaChunk>;

        $i2 = virtualinvoke $r4.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>(0);

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $i3 = virtualinvoke $r5.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        i1 = $i2 - $i3;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i1);

     label2:
        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        virtualinvoke $r3.<androidx.media3.exoplayer.source.SampleQueue: void skip(int)>(i4);

        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void maybeNotifyPrimaryTrackFormatChanged()>();

        return i4;
    }

    public void onLoadCompleted(androidx.media3.exoplayer.source.chunk.Chunk, long, long)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.chunk.Chunk r1;
        long l0, l1, $l2, $l3, $l4, $l5, $l6;
        androidx.media3.exoplayer.source.LoadEventInfo r2, $r4;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r3;
        androidx.media3.datasource.DataSpec $r5;
        android.net.Uri $r6;
        java.util.Map $r7;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy $r8;
        java.lang.Object $r9;
        int $i7, $i8, $i9;
        androidx.media3.common.Format $r10;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r11;
        androidx.media3.exoplayer.source.SequenceableLoader$Callback $r12;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.Chunk;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.Chunk loadingChunk> = null;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>;

        interfaceinvoke $r3.<androidx.media3.exoplayer.source.chunk.ChunkSource: void onChunkLoadCompleted(androidx.media3.exoplayer.source.chunk.Chunk)>(r1);

        $r4 = new androidx.media3.exoplayer.source.LoadEventInfo;

        $l2 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long loadTaskId>;

        $r5 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: androidx.media3.datasource.DataSpec dataSpec>;

        $r6 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.Chunk: android.net.Uri getUri()>();

        $r7 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.Chunk: java.util.Map getResponseHeaders()>();

        $l3 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.Chunk: long bytesLoaded()>();

        specialinvoke $r4.<androidx.media3.exoplayer.source.LoadEventInfo: void <init>(long,androidx.media3.datasource.DataSpec,android.net.Uri,java.util.Map,long,long,long)>($l2, $r5, $r6, $r7, l0, l1, $l3);

        r2 = $r4;

        $r8 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy>;

        $l4 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long loadTaskId>;

        interfaceinvoke $r8.<androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy: void onLoadTaskConcluded(long)>($l4);

        $r11 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        $i9 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int type>;

        $i8 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType>;

        $r10 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: androidx.media3.common.Format trackFormat>;

        $i7 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int trackSelectionReason>;

        $r9 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: java.lang.Object trackSelectionData>;

        $l6 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long startTimeUs>;

        $l5 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long endTimeUs>;

        virtualinvoke $r11.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void loadCompleted(androidx.media3.exoplayer.source.LoadEventInfo,int,int,androidx.media3.common.Format,int,java.lang.Object,long,long)>(r2, $i9, $i8, $r10, $i7, $r9, $l6, $l5);

        $r12 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SequenceableLoader$Callback callback>;

        interfaceinvoke $r12.<androidx.media3.exoplayer.source.SequenceableLoader$Callback: void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)>(r0);

        return;
    }

    public void onLoadCanceled(androidx.media3.exoplayer.source.chunk.Chunk, long, long, boolean)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.chunk.Chunk r1;
        long l0, l1, $l2, $l3, $l4, $l5, $l6, $l12;
        boolean z0, $z1, $z2, $z3;
        androidx.media3.exoplayer.source.LoadEventInfo r2, $r3;
        androidx.media3.datasource.DataSpec $r4;
        android.net.Uri $r5;
        java.util.Map $r6;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy $r7;
        java.lang.Object $r8;
        int $i7, $i8, $i9, $i10, $i11;
        androidx.media3.common.Format $r9;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r10;
        java.util.ArrayList $r11, $r13;
        androidx.media3.exoplayer.source.SequenceableLoader$Callback $r14;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.Chunk;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.Chunk loadingChunk> = null;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk canceledMediaChunk> = null;

        $r3 = new androidx.media3.exoplayer.source.LoadEventInfo;

        $l2 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long loadTaskId>;

        $r4 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: androidx.media3.datasource.DataSpec dataSpec>;

        $r5 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.Chunk: android.net.Uri getUri()>();

        $r6 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.Chunk: java.util.Map getResponseHeaders()>();

        $l3 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.Chunk: long bytesLoaded()>();

        specialinvoke $r3.<androidx.media3.exoplayer.source.LoadEventInfo: void <init>(long,androidx.media3.datasource.DataSpec,android.net.Uri,java.util.Map,long,long,long)>($l2, $r4, $r5, $r6, l0, l1, $l3);

        r2 = $r3;

        $r7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy>;

        $l4 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long loadTaskId>;

        interfaceinvoke $r7.<androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy: void onLoadTaskConcluded(long)>($l4);

        $r10 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        $i9 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int type>;

        $i8 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType>;

        $r9 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: androidx.media3.common.Format trackFormat>;

        $i7 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int trackSelectionReason>;

        $r8 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: java.lang.Object trackSelectionData>;

        $l6 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long startTimeUs>;

        $l5 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long endTimeUs>;

        virtualinvoke $r10.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void loadCanceled(androidx.media3.exoplayer.source.LoadEventInfo,int,int,androidx.media3.common.Format,int,java.lang.Object,long,long)>(r2, $i9, $i8, $r9, $i7, $r8, $l6, $l5);

        if z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void resetSampleQueues()>();

        goto label2;

     label1:
        $z2 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isMediaChunk(androidx.media3.exoplayer.source.chunk.Chunk)>(r1);

        if $z2 == 0 goto label2;

        $r11 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i10 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        $i11 = $i10 - 1;

        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk discardUpstreamMediaChunksFromIndex(int)>($i11);

        $r13 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $z3 = virtualinvoke $r13.<java.util.ArrayList: boolean isEmpty()>();

        if $z3 == 0 goto label2;

        $l12 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long lastSeekPositionUs>;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs> = $l12;

     label2:
        $r14 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SequenceableLoader$Callback callback>;

        interfaceinvoke $r14.<androidx.media3.exoplayer.source.SequenceableLoader$Callback: void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)>(r0);

     label3:
        return;
    }

    public androidx.media3.exoplayer.upstream.Loader$LoadErrorAction onLoadError(androidx.media3.exoplayer.source.chunk.Chunk, long, long, java.io.IOException, int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.chunk.Chunk r1;
        long l0, l1, l3, $l7, $l8, $l12, $l13, $l14, $l15, $l16, $l20, $l22, l23;
        java.io.IOException r2;
        int i2, i4, $i5, $i9, $i10, $i11, $i17, $i18, $i19;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9;
        androidx.media3.exoplayer.source.LoadEventInfo r3, $r7;
        androidx.media3.exoplayer.source.MediaLoadData r4, $r11;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy$LoadErrorInfo r5, $r14;
        java.util.ArrayList $r6, $r23;
        byte $b6, $b21;
        androidx.media3.datasource.DataSpec $r8;
        android.net.Uri $r9;
        java.util.Map $r10;
        androidx.media3.common.Format $r12, $r18;
        java.lang.Object $r13, $r17;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy $r15, $r20, $r22;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r16;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r19;
        androidx.media3.exoplayer.source.SequenceableLoader$Callback $r21;
        androidx.media3.exoplayer.upstream.Loader$LoadErrorAction r24, $r26;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk r25;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.Chunk;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 := @parameter3: java.io.IOException;

        i2 := @parameter4: int;

        l3 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.Chunk: long bytesLoaded()>();

        z0 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isMediaChunk(androidx.media3.exoplayer.source.chunk.Chunk)>(r1);

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i5 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i4 = $i5 - 1;

        $b6 = l3 cmp 0L;

        if $b6 == 0 goto label01;

        if z0 == 0 goto label01;

        $z4 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean haveReadFromMediaChunk(int)>(i4);

        if $z4 != 0 goto label02;

     label01:
        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z1 = $z5;

        $r7 = new androidx.media3.exoplayer.source.LoadEventInfo;

        $l7 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long loadTaskId>;

        $r8 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: androidx.media3.datasource.DataSpec dataSpec>;

        $r9 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.Chunk: android.net.Uri getUri()>();

        $r10 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.Chunk: java.util.Map getResponseHeaders()>();

        specialinvoke $r7.<androidx.media3.exoplayer.source.LoadEventInfo: void <init>(long,androidx.media3.datasource.DataSpec,android.net.Uri,java.util.Map,long,long,long)>($l7, $r8, $r9, $r10, l0, l1, l3);

        r3 = $r7;

        $r11 = new androidx.media3.exoplayer.source.MediaLoadData;

        $i9 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int type>;

        $i10 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType>;

        $r12 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: androidx.media3.common.Format trackFormat>;

        $i11 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int trackSelectionReason>;

        $r13 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: java.lang.Object trackSelectionData>;

        $l8 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long startTimeUs>;

        $l12 = staticinvoke <androidx.media3.common.util.Util: long usToMs(long)>($l8);

        $l13 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long endTimeUs>;

        $l14 = staticinvoke <androidx.media3.common.util.Util: long usToMs(long)>($l13);

        specialinvoke $r11.<androidx.media3.exoplayer.source.MediaLoadData: void <init>(int,int,androidx.media3.common.Format,int,java.lang.Object,long,long)>($i9, $i10, $r12, $i11, $r13, $l12, $l14);

        r4 = $r11;

        $r14 = new androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy$LoadErrorInfo;

        specialinvoke $r14.<androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy$LoadErrorInfo: void <init>(androidx.media3.exoplayer.source.LoadEventInfo,androidx.media3.exoplayer.source.MediaLoadData,java.io.IOException,int)>(r3, r4, r2, i2);

        r5 = $r14;

        r24 = null;

        $r16 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>;

        $r15 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy>;

        $z2 = interfaceinvoke $r16.<androidx.media3.exoplayer.source.chunk.ChunkSource: boolean onChunkLoadError(androidx.media3.exoplayer.source.chunk.Chunk,boolean,androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy$LoadErrorInfo,androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy)>(r1, z1, r5, $r15);

        if $z2 == 0 goto label08;

        if z1 == 0 goto label07;

        r24 = <androidx.media3.exoplayer.upstream.Loader: androidx.media3.exoplayer.upstream.Loader$LoadErrorAction DONT_RETRY>;

        if z0 == 0 goto label08;

        r25 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk discardUpstreamMediaChunksFromIndex(int)>(i4);

        if r25 != r1 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z6);

        $r23 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $z3 = virtualinvoke $r23.<java.util.ArrayList: boolean isEmpty()>();

        if $z3 == 0 goto label06;

        $l22 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long lastSeekPositionUs>;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs> = $l22;

     label06:
        goto label08;

     label07:
        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("ChunkSampleStream", "Ignoring attempt to cancel non-cancelable load.");

     label08:
        if r24 != null goto label11;

        $r22 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy>;

        l23 = interfaceinvoke $r22.<androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy: long getRetryDelayMsFor(androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy$LoadErrorInfo)>(r5);

        $b21 = l23 cmp -9223372036854775807L;

        if $b21 == 0 goto label09;

        $r26 = staticinvoke <androidx.media3.exoplayer.upstream.Loader: androidx.media3.exoplayer.upstream.Loader$LoadErrorAction createRetryAction(boolean,long)>(0, l23);

        goto label10;

     label09:
        $r26 = <androidx.media3.exoplayer.upstream.Loader: androidx.media3.exoplayer.upstream.Loader$LoadErrorAction DONT_RETRY_FATAL>;

     label10:
        r24 = $r26;

     label11:
        $z7 = virtualinvoke r24.<androidx.media3.exoplayer.upstream.Loader$LoadErrorAction: boolean isRetry()>();

        if $z7 != 0 goto label12;

        $z8 = 1;

        goto label13;

     label12:
        $z8 = 0;

     label13:
        z9 = $z8;

        $r19 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        $i19 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int type>;

        $i18 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType>;

        $r18 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: androidx.media3.common.Format trackFormat>;

        $i17 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int trackSelectionReason>;

        $r17 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: java.lang.Object trackSelectionData>;

        $l16 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long startTimeUs>;

        $l15 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long endTimeUs>;

        virtualinvoke $r19.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void loadError(androidx.media3.exoplayer.source.LoadEventInfo,int,int,androidx.media3.common.Format,int,java.lang.Object,long,long,java.io.IOException,boolean)>(r3, $i19, $i18, $r18, $i17, $r17, $l16, $l15, r2, z9);

        if z9 == 0 goto label14;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.Chunk loadingChunk> = null;

        $r20 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy>;

        $l20 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long loadTaskId>;

        interfaceinvoke $r20.<androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy: void onLoadTaskConcluded(long)>($l20);

        $r21 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SequenceableLoader$Callback callback>;

        interfaceinvoke $r21.<androidx.media3.exoplayer.source.SequenceableLoader$Callback: void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)>(r0);

     label14:
        return r24;
    }

    public boolean continueLoading(long)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        long l0, $l2, $l3, $l5, $l6, l7, l11, $l12, $l16, $l17;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        androidx.media3.exoplayer.source.chunk.Chunk r1;
        androidx.media3.exoplayer.source.SampleQueue[] r2;
        int i1, i8, $i9, $i10, $i13, $i14, $i15;
        androidx.media3.exoplayer.source.SampleQueue r3, $r14;
        androidx.media3.exoplayer.upstream.Loader $r4, $r5, $r19;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r6, r16;
        androidx.media3.exoplayer.source.chunk.ChunkHolder $r7, $r9, $r10, $r11;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r8;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunkOutput $r12, $r17;
        androidx.media3.exoplayer.source.chunk.InitializationChunk $r13;
        byte $b4;
        java.util.List r15;
        java.util.ArrayList $r18;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy $r20;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r21;
        androidx.media3.exoplayer.source.LoadEventInfo $r22;
        androidx.media3.datasource.DataSpec $r23;
        androidx.media3.common.Format $r24;
        java.lang.Object $r25;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        l0 := @parameter0: long;

        $z2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>;

        if $z2 != 0 goto label01;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        $z3 = virtualinvoke $r4.<androidx.media3.exoplayer.upstream.Loader: boolean isLoading()>();

        if $z3 != 0 goto label01;

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        $z4 = virtualinvoke $r5.<androidx.media3.exoplayer.upstream.Loader: boolean hasFatalError()>();

        if $z4 == 0 goto label02;

     label01:
        return 0;

     label02:
        z0 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if z0 == 0 goto label03;

        r15 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        l7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs>;

        goto label04;

     label03:
        r15 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.List readOnlyMediaChunks>;

        $r6 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk getLastMediaChunk()>();

        l7 = $r6.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: long endTimeUs>;

     label04:
        $r8 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>;

        $r7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkHolder nextChunkHolder>;

        interfaceinvoke $r8.<androidx.media3.exoplayer.source.chunk.ChunkSource: void getNextChunk(long,long,java.util.List,androidx.media3.exoplayer.source.chunk.ChunkHolder)>(l0, l7, r15, $r7);

        $r9 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkHolder nextChunkHolder>;

        z1 = $r9.<androidx.media3.exoplayer.source.chunk.ChunkHolder: boolean endOfStream>;

        $r10 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkHolder nextChunkHolder>;

        r1 = $r10.<androidx.media3.exoplayer.source.chunk.ChunkHolder: androidx.media3.exoplayer.source.chunk.Chunk chunk>;

        $r11 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkHolder nextChunkHolder>;

        virtualinvoke $r11.<androidx.media3.exoplayer.source.chunk.ChunkHolder: void clear()>();

        if z1 == 0 goto label05;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished> = 1;

        return 1;

     label05:
        if r1 != null goto label06;

        return 0;

     label06:
        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.Chunk loadingChunk> = r1;

        $z5 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isMediaChunk(androidx.media3.exoplayer.source.chunk.Chunk)>(r1);

        if $z5 == 0 goto label10;

        r16 = (androidx.media3.exoplayer.source.chunk.BaseMediaChunk) r1;

        if z0 == 0 goto label09;

        $l3 = r16.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: long startTimeUs>;

        $l2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs>;

        $b4 = $l3 cmp $l2;

        if $b4 == 0 goto label08;

        $r14 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $l5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs>;

        virtualinvoke $r14.<androidx.media3.exoplayer.source.SampleQueue: void setStartTimeUs(long)>($l5);

        r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        i1 = lengthof r2;

        i8 = 0;

     label07:
        if i8 >= i1 goto label08;

        r3 = r2[i8];

        $l6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs>;

        virtualinvoke r3.<androidx.media3.exoplayer.source.SampleQueue: void setStartTimeUs(long)>($l6);

        i8 = i8 + 1;

        goto label07;

     label08:
        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs> = -9223372036854775807L;

     label09:
        $r17 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunkOutput chunkOutput>;

        virtualinvoke r16.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: void init(androidx.media3.exoplayer.source.chunk.BaseMediaChunkOutput)>($r17);

        $r18 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r16);

        goto label11;

     label10:
        $z6 = r1 instanceof androidx.media3.exoplayer.source.chunk.InitializationChunk;

        if $z6 == 0 goto label11;

        $r13 = (androidx.media3.exoplayer.source.chunk.InitializationChunk) r1;

        $r12 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunkOutput chunkOutput>;

        virtualinvoke $r13.<androidx.media3.exoplayer.source.chunk.InitializationChunk: void init(androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider)>($r12);

     label11:
        $r19 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        $r20 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy>;

        $i9 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int type>;

        $i10 = interfaceinvoke $r20.<androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy: int getMinimumLoadableRetryCount(int)>($i9);

        l11 = virtualinvoke $r19.<androidx.media3.exoplayer.upstream.Loader: long startLoading(androidx.media3.exoplayer.upstream.Loader$Loadable,androidx.media3.exoplayer.upstream.Loader$Callback,int)>(r1, r0, $i10);

        $r21 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        $r22 = new androidx.media3.exoplayer.source.LoadEventInfo;

        $l12 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long loadTaskId>;

        $r23 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: androidx.media3.datasource.DataSpec dataSpec>;

        specialinvoke $r22.<androidx.media3.exoplayer.source.LoadEventInfo: void <init>(long,androidx.media3.datasource.DataSpec,long)>($l12, $r23, l11);

        $i13 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int type>;

        $i14 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType>;

        $r24 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: androidx.media3.common.Format trackFormat>;

        $i15 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: int trackSelectionReason>;

        $r25 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: java.lang.Object trackSelectionData>;

        $l16 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long startTimeUs>;

        $l17 = r1.<androidx.media3.exoplayer.source.chunk.Chunk: long endTimeUs>;

        virtualinvoke $r21.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void loadStarted(androidx.media3.exoplayer.source.LoadEventInfo,int,int,androidx.media3.common.Format,int,java.lang.Object,long,long)>($r22, $i13, $i14, $r24, $i15, $r25, $l16, $l17);

        return 1;
    }

    public boolean isLoading()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.upstream.Loader $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        $z0 = virtualinvoke $r1.<androidx.media3.exoplayer.upstream.Loader: boolean isLoading()>();

        return $z0;
    }

    public long getNextLoadPositionUs()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        boolean $z0, $z1;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r1;
        long $l0, $l1;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs>;

        return $l0;

     label1:
        $z1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>;

        if $z1 == 0 goto label2;

        $l1 = -9223372036854775808L;

        goto label3;

     label2:
        $r1 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk getLastMediaChunk()>();

        $l1 = $r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: long endTimeUs>;

     label3:
        return $l1;
    }

    public void reevaluateBuffer(long)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        long l0;
        androidx.media3.exoplayer.upstream.Loader $r1, $r2, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.List $r3, $r8;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r4, $r9;
        java.util.ArrayList $r5, $r12;
        int $i1, $i2, $i3, i4;
        androidx.media3.exoplayer.source.chunk.Chunk $r6, r13;
        java.lang.Object $r7;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r11;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        $z0 = virtualinvoke $r1.<androidx.media3.exoplayer.upstream.Loader: boolean hasFatalError()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        $z2 = virtualinvoke $r2.<androidx.media3.exoplayer.upstream.Loader: boolean isLoading()>();

        if $z2 == 0 goto label5;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.Chunk loadingChunk>;

        $r7 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        r13 = (androidx.media3.exoplayer.source.chunk.Chunk) $r7;

        $z3 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isMediaChunk(androidx.media3.exoplayer.source.chunk.Chunk)>(r13);

        if $z3 == 0 goto label3;

        $r12 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i2 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        $i3 = $i2 - 1;

        $z6 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean haveReadFromMediaChunk(int)>($i3);

        if $z6 == 0 goto label3;

        return;

     label3:
        $r9 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>;

        $r8 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.List readOnlyMediaChunks>;

        $z4 = interfaceinvoke $r9.<androidx.media3.exoplayer.source.chunk.ChunkSource: boolean shouldCancelLoad(long,androidx.media3.exoplayer.source.chunk.Chunk,java.util.List)>(l0, r13, $r8);

        if $z4 == 0 goto label4;

        $r10 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        virtualinvoke $r10.<androidx.media3.exoplayer.upstream.Loader: void cancelLoading()>();

        $z5 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isMediaChunk(androidx.media3.exoplayer.source.chunk.Chunk)>(r13);

        if $z5 == 0 goto label4;

        $r11 = (androidx.media3.exoplayer.source.chunk.BaseMediaChunk) r13;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk canceledMediaChunk> = $r11;

     label4:
        return;

     label5:
        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource chunkSource>;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.List readOnlyMediaChunks>;

        i4 = interfaceinvoke $r4.<androidx.media3.exoplayer.source.chunk.ChunkSource: int getPreferredQueueSize(long,java.util.List)>(l0, $r3);

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if i4 >= $i1 goto label6;

        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void discardUpstream(int)>(i4);

     label6:
        return;
    }

    private void discardUpstream(int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        int i0, i1, $i3, i5, i6;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk r1, $r4;
        androidx.media3.exoplayer.upstream.Loader $r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r3, $r5;
        long $l2, $l4, l7;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r6;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader loader>;

        $z0 = virtualinvoke $r2.<androidx.media3.exoplayer.upstream.Loader: boolean isLoading()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z3);

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i5 = -1;

        i6 = i0;

     label3:
        if i6 >= i1 goto label5;

        $z2 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean haveReadFromMediaChunk(int)>(i6);

        if $z2 != 0 goto label4;

        i5 = i6;

        goto label5;

     label4:
        i6 = i6 + 1;

        goto label3;

     label5:
        if i5 != -1 goto label6;

        return;

     label6:
        $r4 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk getLastMediaChunk()>();

        l7 = $r4.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: long endTimeUs>;

        r1 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk discardUpstreamMediaChunksFromIndex(int)>(i5);

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $z1 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label7;

        $l4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long lastSeekPositionUs>;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs> = $l4;

     label7:
        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished> = 0;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        $i3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType>;

        $l2 = r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: long startTimeUs>;

        virtualinvoke $r6.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void upstreamDiscarded(int,long,long)>($i3, $l2, l7);

        return;
    }

    private boolean isMediaChunk(androidx.media3.exoplayer.source.chunk.Chunk)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.chunk.Chunk r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.Chunk;

        $z0 = r1 instanceof androidx.media3.exoplayer.source.chunk.BaseMediaChunk;

        return $z0;
    }

    private void resetSampleQueues()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.SampleQueue[] r1;
        int i0, i1;
        androidx.media3.exoplayer.source.SampleQueue r2, $r3;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        virtualinvoke $r3.<androidx.media3.exoplayer.source.SampleQueue: void reset()>();

        r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<androidx.media3.exoplayer.source.SampleQueue: void reset()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private boolean haveReadFromMediaChunk(int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk r1;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        androidx.media3.exoplayer.source.SampleQueue $r4, $r7;
        androidx.media3.exoplayer.source.SampleQueue[] $r5, $r6;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (androidx.media3.exoplayer.source.chunk.BaseMediaChunk) $r3;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $i1 = virtualinvoke $r4.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        $i2 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>(0);

        if $i1 <= $i2 goto label1;

        return 1;

     label1:
        i7 = 0;

     label2:
        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $i3 = lengthof $r5;

        if i7 >= $i3 goto label4;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $r7 = $r6[i7];

        $i4 = virtualinvoke $r7.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        $i5 = i7 + 1;

        $i6 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>($i5);

        if $i4 <= $i6 goto label3;

        return 1;

     label3:
        i7 = i7 + 1;

        goto label2;

     label4:
        return 0;
    }

    boolean isPendingReset()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $l0 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long pendingResetPositionUs>;

        $b1 = $l0 cmp -9223372036854775807L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void discardDownstreamMediaChunks(int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        int i0, $i1, $i2, $i3, i4, i5;
        java.util.ArrayList $r1;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        i0 := @parameter0: int;

        i4 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primarySampleIndexToMediaChunkIndex(int,int)>(i0, 0);

        $i1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex>;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i1);

        if i5 <= 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        staticinvoke <androidx.media3.common.util.Util: void removeRange(java.util.List,int,int)>($r1, 0, i5);

        $i2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex>;

        $i3 = $i2 - i5;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex> = $i3;

     label1:
        return;
    }

    private void maybeNotifyPrimaryTrackFormatChanged()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        androidx.media3.exoplayer.source.SampleQueue $r1;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        i0 = virtualinvoke $r1.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        $i2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex>;

        $i3 = $i2 - 1;

        i1 = specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primarySampleIndexToMediaChunkIndex(int,int)>(i0, $i3);

     label1:
        $i4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex>;

        if $i4 > i1 goto label2;

        $i5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex>;

        $i6 = $i5 + 1;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex> = $i6;

        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void maybeNotifyPrimaryTrackFormatChanged(int)>($i5);

        goto label1;

     label2:
        return;
    }

    private void maybeNotifyPrimaryTrackFormatChanged(int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        int i0, $i2, $i3;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk r1;
        androidx.media3.common.Format r2, $r5;
        java.util.ArrayList $r3;
        java.lang.Object $r4, $r6;
        boolean $z0;
        long $l1;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r7;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (androidx.media3.exoplayer.source.chunk.BaseMediaChunk) $r4;

        r2 = r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: androidx.media3.common.Format trackFormat>;

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.common.Format primaryDownstreamTrackFormat>;

        $z0 = virtualinvoke r2.<androidx.media3.common.Format: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        $i3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType>;

        $i2 = r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int trackSelectionReason>;

        $r6 = r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: java.lang.Object trackSelectionData>;

        $l1 = r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: long startTimeUs>;

        virtualinvoke $r7.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void downstreamFormatChanged(int,androidx.media3.common.Format,int,java.lang.Object,long)>($i3, r2, $i2, $r6, $l1);

     label1:
        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.common.Format primaryDownstreamTrackFormat> = r2;

        return;
    }

    private int primarySampleIndexToMediaChunkIndex(int, int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.util.ArrayList $r1, $r2, $r3;
        java.lang.Object $r4;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r5;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i7 = i1 + 1;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i2 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i7 >= $i2 goto label3;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r5 = (androidx.media3.exoplayer.source.chunk.BaseMediaChunk) $r4;

        $i5 = virtualinvoke $r5.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>(0);

        if $i5 <= i0 goto label2;

        $i6 = i7 - 1;

        return $i6;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i3 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i4 = $i3 - 1;

        return $i4;
    }

    private androidx.media3.exoplayer.source.chunk.BaseMediaChunk getLastMediaChunk()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        java.util.ArrayList $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r4;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (androidx.media3.exoplayer.source.chunk.BaseMediaChunk) $r3;

        return $r4;
    }

    private androidx.media3.exoplayer.source.chunk.BaseMediaChunk discardUpstreamMediaChunksFromIndex(int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk r1;
        java.util.ArrayList $r2, $r4, $r5, $r6;
        java.lang.Object $r3;
        androidx.media3.exoplayer.source.SampleQueue $r7, $r10;
        androidx.media3.exoplayer.source.SampleQueue[] $r8, $r9;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (androidx.media3.exoplayer.source.chunk.BaseMediaChunk) $r3;

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        staticinvoke <androidx.media3.common.util.Util: void removeRange(java.util.List,int,int)>($r5, i0, $i1);

        $i2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex>;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: java.util.ArrayList mediaChunks>;

        $i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i3);

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int nextNotifyPrimaryFormatMediaChunkIndex> = $i4;

        $r7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue primarySampleQueue>;

        $i5 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>(0);

        virtualinvoke $r7.<androidx.media3.exoplayer.source.SampleQueue: void discardUpstreamSamples(int)>($i5);

        i9 = 0;

     label1:
        $r8 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $i6 = lengthof $r8;

        if i9 >= $i6 goto label2;

        $r9 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.SampleQueue[] embeddedSampleQueues>;

        $r10 = $r9[i9];

        $i7 = i9 + 1;

        $i8 = virtualinvoke r1.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>($i7);

        virtualinvoke $r10.<androidx.media3.exoplayer.source.SampleQueue: void discardUpstreamSamples(int)>($i8);

        i9 = i9 + 1;

        goto label1;

     label2:
        return r1;
    }

    public volatile androidx.media3.exoplayer.upstream.Loader$LoadErrorAction onLoadError(androidx.media3.exoplayer.upstream.Loader$Loadable, long, long, java.io.IOException, int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.upstream.Loader$Loadable r1;
        long l0, l1;
        java.io.IOException r2;
        int i2;
        androidx.media3.exoplayer.source.chunk.Chunk $r3;
        androidx.media3.exoplayer.upstream.Loader$LoadErrorAction $r4;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.Loader$Loadable;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 := @parameter3: java.io.IOException;

        i2 := @parameter4: int;

        $r3 = (androidx.media3.exoplayer.source.chunk.Chunk) r1;

        $r4 = virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.upstream.Loader$LoadErrorAction onLoadError(androidx.media3.exoplayer.source.chunk.Chunk,long,long,java.io.IOException,int)>($r3, l0, l1, r2, i2);

        return $r4;
    }

    public volatile void onLoadCanceled(androidx.media3.exoplayer.upstream.Loader$Loadable, long, long, boolean)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.upstream.Loader$Loadable r1;
        long l0, l1;
        boolean z0;
        androidx.media3.exoplayer.source.chunk.Chunk $r2;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.Loader$Loadable;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        $r2 = (androidx.media3.exoplayer.source.chunk.Chunk) r1;

        virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void onLoadCanceled(androidx.media3.exoplayer.source.chunk.Chunk,long,long,boolean)>($r2, l0, l1, z0);

        return;
    }

    public volatile void onLoadCompleted(androidx.media3.exoplayer.upstream.Loader$Loadable, long, long)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.upstream.Loader$Loadable r1;
        long l0, l1;
        androidx.media3.exoplayer.source.chunk.Chunk $r2;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.Loader$Loadable;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = (androidx.media3.exoplayer.source.chunk.Chunk) r1;

        virtualinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void onLoadCompleted(androidx.media3.exoplayer.source.chunk.Chunk,long,long)>($r2, l0, l1);

        return;
    }

    static androidx.media3.exoplayer.source.chunk.BaseMediaChunk access$000(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk canceledMediaChunk>;

        return $r1;
    }

    static boolean[] access$100(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        boolean[] $r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean[] embeddedTracksSelected>;

        return $r1;
    }

    static int[] access$200(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        int[] $r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int[] embeddedTrackTypes>;

        return $r1;
    }

    static androidx.media3.common.Format[] access$300(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.common.Format[] $r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.common.Format[] embeddedTrackFormats>;

        return $r1;
    }

    static long access$400(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        long $l0;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $l0 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long lastSeekPositionUs>;

        return $l0;
    }

    static androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher access$500(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r0;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        return $r1;
    }

androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream parent>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.SampleQueue sampleQueue>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: int index>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: boolean notifiedDownstreamFormat>
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>
    public void <init>(androidx.media3.exoplayer.source.chunk.ChunkSampleStream, androidx.media3.exoplayer.source.chunk.ChunkSampleStream, androidx.media3.exoplayer.source.SampleQueue, int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream r0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r1, r2;
        androidx.media3.exoplayer.source.SampleQueue r3;
        int i0;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r2 := @parameter1: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        r3 := @parameter2: androidx.media3.exoplayer.source.SampleQueue;

        i0 := @parameter3: int;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream parent> = r2;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.SampleQueue sampleQueue> = r3;

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: int index> = i0;

        return;
    }

    public boolean isReady()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream r0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream $r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.media3.exoplayer.source.SampleQueue $r3;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $z0 = virtualinvoke $r1.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.SampleQueue sampleQueue>;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $z1 = $r2.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>;

        $z2 = virtualinvoke $r3.<androidx.media3.exoplayer.source.SampleQueue: boolean isReady(boolean)>($z1);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public int skipData(long)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream r0;
        long l0;
        int i1, $i2, $i3, $i4, $i5, i6;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream $r1, $r2, $r4, $r7;
        boolean $z0, $z1;
        androidx.media3.exoplayer.source.SampleQueue $r3, $r6, $r9;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r5, $r8;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $z0 = virtualinvoke $r1.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.SampleQueue sampleQueue>;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $z1 = $r2.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>;

        i6 = virtualinvoke $r3.<androidx.media3.exoplayer.source.SampleQueue: int getSkipCount(long,boolean)>(l0, $z1);

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $r5 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk access$000(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r4);

        if $r5 == null goto label2;

        $r7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $r8 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk access$000(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r7);

        $i2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: int index>;

        $i3 = 1 + $i2;

        $i4 = virtualinvoke $r8.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>($i3);

        $r9 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.SampleQueue sampleQueue>;

        $i5 = virtualinvoke $r9.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        i1 = $i4 - $i5;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i6, i1);

     label2:
        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.SampleQueue sampleQueue>;

        virtualinvoke $r6.<androidx.media3.exoplayer.source.SampleQueue: void skip(int)>(i6);

        if i6 <= 0 goto label3;

        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: void maybeNotifyDownstreamFormat()>();

     label3:
        return i6;
    }

    public void maybeThrowError()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream r0;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream;

        return;
    }

    public int readData(androidx.media3.exoplayer.FormatHolder, androidx.media3.decoder.DecoderInputBuffer, int)
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream r0;
        androidx.media3.exoplayer.FormatHolder r1;
        androidx.media3.decoder.DecoderInputBuffer r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream $r3, $r4, $r6, $r8;
        boolean $z0, $z1;
        androidx.media3.exoplayer.source.chunk.BaseMediaChunk $r5, $r9;
        androidx.media3.exoplayer.source.SampleQueue $r7, $r10;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream;

        r1 := @parameter0: androidx.media3.exoplayer.FormatHolder;

        r2 := @parameter1: androidx.media3.decoder.DecoderInputBuffer;

        i0 := @parameter2: int;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $z0 = virtualinvoke $r3.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean isPendingReset()>();

        if $z0 == 0 goto label1;

        return -3;

     label1:
        $r4 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $r5 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk access$000(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r4);

        if $r5 == null goto label2;

        $r8 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $r9 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.BaseMediaChunk access$000(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r8);

        $i2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: int index>;

        $i3 = 1 + $i2;

        $i4 = virtualinvoke $r9.<androidx.media3.exoplayer.source.chunk.BaseMediaChunk: int getFirstSampleIndex(int)>($i3);

        $r10 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.SampleQueue sampleQueue>;

        $i5 = virtualinvoke $r10.<androidx.media3.exoplayer.source.SampleQueue: int getReadIndex()>();

        if $i4 > $i5 goto label2;

        return -3;

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: void maybeNotifyDownstreamFormat()>();

        $r7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.SampleQueue sampleQueue>;

        $r6 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $z1 = $r6.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean loadingFinished>;

        $i1 = virtualinvoke $r7.<androidx.media3.exoplayer.source.SampleQueue: int read(androidx.media3.exoplayer.FormatHolder,androidx.media3.decoder.DecoderInputBuffer,int,boolean)>(r1, r2, i0, $z1);

        return $i1;
    }

    public void release()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream r0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream $r1, $r3;
        boolean[] $r2, $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean[] access$100(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r1);

        $i0 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: int index>;

        $z0 = $r2[$i0];

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $r4 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: boolean[] access$100(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r3);

        $i1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: int index>;

        $r4[$i1] = 0;

        return;
    }

    private void maybeNotifyDownstreamFormat()
    {
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream r0;
        boolean $z0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream $r1, $r3, $r5, $r7;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r2;
        int[] $r4;
        int $i0, $i1, $i2;
        androidx.media3.common.Format[] $r6;
        androidx.media3.common.Format $r8;
        long $l3;

        r0 := @this: androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream;

        $z0 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: boolean notifiedDownstreamFormat>;

        if $z0 != 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher access$500(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r1);

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $r4 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int[] access$200(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r3);

        $i0 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: int index>;

        $i1 = $r4[$i0];

        $r5 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $r6 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.common.Format[] access$300(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r5);

        $i2 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: int index>;

        $r8 = $r6[$i2];

        $r7 = r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSampleStream this$0>;

        $l3 = staticinvoke <androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long access$400(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r7);

        virtualinvoke $r2.<androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher: void downstreamFormatChanged(int,androidx.media3.common.Format,int,java.lang.Object,long)>($i1, $r8, 0, null, $l3);

        r0.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$EmbeddedSampleStream: boolean notifiedDownstreamFormat> = 1;

     label1:
        return;
    }

androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback
<androidx.media3.exoplayer.source.chunk.ChunkSampleStream$ReleaseCallback: void onSampleStreamReleased(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>
