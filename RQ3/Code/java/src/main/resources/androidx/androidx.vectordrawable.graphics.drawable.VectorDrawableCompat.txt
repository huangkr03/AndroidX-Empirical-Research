androidx.vectordrawable.graphics.drawable.VectorDrawableCompat
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String LOGTAG>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String SHAPE_CLIP_PATH>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String SHAPE_GROUP>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String SHAPE_PATH>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String SHAPE_VECTOR>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINECAP_BUTT>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINECAP_ROUND>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINECAP_SQUARE>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINEJOIN_MITER>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINEJOIN_ROUND>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINEJOIN_BEVEL>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int MAX_CACHED_BITMAP_SIZE>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean DBG_VECTOR_DRAWABLE>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mMutated>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState mCachedConstantStateDelegate>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix>
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>
    void <init>()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        float[] $r1;
        android.graphics.Matrix $r2;
        android.graphics.Rect $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r4;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void <init>()>();

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching> = 1;

        $r1 = newarray (float)[9];

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats> = $r1;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix> = $r2;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds> = $r3;

        $r4 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        specialinvoke $r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>()>();

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState> = $r4;

        return;
    }

    void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r1;
        float[] $r2;
        android.graphics.Matrix $r3;
        android.graphics.Rect $r4;
        android.graphics.PorterDuff$Mode $r5;
        android.content.res.ColorStateList $r6;
        android.graphics.PorterDuffColorFilter $r7, $r8;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void <init>()>();

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching> = 1;

        $r2 = newarray (float)[9];

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats> = $r2;

        $r3 = new android.graphics.Matrix;

        specialinvoke $r3.<android.graphics.Matrix: void <init>()>();

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix> = $r3;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds> = $r4;

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState> = r1;

        $r7 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r6 = r1.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $r5 = r1.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $r8 = virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r7, $r6, $r5);

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r8;

        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r2, $r5;
        boolean $z0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r3, $r4;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r5 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        return r0;

     label1:
        $z0 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mMutated>;

        if $z0 != 0 goto label2;

        $r2 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: android.graphics.drawable.Drawable mutate()>();

        if $r2 != r0 goto label2;

        $r3 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        specialinvoke $r3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)>($r4);

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState> = $r3;

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mMutated> = 1;

     label2:
        return r0;
    }

    java.lang.Object getTargetByName(java.lang.String)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        java.lang.String r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        androidx.collection.ArrayMap $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $r4 = $r3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        $r5 = virtualinvoke $r4.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r5;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2, $r3;
        int $i0, $i1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState $r4;
        android.graphics.drawable.Drawable$ConstantState $r6;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 24 goto label1;

        $r4 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState;

        $r5 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $r6 = virtualinvoke $r5.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        specialinvoke $r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>($r6);

        return $r4;

     label1:
        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $i0 = virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>();

        $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $i0;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        return $r3;
    }

    public void draw(android.graphics.Canvas)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.Canvas r1;
        java.lang.Object r2, $r25;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, f10, $f11, $f12, $f13, $f14;
        int i0, $i1, $i2, $i4, $i5, $i6, $i8, i9, $i10, i11, i12, i13;
        boolean z0, $z1, $z2;
        android.graphics.drawable.Drawable $r3, $r24;
        android.graphics.Rect $r4, $r5, $r6, $r15, $r16, $r17, $r23, $r26, $r27, $r29;
        android.graphics.ColorFilter $r7, r30;
        android.graphics.Matrix $r8, $r10;
        float[] $r9, $r11, $r12, $r13, $r14;
        byte $b3, $b7;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r18, $r19, $r20, $r21, $r22, $r28;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.graphics.Canvas;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r3 == null goto label01;

        $r24 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r24.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return;

     label01:
        $r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void copyBounds(android.graphics.Rect)>($r4);

        $r5 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i1 = virtualinvoke $r5.<android.graphics.Rect: int width()>();

        if $i1 <= 0 goto label02;

        $r6 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i2 = virtualinvoke $r6.<android.graphics.Rect: int height()>();

        if $i2 > 0 goto label03;

     label02:
        return;

     label03:
        $r7 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter>;

        if $r7 != null goto label04;

        $r25 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        goto label05;

     label04:
        $r25 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter>;

     label05:
        r2 = $r25;

        $r8 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix>;

        virtualinvoke r1.<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>($r8);

        $r10 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix>;

        $r9 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        virtualinvoke $r10.<android.graphics.Matrix: void getValues(float[])>($r9);

        $r11 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        $f2 = $r11[0];

        f9 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $r12 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        $f3 = $r12[4];

        f10 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $r13 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        $f4 = $r13[1];

        f0 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        $r14 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        $f5 = $r14[3];

        f1 = staticinvoke <java.lang.Math: float abs(float)>($f5);

        $b3 = f0 cmpl 0.0F;

        if $b3 != 0 goto label06;

        $b7 = f1 cmpl 0.0F;

        if $b7 == 0 goto label07;

     label06:
        f9 = 1.0F;

        f10 = 1.0F;

     label07:
        $r26 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i8 = virtualinvoke $r26.<android.graphics.Rect: int width()>();

        $f11 = (float) $i8;

        $f12 = $f11 * f9;

        i9 = (int) $f12;

        $r27 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i10 = virtualinvoke $r27.<android.graphics.Rect: int height()>();

        $f13 = (float) $i10;

        $f14 = $f13 * f10;

        i11 = (int) $f14;

        i12 = staticinvoke <java.lang.Math: int min(int,int)>(2048, i9);

        i13 = staticinvoke <java.lang.Math: int min(int,int)>(2048, i11);

        if i12 <= 0 goto label08;

        if i13 > 0 goto label09;

     label08:
        return;

     label09:
        i0 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r15 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i4 = $r15.<android.graphics.Rect: int left>;

        $f7 = (float) $i4;

        $r16 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i5 = $r16.<android.graphics.Rect: int top>;

        $f6 = (float) $i5;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f7, $f6);

        z0 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean needMirroring()>();

        if z0 == 0 goto label10;

        $r23 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $i6 = virtualinvoke $r23.<android.graphics.Rect: int width()>();

        $f8 = (float) $i6;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f8, 0.0F);

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(-1.0F, 1.0F);

     label10:
        $r17 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        virtualinvoke $r17.<android.graphics.Rect: void offsetTo(int,int)>(0, 0);

        $r18 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $r18.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void createCachedBitmapIfNeeded(int,int)>(i12, i13);

        $z1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching>;

        if $z1 != 0 goto label11;

        $r22 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $r22.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCachedBitmap(int,int)>(i12, i13);

        goto label12;

     label11:
        $r19 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $z2 = virtualinvoke $r19.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean canReuseCache()>();

        if $z2 != 0 goto label12;

        $r20 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $r20.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCachedBitmap(int,int)>(i12, i13);

        $r21 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $r21.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCacheStates()>();

     label12:
        $r28 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r29 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        r30 = (android.graphics.ColorFilter) r2;

        virtualinvoke $r28.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect)>(r1, r30, $r29);

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        return;
    }

    public int getAlpha()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        int $i0, $i1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i1 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: int getAlpha(android.graphics.drawable.Drawable)>($r4);

        return $i1;

     label1:
        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        return $i0;
    }

    public void setAlpha(int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int i0, $i1;
        android.graphics.drawable.Drawable $r1, $r6;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2, $r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3, $r5;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r6 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r6.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0);

        return;

     label1:
        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $i1 = virtualinvoke $r3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        if $i1 == i0 goto label2;

        $r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r5 = $r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        virtualinvoke $r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)>(i0);

        virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

     label2:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.ColorFilter r1;
        android.graphics.drawable.Drawable $r2, $r3;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r1);

        return;

     label1:
        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter> = r1;

        virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

        return;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r3;
        android.graphics.ColorFilter $r2, $r4;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $r4 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable)>($r3);

        return $r4;

     label1:
        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter>;

        return $r2;
    }

    android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter, android.content.res.ColorStateList, android.graphics.PorterDuff$Mode)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuffColorFilter r1, $r5;
        android.content.res.ColorStateList r2;
        android.graphics.PorterDuff$Mode r3;
        int i0;
        int[] $r4;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.graphics.PorterDuffColorFilter;

        r2 := @parameter1: android.content.res.ColorStateList;

        r3 := @parameter2: android.graphics.PorterDuff$Mode;

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        return null;

     label2:
        $r4 = virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int[] getState()>();

        i0 = virtualinvoke r2.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r4, 0);

        $r5 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $r5.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>(i0, r3);

        return $r5;
    }

    public void setTint(int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int i0;
        android.graphics.drawable.Drawable $r1, $r3;
        android.content.res.ColorStateList $r2;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTint(android.graphics.drawable.Drawable,int)>($r3, i0);

        return;

     label1:
        $r2 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>(i0);

        virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.ColorStateList r1, $r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r2;
        android.graphics.drawable.Drawable $r3, $r8;
        android.graphics.PorterDuff$Mode $r5;
        android.graphics.PorterDuffColorFilter $r6, $r7;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r3 == null goto label1;

        $r8 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r8, r1);

        return;

     label1:
        r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r4 = r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $r4 == r1 goto label2;

        r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint> = r1;

        $r6 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r5 = r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $r7 = virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r6, r1, $r5);

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r7;

        virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

     label2:
        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuff$Mode r1, $r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r2;
        android.graphics.drawable.Drawable $r3, $r8;
        android.content.res.ColorStateList $r5;
        android.graphics.PorterDuffColorFilter $r6, $r7;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r3 == null goto label1;

        $r8 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>($r8, r1);

        return;

     label1:
        r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r4 = r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        if $r4 == r1 goto label2;

        r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode> = r1;

        $r6 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r5 = r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $r7 = virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r6, $r5, r1);

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r7;

        virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

     label2:
        return;
    }

    public boolean isStateful()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2, $r3, $r4, $r6;
        android.content.res.ColorStateList $r5, $r7;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r8 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $z3 = virtualinvoke $r8.<android.graphics.drawable.Drawable: boolean isStateful()>();

        return $z3;

     label1:
        $z0 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean isStateful()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        if $r2 == null goto label3;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $z1 = virtualinvoke $r3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean isStateful()>();

        if $z1 != 0 goto label2;

        $r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r5 = $r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $r5 == null goto label3;

        $r6 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r7 = $r6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $z2 = virtualinvoke $r7.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z2 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    protected boolean onStateChange(int[])
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int[] r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r2;
        android.graphics.drawable.Drawable $r3, $r10;
        android.content.res.ColorStateList $r4, $r7;
        boolean $z0, $z1, z2, $z3;
        android.graphics.PorterDuff$Mode $r5, $r6;
        android.graphics.PorterDuffColorFilter $r8, $r9;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: int[];

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r3 == null goto label1;

        $r10 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $z1 = virtualinvoke $r10.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        return $z1;

     label1:
        z2 = 0;

        r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r4 = r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $r4 == null goto label2;

        $r5 = r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        if $r5 == null goto label2;

        $r8 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r7 = r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $r6 = r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $r9 = virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r8, $r7, $r6);

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r9;

        virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

        z2 = 1;

     label2:
        $z3 = virtualinvoke r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean isStateful()>();

        if $z3 == 0 goto label3;

        $z0 = virtualinvoke r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean onStateChanged(int[])>(r1);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

        z2 = 1;

     label3:
        return z2;
    }

    public int getOpacity()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r2;
        int $i0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getOpacity()>();

        return $i0;

     label1:
        return -3;
    }

    public int getIntrinsicWidth()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        float $f0;
        int $i0, $i1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i1 = virtualinvoke $r4.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        return $i1;

     label1:
        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $f0 = $r3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $i0 = (int) $f0;

        return $i0;
    }

    public int getIntrinsicHeight()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        float $f0;
        int $i0, $i1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i1 = virtualinvoke $r4.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        return $i1;

     label1:
        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $f0 = $r3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $i0 = (int) $f0;

        return $i0;
    }

    public boolean canApplyTheme()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: boolean canApplyTheme(android.graphics.drawable.Drawable)>($r2);

     label1:
        return 0;
    }

    public boolean isAutoMirrored()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $z1 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: boolean isAutoMirrored(android.graphics.drawable.Drawable)>($r3);

        return $z1;

     label1:
        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $z0 = $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored>;

        return $z0;
    }

    public void setAutoMirrored(boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean z0;
        android.graphics.drawable.Drawable $r1, $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)>($r3, z0);

        return;

     label1:
        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored> = z0;

        return;
    }

    public float getPixelSize()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r1, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r3 = $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        if $r3 == null goto label1;

        $r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r5 = $r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $f6 = $r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $b0 = $f6 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $r6 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r7 = $r6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $f7 = $r7.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $b1 = $f7 cmpl 0.0F;

        if $b1 == 0 goto label1;

        $r8 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r9 = $r8.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $f8 = $r9.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        $b2 = $f8 cmpl 0.0F;

        if $b2 == 0 goto label1;

        $r10 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r11 = $r10.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $f9 = $r11.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        $b3 = $f9 cmpl 0.0F;

        if $b3 != 0 goto label2;

     label1:
        return 1.0F;

     label2:
        $r12 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r13 = $r12.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f0 = $r13.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $r14 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r15 = $r14.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f1 = $r15.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $r16 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r17 = $r16.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f2 = $r17.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        $r18 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r19 = $r18.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        f3 = $r19.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        f4 = f2 / f0;

        f5 = f3 / f1;

        $f10 = staticinvoke <java.lang.Math: float min(float,float)>(f4, f5);

        return $f10;
    }

    public static androidx.vectordrawable.graphics.drawable.VectorDrawableCompat create(android.content.res.Resources, int, android.content.res.Resources$Theme)
    {
        android.content.res.Resources r0;
        int i0, i1, $i2, $i3;
        android.content.res.Resources$Theme r1;
        android.util.AttributeSet r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat $r3, $r5, r12;
        org.xmlpull.v1.XmlPullParserException $r4;
        android.graphics.drawable.Drawable $r6, $r8;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState $r7;
        android.graphics.drawable.Drawable$ConstantState $r9;
        java.lang.Throwable $r10, $r11, r14, r15;
        android.content.res.XmlResourceParser r13;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.res.Resources$Theme;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 24 goto label1;

        $r5 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke $r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>()>();

        r12 = $r5;

        $r6 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)>(r0, i0, r1);

        r12.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable> = $r6;

        $r7 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState;

        $r8 = r12.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $r9 = virtualinvoke $r8.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        specialinvoke $r7.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>($r9);

        r12.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState mCachedConstantStateDelegate> = $r7;

        return r12;

     label1:
        r13 = virtualinvoke r0.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i0);

        r2 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r13);

     label2:
        $i3 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: int next()>();

        i1 = $i3;

        if $i3 == 2 goto label3;

        if i1 == 1 goto label3;

        goto label2;

     label3:
        if i1 == 2 goto label4;

        $r4 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        throw $r4;

     label4:
        $r3 = staticinvoke <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r0, r13, r2, r1);

     label5:
        return $r3;

     label6:
        $r11 := @caughtexception;

        r14 = $r11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("VectorDrawableCompat", "parser error", r14);

        goto label8;

     label7:
        $r10 := @caughtexception;

        r15 = $r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("VectorDrawableCompat", "parser error", r15);

     label8:
        return null;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label5 with label6;
        catch java.io.IOException from label1 to label5 with label7;
    }

    public static androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.util.AttributeSet r2;
        android.content.res.Resources$Theme r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r4, $r5;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: android.content.res.Resources$Theme;

        $r5 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke $r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>()>();

        r4 = $r5;

        virtualinvoke r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r0, r1, r2, r3);

        return r4;
    }

    static int applyAlpha(int, float)
    {
        float f0, $f1, $f2;
        int i0, $i1, $i2, i3, i4, i5;

        i3 := @parameter0: int;

        f0 := @parameter1: float;

        i0 = staticinvoke <android.graphics.Color: int alpha(int)>(i3);

        i4 = i3 & 16777215;

        $f1 = (float) i0;

        $f2 = $f1 * f0;

        $i1 = (int) $f2;

        $i2 = $i1 << 24;

        i5 = i4 | $i2;

        return i5;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.graphics.drawable.Drawable $r4, $r5;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        $r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r4 == null goto label1;

        $r5 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>(r1, r2, r3);

        return;

     label1:
        virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, null);

        return;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer r6, $r9;
        android.content.res.TypedArray r7;
        android.graphics.drawable.Drawable $r8, $r15;
        int[] $r10;
        int $i0;
        android.graphics.PorterDuff$Mode $r11;
        android.content.res.ColorStateList $r12;
        android.graphics.PorterDuffColorFilter $r13, $r14;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        $r8 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r8 == null goto label1;

        $r15 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r15, r1, r2, r3, r4);

        return;

     label1:
        r5 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $r9 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer;

        specialinvoke $r9.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>()>();

        r6 = $r9;

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer> = r6;

        $r10 = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_VECTOR_DRAWABLE_TYPE_ARRAY>;

        r7 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r10);

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>(r7, r2, r4);

        virtualinvoke r7.<android.content.res.TypedArray: void recycle()>();

        $i0 = virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>();

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $i0;

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mCacheDirty> = 1;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        $r13 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r12 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $r11 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $r14 = virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r13, $r12, $r11);

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $r14;

        return;
    }

    private static android.graphics.PorterDuff$Mode parseTintModeCompat(int, android.graphics.PorterDuff$Mode)
    {
        int i0;
        android.graphics.PorterDuff$Mode r0, $r1, $r2, $r3, $r4, $r5, $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: android.graphics.PorterDuff$Mode;

        tableswitch(i0)
        {
            case 3: goto label1;
            case 4: goto label7;
            case 5: goto label2;
            case 6: goto label7;
            case 7: goto label7;
            case 8: goto label7;
            case 9: goto label3;
            case 10: goto label7;
            case 11: goto label7;
            case 12: goto label7;
            case 13: goto label7;
            case 14: goto label4;
            case 15: goto label5;
            case 16: goto label6;
            default: goto label7;
        };

     label1:
        $r6 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OVER>;

        return $r6;

     label2:
        $r5 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        return $r5;

     label3:
        $r4 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_ATOP>;

        return $r4;

     label4:
        $r3 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode MULTIPLY>;

        return $r3;

     label5:
        $r2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SCREEN>;

        return $r2;

     label6:
        $r1 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode ADD>;

        return $r1;

     label7:
        return r0;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.TypedArray r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.content.res.Resources$Theme r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer r5;
        int i0;
        android.content.res.ColorStateList r6;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        java.lang.String r7, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35;
        android.graphics.PorterDuff$Mode $r8, $r9;
        boolean $z0, $z1;
        byte $b1, $b2, $b3, $b4;
        androidx.collection.ArrayMap $r10;
        org.xmlpull.v1.XmlPullParserException $r12, $r18, $r24, $r30;
        java.lang.StringBuilder $r13, $r15, $r16, $r19, $r21, $r22, $r25, $r27, $r28, $r31, $r33, $r34;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.content.res.Resources$Theme;

        r4 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        r5 = r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        i0 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>(r1, r2, "tintMode", 6, -1);

        $r8 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        $r9 = staticinvoke <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode parseTintModeCompat(int,android.graphics.PorterDuff$Mode)>(i0, $r8);

        r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode> = $r9;

        r6 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.ColorStateList getNamedColorStateList(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme,java.lang.String,int)>(r1, r2, r3, "tint", 1);

        if r6 == null goto label1;

        r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint> = r6;

     label1:
        $z0 = r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored>;

        $z1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: boolean getNamedBoolean(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,boolean)>(r1, r2, "autoMirrored", 5, $z0);

        r4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored> = $z1;

        $f1 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        $f2 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>(r1, r2, "viewportWidth", 7, $f1);

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth> = $f2;

        $f3 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        $f4 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>(r1, r2, "viewportHeight", 8, $f3);

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight> = $f4;

        $f5 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        $b1 = $f5 cmpg 0.0F;

        if $b1 > 0 goto label2;

        $r30 = new org.xmlpull.v1.XmlPullParserException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportWidth > 0");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r35);

        throw $r30;

     label2:
        $f6 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        $b2 = $f6 cmpg 0.0F;

        if $b2 > 0 goto label3;

        $r24 = new org.xmlpull.v1.XmlPullParserException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportHeight > 0");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label3:
        $f7 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $f8 = virtualinvoke r1.<android.content.res.TypedArray: float getDimension(int,float)>(3, $f7);

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth> = $f8;

        $f9 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $f10 = virtualinvoke r1.<android.content.res.TypedArray: float getDimension(int,float)>(2, $f9);

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight> = $f10;

        $f11 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $b3 = $f11 cmpg 0.0F;

        if $b3 > 0 goto label4;

        $r18 = new org.xmlpull.v1.XmlPullParserException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires width > 0");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label4:
        $f12 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $b4 = $f12 cmpg 0.0F;

        if $b4 > 0 goto label5;

        $r12 = new org.xmlpull.v1.XmlPullParserException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires height > 0");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label5:
        $f13 = virtualinvoke r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()>();

        f0 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>(r1, r2, "alpha", 4, $f13);

        virtualinvoke r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)>(f0);

        r7 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if r7 == null goto label6;

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: java.lang.String mRootName> = r7;

        $r10 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        virtualinvoke $r10.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r5);

     label6:
        return;
    }

    private void inflateInternal(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer r6;
        java.util.ArrayDeque r7, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup r8, $r10, $r18, r42;
        org.xmlpull.v1.XmlPullParserException $r11;
        java.lang.String $r12, $r15, $r16, $r17, $r20, $r22, $r27, $r29, $r34, $r36, r39, r43;
        boolean $z0, $z1, $z2, $z3, z7;
        java.lang.Object $r14;
        java.util.ArrayList $r19, $r26, $r33;
        androidx.collection.ArrayMap $r21, $r28, $r35;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath $r25, r41;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath $r32, r40;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        r5 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        r6 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        z7 = 1;

        $r9 = new java.util.ArrayDeque;

        specialinvoke $r9.<java.util.ArrayDeque: void <init>()>();

        r7 = $r9;

        $r10 = r6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup mRootGroup>;

        virtualinvoke r7.<java.util.ArrayDeque: void push(java.lang.Object)>($r10);

        i12 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        $i1 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        i0 = $i1 + 1;

     label01:
        if i12 == 1 goto label11;

        $i2 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i2 >= i0 goto label02;

        if i12 == 3 goto label11;

     label02:
        if i12 != 2 goto label09;

        r39 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r14 = virtualinvoke r7.<java.util.ArrayDeque: java.lang.Object peek()>();

        r8 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup) $r14;

        $r15 = "path";

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r39);

        if $z1 == 0 goto label04;

        $r32 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath;

        specialinvoke $r32.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void <init>()>();

        r40 = $r32;

        virtualinvoke r40.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>(r1, r3, r4, r2);

        $r33 = r8.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r33.<java.util.ArrayList: boolean add(java.lang.Object)>(r40);

        $r34 = virtualinvoke r40.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: java.lang.String getPathName()>();

        if $r34 == null goto label03;

        $r35 = r6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        $r36 = virtualinvoke r40.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: java.lang.String getPathName()>();

        virtualinvoke $r35.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, r40);

     label03:
        z7 = 0;

        $i10 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        $i9 = r40.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int mChangingConfigurations>;

        $i11 = $i10 | $i9;

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $i11;

        goto label08;

     label04:
        $r16 = "clip-path";

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r39);

        if $z2 == 0 goto label06;

        $r25 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath;

        specialinvoke $r25.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void <init>()>();

        r41 = $r25;

        virtualinvoke r41.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>(r1, r3, r4, r2);

        $r26 = r8.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r26.<java.util.ArrayList: boolean add(java.lang.Object)>(r41);

        $r27 = virtualinvoke r41.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: java.lang.String getPathName()>();

        if $r27 == null goto label05;

        $r28 = r6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        $r29 = virtualinvoke r41.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: java.lang.String getPathName()>();

        virtualinvoke $r28.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, r41);

     label05:
        $i7 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        $i6 = r41.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: int mChangingConfigurations>;

        $i8 = $i7 | $i6;

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $i8;

        goto label08;

     label06:
        $r17 = "group";

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r39);

        if $z3 == 0 goto label08;

        $r18 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup;

        specialinvoke $r18.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void <init>()>();

        r42 = $r18;

        virtualinvoke r42.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>(r1, r3, r4, r2);

        $r19 = r8.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r42);

        virtualinvoke r7.<java.util.ArrayDeque: void push(java.lang.Object)>(r42);

        $r20 = virtualinvoke r42.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>();

        if $r20 == null goto label07;

        $r21 = r6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        $r22 = virtualinvoke r42.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>();

        virtualinvoke $r21.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, r42);

     label07:
        $i4 = r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        $i3 = r42.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: int mChangingConfigurations>;

        $i5 = $i4 | $i3;

        r5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $i5;

     label08:
        goto label10;

     label09:
        if i12 != 3 goto label10;

        r43 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r12 = "group";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r43);

        if $z0 == 0 goto label10;

        virtualinvoke r7.<java.util.ArrayDeque: java.lang.Object pop()>();

     label10:
        i12 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label01;

     label11:
        if z7 == 0 goto label12;

        $r11 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r11.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("no path defined");

        throw $r11;

     label12:
        return;
    }

    private void printGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup, int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup r1, $r22;
        int i0, $i3, $i4, $i5, i6, i7;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r16, $r23, $r24, $r25;
        java.lang.String $r6, $r10, $r15, $r17, r26;
        float $f0;
        android.graphics.Matrix $r14;
        java.util.ArrayList $r18, $r19;
        java.lang.Object $r20;
        boolean $z0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath $r21;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup;

        i0 := @parameter1: int;

        r26 = "";

        i6 = 0;

     label1:
        if i6 >= i0 goto label2;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        i6 = i6 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current group is :");

        $r6 = virtualinvoke r1.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rotation is ");

        $f0 = r1.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float mRotate>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("VectorDrawableCompat", $r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("matrix is :");

        $r14 = virtualinvoke r1.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: android.graphics.Matrix getLocalMatrix()>();

        $r15 = virtualinvoke $r14.<android.graphics.Matrix: java.lang.String toString()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("VectorDrawableCompat", $r17);

        i7 = 0;

     label3:
        $r18 = r1.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        $i3 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

        if i7 >= $i3 goto label6;

        $r19 = r1.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        $r20 = virtualinvoke $r19.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        r2 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject) $r20;

        $z0 = r2 instanceof androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup;

        if $z0 == 0 goto label4;

        $r22 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup) r2;

        $i5 = i0 + 1;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void printGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,int)>($r22, $i5);

        goto label5;

     label4:
        $r21 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath) r2;

        $i4 = i0 + 1;

        virtualinvoke $r21.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void printVPath(int)>($i4);

     label5:
        i7 = i7 + 1;

        goto label3;

     label6:
        return;
    }

    void setAllowCaching(boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean z0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        z0 := @parameter0: boolean;

        r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching> = z0;

        return;
    }

    private boolean needMirroring()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 17 goto label3;

        $z0 = virtualinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean isAutoMirrored()>();

        if $z0 == 0 goto label1;

        $i1 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(r0);

        if $i1 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.Rect r1;
        android.graphics.drawable.Drawable $r2, $r3;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r1);

     label1:
        return;
    }

    public int getChangingConfigurations()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r3;
        int $i0, $i1, $i2, $i3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $i3 = virtualinvoke $r3.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        return $i3;

     label1:
        $i0 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int getChangingConfigurations()>();

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $i1 = virtualinvoke $r2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        return $i2;
    }

    public void invalidateSelf()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void invalidateSelf()>();

        return;

     label1:
        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void invalidateSelf()>();

        return;
    }

    public void scheduleSelf(java.lang.Runnable, long)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        java.lang.Runnable r1;
        long l0;
        android.graphics.drawable.Drawable $r2, $r3;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>(r1, l0);

        return;

     label1:
        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void scheduleSelf(java.lang.Runnable,long)>(r1, l0);

        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean z0, z1, $z2, $z3;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $z3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        return $z3;

     label1:
        $z2 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean setVisible(boolean,boolean)>(z0, z1);

        return $z2;
    }

    public void unscheduleSelf(java.lang.Runnable)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        java.lang.Runnable r1;
        android.graphics.drawable.Drawable $r2, $r3;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>(r1);

        return;

     label1:
        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void unscheduleSelf(java.lang.Runnable)>(r1);

        return;
    }

    public volatile boolean setState(int[])
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int[] r1;
        boolean $z0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: int[];

        $z0 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean setState(int[])>(r1);

        return $z0;
    }

    public volatile void setChangingConfigurations(int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int i0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setChangingConfigurations(int)>(i0);

        return;
    }

    public volatile android.graphics.Region getTransparentRegion()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.Region $r1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: android.graphics.Region getTransparentRegion()>();

        return $r1;
    }

    public volatile int[] getState()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int[] $r1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int[] getState()>();

        return $r1;
    }

    public volatile boolean getPadding(android.graphics.Rect)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean getPadding(android.graphics.Rect)>(r1);

        return $z0;
    }

    public volatile int getMinimumHeight()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int $i0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $i0 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int getMinimumHeight()>();

        return $i0;
    }

    public volatile int getMinimumWidth()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int $i0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $i0 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int getMinimumWidth()>();

        return $i0;
    }

    public volatile android.graphics.drawable.Drawable getCurrent()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $r1 = specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: android.graphics.drawable.Drawable getCurrent()>();

        return $r1;
    }

    public volatile void clearColorFilter()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void clearColorFilter()>();

        return;
    }

    public volatile void applyTheme(android.content.res.Resources$Theme)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.Resources$Theme r1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        r1 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void applyTheme(android.content.res.Resources$Theme)>(r1);

        return;
    }

    public volatile void jumpToCurrentState()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void jumpToCurrentState()>();

        return;
    }

    public volatile void setFilterBitmap(boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean z0;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        z0 := @parameter0: boolean;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setFilterBitmap(boolean)>(z0);

        return;
    }

    public volatile void setHotspotBounds(int, int, int, int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int i0, i1, i2, i3;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setHotspotBounds(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public volatile void setHotspot(float, float)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        float f0, f1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setHotspot(float,float)>(f0, f1);

        return;
    }

    public volatile void setColorFilter(int, android.graphics.PorterDuff$Mode)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        int i0;
        android.graphics.PorterDuff$Mode r1;

        r0 := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.PorterDuff$Mode;

        specialinvoke r0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setColorFilter(int,android.graphics.PorterDuff$Mode)>(i0, r1);

        return;
    }

    static void <clinit>()
    {
        android.graphics.PorterDuff$Mode $r0;

        $r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE> = $r0;

        return;
    }

