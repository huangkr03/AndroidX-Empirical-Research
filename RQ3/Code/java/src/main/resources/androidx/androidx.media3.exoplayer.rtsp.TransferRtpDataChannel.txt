androidx.media3.exoplayer.rtsp.TransferRtpDataChannel
<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: java.lang.String DEFAULT_TCP_TRANSPORT_FORMAT>
<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: java.util.concurrent.LinkedBlockingQueue packetQueue>
<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: long pollTimeoutMs>
<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: byte[] unreadData>
<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: int channelNumber>
    public void <init>(long)
    {
        androidx.media3.exoplayer.rtsp.TransferRtpDataChannel r0;
        long l0;
        java.util.concurrent.LinkedBlockingQueue $r1;
        byte[] $r2;

        r0 := @this: androidx.media3.exoplayer.rtsp.TransferRtpDataChannel;

        l0 := @parameter0: long;

        specialinvoke r0.<androidx.media3.datasource.BaseDataSource: void <init>(boolean)>(1);

        r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: long pollTimeoutMs> = l0;

        $r1 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: java.util.concurrent.LinkedBlockingQueue packetQueue> = $r1;

        $r2 = newarray (byte)[0];

        r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: byte[] unreadData> = $r2;

        r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: int channelNumber> = -1;

        return;
    }

    public java.lang.String getTransport()
    {
        androidx.media3.exoplayer.rtsp.TransferRtpDataChannel r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.rtsp.TransferRtpDataChannel;

        $i0 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: int channelNumber>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r1 = newarray (java.lang.Object)[2];

        $i1 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: int channelNumber>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        $i2 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: int channelNumber>;

        $i3 = $i2 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r3;

        $r4 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("RTP/AVP/TCP;unicast;interleaved=%d-%d", $r1);

        return $r4;
    }

    public int getLocalPort()
    {
        androidx.media3.exoplayer.rtsp.TransferRtpDataChannel r0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.rtsp.TransferRtpDataChannel;

        $i0 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: int channelNumber>;

        return $i0;
    }

    public androidx.media3.exoplayer.rtsp.RtspMessageChannel$InterleavedBinaryDataListener getInterleavedBinaryDataListener()
    {
        androidx.media3.exoplayer.rtsp.TransferRtpDataChannel r0;

        r0 := @this: androidx.media3.exoplayer.rtsp.TransferRtpDataChannel;

        return r0;
    }

    public long open(androidx.media3.datasource.DataSpec)
    {
        androidx.media3.exoplayer.rtsp.TransferRtpDataChannel r0;
        androidx.media3.datasource.DataSpec r1;
        android.net.Uri $r2;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.rtsp.TransferRtpDataChannel;

        r1 := @parameter0: androidx.media3.datasource.DataSpec;

        $r2 = r1.<androidx.media3.datasource.DataSpec: android.net.Uri uri>;

        $i0 = virtualinvoke $r2.<android.net.Uri: int getPort()>();

        r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: int channelNumber> = $i0;

        return -1L;
    }

    public void close()
    {
        androidx.media3.exoplayer.rtsp.TransferRtpDataChannel r0;

        r0 := @this: androidx.media3.exoplayer.rtsp.TransferRtpDataChannel;

        return;
    }

    public android.net.Uri getUri()
    {
        androidx.media3.exoplayer.rtsp.TransferRtpDataChannel r0;

        r0 := @this: androidx.media3.exoplayer.rtsp.TransferRtpDataChannel;

        return null;
    }

    public int read(byte[], int, int)
    {
        androidx.media3.exoplayer.rtsp.TransferRtpDataChannel r0;
        byte[] r1, r2, $r4, $r5, $r6, $r7, $r8, $r12;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, i12, i13, i14;
        java.lang.Throwable r3, $r13;
        java.util.concurrent.TimeUnit $r9;
        long $l4;
        java.util.concurrent.LinkedBlockingQueue $r10;
        java.lang.Object $r11;
        java.lang.Thread $r14;
        byte b11;

        r0 := @this: androidx.media3.exoplayer.rtsp.TransferRtpDataChannel;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 0 goto label1;

        return 0;

     label1:
        b11 = 0;

        $r4 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: byte[] unreadData>;

        $i2 = lengthof $r4;

        i12 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i2);

        $r5 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: byte[] unreadData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, i0, i12);

        i13 = b11 + i12;

        $r7 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: byte[] unreadData>;

        $r6 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: byte[] unreadData>;

        $i3 = lengthof $r6;

        $r8 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r7, i12, $i3);

        r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: byte[] unreadData> = $r8;

        if i13 != i1 goto label2;

        return i13;

     label2:
        $r10 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: java.util.concurrent.LinkedBlockingQueue packetQueue>;

        $l4 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: long pollTimeoutMs>;

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>($l4, $r9);

        r2 = (byte[]) $r11;

        if r2 != null goto label4;

     label3:
        return -1;

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        r3 = $r13;

        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r14.<java.lang.Thread: void interrupt()>();

        return -1;

     label6:
        $i6 = i1 - i13;

        $i5 = lengthof r2;

        i14 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i5);

        $i7 = i0 + i13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, $i7, i14);

        $i8 = lengthof r2;

        if i14 >= $i8 goto label7;

        $i10 = lengthof r2;

        $r12 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r2, i14, $i10);

        r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: byte[] unreadData> = $r12;

     label7:
        $i9 = i13 + i14;

        return $i9;

        catch java.lang.InterruptedException from label2 to label3 with label5;
    }

    public void onInterleavedBinaryDataReceived(byte[])
    {
        androidx.media3.exoplayer.rtsp.TransferRtpDataChannel r0;
        byte[] r1;
        java.util.concurrent.LinkedBlockingQueue $r2;

        r0 := @this: androidx.media3.exoplayer.rtsp.TransferRtpDataChannel;

        r1 := @parameter0: byte[];

        $r2 = r0.<androidx.media3.exoplayer.rtsp.TransferRtpDataChannel: java.util.concurrent.LinkedBlockingQueue packetQueue>;

        virtualinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>(r1);

        return;
    }

