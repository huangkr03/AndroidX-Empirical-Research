androidx.compose.ui.node.LayoutTreeConsistencyChecker
<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.LayoutNode root>
<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.DepthSortedSet relayoutNodes>
<androidx.compose.ui.node.LayoutTreeConsistencyChecker: java.util.List postponedMeasureRequests>
    public void <init>(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.node.DepthSortedSet, java.util.List)
    {
        androidx.compose.ui.node.LayoutTreeConsistencyChecker r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.DepthSortedSet r2;
        java.util.List r3;

        r0 := @this: androidx.compose.ui.node.LayoutTreeConsistencyChecker;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: androidx.compose.ui.node.DepthSortedSet;

        r3 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "root");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "relayoutNodes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "postponedMeasureRequests");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.LayoutNode root> = r1;

        r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.DepthSortedSet relayoutNodes> = r2;

        r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: java.util.List postponedMeasureRequests> = r3;

        return;
    }

    public final void assertConsistent()
    {
        androidx.compose.ui.node.LayoutTreeConsistencyChecker r0;
        boolean z0, $z1, $z2;
        androidx.compose.ui.node.LayoutNode $r1;
        java.lang.String $r2;
        java.io.PrintStream $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.compose.ui.node.LayoutTreeConsistencyChecker;

        $r1 = r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.LayoutNode root>;

        $z1 = specialinvoke r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: boolean isTreeConsistent(androidx.compose.ui.node.LayoutNode)>($r1);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        $r2 = specialinvoke r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: java.lang.String logTree()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.Object)>($r2);

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Inconsistency found!");

        throw $r4;

     label3:
        return;
    }

    private final boolean isTreeConsistent(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutTreeConsistencyChecker r0;
        androidx.compose.ui.node.LayoutNode r1, r4;
        java.util.List $r2;
        int i0, i1;
        java.lang.Object r3;
        boolean $z2, $z3;

        r0 := @this: androidx.compose.ui.node.LayoutTreeConsistencyChecker;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $z2 = specialinvoke r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: boolean consistentLayoutState(androidx.compose.ui.node.LayoutNode)>(r1);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        i1 = 0;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        if i1 >= i0 goto label4;

        r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (androidx.compose.ui.node.LayoutNode) r3;

        $z3 = specialinvoke r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: boolean isTreeConsistent(androidx.compose.ui.node.LayoutNode)>(r4);

        if $z3 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }

    private final boolean consistentLayoutState(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutTreeConsistencyChecker r0;
        androidx.compose.ui.node.LayoutNode $r1, r2, $r8, $r12, $r13, $r19;
        androidx.compose.ui.node.LayoutNode$LayoutState r3, $r5, $r6, $r10, $r15, $r16, $r18, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z31, $z32, $z33, $z34, $z35, $z40, $z41, $z42, $z43, $z44;
        androidx.compose.ui.node.DepthSortedSet $r4, $r9, $r14, $r17;
        androidx.compose.ui.layout.LookaheadScope $r7, $r11;
        int $i0, i1, i2, i3, i4;
        java.util.List $r21, $r28;
        java.lang.Object r22, r23, $r25, r29, r30, $r32;
        androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest r24, r31;
        java.lang.Boolean $r26, $r27;

        r0 := @this: androidx.compose.ui.node.LayoutTreeConsistencyChecker;

        $r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if r2 == null goto label01;

        $r20 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        goto label02;

     label01:
        $r20 = null;

     label02:
        r3 = $r20;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z0 != 0 goto label06;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: int getPlaceOrder$ui_release()>();

        if $i0 == 2147483647 goto label24;

        if r2 == null goto label04;

        $z25 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z25 != 1 goto label03;

        $z26 = 1;

        goto label05;

     label03:
        $z26 = 0;

        goto label05;

     label04:
        $z26 = 0;

     label05:
        if $z26 == 0 goto label24;

     label06:
        $z1 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z1 == 0 goto label13;

        $r21 = r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: java.util.List postponedMeasureRequests>;

        i1 = 0;

        i2 = interfaceinvoke $r21.<java.util.List: int size()>();

     label07:
        if i1 >= i2 goto label11;

        r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i1);

        r23 = r22;

        r24 = (androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest) r23;

        $r19 = virtualinvoke r24.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: androidx.compose.ui.node.LayoutNode getNode()>();

        $z23 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r19, $r1);

        if $z23 == 0 goto label08;

        $z24 = virtualinvoke r24.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isLookahead()>();

        if $z24 != 0 goto label08;

        $z31 = 1;

        goto label09;

     label08:
        $z31 = 0;

     label09:
        if $z31 == 0 goto label10;

        $r25 = r23;

        goto label12;

     label10:
        i1 = i1 + 1;

        goto label07;

     label11:
        $r25 = null;

     label12:
        if $r25 == null goto label13;

        return 1;

     label13:
        $z2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z2 == 0 goto label20;

        $r17 = r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $z21 = virtualinvoke $r17.<androidx.compose.ui.node.DepthSortedSet: boolean contains(androidx.compose.ui.node.LayoutNode)>($r1);

        if $z21 != 0 goto label17;

        if r2 == null goto label15;

        $z22 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z22 != 1 goto label14;

        $z32 = 1;

        goto label16;

     label14:
        $z32 = 0;

        goto label16;

     label15:
        $z32 = 0;

     label16:
        if $z32 != 0 goto label17;

        $r18 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        if r3 != $r18 goto label18;

     label17:
        $z33 = 1;

        goto label19;

     label18:
        $z33 = 0;

     label19:
        return $z33;

     label20:
        $z3 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getLayoutPending$ui_release()>();

        if $z3 == 0 goto label24;

        $r14 = r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $z18 = virtualinvoke $r14.<androidx.compose.ui.node.DepthSortedSet: boolean contains(androidx.compose.ui.node.LayoutNode)>($r1);

        if $z18 != 0 goto label21;

        if r2 == null goto label21;

        $z19 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z19 != 0 goto label21;

        $z20 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getLayoutPending$ui_release()>();

        if $z20 != 0 goto label21;

        $r15 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState Measuring>;

        if r3 == $r15 goto label21;

        $r16 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LayingOut>;

        if r3 != $r16 goto label22;

     label21:
        $z34 = 1;

        goto label23;

     label22:
        $z34 = 0;

     label23:
        return $z34;

     label24:
        $r26 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: java.lang.Boolean isPlacedInLookahead()>();

        $r27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z35 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r26, $r27);

        if $z35 == 0 goto label45;

        $z4 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z4 == 0 goto label31;

        $r28 = r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: java.util.List postponedMeasureRequests>;

        i3 = 0;

        i4 = interfaceinvoke $r28.<java.util.List: int size()>();

     label25:
        if i3 >= i4 goto label29;

        r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i3);

        r30 = r29;

        r31 = (androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest) r30;

        $r13 = virtualinvoke r31.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: androidx.compose.ui.node.LayoutNode getNode()>();

        $z16 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r13, $r1);

        if $z16 == 0 goto label26;

        $z17 = virtualinvoke r31.<androidx.compose.ui.node.MeasureAndLayoutDelegate$PostponedRequest: boolean isLookahead()>();

        if $z17 == 0 goto label26;

        $z40 = 1;

        goto label27;

     label26:
        $z40 = 0;

     label27:
        if $z40 == 0 goto label28;

        $r32 = r30;

        goto label30;

     label28:
        i3 = i3 + 1;

        goto label25;

     label29:
        $r32 = null;

     label30:
        if $r32 == null goto label31;

        return 1;

     label31:
        $z5 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z5 == 0 goto label41;

        $r9 = r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $z12 = virtualinvoke $r9.<androidx.compose.ui.node.DepthSortedSet: boolean contains(androidx.compose.ui.node.LayoutNode)>($r1);

        if $z12 != 0 goto label38;

        if r2 == null goto label33;

        $z15 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z15 != 1 goto label32;

        $z41 = 1;

        goto label34;

     label32:
        $z41 = 0;

        goto label34;

     label33:
        $z41 = 0;

     label34:
        if $z41 != 0 goto label38;

        $r10 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring>;

        if r3 == $r10 goto label38;

        if r2 == null goto label36;

        $z14 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getMeasurePending$ui_release()>();

        if $z14 != 1 goto label35;

        $z42 = 1;

        goto label37;

     label35:
        $z42 = 0;

        goto label37;

     label36:
        $z42 = 0;

     label37:
        if $z42 == 0 goto label39;

        $r11 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope getMLookaheadScope$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r11);

        $r12 = virtualinvoke $r11.<androidx.compose.ui.layout.LookaheadScope: androidx.compose.ui.node.LayoutNode getRoot()>();

        $z13 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r12, $r1);

        if $z13 == 0 goto label39;

     label38:
        $z43 = 1;

        goto label40;

     label39:
        $z43 = 0;

     label40:
        return $z43;

     label41:
        $z6 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadLayoutPending$ui_release()>();

        if $z6 == 0 goto label45;

        $r4 = r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.DepthSortedSet relayoutNodes>;

        $z7 = virtualinvoke $r4.<androidx.compose.ui.node.DepthSortedSet: boolean contains(androidx.compose.ui.node.LayoutNode)>($r1);

        if $z7 != 0 goto label42;

        if r2 == null goto label42;

        $z8 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadMeasurePending$ui_release()>();

        if $z8 != 0 goto label42;

        $z9 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getLookaheadLayoutPending$ui_release()>();

        if $z9 != 0 goto label42;

        $r5 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadMeasuring>;

        if r3 == $r5 goto label42;

        $r6 = <androidx.compose.ui.node.LayoutNode$LayoutState: androidx.compose.ui.node.LayoutNode$LayoutState LookaheadLayingOut>;

        if r3 == $r6 goto label42;

        $z10 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: boolean getLayoutPending$ui_release()>();

        if $z10 == 0 goto label43;

        $r7 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.LookaheadScope getMLookaheadScope$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        $r8 = virtualinvoke $r7.<androidx.compose.ui.layout.LookaheadScope: androidx.compose.ui.node.LayoutNode getRoot()>();

        $z11 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, $r1);

        if $z11 == 0 goto label43;

     label42:
        $z44 = 1;

        goto label44;

     label43:
        $z44 = 0;

     label44:
        return $z44;

     label45:
        return 1;
    }

    private final java.lang.String nodeToString(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.LayoutTreeConsistencyChecker r0;
        androidx.compose.ui.node.LayoutNode r1;
        java.lang.StringBuilder $r3, $r5, $r6, $r8, $r9, $r12, $r13, $r15, $r16;
        androidx.compose.ui.node.LayoutNode$LayoutState $r7;
        java.lang.String $r10, $r17, $r19;
        boolean $z1, $z2;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r14;

        r0 := @this: androidx.compose.ui.node.LayoutTreeConsistencyChecker;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r7 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$LayoutState getLayoutState$ui_release()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $z1 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z1 != 0 goto label1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[!isPlaced]");

     label1:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[measuredByParent=");

        $r14 = virtualinvoke r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$UsageByParent getMeasuredByParent$ui_release()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $z2 = specialinvoke r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: boolean consistentLayoutState(androidx.compose.ui.node.LayoutNode)>(r1);

        if $z2 != 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[INCONSISTENT]");

     label2:
        $r19 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r19, "with(StringBuilder()) {\n\u2026     toString()\n        }");

        return $r19;
    }

    private final java.lang.String logTree()
    {
        androidx.compose.ui.node.LayoutTreeConsistencyChecker r0;
        java.lang.StringBuilder r1, $r2, $r3, $r4;
        androidx.compose.ui.node.LayoutNode $r5;
        java.lang.String $r6;

        r0 := @this: androidx.compose.ui.node.LayoutTreeConsistencyChecker;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tree state:");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "append(value)");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "append(\'\\n\')");

        $r5 = r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: androidx.compose.ui.node.LayoutNode root>;

        staticinvoke <androidx.compose.ui.node.LayoutTreeConsistencyChecker: void logTree$printSubTree(androidx.compose.ui.node.LayoutTreeConsistencyChecker,java.lang.StringBuilder,androidx.compose.ui.node.LayoutNode,int)>(r0, r1, $r5, 0);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "stringBuilder.toString()");

        return $r6;
    }

    private static final void logTree$printSubTree(androidx.compose.ui.node.LayoutTreeConsistencyChecker, java.lang.StringBuilder, androidx.compose.ui.node.LayoutNode, int)
    {
        androidx.compose.ui.node.LayoutTreeConsistencyChecker r0;
        java.lang.StringBuilder r1, $r7, $r8;
        androidx.compose.ui.node.LayoutNode r2, r5;
        int i0, i1, $i2, i3, i4, i5;
        java.lang.String r3;
        java.lang.Object r4;
        java.lang.CharSequence $r6;
        boolean z2, $z3;
        java.util.List r10;

        r0 := @parameter0: androidx.compose.ui.node.LayoutTreeConsistencyChecker;

        r1 := @parameter1: java.lang.StringBuilder;

        r2 := @parameter2: androidx.compose.ui.node.LayoutNode;

        i0 := @parameter3: int;

        z2 = 0;

        i3 = i0;

        r3 = specialinvoke r0.<androidx.compose.ui.node.LayoutTreeConsistencyChecker: java.lang.String nodeToString(androidx.compose.ui.node.LayoutNode)>(r2);

        $r6 = (java.lang.CharSequence) r3;

        $i2 = interfaceinvoke $r6.<java.lang.CharSequence: int length()>();

        if $i2 <= 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 == 0 goto label5;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        i4 = i4 + 1;

        goto label3;

     label4:
        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "append(value)");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "append(\'\\n\')");

        i3 = i3 + 1;

     label5:
        r10 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: java.util.List getChildren$ui_release()>();

        i5 = 0;

        i1 = interfaceinvoke r10.<java.util.List: int size()>();

     label6:
        if i5 >= i1 goto label7;

        r4 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i5);

        r5 = (androidx.compose.ui.node.LayoutNode) r4;

        staticinvoke <androidx.compose.ui.node.LayoutTreeConsistencyChecker: void logTree$printSubTree(androidx.compose.ui.node.LayoutTreeConsistencyChecker,java.lang.StringBuilder,androidx.compose.ui.node.LayoutNode,int)>(r0, r1, r5, i3);

        i5 = i5 + 1;

        goto label6;

     label7:
        return;
    }

