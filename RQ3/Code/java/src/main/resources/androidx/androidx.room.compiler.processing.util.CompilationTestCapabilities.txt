androidx.room.compiler.processing.util.CompilationTestCapabilities
<androidx.room.compiler.processing.util.CompilationTestCapabilities: androidx.room.compiler.processing.util.CompilationTestCapabilities INSTANCE>
<androidx.room.compiler.processing.util.CompilationTestCapabilities: boolean canTestWithKsp>
    private void <init>()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities r0;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean getCanTestWithKsp()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities r0;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities;

        $z0 = <androidx.room.compiler.processing.util.CompilationTestCapabilities: boolean canTestWithKsp>;

        return $z0;
    }

    public final void assumeKspIsEnabled()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities r0;
        boolean $z0;
        org.junit.AssumptionViolatedException $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities;

        $z0 = <androidx.room.compiler.processing.util.CompilationTestCapabilities: boolean canTestWithKsp>;

        if $z0 != 0 goto label1;

        $r1 = new org.junit.AssumptionViolatedException;

        specialinvoke $r1.<org.junit.AssumptionViolatedException: void <init>(java.lang.String)>("KSP tests are not enabled");

        throw $r1;

     label1:
        return;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        androidx.room.compiler.processing.util.CompilationTestCapabilities $r1;
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion $r2;
        boolean $z0;

        $r1 = new androidx.room.compiler.processing.util.CompilationTestCapabilities;

        specialinvoke $r1.<androidx.room.compiler.processing.util.CompilationTestCapabilities: void <init>()>();

        <androidx.room.compiler.processing.util.CompilationTestCapabilities: androidx.room.compiler.processing.util.CompilationTestCapabilities INSTANCE> = $r1;

        $r2 = <androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion Companion>;

        r0 = virtualinvoke $r2.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config load()>();

        $z0 = virtualinvoke r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: boolean canEnableKsp()>();

        <androidx.room.compiler.processing.util.CompilationTestCapabilities: boolean canTestWithKsp> = $z0;

        return;
    }

androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion
    private void <init>()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion r0;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.compiler.processing.util.CompilationTestCapabilities$Config load()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion r0;
        java.util.Properties r1, $r4;
        java.lang.String r2, $r8, $r15, $r16;
        java.io.Closeable r3;
        java.lang.StringBuilder $r5, $r6, $r9, $r10;
        java.lang.Class $r7, $r11;
        java.net.URL $r12;
        java.io.InputStream $r13, r19;
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config $r14;
        java.lang.Throwable $r17, $r18, r21, r22, r23;
        kotlin.Unit r20;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion;

        $r4 = new java.util.Properties;

        specialinvoke $r4.<java.util.Properties: void <init>()>();

        r1 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r7 = class "Landroidx/room/compiler/processing/util/CompilationTestCapabilities$Config;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".properties");

        r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = class "Landroidx/room/compiler/processing/util/CompilationTestCapabilities;";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.net.URL getResource(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.net.URL: java.io.InputStream openStream()>();

        r3 = (java.io.Closeable) $r13;

     label1:
        r19 = (java.io.InputStream) r3;

        virtualinvoke r1.<java.util.Properties: void load(java.io.InputStream)>(r19);

        r20 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, null);

        goto label6;

     label3:
        $r18 := @caughtexception;

        r21 = $r18;

        r22 = r21;

        throw r21;

     label4:
        $r17 := @caughtexception;

        r23 = $r17;

     label5:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, r22);

        throw r23;

     label6:
        $r14 = new androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        $r15 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("kotlinVersion");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r15, "null cannot be cast to non-null type kotlin.String");

        $r16 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("kspVersion");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r16, "null cannot be cast to non-null type kotlin.String");

        specialinvoke $r14.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: void <init>(java.lang.String,java.lang.String)>($r15, $r16);

        return $r14;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion: void <init>()>();

        return;
    }

androidx.room.compiler.processing.util.CompilationTestCapabilities$Config
<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion Companion>
<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion>
<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion>
    public void <init>(java.lang.String, java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        java.lang.String r1, r2;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "kotlinVersion");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "kspVersion");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion> = r1;

        r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion> = r2;

        return;
    }

    public final java.lang.String getKotlinVersion()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        $r1 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion>;

        return $r1;
    }

    public final java.lang.String getKspVersion()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        $r1 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion>;

        return $r1;
    }

    public final boolean canEnableKsp()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        java.lang.String[] r1, r2;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        $r3 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion>;

        r1 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String[] reduceVersions(java.lang.String)>($r3);

        $r4 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion>;

        r2 = specialinvoke r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String[] reduceVersions(java.lang.String)>($r4);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(r1, r2);

        return $z0;
    }

    private final java.lang.String[] reduceVersions(java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        java.lang.String r1, $r5, $r7;
        java.util.List r2;
        java.lang.CharSequence $r3;
        java.lang.Object $r4, $r6;
        char[] r8;
        java.lang.String[] r9;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        r1 := @parameter0: java.lang.String;

        $r3 = (java.lang.CharSequence) r1;

        r8 = newarray (char)[1];

        r8[0] = 46;

        r2 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,char[],boolean,int,int,java.lang.Object)>($r3, r8, 0, 0, 6, null);

        r9 = newarray (java.lang.String)[2];

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object getOrNull(java.util.List,int)>(r2, 0);

        $r5 = (java.lang.String) $r4;

        r9[0] = $r5;

        $r6 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object getOrNull(java.util.List,int)>(r2, 1);

        $r7 = (java.lang.String) $r6;

        r9[1] = $r7;

        return r9;
    }

    public final java.lang.String component1()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        $r1 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion>;

        return $r1;
    }

    public final java.lang.String component2()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        $r1 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion>;

        return $r1;
    }

    public final androidx.room.compiler.processing.util.CompilationTestCapabilities$Config copy(java.lang.String, java.lang.String)
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0, $r3;
        java.lang.String r1, r2;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "kotlinVersion");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "kspVersion");

        $r3 = new androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        specialinvoke $r3.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public static androidx.room.compiler.processing.util.CompilationTestCapabilities$Config copy$default(androidx.room.compiler.processing.util.CompilationTestCapabilities$Config, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0, $r2;
        int i0, $i1, $i2;
        java.lang.Object r1;
        java.lang.String r3, r4;

        r0 := @parameter0: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r4 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion>;

     label2:
        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config copy(java.lang.String,java.lang.String)>(r3, r4);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r6, $r9;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config(kotlinVersion=");

        $r3 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", kspVersion=");

        $r6 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public int hashCode()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, i2, i3;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        $r1 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion>;

        i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = i2 * 31;

        $r2 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        i3 = $i0 + $i1;

        return i3;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4, $r5, $r6;

        r0 := @this: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.room.compiler.processing.util.CompilationTestCapabilities$Config;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (androidx.room.compiler.processing.util.CompilationTestCapabilities$Config) r1;

        $r4 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion>;

        $r3 = r2.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kotlinVersion>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r6 = r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion>;

        $r5 = r2.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: java.lang.String kspVersion>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion $r0;

        $r0 = new androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion;

        specialinvoke $r0.<androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.compiler.processing.util.CompilationTestCapabilities$Config: androidx.room.compiler.processing.util.CompilationTestCapabilities$Config$Companion Companion> = $r0;

        return;
    }

