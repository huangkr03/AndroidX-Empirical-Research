androidx.media3.decoder.DecoderInputBuffer
<androidx.media3.decoder.DecoderInputBuffer: int BUFFER_REPLACEMENT_MODE_DISABLED>
<androidx.media3.decoder.DecoderInputBuffer: int BUFFER_REPLACEMENT_MODE_NORMAL>
<androidx.media3.decoder.DecoderInputBuffer: int BUFFER_REPLACEMENT_MODE_DIRECT>
<androidx.media3.decoder.DecoderInputBuffer: androidx.media3.common.Format format>
<androidx.media3.decoder.DecoderInputBuffer: androidx.media3.decoder.CryptoInfo cryptoInfo>
<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>
<androidx.media3.decoder.DecoderInputBuffer: boolean waitingForKeys>
<androidx.media3.decoder.DecoderInputBuffer: long timeUs>
<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData>
<androidx.media3.decoder.DecoderInputBuffer: int bufferReplacementMode>
<androidx.media3.decoder.DecoderInputBuffer: int paddingSize>
    public static androidx.media3.decoder.DecoderInputBuffer newNoDataInstance()
    {
        androidx.media3.decoder.DecoderInputBuffer $r0;

        $r0 = new androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke $r0.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(0);

        return $r0;
    }

    public void <init>(int)
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        int i0;

        r0 := @this: androidx.media3.decoder.DecoderInputBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int,int)>(i0, 0);

        return;
    }

    public void <init>(int, int)
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        int i0, i1;
        androidx.media3.decoder.CryptoInfo $r1;

        r0 := @this: androidx.media3.decoder.DecoderInputBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.decoder.Buffer: void <init>()>();

        $r1 = new androidx.media3.decoder.CryptoInfo;

        specialinvoke $r1.<androidx.media3.decoder.CryptoInfo: void <init>()>();

        r0.<androidx.media3.decoder.DecoderInputBuffer: androidx.media3.decoder.CryptoInfo cryptoInfo> = $r1;

        r0.<androidx.media3.decoder.DecoderInputBuffer: int bufferReplacementMode> = i0;

        r0.<androidx.media3.decoder.DecoderInputBuffer: int paddingSize> = i1;

        return;
    }

    public void resetSupplementalData(int)
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        int i0, $i1;
        java.nio.ByteBuffer $r1, $r2, $r3, $r4;

        r0 := @this: androidx.media3.decoder.DecoderInputBuffer;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData>;

        $i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int capacity()>();

        if $i1 >= i0 goto label2;

     label1:
        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData> = $r2;

        goto label3;

     label2:
        $r4 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label3:
        return;
    }

    public void ensureSpaceForWrite(int)
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        java.nio.ByteBuffer r1, r2, $r7;
        int i0, i1, i2, $i3, i4, i5;
        java.nio.ByteOrder $r3;

        r0 := @this: androidx.media3.decoder.DecoderInputBuffer;

        i4 := @parameter0: int;

        $i3 = r0.<androidx.media3.decoder.DecoderInputBuffer: int paddingSize>;

        i5 = i4 + $i3;

        r1 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        if r1 != null goto label1;

        $r7 = specialinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer createReplacementByteBuffer(int)>(i5);

        r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data> = $r7;

        return;

     label1:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i2 = i1 + i5;

        if i0 < i2 goto label2;

        r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data> = r1;

        return;

     label2:
        r2 = specialinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer createReplacementByteBuffer(int)>(i2);

        $r3 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        if i1 <= 0 goto label3;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

     label3:
        r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data> = r2;

        return;
    }

    public final boolean isEncrypted()
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        boolean $z0;

        r0 := @this: androidx.media3.decoder.DecoderInputBuffer;

        $z0 = virtualinvoke r0.<androidx.media3.decoder.DecoderInputBuffer: boolean getFlag(int)>(1073741824);

        return $z0;
    }

    public final void flip()
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        java.nio.ByteBuffer $r1, $r2, $r3, $r5;

        r0 := @this: androidx.media3.decoder.DecoderInputBuffer;

        $r1 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        if $r1 == null goto label1;

        $r5 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label1:
        $r2 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData>;

        if $r2 == null goto label2;

        $r3 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label2:
        return;
    }

    public void clear()
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        java.nio.ByteBuffer $r1, $r2, $r3, $r5;

        r0 := @this: androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke r0.<androidx.media3.decoder.Buffer: void clear()>();

        $r1 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        if $r1 == null goto label1;

        $r5 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label1:
        $r2 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData>;

        if $r2 == null goto label2;

        $r3 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer supplementalData>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label2:
        r0.<androidx.media3.decoder.DecoderInputBuffer: boolean waitingForKeys> = 0;

        return;
    }

    private java.nio.ByteBuffer createReplacementByteBuffer(int)
    {
        androidx.media3.decoder.DecoderInputBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        java.nio.ByteBuffer $r1, $r2, $r4, $r5;
        androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException r6;
        java.lang.Throwable r7;

        r0 := @this: androidx.media3.decoder.DecoderInputBuffer;

        i0 := @parameter0: int;

        $i2 = r0.<androidx.media3.decoder.DecoderInputBuffer: int bufferReplacementMode>;

        if $i2 != 1 goto label1;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        return $r5;

     label1:
        $i3 = r0.<androidx.media3.decoder.DecoderInputBuffer: int bufferReplacementMode>;

        if $i3 != 2 goto label2;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);

        return $r4;

     label2:
        $r1 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        if $r1 != null goto label3;

        $i4 = 0;

        goto label4;

     label3:
        $r2 = r0.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        $i4 = virtualinvoke $r2.<java.nio.ByteBuffer: int capacity()>();

     label4:
        i1 = $i4;

        r6 = new androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException;

        specialinvoke r6.<androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException: void <init>(int,int)>(i1, i0);

        r7 = (java.lang.Throwable) r6;

        throw r7;
    }

    static void <clinit>()
    {
        staticinvoke <androidx.media3.common.MediaLibraryInfo: void registerModule(java.lang.String)>("media3.decoder");

        return;
    }

androidx.media3.decoder.DecoderInputBuffer$BufferReplacementMode
androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException
<androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException: int currentCapacity>
<androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException: int requiredCapacity>
    public void <init>(int, int)
    {
        androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Buffer too small (");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        r0.<androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException: int currentCapacity> = i0;

        r0.<androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException: int requiredCapacity> = i1;

        return;
    }

