androidx.media3.exoplayer.offline.DefaultDownloaderFactory
<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: android.util.SparseArray CONSTRUCTORS>
<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: androidx.media3.datasource.cache.CacheDataSource$Factory cacheDataSourceFactory>
<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: java.util.concurrent.Executor executor>
    public void <init>(androidx.media3.datasource.cache.CacheDataSource$Factory)
    {
        androidx.media3.exoplayer.offline.DefaultDownloaderFactory r0;
        androidx.media3.datasource.cache.CacheDataSource$Factory r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: androidx.media3.exoplayer.offline.DefaultDownloaderFactory;

        r1 := @parameter0: androidx.media3.datasource.cache.CacheDataSource$Factory;

        $r2 = dynamicinvoke "execute" <java.util.concurrent.Executor ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Runnable), methodhandle: "REF_INVOKE_INTERFACE" <java.lang.Runnable: void run()>, methodtype: void __METHODTYPE__(java.lang.Runnable));

        specialinvoke r0.<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: void <init>(androidx.media3.datasource.cache.CacheDataSource$Factory,java.util.concurrent.Executor)>(r1, $r2);

        return;
    }

    public void <init>(androidx.media3.datasource.cache.CacheDataSource$Factory, java.util.concurrent.Executor)
    {
        androidx.media3.exoplayer.offline.DefaultDownloaderFactory r0;
        androidx.media3.datasource.cache.CacheDataSource$Factory r1, $r4;
        java.util.concurrent.Executor r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: androidx.media3.exoplayer.offline.DefaultDownloaderFactory;

        r1 := @parameter0: androidx.media3.datasource.cache.CacheDataSource$Factory;

        r2 := @parameter1: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (androidx.media3.datasource.cache.CacheDataSource$Factory) $r3;

        r0.<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: androidx.media3.datasource.cache.CacheDataSource$Factory cacheDataSourceFactory> = $r4;

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (java.util.concurrent.Executor) $r5;

        r0.<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: java.util.concurrent.Executor executor> = $r6;

        return;
    }

    public androidx.media3.exoplayer.offline.Downloader createDownloader(androidx.media3.exoplayer.offline.DownloadRequest)
    {
        androidx.media3.exoplayer.offline.DefaultDownloaderFactory r0;
        androidx.media3.exoplayer.offline.DownloadRequest r1;
        int i0;
        java.lang.String $r2, $r8, $r18;
        android.net.Uri $r3, $r6;
        androidx.media3.exoplayer.offline.ProgressiveDownloader $r4;
        androidx.media3.common.MediaItem$Builder $r5, $r7, $r9;
        androidx.media3.common.MediaItem $r10;
        java.util.concurrent.Executor $r11;
        androidx.media3.datasource.cache.CacheDataSource$Factory $r12;
        androidx.media3.exoplayer.offline.Downloader $r13;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r15, $r16, $r17;

        r0 := @this: androidx.media3.exoplayer.offline.DefaultDownloaderFactory;

        r1 := @parameter0: androidx.media3.exoplayer.offline.DownloadRequest;

        $r3 = r1.<androidx.media3.exoplayer.offline.DownloadRequest: android.net.Uri uri>;

        $r2 = r1.<androidx.media3.exoplayer.offline.DownloadRequest: java.lang.String mimeType>;

        i0 = staticinvoke <androidx.media3.common.util.Util: int inferContentTypeForUriAndMimeType(android.net.Uri,java.lang.String)>($r3, $r2);

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        $r13 = specialinvoke r0.<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: androidx.media3.exoplayer.offline.Downloader createDownloader(androidx.media3.exoplayer.offline.DownloadRequest,int)>(r1, i0);

        return $r13;

     label2:
        $r4 = new androidx.media3.exoplayer.offline.ProgressiveDownloader;

        $r5 = new androidx.media3.common.MediaItem$Builder;

        specialinvoke $r5.<androidx.media3.common.MediaItem$Builder: void <init>()>();

        $r6 = r1.<androidx.media3.exoplayer.offline.DownloadRequest: android.net.Uri uri>;

        $r7 = virtualinvoke $r5.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setUri(android.net.Uri)>($r6);

        $r8 = r1.<androidx.media3.exoplayer.offline.DownloadRequest: java.lang.String customCacheKey>;

        $r9 = virtualinvoke $r7.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setCustomCacheKey(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem build()>();

        $r12 = r0.<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: androidx.media3.datasource.cache.CacheDataSource$Factory cacheDataSourceFactory>;

        $r11 = r0.<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: java.util.concurrent.Executor executor>;

        specialinvoke $r4.<androidx.media3.exoplayer.offline.ProgressiveDownloader: void <init>(androidx.media3.common.MediaItem,androidx.media3.datasource.cache.CacheDataSource$Factory,java.util.concurrent.Executor)>($r10, $r12, $r11);

        return $r4;

     label3:
        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported type: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;
    }

    private androidx.media3.exoplayer.offline.Downloader createDownloader(androidx.media3.exoplayer.offline.DownloadRequest, int)
    {
        androidx.media3.exoplayer.offline.DefaultDownloaderFactory r0;
        androidx.media3.exoplayer.offline.DownloadRequest r1;
        int i0;
        java.lang.reflect.Constructor r2;
        androidx.media3.common.MediaItem r3;
        java.lang.Throwable r4, $r24;
        android.util.SparseArray $r5;
        java.lang.Object $r6, $r17;
        androidx.media3.common.MediaItem$Builder $r7, $r9, $r11, $r13;
        android.net.Uri $r8;
        java.util.List $r10;
        java.lang.String $r12, $r23, $r29;
        java.lang.Object[] $r14;
        androidx.media3.datasource.cache.CacheDataSource$Factory $r15;
        java.util.concurrent.Executor $r16;
        androidx.media3.exoplayer.offline.Downloader $r18;
        java.lang.IllegalStateException $r19, $r25;
        java.lang.StringBuilder $r20, $r21, $r22, $r26, $r27, $r28;

        r0 := @this: androidx.media3.exoplayer.offline.DefaultDownloaderFactory;

        r1 := @parameter0: androidx.media3.exoplayer.offline.DownloadRequest;

        i0 := @parameter1: int;

        $r5 = <androidx.media3.exoplayer.offline.DefaultDownloaderFactory: android.util.SparseArray CONSTRUCTORS>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (java.lang.reflect.Constructor) $r6;

        if r2 != null goto label1;

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Module missing for content type ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label1:
        $r7 = new androidx.media3.common.MediaItem$Builder;

        specialinvoke $r7.<androidx.media3.common.MediaItem$Builder: void <init>()>();

        $r8 = r1.<androidx.media3.exoplayer.offline.DownloadRequest: android.net.Uri uri>;

        $r9 = virtualinvoke $r7.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setUri(android.net.Uri)>($r8);

        $r10 = r1.<androidx.media3.exoplayer.offline.DownloadRequest: java.util.List streamKeys>;

        $r11 = virtualinvoke $r9.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setStreamKeys(java.util.List)>($r10);

        $r12 = r1.<androidx.media3.exoplayer.offline.DownloadRequest: java.lang.String customCacheKey>;

        $r13 = virtualinvoke $r11.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem$Builder setCustomCacheKey(java.lang.String)>($r12);

        r3 = virtualinvoke $r13.<androidx.media3.common.MediaItem$Builder: androidx.media3.common.MediaItem build()>();

     label2:
        $r14 = newarray (java.lang.Object)[3];

        $r14[0] = r3;

        $r15 = r0.<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: androidx.media3.datasource.cache.CacheDataSource$Factory cacheDataSourceFactory>;

        $r14[1] = $r15;

        $r16 = r0.<androidx.media3.exoplayer.offline.DefaultDownloaderFactory: java.util.concurrent.Executor executor>;

        $r14[2] = $r16;

        $r17 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r14);

        $r18 = (androidx.media3.exoplayer.offline.Downloader) $r17;

     label3:
        return $r18;

     label4:
        $r24 := @caughtexception;

        r4 = $r24;

        $r25 = new java.lang.IllegalStateException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate downloader for content type ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r29, r4);

        throw $r25;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private static android.util.SparseArray createDownloaderConstructors()
    {
        android.util.SparseArray r0, $r1;
        java.lang.Class $r2, $r4, $r6;
        java.lang.reflect.Constructor $r3, $r5, $r7;
        java.lang.Throwable $r8, $r9, $r10, r11, r12, r13;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        r0 = $r1;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.media3.exoplayer.dash.offline.DashDownloader");

        $r3 = staticinvoke <androidx.media3.exoplayer.offline.DefaultDownloaderFactory: java.lang.reflect.Constructor getDownloaderConstructor(java.lang.Class)>($r2);

        virtualinvoke r0.<android.util.SparseArray: void put(int,java.lang.Object)>(0, $r3);

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        r11 = $r10;

     label04:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.media3.exoplayer.hls.offline.HlsDownloader");

        $r5 = staticinvoke <androidx.media3.exoplayer.offline.DefaultDownloaderFactory: java.lang.reflect.Constructor getDownloaderConstructor(java.lang.Class)>($r4);

        virtualinvoke r0.<android.util.SparseArray: void put(int,java.lang.Object)>(2, $r5);

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

        r12 = $r9;

     label07:
        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.media3.exoplayer.smoothstreaming.offline.SsDownloader");

        $r7 = staticinvoke <androidx.media3.exoplayer.offline.DefaultDownloaderFactory: java.lang.reflect.Constructor getDownloaderConstructor(java.lang.Class)>($r6);

        virtualinvoke r0.<android.util.SparseArray: void put(int,java.lang.Object)>(1, $r7);

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        r13 = $r8;

     label10:
        return r0;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.ClassNotFoundException from label04 to label05 with label06;
        catch java.lang.ClassNotFoundException from label07 to label08 with label09;
    }

    private static java.lang.reflect.Constructor getDownloaderConstructor(java.lang.Class)
    {
        java.lang.Class r0, $r2;
        java.lang.Throwable r1, $r5;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r4;
        java.lang.IllegalStateException $r6;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Landroidx/media3/exoplayer/offline/Downloader;");

        $r3 = newarray (java.lang.Class)[3];

        $r3[0] = class "Landroidx/media3/common/MediaItem;";

        $r3[1] = class "Landroidx/media3/datasource/cache/CacheDataSource$Factory;";

        $r3[2] = class "Ljava/util/concurrent/Executor;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Downloader constructor missing", r1);

        throw $r6;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        android.util.SparseArray $r0;

        $r0 = staticinvoke <androidx.media3.exoplayer.offline.DefaultDownloaderFactory: android.util.SparseArray createDownloaderConstructors()>();

        <androidx.media3.exoplayer.offline.DefaultDownloaderFactory: android.util.SparseArray CONSTRUCTORS> = $r0;

        return;
    }

