androidx.camera.core.imagecapture.ProcessingInput2Packet
    void <init>()
    {
        androidx.camera.core.imagecapture.ProcessingInput2Packet r0;

        r0 := @this: androidx.camera.core.imagecapture.ProcessingInput2Packet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.camera.core.processing.Packet apply(androidx.camera.core.imagecapture.ProcessingNode$InputPacket) throws androidx.camera.core.ImageCaptureException
    {
        androidx.camera.core.imagecapture.ProcessingInput2Packet r0;
        androidx.camera.core.imagecapture.ProcessingNode$InputPacket r1;
        androidx.camera.core.ImageProxy r2;
        androidx.camera.core.imagecapture.ProcessingRequest r3;
        android.graphics.Matrix r4, $r12, r23;
        int $i0, $i1, $i2, $i3, $i4, i5;
        androidx.camera.core.ImageInfo $r5;
        androidx.camera.core.internal.CameraCaptureResultImageInfo $r6;
        androidx.camera.core.internal.compat.workaround.ExifRotationAvailability $r7;
        boolean $z0, $z1;
        androidx.camera.core.processing.Packet $r8;
        android.graphics.Rect $r11, r22;
        androidx.camera.core.ImageProxy$PlaneProxy[] $r13;
        androidx.camera.core.ImageProxy$PlaneProxy $r14;
        java.nio.ByteBuffer $r15;
        java.lang.Throwable $r17, r20, r26;
        androidx.camera.core.impl.utils.Exif r19;
        androidx.camera.core.impl.CameraCaptureResult r21;
        androidx.camera.core.ImageCaptureException r24;
        android.util.Size r25;

        r0 := @this: androidx.camera.core.imagecapture.ProcessingInput2Packet;

        r1 := @parameter0: androidx.camera.core.imagecapture.ProcessingNode$InputPacket;

        r2 = virtualinvoke r1.<androidx.camera.core.imagecapture.ProcessingNode$InputPacket: androidx.camera.core.ImageProxy getImageProxy()>();

        r3 = virtualinvoke r1.<androidx.camera.core.imagecapture.ProcessingNode$InputPacket: androidx.camera.core.imagecapture.ProcessingRequest getProcessingRequest()>();

        r19 = null;

        $i0 = interfaceinvoke r2.<androidx.camera.core.ImageProxy: int getFormat()>();

        if $i0 != 256 goto label4;

     label1:
        r19 = staticinvoke <androidx.camera.core.impl.utils.Exif: androidx.camera.core.impl.utils.Exif createFromImageProxy(androidx.camera.core.ImageProxy)>(r2);

        $r13 = interfaceinvoke r2.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageProxy$PlaneProxy[] getPlanes()>();

        $r14 = $r13[0];

        $r15 = interfaceinvoke $r14.<androidx.camera.core.ImageProxy$PlaneProxy: java.nio.ByteBuffer getBuffer()>();

        virtualinvoke $r15.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        r20 = $r17;

        r24 = new androidx.camera.core.ImageCaptureException;

        specialinvoke r24.<androidx.camera.core.ImageCaptureException: void <init>(int,java.lang.String,java.lang.Throwable)>(1, "Failed to extract EXIF data.", r20);

        r26 = (java.lang.Throwable) r24;

        throw r26;

     label4:
        $r5 = interfaceinvoke r2.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageInfo getImageInfo()>();

        $r6 = (androidx.camera.core.internal.CameraCaptureResultImageInfo) $r5;

        r21 = virtualinvoke $r6.<androidx.camera.core.internal.CameraCaptureResultImageInfo: androidx.camera.core.impl.CameraCaptureResult getCameraCaptureResult()>();

        r22 = virtualinvoke r3.<androidx.camera.core.imagecapture.ProcessingRequest: android.graphics.Rect getCropRect()>();

        r23 = virtualinvoke r3.<androidx.camera.core.imagecapture.ProcessingRequest: android.graphics.Matrix getSensorToBufferTransform()>();

        i5 = virtualinvoke r3.<androidx.camera.core.imagecapture.ProcessingRequest: int getRotationDegrees()>();

        $r7 = <androidx.camera.core.imagecapture.ImagePipeline: androidx.camera.core.internal.compat.workaround.ExifRotationAvailability EXIF_ROTATION_AVAILABILITY>;

        $z0 = virtualinvoke $r7.<androidx.camera.core.internal.compat.workaround.ExifRotationAvailability: boolean shouldUseExifOrientation(androidx.camera.core.ImageProxy)>(r2);

        if $z0 == 0 goto label5;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r19, "The image must have JPEG exif.");

        $z1 = staticinvoke <androidx.camera.core.imagecapture.ProcessingInput2Packet: boolean isSizeMatch(androidx.camera.core.impl.utils.Exif,androidx.camera.core.ImageProxy)>(r19, r2);

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Exif size does not match image size.");

        $i1 = virtualinvoke r3.<androidx.camera.core.imagecapture.ProcessingRequest: int getRotationDegrees()>();

        r25 = new android.util.Size;

        $i2 = virtualinvoke r19.<androidx.camera.core.impl.utils.Exif: int getWidth()>();

        $i3 = virtualinvoke r19.<androidx.camera.core.impl.utils.Exif: int getHeight()>();

        specialinvoke r25.<android.util.Size: void <init>(int,int)>($i2, $i3);

        $i4 = virtualinvoke r19.<androidx.camera.core.impl.utils.Exif: int getRotation()>();

        r4 = staticinvoke <androidx.camera.core.imagecapture.ProcessingInput2Packet: android.graphics.Matrix getHalTransform(int,android.util.Size,int)>($i1, r25, $i4);

        $r11 = virtualinvoke r3.<androidx.camera.core.imagecapture.ProcessingRequest: android.graphics.Rect getCropRect()>();

        r22 = staticinvoke <androidx.camera.core.imagecapture.ProcessingInput2Packet: android.graphics.Rect getUpdatedCropRect(android.graphics.Rect,android.graphics.Matrix)>($r11, r4);

        $r12 = virtualinvoke r3.<androidx.camera.core.imagecapture.ProcessingRequest: android.graphics.Matrix getSensorToBufferTransform()>();

        r23 = staticinvoke <androidx.camera.core.imagecapture.ProcessingInput2Packet: android.graphics.Matrix getUpdatedTransform(android.graphics.Matrix,android.graphics.Matrix)>($r12, r4);

        i5 = virtualinvoke r19.<androidx.camera.core.impl.utils.Exif: int getRotation()>();

     label5:
        $r8 = staticinvoke <androidx.camera.core.processing.Packet: androidx.camera.core.processing.Packet of(androidx.camera.core.ImageProxy,androidx.camera.core.impl.utils.Exif,android.graphics.Rect,int,android.graphics.Matrix,androidx.camera.core.impl.CameraCaptureResult)>(r2, r19, r22, i5, r23, r21);

        return $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static boolean isSizeMatch(androidx.camera.core.impl.utils.Exif, androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.impl.utils.Exif r0;
        androidx.camera.core.ImageProxy r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: androidx.camera.core.impl.utils.Exif;

        r1 := @parameter1: androidx.camera.core.ImageProxy;

        $i0 = virtualinvoke r0.<androidx.camera.core.impl.utils.Exif: int getWidth()>();

        $i1 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: int getWidth()>();

        if $i0 != $i1 goto label1;

        $i2 = virtualinvoke r0.<androidx.camera.core.impl.utils.Exif: int getHeight()>();

        $i3 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: int getHeight()>();

        if $i2 != $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static android.graphics.Matrix getUpdatedTransform(android.graphics.Matrix, android.graphics.Matrix)
    {
        android.graphics.Matrix r0, r1, r2, $r3;

        r0 := @parameter0: android.graphics.Matrix;

        r1 := @parameter1: android.graphics.Matrix;

        $r3 = new android.graphics.Matrix;

        specialinvoke $r3.<android.graphics.Matrix: void <init>(android.graphics.Matrix)>(r0);

        r2 = $r3;

        virtualinvoke r2.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>(r1);

        return r2;
    }

    private static android.graphics.Rect getUpdatedCropRect(android.graphics.Rect, android.graphics.Matrix)
    {
        android.graphics.Rect r0, r3, $r5;
        android.graphics.Matrix r1;
        android.graphics.RectF r2, $r4;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Matrix;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>(android.graphics.Rect)>(r0);

        r2 = $r4;

        virtualinvoke r1.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r2);

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r3 = $r5;

        virtualinvoke r2.<android.graphics.RectF: void round(android.graphics.Rect)>(r3);

        return r3;
    }

    private static android.graphics.Matrix getHalTransform(int, android.util.Size, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.util.Size r0, r1, $r5;
        boolean $z0;
        android.graphics.RectF $r2, $r3;
        float $f0, $f1, $f2, $f3;
        android.graphics.Matrix $r4;

        i0 := @parameter0: int;

        r0 := @parameter1: android.util.Size;

        i1 := @parameter2: int;

        i2 = i0 - i1;

        $i3 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: int within360(int)>(i2);

        $z0 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: boolean is90or270(int)>($i3);

        if $z0 == 0 goto label1;

        $r5 = new android.util.Size;

        $i8 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $i9 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        specialinvoke $r5.<android.util.Size: void <init>(int,int)>($i8, $i9);

        goto label2;

     label1:
        $r5 = r0;

     label2:
        r1 = $r5;

        $r2 = new android.graphics.RectF;

        $i4 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f0 = (float) $i4;

        $i5 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f1 = (float) $i5;

        specialinvoke $r2.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        $r3 = new android.graphics.RectF;

        $i6 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f2 = (float) $i6;

        $i7 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f3 = (float) $i7;

        specialinvoke $r3.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f2, $f3);

        $r4 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.Matrix getRectToRect(android.graphics.RectF,android.graphics.RectF,int)>($r2, $r3, i2);

        return $r4;
    }

    public volatile java.lang.Object apply(java.lang.Object) throws androidx.camera.core.ImageCaptureException
    {
        androidx.camera.core.imagecapture.ProcessingInput2Packet r0;
        java.lang.Object r1;
        androidx.camera.core.imagecapture.ProcessingNode$InputPacket $r2;
        androidx.camera.core.processing.Packet $r3;

        r0 := @this: androidx.camera.core.imagecapture.ProcessingInput2Packet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.camera.core.imagecapture.ProcessingNode$InputPacket) r1;

        $r3 = virtualinvoke r0.<androidx.camera.core.imagecapture.ProcessingInput2Packet: androidx.camera.core.processing.Packet apply(androidx.camera.core.imagecapture.ProcessingNode$InputPacket)>($r2);

        return $r3;
    }

