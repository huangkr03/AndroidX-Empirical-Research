androidx.test.runner.MonitoringInstrumentation
<androidx.test.runner.MonitoringInstrumentation: java.lang.String TAG>
<androidx.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP>
<androidx.test.runner.MonitoringInstrumentation: long MILLIS_TO_POLL_FOR_ACTIVITY_STOP>
<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>
<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl applicationMonitor>
<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.intent.IntentMonitorImpl intentMonitor>
<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.ExecutorService executorService>
<androidx.test.runner.MonitoringInstrumentation: android.os.Handler handlerForMainLooper>
<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean anActivityHasBeenLaunched>
<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong lastIdleTime>
<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger startedActivityCounter>
<androidx.test.runner.MonitoringInstrumentation: java.lang.String jsBridgeClassName>
<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean isJsBridgeLoaded>
<androidx.test.runner.MonitoringInstrumentation: java.lang.Boolean isOriginalInstr>
<androidx.test.runner.MonitoringInstrumentation: java.lang.ThreadLocal isDexmakerClassLoaderInitialized>
<androidx.test.runner.MonitoringInstrumentation: android.os.MessageQueue$IdleHandler idleHandler>
<androidx.test.runner.MonitoringInstrumentation: boolean finished>
<androidx.test.runner.MonitoringInstrumentation: androidx.test.runner.intercepting.InterceptingActivityFactory interceptingActivityFactory>
<androidx.test.runner.MonitoringInstrumentation: java.lang.Thread$UncaughtExceptionHandler oldDefaultExceptionHandler>
    static android.app.Activity access$001(androidx.test.runner.MonitoringInstrumentation, android.content.Intent)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.content.Intent r1;
        android.app.Activity $r2;

        r0 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter1: android.content.Intent;

        $r2 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: android.app.Activity startActivitySync(android.content.Intent)>(r1);

        return $r2;
    }

    public android.app.Activity newActivity(java.lang.ClassLoader, java.lang.String, android.content.Intent) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.ClassNotFoundException
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.ClassLoader r1;
        java.lang.String r2;
        android.content.Intent r3;
        androidx.test.runner.intercepting.InterceptingActivityFactory $r4, $r5;
        boolean $z0;
        android.app.Activity $r6;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.Intent;

        $r4 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.runner.intercepting.InterceptingActivityFactory interceptingActivityFactory>;

        $z0 = interfaceinvoke $r4.<androidx.test.runner.intercepting.InterceptingActivityFactory: boolean shouldIntercept(java.lang.ClassLoader,java.lang.String,android.content.Intent)>(r1, r2, r3);

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.runner.intercepting.InterceptingActivityFactory interceptingActivityFactory>;

        $r6 = interfaceinvoke $r5.<androidx.test.runner.intercepting.InterceptingActivityFactory: android.app.Activity create(java.lang.ClassLoader,java.lang.String,android.content.Intent)>(r1, r2, r3);

        goto label2;

     label1:
        $r6 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: android.app.Activity newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>(r1, r2, r3);

     label2:
        return $r6;
    }

    public android.app.Activity newActivity(java.lang.Class, android.content.Context, android.os.IBinder, android.app.Application, android.content.Intent, android.content.pm.ActivityInfo, java.lang.CharSequence, android.app.Activity, java.lang.String, java.lang.Object) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.Class r1;
        android.content.Context r2;
        android.os.IBinder r3;
        android.app.Application r4;
        android.content.Intent r5;
        android.content.pm.ActivityInfo r6;
        java.lang.CharSequence r7;
        android.app.Activity r8, $r20;
        java.lang.String r9, r11, r12, $r15, $r16, $r18;
        java.lang.Object r10;
        android.content.ComponentName r13, $r17;
        java.lang.Package $r14;
        boolean $z0, $z1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: android.app.Application;

        r5 := @parameter4: android.content.Intent;

        r6 := @parameter5: android.content.pm.ActivityInfo;

        r7 := @parameter6: java.lang.CharSequence;

        r8 := @parameter7: android.app.Activity;

        r9 := @parameter8: java.lang.String;

        r10 := @parameter9: java.lang.Object;

        $r14 = virtualinvoke r1.<java.lang.Class: java.lang.Package getPackage()>();

        r11 = virtualinvoke $r14.<java.lang.Package: java.lang.String getName()>();

        r12 = virtualinvoke r2.<android.content.Context: java.lang.String getPackageName()>();

        r13 = virtualinvoke r5.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r15 = virtualinvoke r13.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 != 0 goto label1;

        $r16 = virtualinvoke r13.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label1;

        $r17 = new android.content.ComponentName;

        $r18 = virtualinvoke r13.<android.content.ComponentName: java.lang.String getClassName()>();

        specialinvoke $r17.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r12, $r18);

        virtualinvoke r5.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r17);

     label1:
        $r20 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: android.app.Activity newActivity(java.lang.Class,android.content.Context,android.os.IBinder,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,java.lang.Object)>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10);

        return $r20;
    }

    public android.app.Activity startActivitySync(android.content.Intent)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.content.Intent r1;
        long l0, $l1, $l2, $l3;
        java.util.concurrent.Future r2;
        java.util.concurrent.atomic.AtomicLong $r3, $r22;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        boolean $z0;
        java.util.concurrent.ExecutorService $r6;
        java.util.concurrent.TimeUnit $r7;
        java.lang.Object $r8;
        android.app.Activity $r9;
        java.lang.Throwable $r11, $r13, $r14, $r17, r25, r26, r27, r32, r33, r34;
        java.lang.Thread $r15;
        java.lang.Object[] $r19;
        java.lang.Long $r20, $r21, $r23;
        java.lang.String $r24;
        androidx.test.runner.MonitoringInstrumentation$4 r28;
        java.lang.RuntimeException r29, r30, r31;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.content.Intent;

        staticinvoke <androidx.test.internal.util.Checks: void checkNotMainThread()>();

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong lastIdleTime>;

        l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r4 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean anActivityHasBeenLaunched>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

     label1:
        $r6 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.ExecutorService executorService>;

        r28 = new androidx.test.runner.MonitoringInstrumentation$4;

        specialinvoke r28.<androidx.test.runner.MonitoringInstrumentation$4: void <init>(androidx.test.runner.MonitoringInstrumentation,android.content.Intent)>(r0, r1);

        r2 = interfaceinvoke $r6.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r28);

     label2:
        $l1 = staticinvoke <androidx.test.internal.platform.app.ActivityLifecycleTimeout: long getMillis()>();

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r8 = interfaceinvoke r2.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l1, $r7);

        $r9 = (android.app.Activity) $r8;

     label3:
        return $r9;

     label4:
        $r17 := @caughtexception;

        r25 = $r17;

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void dumpThreadStateToOutputs(java.lang.String)>("ThreadState-startActivityTimeout.txt");

        interfaceinvoke r2.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        r29 = new java.lang.RuntimeException;

        $r19 = newarray (java.lang.Object)[4];

        $r19[0] = r1;

        $l2 = staticinvoke <androidx.test.internal.platform.app.ActivityLifecycleTimeout: long getMillis()>();

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r19[1] = $r20;

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r19[2] = $r21;

        $r22 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong lastIdleTime>;

        $l3 = virtualinvoke $r22.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r19[3] = $r23;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not launch intent %s within %s milliseconds. Perhaps the main thread has not gone idle within a reasonable amount of time? There could be an animation or something constantly repainting the screen. Or the activity is doing network calls on creation? See the threaddump logs. For your reference the last time the event queue was idle before your activity launch request was %s and now the last time the queue went idle was: %s. If these numbers are the same your activity might be hogging the event queue.", $r19);

        specialinvoke r29.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24);

        r32 = (java.lang.Throwable) r29;

        throw r32;

     label5:
        $r11 := @caughtexception;

        r26 = $r11;

        r30 = new java.lang.RuntimeException;

        $r13 = virtualinvoke r26.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r30.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not launch activity", $r13);

        r33 = (java.lang.Throwable) r30;

        throw r33;

     label6:
        $r14 := @caughtexception;

        r27 = $r14;

        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r15.<java.lang.Thread: void interrupt()>();

        r31 = new java.lang.RuntimeException;

        specialinvoke r31.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("interrupted", r27);

        r34 = (java.lang.Throwable) r31;

        throw r34;

        catch java.util.concurrent.TimeoutException from label2 to label3 with label4;
        catch java.util.concurrent.ExecutionException from label2 to label3 with label5;
        catch java.lang.InterruptedException from label2 to label3 with label6;
    }

    public android.app.Application newApplication(java.lang.ClassLoader, java.lang.String, android.content.Context) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.ClassNotFoundException
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.ClassLoader r1;
        java.lang.String r2;
        android.content.Context r3;
        int $i1;
        android.app.Application $r4;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.Context;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", "newApplication called!");

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 16 goto label1;

        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void installMultidexAndExceptionHandler()>();

     label1:
        $r4 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)>(r1, r2, r3);

        return $r4;
    }

    public android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent, int)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.content.Context r1;
        android.os.IBinder r2, r3;
        android.app.Activity r4;
        android.content.Intent r5;
        int i0;
        android.app.Instrumentation$ActivityResult r6, $r8;
        androidx.test.internal.runner.intent.IntentMonitorImpl $r7;
        java.lang.Object[] $r9;
        java.lang.String $r10;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: android.app.Activity;

        r5 := @parameter4: android.content.Intent;

        i0 := @parameter5: int;

        $r7 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.intent.IntentMonitorImpl intentMonitor>;

        virtualinvoke $r7.<androidx.test.internal.runner.intent.IntentMonitorImpl: void signalIntent(android.content.Intent)>(r5);

        r6 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.app.Instrumentation$ActivityResult stubResultFor(android.content.Intent)>(r5);

        if r6 == null goto label1;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r5;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stubbing intent %s", $r9);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", $r10);

        return r6;

     label1:
        $r8 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int)>(r1, r2, r3, r4, r5, i0);

        return $r8;
    }

    public android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent, int, android.os.Bundle)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.content.Context r1;
        android.os.IBinder r2, r3;
        android.app.Activity r4;
        android.content.Intent r5;
        int i0;
        android.os.Bundle r6;
        android.app.Instrumentation$ActivityResult r7, $r9;
        androidx.test.internal.runner.intent.IntentMonitorImpl $r8;
        java.lang.Object[] $r10;
        java.lang.String $r11;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: android.app.Activity;

        r5 := @parameter4: android.content.Intent;

        i0 := @parameter5: int;

        r6 := @parameter6: android.os.Bundle;

        $r8 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.intent.IntentMonitorImpl intentMonitor>;

        virtualinvoke $r8.<androidx.test.internal.runner.intent.IntentMonitorImpl: void signalIntent(android.content.Intent)>(r5);

        r7 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.app.Instrumentation$ActivityResult stubResultFor(android.content.Intent)>(r5);

        if r7 == null goto label1;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r5;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stubbing intent %s", $r10);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", $r11);

        return r7;

     label1:
        $r9 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle)>(r1, r2, r3, r4, r5, i0, r6);

        return $r9;
    }

    public android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Fragment, android.content.Intent, int, android.os.Bundle)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.content.Context r1;
        android.os.IBinder r2, r3;
        android.app.Fragment r4;
        android.content.Intent r5;
        int i0;
        android.os.Bundle r6;
        android.app.Instrumentation$ActivityResult r7, $r9;
        androidx.test.internal.runner.intent.IntentMonitorImpl $r8;
        java.lang.Object[] $r10;
        java.lang.String $r11;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: android.app.Fragment;

        r5 := @parameter4: android.content.Intent;

        i0 := @parameter5: int;

        r6 := @parameter6: android.os.Bundle;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MonitoringInstr", "execStartActivity(context, IBinder, IBinder, Fragment, Intent, int, Bundle)");

        $r8 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.intent.IntentMonitorImpl intentMonitor>;

        virtualinvoke $r8.<androidx.test.internal.runner.intent.IntentMonitorImpl: void signalIntent(android.content.Intent)>(r5);

        r7 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.app.Instrumentation$ActivityResult stubResultFor(android.content.Intent)>(r5);

        if r7 == null goto label1;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r5;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stubbing intent %s", $r10);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", $r11);

        return r7;

     label1:
        $r9 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Fragment,android.content.Intent,int,android.os.Bundle)>(r1, r2, r3, r4, r5, i0, r6);

        return $r9;
    }

    public android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, java.lang.String, android.content.Intent, int, android.os.Bundle)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.content.Context r1;
        android.os.IBinder r2, r3;
        java.lang.String r4, $r11;
        android.content.Intent r5;
        int i0;
        android.os.Bundle r6;
        android.app.Instrumentation$ActivityResult r7, $r9;
        androidx.test.internal.runner.intent.IntentMonitorImpl $r8;
        java.lang.Object[] $r10;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: android.content.Intent;

        i0 := @parameter5: int;

        r6 := @parameter6: android.os.Bundle;

        $r8 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.intent.IntentMonitorImpl intentMonitor>;

        virtualinvoke $r8.<androidx.test.internal.runner.intent.IntentMonitorImpl: void signalIntent(android.content.Intent)>(r5);

        r7 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.app.Instrumentation$ActivityResult stubResultFor(android.content.Intent)>(r5);

        if r7 == null goto label1;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r5;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stubbing intent %s", $r10);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", $r11);

        return r7;

     label1:
        $r9 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,java.lang.String,android.content.Intent,int,android.os.Bundle)>(r1, r2, r3, r4, r5, i0, r6);

        return $r9;
    }

    public android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent, int, android.os.Bundle, android.os.UserHandle)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.content.Context r1;
        android.os.IBinder r2, r3;
        android.app.Activity r4;
        android.content.Intent r5;
        int i0;
        android.os.Bundle r6;
        android.os.UserHandle r7;
        android.app.Instrumentation$ActivityResult $r8;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: android.app.Activity;

        r5 := @parameter4: android.content.Intent;

        i0 := @parameter5: int;

        r6 := @parameter6: android.os.Bundle;

        r7 := @parameter7: android.os.UserHandle;

        $r8 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>(r1, r2, r3, r4, r5, i0, r6, r7);

        return $r8;
    }

    private android.app.Instrumentation$ActivityResult stubResultFor(android.content.Intent)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.content.Intent r1;
        java.util.concurrent.FutureTask r2, r27;
        java.lang.String r3;
        boolean $z0, $z1;
        android.os.Looper $r4, $r5;
        androidx.test.runner.intent.IntentStubber $r6;
        android.app.Instrumentation$ActivityResult $r7, $r11;
        java.lang.Object $r10;
        java.lang.Throwable $r12, $r15, $r17, $r18, $r21, $r22, r24, r25, r32, r33, r34, r35;
        java.lang.Thread $r13;
        java.lang.Object[] $r16;
        java.lang.RuntimeException $r23, r28, r29, r30;
        androidx.test.runner.MonitoringInstrumentation$StubResultCallable r26;
        java.lang.Runnable r31;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.content.Intent;

        $z0 = staticinvoke <androidx.test.runner.intent.IntentStubberRegistry: boolean isLoaded()>();

        if $z0 == 0 goto label8;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r5 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r4 == $r5 goto label7;

        r27 = new java.util.concurrent.FutureTask;

        r26 = new androidx.test.runner.MonitoringInstrumentation$StubResultCallable;

        specialinvoke r26.<androidx.test.runner.MonitoringInstrumentation$StubResultCallable: void <init>(android.content.Intent)>(r1);

        specialinvoke r27.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r26);

        r2 = r27;

        r31 = (java.lang.Runnable) r2;

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void runOnMainSync(java.lang.Runnable)>(r31);

     label1:
        $r10 = virtualinvoke r2.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        $r11 = (android.app.Instrumentation$ActivityResult) $r10;

     label2:
        return $r11;

     label3:
        $r15 := @caughtexception;

        r24 = $r15;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r1;

        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not retrieve stub result for intent %s", $r16);

        $r17 = virtualinvoke r24.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $z1 = $r17 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstr", r3, r24);

        $r22 = virtualinvoke r24.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $r23 = (java.lang.RuntimeException) $r22;

        r32 = (java.lang.Throwable) $r23;

        throw r32;

     label4:
        $r18 = virtualinvoke r24.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        if $r18 == null goto label5;

        r28 = new java.lang.RuntimeException;

        $r21 = virtualinvoke r24.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r28.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r3, $r21);

        r33 = (java.lang.Throwable) r28;

        throw r33;

     label5:
        r29 = new java.lang.RuntimeException;

        specialinvoke r29.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r3, r24);

        r34 = (java.lang.Throwable) r29;

        throw r34;

     label6:
        $r12 := @caughtexception;

        r25 = $r12;

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

        r30 = new java.lang.RuntimeException;

        specialinvoke r30.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r25);

        r35 = (java.lang.Throwable) r30;

        throw r35;

     label7:
        $r6 = staticinvoke <androidx.test.runner.intent.IntentStubberRegistry: androidx.test.runner.intent.IntentStubber getInstance()>();

        $r7 = interfaceinvoke $r6.<androidx.test.runner.intent.IntentStubber: android.app.Instrumentation$ActivityResult getActivityResultForIntent(android.content.Intent)>(r1);

        return $r7;

     label8:
        return null;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label6;
    }

    static volatile androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl '-$$Nest$fgetlifecycleMonitor'(androidx.test.runner.MonitoringInstrumentation)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r1;

        r0 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        $r1 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        return $r1;
    }

    private static java.lang.Class getMultiDexClass() throws java.lang.ClassNotFoundException
    {
        java.lang.Throwable r0, $r2;
        java.lang.Class $r1, $r3;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.multidex.MultiDex");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        r0 = $r2;

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.multidex.MultiDex");

        return $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    protected java.lang.String getThreadState()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.util.Set r1;
        java.lang.StringBuilder r2, r5, $r9, $r12;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.StackTraceElement[] r6;
        int i0, i1;
        java.lang.StackTraceElement r7;
        java.util.Map $r8;
        boolean $z0;
        java.lang.String $r10, $r17, $r20;
        java.lang.Object $r11, $r13, $r15;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $r8 = staticinvoke <java.lang.Thread: java.util.Map getAllStackTraces()>();

        r1 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r2 = $r9;

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("  ");

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r15 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.lang.StackTraceElement[]) $r15;

        i0 = lengthof r6;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r7 = r6[i1];

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r20 = virtualinvoke r7.<java.lang.StackTraceElement: java.lang.String toString()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r17 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        goto label1;

     label4:
        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    static volatile java.lang.Thread$UncaughtExceptionHandler '-$$Nest$fgetoldDefaultExceptionHandler'(androidx.test.runner.MonitoringInstrumentation)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.Thread$UncaughtExceptionHandler $r1;

        r0 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        $r1 = r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.Thread$UncaughtExceptionHandler oldDefaultExceptionHandler>;

        return $r1;
    }

    protected java.lang.Throwable unwrapException(java.lang.Throwable)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.Throwable r1, r2, $r4;
        java.lang.Class r3;
        boolean $z0;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.Throwable;

        r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if r2 != null goto label1;

        return r1;

     label1:
        r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/RuntimeException;");

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.Throwable unwrapException(java.lang.Throwable)>(r2);

        return $r4;

     label2:
        return r1;
    }

    private java.util.List getTargetProcessValues()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.String[] r1;
        int i0, $i1, $i2, $i3, i4;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        android.content.ComponentName $r4, $r10, $r16;
        android.content.pm.InstrumentationInfo $r5;
        java.util.ArrayList $r6, r26;
        java.util.List $r7, $r8;
        java.lang.Throwable $r9, r23;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r19;
        java.lang.String $r14, $r20, r21, r22, r24, r25, r27, r28;
        java.lang.IllegalStateException $r15;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 >= 26 goto label1;

        $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r8;

     label1:
        $r2 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.ComponentName getComponentName()>();

        $r5 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>($r4, 0);

        r21 = $r5.<android.content.pm.InstrumentationInfo: java.lang.String targetProcesses>;

        if r21 != null goto label2;

        r21 = "";

     label2:
        r22 = virtualinvoke r21.<java.lang.String: java.lang.String trim()>();

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r23 = $r9;

        $r10 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.ComponentName getComponentName()>();

        r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate ourselves: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstr", $r14, r23);

        $r15 = new java.lang.IllegalStateException;

        $r16 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.ComponentName getComponentName()>();

        r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate ourselves: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r23);

        throw $r15;

     label5:
        $i2 = virtualinvoke r22.<java.lang.String: int length()>();

        if $i2 != 0 goto label6;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label6:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r26 = $r6;

        r1 = virtualinvoke r22.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(",", -1);

        i0 = lengthof r1;

        i4 = 0;

     label7:
        if i4 >= i0 goto label9;

        r27 = r1[i4];

        r28 = virtualinvoke r27.<java.lang.String: java.lang.String trim()>();

        $i3 = virtualinvoke r28.<java.lang.String: int length()>();

        if $i3 <= 0 goto label8;

        interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>(r28);

     label8:
        i4 = i4 + 1;

        goto label7;

     label9:
        return r26;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label3 with label4;
    }

    static volatile java.util.concurrent.atomic.AtomicBoolean '-$$Nest$fgetisJsBridgeLoaded'(androidx.test.runner.MonitoringInstrumentation)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        $r1 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean isJsBridgeLoaded>;

        return $r1;
    }

    static volatile java.util.concurrent.atomic.AtomicLong '-$$Nest$fgetlastIdleTime'(androidx.test.runner.MonitoringInstrumentation)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        $r1 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong lastIdleTime>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        long $l0, $l1, $l2;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(2L);

        <androidx.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP> = $l0;

        $l1 = <androidx.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP>;

        $l2 = $l1 / 40L;

        <androidx.test.runner.MonitoringInstrumentation: long MILLIS_TO_POLL_FOR_ACTIVITY_STOP> = $l2;

        return;
    }

    public void <init>()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r1;
        androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl $r2;
        androidx.test.internal.runner.intent.IntentMonitorImpl $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4, $r7;
        java.util.concurrent.atomic.AtomicLong $r5;
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.lang.ThreadLocal $r8;
        androidx.test.runner.MonitoringInstrumentation$1 $r9;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void <init>()>();

        $r1 = new androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl;

        specialinvoke $r1.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void <init>()>();

        r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor> = $r1;

        $r2 = new androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl;

        specialinvoke $r2.<androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl: void <init>()>();

        r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl applicationMonitor> = $r2;

        $r3 = new androidx.test.internal.runner.intent.IntentMonitorImpl;

        specialinvoke $r3.<androidx.test.internal.runner.intent.IntentMonitorImpl: void <init>()>();

        r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.intent.IntentMonitorImpl intentMonitor> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean anActivityHasBeenLaunched> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong lastIdleTime> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger startedActivityCounter> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean isJsBridgeLoaded> = $r7;

        r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.Boolean isOriginalInstr> = null;

        $r8 = new java.lang.ThreadLocal;

        specialinvoke $r8.<java.lang.ThreadLocal: void <init>()>();

        r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.ThreadLocal isDexmakerClassLoaderInitialized> = $r8;

        $r9 = new androidx.test.runner.MonitoringInstrumentation$1;

        specialinvoke $r9.<androidx.test.runner.MonitoringInstrumentation$1: void <init>(androidx.test.runner.MonitoringInstrumentation)>(r0);

        r0.<androidx.test.runner.MonitoringInstrumentation: android.os.MessageQueue$IdleHandler idleHandler> = $r9;

        r0.<androidx.test.runner.MonitoringInstrumentation: boolean finished> = 0;

        return;
    }

    public void callActivityOnCreate(android.app.Activity, android.os.Bundle)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        android.os.Bundle r2;
        androidx.test.runner.lifecycle.Stage $r3, $r5;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r4, $r6;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        r2 := @parameter1: android.os.Bundle;

        $r4 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        $r3 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage PRE_ON_CREATE>;

        virtualinvoke $r4.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(androidx.test.runner.lifecycle.Stage,android.app.Activity)>($r3, r1);

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void callActivityOnCreate(android.app.Activity,android.os.Bundle)>(r1, r2);

        $r6 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        $r5 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage CREATED>;

        virtualinvoke $r6.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(androidx.test.runner.lifecycle.Stage,android.app.Activity)>($r5, r1);

        return;
    }

    public void callActivityOnDestroy(android.app.Activity)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        androidx.test.runner.lifecycle.Stage $r2;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void callActivityOnDestroy(android.app.Activity)>(r1);

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        $r2 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage DESTROYED>;

        virtualinvoke $r3.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(androidx.test.runner.lifecycle.Stage,android.app.Activity)>($r2, r1);

        return;
    }

    public void callActivityOnPause(android.app.Activity)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        androidx.test.runner.lifecycle.Stage $r2;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void callActivityOnPause(android.app.Activity)>(r1);

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        $r2 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage PAUSED>;

        virtualinvoke $r3.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(androidx.test.runner.lifecycle.Stage,android.app.Activity)>($r2, r1);

        return;
    }

    public void callActivityOnRestart(android.app.Activity)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        androidx.test.runner.lifecycle.Stage $r2;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void callActivityOnRestart(android.app.Activity)>(r1);

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        $r2 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage RESTARTED>;

        virtualinvoke $r3.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(androidx.test.runner.lifecycle.Stage,android.app.Activity)>($r2, r1);

        return;
    }

    public void callActivityOnResume(android.app.Activity)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        androidx.test.runner.lifecycle.Stage $r2;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void callActivityOnResume(android.app.Activity)>(r1);

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        $r2 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage RESUMED>;

        virtualinvoke $r3.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(androidx.test.runner.lifecycle.Stage,android.app.Activity)>($r2, r1);

        return;
    }

    public void callActivityOnStart(android.app.Activity)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.atomic.AtomicInteger $r3, $r7;
        androidx.test.runner.lifecycle.Stage $r4;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r5;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger startedActivityCounter>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label1:
        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void callActivityOnStart(android.app.Activity)>(r1);

        $r5 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        $r4 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage STARTED>;

        virtualinvoke $r5.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(androidx.test.runner.lifecycle.Stage,android.app.Activity)>($r4, r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger startedActivityCounter>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        throw r2;

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void callActivityOnStop(android.app.Activity)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        java.lang.Throwable r2, $r6;
        androidx.test.runner.lifecycle.Stage $r3;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r4;
        java.util.concurrent.atomic.AtomicInteger $r5, $r7;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

     label1:
        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void callActivityOnStop(android.app.Activity)>(r1);

        $r4 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        $r3 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage STOPPED>;

        virtualinvoke $r4.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(androidx.test.runner.lifecycle.Stage,android.app.Activity)>($r3, r1);

     label2:
        $r5 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger startedActivityCounter>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger startedActivityCounter>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void callApplicationOnCreate(android.app.Application)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.app.Application r1;
        androidx.test.runner.lifecycle.ApplicationStage $r2, $r4;
        androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl $r3, $r5;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Application;

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl applicationMonitor>;

        $r2 = <androidx.test.runner.lifecycle.ApplicationStage: androidx.test.runner.lifecycle.ApplicationStage PRE_ON_CREATE>;

        virtualinvoke $r3.<androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl: void signalLifecycleChange(android.app.Application,androidx.test.runner.lifecycle.ApplicationStage)>(r1, $r2);

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void callApplicationOnCreate(android.app.Application)>(r1);

        $r5 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl applicationMonitor>;

        $r4 = <androidx.test.runner.lifecycle.ApplicationStage: androidx.test.runner.lifecycle.ApplicationStage CREATED>;

        virtualinvoke $r5.<androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl: void signalLifecycleChange(android.app.Application,androidx.test.runner.lifecycle.ApplicationStage)>(r1, $r4);

        return;
    }

    protected void dumpThreadStateToOutputs(java.lang.String)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.String r1, r2;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.String getThreadState()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("THREAD_STATE", r2);

        return;
    }

    public void execStartActivities(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent[], android.os.Bundle)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.content.Context r1;
        android.os.IBinder r2, r3;
        android.app.Activity r4;
        android.content.Intent[] r5, r7;
        android.os.Bundle r6;
        byte b0;
        int i1, i3;
        android.content.Intent r8;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: android.app.Activity;

        r5 := @parameter4: android.content.Intent[];

        r6 := @parameter5: android.os.Bundle;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MonitoringInstr", "execStartActivities(context, ibinder, ibinder, activity, intent[], bundle)");

        b0 = -1;

        r7 = r5;

        i1 = lengthof r7;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        r8 = r7[i3];

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle)>(r1, r2, r3, r4, r8, b0, r6);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void finish(int, android.os.Bundle)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        int i0;
        android.os.Bundle r1;
        boolean $z0, $z1;
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher $r2;
        android.os.Handler $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $z0 = r0.<androidx.test.runner.MonitoringInstrumentation: boolean finished>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MonitoringInstr", "finish called 2x!");

        return;

     label1:
        r0.<androidx.test.runner.MonitoringInstrumentation: boolean finished> = 1;

        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>("MonitoringInstrumentation#finish");

        $z1 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: boolean shouldWaitForActivitiesToComplete()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: android.os.Handler handlerForMainLooper>;

        $r2 = new androidx.test.runner.MonitoringInstrumentation$ActivityFinisher;

        specialinvoke $r2.<androidx.test.runner.MonitoringInstrumentation$ActivityFinisher: void <init>(androidx.test.runner.MonitoringInstrumentation)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void waitForActivitiesToComplete()>();

     label2:
        staticinvoke <androidx.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: void registerInstance(androidx.test.runner.lifecycle.ActivityLifecycleMonitor)>(null);

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void restoreUncaughtExceptionHandler()>();

        staticinvoke <androidx.tracing.Trace: void endSection()>();

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void finish(int,android.os.Bundle)>(i0, r1);

        return;
    }

    protected void installMultidex()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        int $i0;
        java.lang.Class[] $r1;
        java.lang.Object[] $r2;
        android.content.Context $r3, $r4;
        java.lang.Throwable $r6, $r8, $r9, $r10, $r12, r15, r16, r17, r18, r19, r22, r23;
        java.lang.Class r13;
        java.lang.reflect.Method r14;
        java.lang.RuntimeException r20, r21;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 21 goto label10;

     label01:
        r13 = staticinvoke <androidx.test.runner.MonitoringInstrumentation: java.lang.Class getMultiDexClass()>();

     label02:
        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Landroid/content/Context;";

        $r1[1] = class "Landroid/content/Context;";

        r14 = virtualinvoke r13.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("installInstrumentation", $r1);

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.Context getContext()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.Context getTargetContext()>();

        $r2[1] = $r4;

        virtualinvoke r14.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

     label03:
        goto label05;

     label04:
        $r9 := @caughtexception;

        r15 = $r9;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MonitoringInstr", "Could not find MultiDex.installInstrumentation. Calling MultiDex.install instead. Is an old version of the multidex library being used? If test app is using multidex, classes might not be found");

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void installOldMultiDex(java.lang.Class)>(r13);

     label05:
        goto label10;

     label06:
        $r12 := @caughtexception;

        r16 = $r12;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", "No multidex.");

        goto label10;

     label07:
        $r8 := @caughtexception;

        r17 = $r8;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstr", "No multidex.", r17);

        goto label10;

     label08:
        $r6 := @caughtexception;

        r18 = $r6;

        r20 = new java.lang.RuntimeException;

        specialinvoke r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("multidex is available at runtime, but calling it failed.", r18);

        r22 = (java.lang.Throwable) r20;

        throw r22;

     label09:
        $r10 := @caughtexception;

        r19 = $r10;

        r21 = new java.lang.RuntimeException;

        specialinvoke r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("multidex is available at runtime, but calling it failed.", r19);

        r23 = (java.lang.Throwable) r21;

        throw r23;

     label10:
        return;

        catch java.lang.NoSuchMethodException from label02 to label03 with label04;
        catch java.lang.ClassNotFoundException from label01 to label05 with label06;
        catch java.lang.NoSuchMethodException from label01 to label05 with label07;
        catch java.lang.reflect.InvocationTargetException from label01 to label05 with label08;
        catch java.lang.IllegalAccessException from label01 to label05 with label09;
    }

    private void installMultidexAndExceptionHandler()
    {
        androidx.test.runner.MonitoringInstrumentation r0;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void installMultidex()>();

        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void registerUncaughtExceptionHandler()>();

        return;
    }

    protected void installOldMultiDex(java.lang.Class) throws java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.Class r1;
        java.lang.reflect.Method r2;
        java.lang.Class[] $r3;
        java.lang.Object[] $r4;
        android.content.Context $r5;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.Class;

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Landroid/content/Context;";

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("install", $r3);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.Context getTargetContext()>();

        $r4[0] = $r5;

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        return;
    }

    public void interceptActivityUsing(androidx.test.runner.intercepting.InterceptingActivityFactory)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        androidx.test.runner.intercepting.InterceptingActivityFactory r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: androidx.test.runner.intercepting.InterceptingActivityFactory;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.runner.intercepting.InterceptingActivityFactory interceptingActivityFactory> = r1;

        return;
    }

    public void onCreate(android.os.Bundle)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.os.Bundle r1;
        boolean z0;
        long l0;
        int $i2;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r2;
        androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl $r3;
        androidx.test.internal.runner.intent.IntentMonitorImpl $r4;
        android.os.Handler $r5;
        android.os.Looper $r6;
        java.util.concurrent.ThreadPoolExecutor $r7;
        java.util.concurrent.SynchronousQueue $r8;
        java.util.concurrent.TimeUnit $r9;
        androidx.test.runner.MonitoringInstrumentation$2 $r10;
        android.os.MessageQueue $r11;
        android.os.MessageQueue$IdleHandler $r12;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.os.Bundle;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", "Instrumentation started!");

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 > 15 goto label1;

        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void installMultidexAndExceptionHandler()>();

     label1:
        staticinvoke <androidx.test.platform.app.InstrumentationRegistry: void registerInstance(android.app.Instrumentation,android.os.Bundle)>(r0, r1);

        staticinvoke <androidx.test.InstrumentationRegistry: void registerInstance(android.app.Instrumentation,android.os.Bundle)>(r0, r1);

        $r2 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl lifecycleMonitor>;

        staticinvoke <androidx.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: void registerInstance(androidx.test.runner.lifecycle.ActivityLifecycleMonitor)>($r2);

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ApplicationLifecycleMonitorImpl applicationMonitor>;

        staticinvoke <androidx.test.runner.lifecycle.ApplicationLifecycleMonitorRegistry: void registerInstance(androidx.test.runner.lifecycle.ApplicationLifecycleMonitor)>($r3);

        $r4 = r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.intent.IntentMonitorImpl intentMonitor>;

        staticinvoke <androidx.test.runner.intent.IntentMonitorRegistry: void registerInstance(androidx.test.runner.intent.IntentMonitor)>($r4);

        $r5 = new android.os.Handler;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        r0.<androidx.test.runner.MonitoringInstrumentation: android.os.Handler handlerForMainLooper> = $r5;

        z0 = 0;

        l0 = 0L;

        $r7 = new java.util.concurrent.ThreadPoolExecutor;

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r8 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r8.<java.util.concurrent.SynchronousQueue: void <init>()>();

        $r10 = new androidx.test.runner.MonitoringInstrumentation$2;

        specialinvoke $r10.<androidx.test.runner.MonitoringInstrumentation$2: void <init>(androidx.test.runner.MonitoringInstrumentation)>(r0);

        specialinvoke $r7.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 2147483647, 0L, $r9, $r8, $r10);

        r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.ExecutorService executorService> = $r7;

        $r11 = staticinvoke <android.os.Looper: android.os.MessageQueue myQueue()>();

        $r12 = r0.<androidx.test.runner.MonitoringInstrumentation: android.os.MessageQueue$IdleHandler idleHandler>;

        virtualinvoke $r11.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>($r12);

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void onCreate(android.os.Bundle)>(r1);

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void specifyDexMakerCacheProperty()>();

        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void setupDexmakerClassloader()>();

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void useDefaultInterceptingActivityFactory()>();

        return;
    }

    public void onDestroy()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.os.MessageQueue $r1;
        android.os.MessageQueue$IdleHandler $r2;
        androidx.test.internal.runner.InstrumentationConnection $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", "Instrumentation Finished!");

        $r1 = staticinvoke <android.os.Looper: android.os.MessageQueue myQueue()>();

        $r2 = r0.<androidx.test.runner.MonitoringInstrumentation: android.os.MessageQueue$IdleHandler idleHandler>;

        virtualinvoke $r1.<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>($r2);

        $r3 = staticinvoke <androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection getInstance()>();

        virtualinvoke $r3.<androidx.test.internal.runner.InstrumentationConnection: void terminate()>();

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void onDestroy()>();

        return;
    }

    public void onStart()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.String $r1, $r4;
        androidx.test.internal.runner.InstrumentationConnection $r2;
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void onStart()>();

        $r1 = r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.String jsBridgeClassName>;

        if $r1 == null goto label1;

        $r4 = r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.String jsBridgeClassName>;

        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void tryLoadingJsBridge(java.lang.String)>($r4);

     label1:
        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void waitForIdleSync()>();

        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void setupDexmakerClassloader()>();

        $r2 = staticinvoke <androidx.test.internal.runner.InstrumentationConnection: androidx.test.internal.runner.InstrumentationConnection getInstance()>();

        $r3 = new androidx.test.runner.MonitoringInstrumentation$ActivityFinisher;

        specialinvoke $r3.<androidx.test.runner.MonitoringInstrumentation$ActivityFinisher: void <init>(androidx.test.runner.MonitoringInstrumentation)>(r0);

        virtualinvoke $r2.<androidx.test.internal.runner.InstrumentationConnection: void init(android.app.Instrumentation,androidx.test.runner.MonitoringInstrumentation$ActivityFinisher)>(r0, $r3);

        return;
    }

    private void registerUncaughtExceptionHandler()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.Thread$UncaughtExceptionHandler $r1;
        androidx.test.runner.MonitoringInstrumentation$3 $r2;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>();

        r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.Thread$UncaughtExceptionHandler oldDefaultExceptionHandler> = $r1;

        $r2 = new androidx.test.runner.MonitoringInstrumentation$3;

        specialinvoke $r2.<androidx.test.runner.MonitoringInstrumentation$3: void <init>(androidx.test.runner.MonitoringInstrumentation)>(r0);

        staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r2);

        return;
    }

    protected void restoreUncaughtExceptionHandler()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.Thread$UncaughtExceptionHandler $r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $r1 = r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.Thread$UncaughtExceptionHandler oldDefaultExceptionHandler>;

        staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r1);

        return;
    }

    public void runOnMainSync(java.lang.Runnable)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.Runnable r1, r17;
        java.util.concurrent.FutureTask r2, r14;
        java.lang.Throwable r3, $r6, $r10, r12, r13, r18, r19, r20;
        boolean $z0, $z1;
        java.lang.Error $r8;
        java.lang.RuntimeException $r9, r15, r16;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.Runnable;

        r14 = new java.util.concurrent.FutureTask;

        specialinvoke r14.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, null);

        r2 = r14;

        r17 = (java.lang.Runnable) r2;

        specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: void runOnMainSync(java.lang.Runnable)>(r17);

     label1:
        virtualinvoke r2.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label2:
        goto label7;

     label3:
        $r10 := @caughtexception;

        r12 = $r10;

        r15 = new java.lang.RuntimeException;

        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r12);

        r18 = (java.lang.Throwable) r15;

        throw r18;

     label4:
        $r6 := @caughtexception;

        r13 = $r6;

        r3 = virtualinvoke r13.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $z0 = r3 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label5;

        $r9 = (java.lang.RuntimeException) r3;

        r19 = (java.lang.Throwable) $r9;

        throw r19;

     label5:
        $z1 = r3 instanceof java.lang.Error;

        if $z1 == 0 goto label6;

        $r8 = (java.lang.Error) r3;

        throw $r8;

     label6:
        r16 = new java.lang.RuntimeException;

        specialinvoke r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        r20 = (java.lang.Throwable) r16;

        throw r20;

     label7:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
    }

    protected final void setJsBridgeClassName(java.lang.String)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.String r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.String;

        if null != r1 goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("JsBridge class name cannot be null!");

        throw $r4;

     label1:
        $r2 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean isJsBridgeLoaded>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("JsBridge is already loaded!");

        throw $r3;

     label2:
        r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.String jsBridgeClassName> = r1;

        return;
    }

    private void setupDexmakerClassloader()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.ClassLoader r1, r2;
        java.lang.ThreadLocal $r3, $r9;
        java.lang.Boolean $r4, $r8;
        java.lang.Object $r5;
        boolean $z0;
        java.lang.Thread $r6, $r12;
        android.content.Context $r7;
        java.lang.Object[] $r10;
        java.lang.String $r11;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r3 = r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.ThreadLocal isDexmakerClassLoaderInitialized>;

        $r5 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r7 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.Context getTargetContext()>();

        r2 = virtualinvoke $r7.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        if r1 == r2 goto label2;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r2;

        $r10[1] = r1;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Setting context classloader to \'%s\', Original: \'%s\'", $r10);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", $r11);

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r12.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r2);

     label2:
        $r9 = r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.ThreadLocal isDexmakerClassLoaderInitialized>;

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r9.<java.lang.ThreadLocal: void set(java.lang.Object)>($r8);

        return;
    }

    protected void specifyDexMakerCacheProperty()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.io.File r1;
        android.content.Context $r2;
        java.util.Properties $r3;
        java.lang.String $r4;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $r2 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.Context getTargetContext()>();

        r1 = virtualinvoke $r2.<android.content.Context: java.io.File getDir(java.lang.String,int)>("dxmaker_cache", 0);

        $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r3.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("dexmaker.dexcache", $r4);

        return;
    }

    private void tryLoadingJsBridge(java.lang.String)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.String r1;
        androidx.test.runner.MonitoringInstrumentation$5 $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.String;

        if null != r1 goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("JsBridge class name cannot be null!");

        throw $r3;

     label1:
        $r2 = new androidx.test.runner.MonitoringInstrumentation$5;

        specialinvoke $r2.<androidx.test.runner.MonitoringInstrumentation$5: void <init>(androidx.test.runner.MonitoringInstrumentation,java.lang.String)>(r0, r1);

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void runOnMainSync(java.lang.Runnable)>($r2);

        return;
    }

    public void useDefaultInterceptingActivityFactory()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        androidx.test.internal.runner.intercepting.DefaultInterceptingActivityFactory $r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $r1 = new androidx.test.internal.runner.intercepting.DefaultInterceptingActivityFactory;

        specialinvoke $r1.<androidx.test.internal.runner.intercepting.DefaultInterceptingActivityFactory: void <init>()>();

        r0.<androidx.test.runner.MonitoringInstrumentation: androidx.test.runner.intercepting.InterceptingActivityFactory interceptingActivityFactory> = $r1;

        return;
    }

    protected void waitForActivitiesToComplete()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        long l0, $l2, $l3, $l4, $l6, $l9;
        java.lang.Throwable r1, $r15;
        int i1, i11;
        android.os.Looper $r2, $r3;
        java.util.concurrent.atomic.AtomicInteger $r4, $r13;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        java.lang.Long $r7;
        java.lang.String $r8, $r12;
        byte $b7;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.IllegalStateException $r14;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r2 != $r3 goto label1;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot be called from main thread!");

        throw $r14;

     label1:
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = <androidx.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP>;

        l0 = $l2 + $l3;

        $r4 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger startedActivityCounter>;

        i11 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label2:
        if i11 <= 0 goto label6;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b7 = $l6 cmp l0;

        if $b7 >= 0 goto label6;

     label3:
        i1 = i11;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unstopped activity count: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", $r12);

        $l9 = <androidx.test.runner.MonitoringInstrumentation: long MILLIS_TO_POLL_FOR_ACTIVITY_STOP>;

        staticinvoke <java.lang.Thread: void sleep(long)>($l9);

        $r13 = r0.<androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger startedActivityCounter>;

        i11 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label4:
        goto label2;

     label5:
        $r15 := @caughtexception;

        r1 = $r15;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstr", "Abandoning activity wait due to interruption.", r1);

        goto label6;

     label6:
        if i11 <= 0 goto label7;

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void dumpThreadStateToOutputs(java.lang.String)>("ThreadState-unstopped.txt");

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        $r5[0] = $r6;

        $l4 = <androidx.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Still %s activities active after waiting %s ms.", $r5);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MonitoringInstr", $r8);

     label7:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    private boolean isHostingProcess(java.lang.String, androidx.test.internal.util.ProcSummary)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.String r1, r3, r4, $r5, $r6, $r7, $r13, $r14;
        androidx.test.internal.util.ProcSummary r2;
        int i0, i1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.test.internal.util.ProcSummary;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r5 = r2.<androidx.test.internal.util.ProcSummary: java.lang.String cmdline>;

        i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if i0 != i1 goto label1;

        $r14 = r2.<androidx.test.internal.util.ProcSummary: java.lang.String cmdline>;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        return $z2;

     label1:
        if i0 >= i1 goto label2;

        return 0;

     label2:
        $r6 = r2.<androidx.test.internal.util.ProcSummary: java.lang.String cmdline>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r6);

        if $z0 == 0 goto label3;

        $r7 = r2.<androidx.test.internal.util.ProcSummary: java.lang.String name>;

        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r7);

        if $z1 == 0 goto label3;

        r4 = r1;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Use smaller processNames in AndroidManifest.xml. Long names are truncated. This process\'s cmdline is a prefix of the processName and suffix of comm - assuming: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MonitoringInstr", $r13);

        return 1;

     label3:
        return 0;
    }

    private boolean isOriginalInstrumentationProcess()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        boolean $z0, $z1;
        java.lang.Boolean r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 = r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.Boolean isOriginalInstr>;

        if r1 != null goto label1;

        $z1 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: boolean isOriginalUncached()>();

        r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r0.<androidx.test.runner.MonitoringInstrumentation: java.lang.Boolean isOriginalInstr> = r1;

     label1:
        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isOriginalUncached()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.util.List r1;
        boolean z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.lang.String $r2, $r5, r10;
        java.lang.Object $r3, $r4;
        android.content.Context $r6, $r8;
        android.content.pm.ApplicationInfo $r7;
        androidx.test.internal.util.ProcSummary r9;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 26 goto label1;

        return 1;

     label1:
        r1 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: java.util.List getTargetProcessValues()>();

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r2 = "*";

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 != 1 goto label3;

        if z0 != 0 goto label3;

        return 1;

     label3:
        r9 = staticinvoke <androidx.test.internal.util.ProcSummary: androidx.test.internal.util.ProcSummary summarize(java.lang.String)>("self");

        goto label4;

     label4:
        if z0 == 0 goto label6;

        $r6 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.Context getTargetContext()>();

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        r10 = $r7.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        if r10 != null goto label5;

        $r8 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: android.content.Context getTargetContext()>();

        r10 = virtualinvoke $r8.<android.content.Context: java.lang.String getPackageName()>();

     label5:
        $z3 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: boolean isHostingProcess(java.lang.String,androidx.test.internal.util.ProcSummary)>(r10, r9);

        return $z3;

     label6:
        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.String) $r4;

        $z2 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: boolean isHostingProcess(java.lang.String,androidx.test.internal.util.ProcSummary)>($r5, r9);

        return $z2;
    }

    protected final boolean isPrimaryInstrProcess()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        boolean $z0;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $z0 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: boolean isOriginalInstrumentationProcess()>();

        return $z0;
    }

    protected boolean isPrimaryInstrProcess(java.lang.String)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: boolean isPrimaryInstrProcess()>();

        return $z0;
    }

    public boolean onException(java.lang.Object, java.lang.Throwable)
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        java.lang.String r3;
        java.lang.Object[] $r4;
        boolean $z0;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Exception encountered by: %s. Dumping thread state to outputs and pining for the fjords.", $r4);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstr", r3, r2);

        virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void dumpThreadStateToOutputs(java.lang.String)>("ThreadState-onException.txt");

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MonitoringInstr", "Dying now...");

        $z0 = specialinvoke r0.<androidx.test.internal.runner.hidden.ExposedInstrumentationApi: boolean onException(java.lang.Object,java.lang.Throwable)>(r1, r2);

        return $z0;
    }

    protected boolean shouldWaitForActivitiesToComplete()
    {
        androidx.test.runner.MonitoringInstrumentation r0;
        android.os.Bundle $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation;

        $r1 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.os.Bundle getArguments()>();

        $r2 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>("waitForActivitiesToComplete", "true");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2);

        return $z0;
    }

androidx.test.runner.MonitoringInstrumentation$1
<androidx.test.runner.MonitoringInstrumentation$1: androidx.test.runner.MonitoringInstrumentation this$0>
    void <init>(androidx.test.runner.MonitoringInstrumentation)
    {
        androidx.test.runner.MonitoringInstrumentation$1 r0;
        androidx.test.runner.MonitoringInstrumentation r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$1;

        r1 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        r0.<androidx.test.runner.MonitoringInstrumentation$1: androidx.test.runner.MonitoringInstrumentation this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean queueIdle()
    {
        androidx.test.runner.MonitoringInstrumentation$1 r0;
        androidx.test.runner.MonitoringInstrumentation $r1;
        java.util.concurrent.atomic.AtomicLong $r2;
        long $l0;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$1;

        $r1 = r0.<androidx.test.runner.MonitoringInstrumentation$1: androidx.test.runner.MonitoringInstrumentation this$0>;

        $r2 = staticinvoke <androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong '-$$Nest$fgetlastIdleTime'(androidx.test.runner.MonitoringInstrumentation)>($r1);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0);

        return 1;
    }

androidx.test.runner.MonitoringInstrumentation$2
    public java.lang.Thread newThread(java.lang.Runnable)
    {
        androidx.test.runner.MonitoringInstrumentation$2 r0;
        java.lang.Runnable r1;
        java.lang.Thread r2;
        java.util.concurrent.ThreadFactory $r3;
        java.lang.Class $r4;
        java.lang.String $r5;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$2;

        r1 := @parameter0: java.lang.Runnable;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r2 = interfaceinvoke $r3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r1);

        $r4 = class "Landroidx/test/runner/MonitoringInstrumentation;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke r2.<java.lang.Thread: void setName(java.lang.String)>($r5);

        return r2;
    }

    void <init>(androidx.test.runner.MonitoringInstrumentation)
    {
        androidx.test.runner.MonitoringInstrumentation$2 r0;
        androidx.test.runner.MonitoringInstrumentation r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$2;

        r1 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.runner.MonitoringInstrumentation$3
<androidx.test.runner.MonitoringInstrumentation$3: androidx.test.runner.MonitoringInstrumentation this$0>
    void <init>(androidx.test.runner.MonitoringInstrumentation)
    {
        androidx.test.runner.MonitoringInstrumentation$3 r0;
        androidx.test.runner.MonitoringInstrumentation r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$3;

        r1 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        r0.<androidx.test.runner.MonitoringInstrumentation$3: androidx.test.runner.MonitoringInstrumentation this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        androidx.test.runner.MonitoringInstrumentation$3 r0;
        java.lang.Thread r1, $r9;
        java.lang.Throwable r2;
        java.lang.Object[] $r3, $r10;
        java.lang.String $r4, $r5, $r6, $r7, $r16, $r19;
        int $i1;
        boolean $z1, $z2, $z3, $z4;
        android.os.Looper $r8;
        androidx.test.runner.MonitoringInstrumentation $r11, $r13, $r17, $r20, $r21;
        java.lang.Thread$UncaughtExceptionHandler $r12, $r14, $r18, $r22;
        java.lang.Class $r15;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$3;

        r1 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r1.<java.lang.Thread: java.lang.String getName()>();

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Handling an uncaught exception thrown on the thread %s.", $r3);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstr", $r5, r2);

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 != 18 goto label1;

        $z3 = r2 instanceof java.lang.SecurityException;

        if $z3 == 0 goto label1;

        $r19 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getMessage()>();

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("Calling from not trusted UID!");

        if $z4 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MonitoringInstr", "Catching and ignoring SecurityException: Calling from not trusted UID!, as this is an android platform bug on API 18 - b/10930931.");

        goto label2;

     label1:
        $r20 = r0.<androidx.test.runner.MonitoringInstrumentation$3: androidx.test.runner.MonitoringInstrumentation this$0>;

        virtualinvoke $r20.<androidx.test.runner.MonitoringInstrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>(r1, r2);

     label2:
        $r21 = r0.<androidx.test.runner.MonitoringInstrumentation$3: androidx.test.runner.MonitoringInstrumentation this$0>;

        $r22 = staticinvoke <androidx.test.runner.MonitoringInstrumentation: java.lang.Thread$UncaughtExceptionHandler '-$$Nest$fgetoldDefaultExceptionHandler'(androidx.test.runner.MonitoringInstrumentation)>($r21);

        if null == $r22 goto label3;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = r0.<androidx.test.runner.MonitoringInstrumentation$3: androidx.test.runner.MonitoringInstrumentation this$0>;

        $r12 = staticinvoke <androidx.test.runner.MonitoringInstrumentation: java.lang.Thread$UncaughtExceptionHandler '-$$Nest$fgetoldDefaultExceptionHandler'(androidx.test.runner.MonitoringInstrumentation)>($r11);

        $r10[0] = $r12;

        $r13 = r0.<androidx.test.runner.MonitoringInstrumentation$3: androidx.test.runner.MonitoringInstrumentation this$0>;

        $r14 = staticinvoke <androidx.test.runner.MonitoringInstrumentation: java.lang.Thread$UncaughtExceptionHandler '-$$Nest$fgetoldDefaultExceptionHandler'(androidx.test.runner.MonitoringInstrumentation)>($r13);

        $r15 = interfaceinvoke $r14.<java.lang.Thread$UncaughtExceptionHandler: java.lang.Class getClass()>();

        $r10[1] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invoking default uncaught exception handler %s (a %s)", $r10);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MonitoringInstr", $r16);

        $r17 = r0.<androidx.test.runner.MonitoringInstrumentation$3: androidx.test.runner.MonitoringInstrumentation this$0>;

        $r18 = staticinvoke <androidx.test.runner.MonitoringInstrumentation: java.lang.Thread$UncaughtExceptionHandler '-$$Nest$fgetoldDefaultExceptionHandler'(androidx.test.runner.MonitoringInstrumentation)>($r17);

        interfaceinvoke $r18.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r1, r2);

     label3:
        $r7 = "robolectric";

        $r6 = <android.os.Build: java.lang.String FINGERPRINT>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label4;

        $r8 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r9 = virtualinvoke $r8.<android.os.Looper: java.lang.Thread getThread()>();

        $z2 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MonitoringInstr", "The main thread has died and the handlers didn\'t care, exiting");

        staticinvoke <java.lang.System: void exit(int)>(-10);

     label4:
        return;
    }

androidx.test.runner.MonitoringInstrumentation$4
<androidx.test.runner.MonitoringInstrumentation$4: android.content.Intent val$intent>
<androidx.test.runner.MonitoringInstrumentation$4: androidx.test.runner.MonitoringInstrumentation this$0>
    public android.app.Activity call()
    {
        androidx.test.runner.MonitoringInstrumentation$4 r0;
        android.content.Intent $r1;
        androidx.test.runner.MonitoringInstrumentation $r2;
        android.app.Activity $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$4;

        $r2 = r0.<androidx.test.runner.MonitoringInstrumentation$4: androidx.test.runner.MonitoringInstrumentation this$0>;

        $r1 = r0.<androidx.test.runner.MonitoringInstrumentation$4: android.content.Intent val$intent>;

        $r3 = staticinvoke <androidx.test.runner.MonitoringInstrumentation: android.app.Activity access$001(androidx.test.runner.MonitoringInstrumentation,android.content.Intent)>($r2, $r1);

        return $r3;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.runner.MonitoringInstrumentation$4 r0;
        android.app.Activity $r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$4;

        $r1 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation$4: android.app.Activity call()>();

        return $r1;
    }

    void <init>(androidx.test.runner.MonitoringInstrumentation, android.content.Intent)
    {
        androidx.test.runner.MonitoringInstrumentation$4 r0;
        androidx.test.runner.MonitoringInstrumentation r1;
        android.content.Intent r2;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$4;

        r1 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        r2 := @parameter1: android.content.Intent;

        r0.<androidx.test.runner.MonitoringInstrumentation$4: androidx.test.runner.MonitoringInstrumentation this$0> = r1;

        r0.<androidx.test.runner.MonitoringInstrumentation$4: android.content.Intent val$intent> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.runner.MonitoringInstrumentation$5
<androidx.test.runner.MonitoringInstrumentation$5: java.lang.String val$className>
<androidx.test.runner.MonitoringInstrumentation$5: androidx.test.runner.MonitoringInstrumentation this$0>
    void <init>(androidx.test.runner.MonitoringInstrumentation, java.lang.String)
    {
        androidx.test.runner.MonitoringInstrumentation$5 r0;
        androidx.test.runner.MonitoringInstrumentation r1;
        java.lang.String r2;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$5;

        r1 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        r2 := @parameter1: java.lang.String;

        r0.<androidx.test.runner.MonitoringInstrumentation$5: androidx.test.runner.MonitoringInstrumentation this$0> = r1;

        r0.<androidx.test.runner.MonitoringInstrumentation$5: java.lang.String val$className> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.runner.MonitoringInstrumentation$5 r0;
        java.lang.reflect.Method r1;
        java.lang.String $r2;
        java.lang.Class[] $r3;
        java.lang.Object[] $r4;
        androidx.test.runner.MonitoringInstrumentation $r6;
        java.util.concurrent.atomic.AtomicBoolean $r7;
        java.lang.Throwable $r8, $r9, $r11, $r12, r15, r16, r17, r18, r21, r22;
        java.lang.Class r14;
        java.lang.RuntimeException r19, r20;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$5;

     label1:
        $r2 = r0.<androidx.test.runner.MonitoringInstrumentation$5: java.lang.String val$className>;

        r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

        $r3 = newarray (java.lang.Class)[0];

        r1 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("installBridge", $r3);

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r6 = r0.<androidx.test.runner.MonitoringInstrumentation$5: androidx.test.runner.MonitoringInstrumentation this$0>;

        $r7 = staticinvoke <androidx.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean '-$$Nest$fgetisJsBridgeLoaded'(androidx.test.runner.MonitoringInstrumentation)>($r6);

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label2:
        goto label7;

     label3:
        $r8 := @caughtexception;

        r15 = $r8;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", "No JSBridge.");

        goto label7;

     label4:
        $r11 := @caughtexception;

        r16 = $r11;

        goto label7;

     label5:
        $r12 := @caughtexception;

        r17 = $r12;

        r19 = new java.lang.RuntimeException;

        specialinvoke r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("JSbridge is available at runtime, but calling it failed.", r17);

        r21 = (java.lang.Throwable) r19;

        throw r21;

     label6:
        $r9 := @caughtexception;

        r18 = $r9;

        r20 = new java.lang.RuntimeException;

        specialinvoke r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("JSbridge is available at runtime, but calling it failed.", r18);

        r22 = (java.lang.Throwable) r20;

        throw r22;

     label7:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
    }

androidx.test.runner.MonitoringInstrumentation$ActivityFinisher
<androidx.test.runner.MonitoringInstrumentation$ActivityFinisher: androidx.test.runner.MonitoringInstrumentation this$0>
    public void <init>(androidx.test.runner.MonitoringInstrumentation)
    {
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher r0;
        androidx.test.runner.MonitoringInstrumentation r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$ActivityFinisher;

        r1 := @parameter0: androidx.test.runner.MonitoringInstrumentation;

        r0.<androidx.test.runner.MonitoringInstrumentation$ActivityFinisher: androidx.test.runner.MonitoringInstrumentation this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher r0;
        java.util.ArrayList r1, $r4;
        java.lang.Throwable r2, $r17;
        java.lang.String r3, $r12;
        androidx.test.runner.lifecycle.Stage $r5, $r6, r19;
        java.util.EnumSet $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8, $r13;
        java.lang.StringBuilder $r9, $r10, $r11;
        androidx.test.runner.MonitoringInstrumentation $r14;
        androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r15;
        java.util.Collection $r16;
        java.util.Iterator r18, r20;
        android.app.Activity r21;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$ActivityFinisher;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        $r6 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage CREATED>;

        $r5 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage STOPPED>;

        $r7 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>($r6, $r5);

        r18 = virtualinvoke $r7.<java.util.EnumSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (androidx.test.runner.lifecycle.Stage) $r13;

        $r14 = r0.<androidx.test.runner.MonitoringInstrumentation$ActivityFinisher: androidx.test.runner.MonitoringInstrumentation this$0>;

        $r15 = staticinvoke <androidx.test.runner.MonitoringInstrumentation: androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl '-$$Nest$fgetlifecycleMonitor'(androidx.test.runner.MonitoringInstrumentation)>($r14);

        $r16 = virtualinvoke $r15.<androidx.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: java.util.Collection getActivitiesInStage(androidx.test.runner.lifecycle.Stage)>(r19);

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r16);

        goto label1;

     label2:
        r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r8 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (android.app.Activity) $r8;

        $z2 = virtualinvoke r21.<android.app.Activity: boolean isFinishing()>();

        if $z2 != 0 goto label7;

     label4:
        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r21);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finishing activity: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", $r12);

        virtualinvoke r21.<android.app.Activity: void finish()>();

     label5:
        goto label7;

     label6:
        $r17 := @caughtexception;

        r2 = $r17;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstr", "Failed to finish activity.", r2);

     label7:
        goto label3;

     label8:
        return;

        catch java.lang.RuntimeException from label4 to label5 with label6;
    }

androidx.test.runner.MonitoringInstrumentation$StubResultCallable
<androidx.test.runner.MonitoringInstrumentation$StubResultCallable: android.content.Intent intent>
    public android.app.Instrumentation$ActivityResult call()
    {
        androidx.test.runner.MonitoringInstrumentation$StubResultCallable r0;
        androidx.test.runner.intent.IntentStubber $r1;
        android.content.Intent $r2;
        android.app.Instrumentation$ActivityResult $r3;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$StubResultCallable;

        $r1 = staticinvoke <androidx.test.runner.intent.IntentStubberRegistry: androidx.test.runner.intent.IntentStubber getInstance()>();

        $r2 = r0.<androidx.test.runner.MonitoringInstrumentation$StubResultCallable: android.content.Intent intent>;

        $r3 = interfaceinvoke $r1.<androidx.test.runner.intent.IntentStubber: android.app.Instrumentation$ActivityResult getActivityResultForIntent(android.content.Intent)>($r2);

        return $r3;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.runner.MonitoringInstrumentation$StubResultCallable r0;
        android.app.Instrumentation$ActivityResult $r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$StubResultCallable;

        $r1 = virtualinvoke r0.<androidx.test.runner.MonitoringInstrumentation$StubResultCallable: android.app.Instrumentation$ActivityResult call()>();

        return $r1;
    }

    void <init>(android.content.Intent)
    {
        androidx.test.runner.MonitoringInstrumentation$StubResultCallable r0;
        android.content.Intent r1;

        r0 := @this: androidx.test.runner.MonitoringInstrumentation$StubResultCallable;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.runner.MonitoringInstrumentation$StubResultCallable: android.content.Intent intent> = r1;

        return;
    }

