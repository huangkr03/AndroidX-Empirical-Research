androidx.compose.runtime.ComposerImpl
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Applier applier>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>
<androidx.compose.runtime.ComposerImpl: java.util.Set abandonSet>
<androidx.compose.runtime.ComposerImpl: java.util.List changes>
<androidx.compose.runtime.ComposerImpl: java.util.List lateChanges>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition composition>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack pendingStack>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending>
<androidx.compose.runtime.ComposerImpl: int nodeIndex>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack nodeIndexStack>
<androidx.compose.runtime.ComposerImpl: int groupNodeCount>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack groupNodeCountStack>
<androidx.compose.runtime.ComposerImpl: int[] nodeCountOverrides>
<androidx.compose.runtime.ComposerImpl: java.util.HashMap nodeCountVirtualOverrides>
<androidx.compose.runtime.ComposerImpl: boolean forceRecomposeScopes>
<androidx.compose.runtime.ComposerImpl: boolean forciblyRecompose>
<androidx.compose.runtime.ComposerImpl: boolean nodeExpected>
<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack entersStack>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap parentProvider>
<androidx.compose.runtime.ComposerImpl: java.util.HashMap providerUpdates>
<androidx.compose.runtime.ComposerImpl: boolean providersInvalid>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack providersInvalidStack>
<androidx.compose.runtime.ComposerImpl: boolean reusing>
<androidx.compose.runtime.ComposerImpl: int reusingGroup>
<androidx.compose.runtime.ComposerImpl: int childrenComposing>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.snapshots.Snapshot snapshot>
<androidx.compose.runtime.ComposerImpl: int compositionToken>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>
<androidx.compose.runtime.ComposerImpl: boolean isComposing>
<androidx.compose.runtime.ComposerImpl: boolean isDisposed>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>
<androidx.compose.runtime.ComposerImpl: boolean writerHasAProvider>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache>
<androidx.compose.runtime.ComposerImpl: java.util.List deferredChanges>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Anchor insertAnchor>
<androidx.compose.runtime.ComposerImpl: java.util.List insertFixups>
<androidx.compose.runtime.ComposerImpl: boolean inserting>
<androidx.compose.runtime.ComposerImpl: int compoundKeyHash>
<androidx.compose.runtime.ComposerImpl: int pendingUps>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack downNodes>
<androidx.compose.runtime.ComposerImpl: int writersReaderDelta>
<androidx.compose.runtime.ComposerImpl: boolean startedGroup>
<androidx.compose.runtime.ComposerImpl: boolean implicitRootStart>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack startedGroups>
<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack insertUpFixups>
<androidx.compose.runtime.ComposerImpl: int previousRemove>
<androidx.compose.runtime.ComposerImpl: int previousMoveFrom>
<androidx.compose.runtime.ComposerImpl: int previousMoveTo>
<androidx.compose.runtime.ComposerImpl: int previousCount>
    public void <init>(androidx.compose.runtime.Applier, androidx.compose.runtime.CompositionContext, androidx.compose.runtime.SlotTable, java.util.Set, java.util.List, java.util.List, androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.ComposerImpl r0, r30, r33, r35;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.CompositionContext r2;
        androidx.compose.runtime.SlotTable r3, $r19, $r20, $r21, r34;
        java.util.Set r4;
        java.util.List r5, r6, $r12, $r23;
        androidx.compose.runtime.ControlledComposition r7;
        androidx.compose.runtime.Stack $r8, $r18, $r24, $r26;
        androidx.compose.runtime.IntStack $r9, $r10, $r13, $r16, $r25;
        java.util.ArrayList $r11, $r22;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r14;
        java.util.HashMap $r15;
        androidx.compose.runtime.snapshots.Snapshot $r17;
        java.lang.Throwable $r27;
        androidx.compose.runtime.SlotReader r28, r29, $r36, r37;
        androidx.compose.runtime.SlotWriter r31, r32;
        boolean z3;
        androidx.compose.runtime.Anchor r38;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.CompositionContext;

        r3 := @parameter2: androidx.compose.runtime.SlotTable;

        r4 := @parameter3: java.util.Set;

        r5 := @parameter4: java.util.List;

        r6 := @parameter5: java.util.List;

        r7 := @parameter6: androidx.compose.runtime.ControlledComposition;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "parentContext");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "slotTable");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "abandonSet");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "changes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "lateChanges");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r7, "composition");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Applier applier> = r1;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext> = r2;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable> = r3;

        r0.<androidx.compose.runtime.ComposerImpl: java.util.Set abandonSet> = r4;

        r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes> = r5;

        r0.<androidx.compose.runtime.ComposerImpl: java.util.List lateChanges> = r6;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition composition> = r7;

        $r8 = new androidx.compose.runtime.Stack;

        specialinvoke $r8.<androidx.compose.runtime.Stack: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack pendingStack> = $r8;

        $r9 = new androidx.compose.runtime.IntStack;

        specialinvoke $r9.<androidx.compose.runtime.IntStack: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack nodeIndexStack> = $r9;

        $r10 = new androidx.compose.runtime.IntStack;

        specialinvoke $r10.<androidx.compose.runtime.IntStack: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack groupNodeCountStack> = $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = (java.util.List) $r11;

        r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations> = $r12;

        $r13 = new androidx.compose.runtime.IntStack;

        specialinvoke $r13.<androidx.compose.runtime.IntStack: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack entersStack> = $r13;

        $r14 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.ExtensionsKt: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap persistentHashMapOf()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap parentProvider> = $r14;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap providerUpdates> = $r15;

        $r16 = new androidx.compose.runtime.IntStack;

        specialinvoke $r16.<androidx.compose.runtime.IntStack: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack providersInvalidStack> = $r16;

        r0.<androidx.compose.runtime.ComposerImpl: int reusingGroup> = -1;

        $r17 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.Snapshot currentSnapshot()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.snapshots.Snapshot snapshot> = $r17;

        $r18 = new androidx.compose.runtime.Stack;

        specialinvoke $r18.<androidx.compose.runtime.Stack: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack> = $r18;

        $r19 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        r28 = virtualinvoke $r19.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotReader openReader()>();

        r29 = r28;

        r30 = r0;

        virtualinvoke r29.<androidx.compose.runtime.SlotReader: void close()>();

        r30.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader> = r28;

        $r20 = new androidx.compose.runtime.SlotTable;

        specialinvoke $r20.<androidx.compose.runtime.SlotTable: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable> = $r20;

        $r21 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        r31 = virtualinvoke $r21.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

        r32 = r31;

        r33 = r0;

        virtualinvoke r32.<androidx.compose.runtime.SlotWriter: void close()>();

        r33.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer> = r31;

        r34 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        r35 = r0;

        z3 = 0;

        $r36 = virtualinvoke r34.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotReader openReader()>();

     label1:
        r37 = $r36;

        r38 = virtualinvoke r37.<androidx.compose.runtime.SlotReader: androidx.compose.runtime.Anchor anchor(int)>(0);

     label2:
        virtualinvoke $r36.<androidx.compose.runtime.SlotReader: void close()>();

        goto label5;

     label3:
        $r27 := @caughtexception;

     label4:
        virtualinvoke $r36.<androidx.compose.runtime.SlotReader: void close()>();

        throw $r27;

     label5:
        r35.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Anchor insertAnchor> = r38;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        $r23 = (java.util.List) $r22;

        r0.<androidx.compose.runtime.ComposerImpl: java.util.List insertFixups> = $r23;

        $r24 = new androidx.compose.runtime.Stack;

        specialinvoke $r24.<androidx.compose.runtime.Stack: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack downNodes> = $r24;

        r0.<androidx.compose.runtime.ComposerImpl: boolean implicitRootStart> = 1;

        $r25 = new androidx.compose.runtime.IntStack;

        specialinvoke $r25.<androidx.compose.runtime.IntStack: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack startedGroups> = $r25;

        $r26 = new androidx.compose.runtime.Stack;

        specialinvoke $r26.<androidx.compose.runtime.Stack: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack insertUpFixups> = $r26;

        r0.<androidx.compose.runtime.ComposerImpl: int previousRemove> = -1;

        r0.<androidx.compose.runtime.ComposerImpl: int previousMoveFrom> = -1;

        r0.<androidx.compose.runtime.ComposerImpl: int previousMoveTo> = -1;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public androidx.compose.runtime.Applier getApplier()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.Applier $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Applier applier>;

        return $r1;
    }

    public androidx.compose.runtime.ControlledComposition getComposition()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.ControlledComposition $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition composition>;

        return $r1;
    }

    public final boolean isComposing$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing>;

        return $z0;
    }

    public final boolean isDisposed$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean isDisposed>;

        return $z0;
    }

    public final boolean getAreChildrenComposing$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl: int childrenComposing>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean getHasPendingChanges$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.util.List $r1;
        java.util.Collection $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes>;

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final androidx.compose.runtime.SlotTable getInsertTable$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotTable $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        return $r1;
    }

    public final void setInsertTable$runtime_release(androidx.compose.runtime.SlotTable)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotTable r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.SlotTable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable> = r1;

        return;
    }

    public final java.util.List getDeferredChanges$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.util.List $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List deferredChanges>;

        return $r1;
    }

    public final void setDeferredChanges$runtime_release(java.util.List)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.util.List r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.util.List;

        r0.<androidx.compose.runtime.ComposerImpl: java.util.List deferredChanges> = r1;

        return;
    }

    public kotlin.coroutines.CoroutineContext getApplyCoroutineContext()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.CompositionContext $r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.CompositionContext: kotlin.coroutines.CoroutineContext getEffectCoroutineContext$runtime_release()>();

        return $r2;
    }

    public void startReplaceableGroup(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, null, 0, null);

        return;
    }

    public void endReplaceableGroup()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        return;
    }

    public void startDefaults()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(-127, null, 0, null);

        return;
    }

    public void endDefaults()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.RecomposeScopeImpl r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.RecomposeScopeImpl getCurrentRecomposeScope$runtime_release()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: boolean getUsed()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: void setDefaultsInScope(boolean)>(1);

     label1:
        return;
    }

    public boolean getDefaultsInvalid()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean $z0, $z1, $z2, $z3;
        androidx.compose.runtime.RecomposeScopeImpl $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid>;

        if $z0 != 0 goto label4;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.RecomposeScopeImpl getCurrentRecomposeScope$runtime_release()>();

        if $r1 == null goto label2;

        $z1 = virtualinvoke $r1.<androidx.compose.runtime.RecomposeScopeImpl: boolean getDefaultsInvalid()>();

        if $z1 != 1 goto label1;

        $z2 = 1;

        goto label3;

     label1:
        $z2 = 0;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 == 0 goto label5;

     label4:
        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    public static void getDefaultsInvalid$annotations()
    {
        return;
    }

    public void startMovableGroup(int, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, r1, 0, null);

        return;
    }

    public void endMovableGroup()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        return;
    }

    private final void startRoot()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.util.Set r1, $r13;
        androidx.compose.runtime.SlotTable $r2, $r15;
        androidx.compose.runtime.SlotReader $r3;
        androidx.compose.runtime.CompositionContext $r4, $r5, $r14, $r16, $r17;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r6, $r8, $r10;
        boolean $z1, $z2, $z3, $z5;
        androidx.compose.runtime.IntStack $r7;
        int $i0, $i1;
        androidx.compose.runtime.ProvidableCompositionLocal $r9;
        androidx.compose.runtime.CompositionLocal $r11;
        java.lang.Object $r12;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotReader openReader()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader> = $r3;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startGroup(int)>(100);

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        virtualinvoke $r4.<androidx.compose.runtime.CompositionContext: void startComposing$runtime_release()>();

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.CompositionContext: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap getCompositionLocalScope$runtime_release()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap parentProvider> = $r6;

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack providersInvalidStack>;

        $z1 = r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid>;

        $i0 = staticinvoke <androidx.compose.runtime.ComposerKt: int access$asInt(boolean)>($z1);

        virtualinvoke $r7.<androidx.compose.runtime.IntStack: void push(int)>($i0);

        $r8 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap parentProvider>;

        $z2 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean changed(java.lang.Object)>($r8);

        r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid> = $z2;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = null;

        $z3 = r0.<androidx.compose.runtime.ComposerImpl: boolean forceRecomposeScopes>;

        if $z3 != 0 goto label1;

        $r17 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        $z5 = virtualinvoke $r17.<androidx.compose.runtime.CompositionContext: boolean getCollectingParameterInformation$runtime_release()>();

        r0.<androidx.compose.runtime.ComposerImpl: boolean forceRecomposeScopes> = $z5;

     label1:
        $r9 = staticinvoke <androidx.compose.runtime.tooling.InspectionTablesKt: androidx.compose.runtime.ProvidableCompositionLocal getLocalInspectionTables()>();

        $r11 = (androidx.compose.runtime.CompositionLocal) $r9;

        $r10 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap parentProvider>;

        $r12 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object resolveCompositionLocal(androidx.compose.runtime.CompositionLocal,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)>($r11, $r10);

        $r13 = (java.util.Set) $r12;

        if $r13 == null goto label2;

        r1 = $r13;

        $r15 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        virtualinvoke $r16.<androidx.compose.runtime.CompositionContext: void recordInspectionTable$runtime_release(java.util.Set)>(r1);

        goto label2;

     label2:
        $r14 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        $i1 = virtualinvoke $r14.<androidx.compose.runtime.CompositionContext: int getCompoundHashKey$runtime_release()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startGroup(int)>($i1);

        return;
    }

    private final void endRoot()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.CompositionContext $r1;
        androidx.compose.runtime.SlotReader $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        virtualinvoke $r1.<androidx.compose.runtime.CompositionContext: void doneComposing$runtime_release()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordEndRoot()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void finalizeCompose()>();

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r2.<androidx.compose.runtime.SlotReader: void close()>();

        r0.<androidx.compose.runtime.ComposerImpl: boolean forciblyRecompose> = 0;

        return;
    }

    private final void abortRoot()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.Stack $r1;
        androidx.compose.runtime.IntStack $r2, $r3, $r4, $r5;
        java.util.HashMap $r6;
        androidx.compose.runtime.SlotReader $r7, $r10;
        boolean $z0, $z1;
        androidx.compose.runtime.SlotWriter $r8, $r9;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void cleanUpCompose()>();

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack pendingStack>;

        virtualinvoke $r1.<androidx.compose.runtime.Stack: void clear()>();

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack nodeIndexStack>;

        virtualinvoke $r2.<androidx.compose.runtime.IntStack: void clear()>();

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack groupNodeCountStack>;

        virtualinvoke $r3.<androidx.compose.runtime.IntStack: void clear()>();

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack entersStack>;

        virtualinvoke $r4.<androidx.compose.runtime.IntStack: void clear()>();

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack providersInvalidStack>;

        virtualinvoke $r5.<androidx.compose.runtime.IntStack: void clear()>();

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap providerUpdates>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z0 = virtualinvoke $r7.<androidx.compose.runtime.SlotReader: boolean getClosed()>();

        if $z0 != 0 goto label1;

        $r10 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r10.<androidx.compose.runtime.SlotReader: void close()>();

     label1:
        $r8 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $z1 = virtualinvoke $r8.<androidx.compose.runtime.SlotWriter: boolean getClosed()>();

        if $z1 != 0 goto label2;

        $r9 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        virtualinvoke $r9.<androidx.compose.runtime.SlotWriter: void close()>();

     label2:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void createFreshInsertTable()>();

        r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: int childrenComposing> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean nodeExpected> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean inserting> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean reusing> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean forciblyRecompose> = 0;

        return;
    }

    public final void changesApplied$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.util.HashMap $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap providerUpdates>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    public boolean getInserting()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean inserting>;

        return $z0;
    }

    public static void getInserting$annotations()
    {
        return;
    }

    public boolean getSkipping()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        androidx.compose.runtime.RecomposeScopeImpl $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z0 != 0 goto label4;

        $z1 = r0.<androidx.compose.runtime.ComposerImpl: boolean reusing>;

        if $z1 != 0 goto label4;

        $z2 = r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid>;

        if $z2 != 0 goto label4;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.RecomposeScopeImpl getCurrentRecomposeScope$runtime_release()>();

        if $r1 == null goto label2;

        $z4 = virtualinvoke $r1.<androidx.compose.runtime.RecomposeScopeImpl: boolean getRequiresRecompose()>();

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label3;

     label1:
        $z5 = 0;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        if $z5 == 0 goto label4;

        $z3 = r0.<androidx.compose.runtime.ComposerImpl: boolean forciblyRecompose>;

        if $z3 != 0 goto label4;

        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        return $z6;
    }

    public static void getSkipping$annotations()
    {
        return;
    }

    public int getCompoundKeyHash()
    {
        androidx.compose.runtime.ComposerImpl r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash>;

        return $i0;
    }

    public static void getCompoundKeyHash$annotations()
    {
        return;
    }

    public void collectParameterInformation()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r0.<androidx.compose.runtime.ComposerImpl: boolean forceRecomposeScopes> = 1;

        return;
    }

    public final void dispose$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.String r1;
        java.lang.Object r2;
        androidx.compose.runtime.Trace $r3, $r11, $r13;
        androidx.compose.runtime.Composer $r4;
        androidx.compose.runtime.CompositionContext $r5;
        androidx.compose.runtime.Stack $r6;
        java.util.List $r7, $r8;
        java.util.HashMap $r9;
        androidx.compose.runtime.Applier $r10;
        java.lang.Throwable $r12;
        kotlin.Unit $r14;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 = "Compose:Composer.dispose";

        $r3 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        r2 = virtualinvoke $r3.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r1);

     label1:
        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        $r4 = (androidx.compose.runtime.Composer) r0;

        virtualinvoke $r5.<androidx.compose.runtime.CompositionContext: void unregisterComposer$runtime_release(androidx.compose.runtime.Composer)>($r4);

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>;

        virtualinvoke $r6.<androidx.compose.runtime.Stack: void clear()>();

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        $r8 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes>;

        interfaceinvoke $r8.<java.util.List: void clear()>();

        $r9 = r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap providerUpdates>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        $r10 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Applier getApplier()>();

        interfaceinvoke $r10.<androidx.compose.runtime.Applier: void clear()>();

        r0.<androidx.compose.runtime.ComposerImpl: boolean isDisposed> = 1;

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        $r11 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r11.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        goto label5;

     label3:
        $r12 := @caughtexception;

     label4:
        $r13 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r13.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>(r2);

        throw $r12;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final boolean forceRecomposeScopes$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean forceRecomposeScopes>;

        if $z0 != 0 goto label1;

        r0.<androidx.compose.runtime.ComposerImpl: boolean forceRecomposeScopes> = 1;

        r0.<androidx.compose.runtime.ComposerImpl: boolean forciblyRecompose> = 1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private final void startGroup(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, null, 0, null);

        return;
    }

    private final void startGroup(int, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, r1, 0, null);

        return;
    }

    private final void endGroup()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void end(boolean)>(0);

        return;
    }

    private final void skipGroup()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotReader $r1;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount>;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i1 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int skipGroup()>();

        $i2 = $i0 + $i1;

        r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount> = $i2;

        return;
    }

    public void startNode()
    {
        androidx.compose.runtime.ComposerImpl r0;
        byte b0, $b3;
        boolean $z0, $z1;
        androidx.compose.runtime.SlotReader $r1, $r2;
        int $i1, $i2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z0 == 0 goto label1;

        $b3 = 125;

        goto label5;

     label1:
        $z1 = r0.<androidx.compose.runtime.ComposerImpl: boolean reusing>;

        if $z1 == 0 goto label3;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i2 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: int getGroupKey()>();

        if $i2 != 125 goto label2;

        $b3 = 126;

        goto label5;

     label2:
        $b3 = 125;

        goto label5;

     label3:
        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i1 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getGroupKey()>();

        if $i1 != 126 goto label4;

        $b3 = 126;

        goto label5;

     label4:
        $b3 = 125;

     label5:
        b0 = $b3;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(b0, null, 1, null);

        r0.<androidx.compose.runtime.ComposerImpl: boolean nodeExpected> = 1;

        return;
    }

    public void startReusableNode()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(125, null, 1, null);

        r0.<androidx.compose.runtime.ComposerImpl: boolean nodeExpected> = 1;

        return;
    }

    public void createNode(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.runtime.IntStack $r2;
        androidx.compose.runtime.SlotWriter $r3, $r4;
        int $i0, $i1, i2, $i3;
        androidx.compose.runtime.ComposerImpl$createNode$2 $r5;
        kotlin.jvm.functions.Function3 $r6, $r8;
        androidx.compose.runtime.ComposerImpl$createNode$3 $r7;
        java.lang.String $r9, $r12;
        kotlin.KotlinNothingValueException $r11;
        boolean z0;
        androidx.compose.runtime.Anchor $r13;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "factory");

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void validateNodeExpected()>();

        z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if z0 != 0 goto label1;

        $r12 = "createNode() can only be called when inserting";

        $r9 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r9);

        $r11 = new kotlin.KotlinNothingValueException;

        specialinvoke $r11.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r11;

     label1:
        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack nodeIndexStack>;

        i2 = virtualinvoke $r2.<androidx.compose.runtime.IntStack: int peek()>();

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $i0 = virtualinvoke $r3.<androidx.compose.runtime.SlotWriter: int getParent()>();

        $r13 = virtualinvoke $r4.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.Anchor anchor(int)>($i0);

        $i3 = r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount>;

        $i1 = $i3 + 1;

        r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount> = $i1;

        $r5 = new androidx.compose.runtime.ComposerImpl$createNode$2;

        specialinvoke $r5.<androidx.compose.runtime.ComposerImpl$createNode$2: void <init>(kotlin.jvm.functions.Function0,androidx.compose.runtime.Anchor,int)>(r1, $r13, i2);

        $r6 = (kotlin.jvm.functions.Function3) $r5;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordFixup(kotlin.jvm.functions.Function3)>($r6);

        $r7 = new androidx.compose.runtime.ComposerImpl$createNode$3;

        specialinvoke $r7.<androidx.compose.runtime.ComposerImpl$createNode$3: void <init>(androidx.compose.runtime.Anchor,int)>($r13, i2);

        $r8 = (kotlin.jvm.functions.Function3) $r7;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordInsertUpFixup(kotlin.jvm.functions.Function3)>($r8);

        return;
    }

    public void useNode()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0, $z2, $z3;
        androidx.compose.runtime.SlotReader $r1;
        java.lang.Object $r2;
        java.lang.String $r3, $r6;
        kotlin.KotlinNothingValueException $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void validateNodeExpected()>();

        $z2 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        if z0 != 0 goto label3;

        $r6 = "useNode() called while inserting";

        $r3 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r3);

        $r5 = new kotlin.KotlinNothingValueException;

        specialinvoke $r5.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r5;

     label3:
        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r2 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object getNode(androidx.compose.runtime.SlotReader)>($r1);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordDown(java.lang.Object)>($r2);

        return;
    }

    public void endNode()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void end(boolean)>(1);

        return;
    }

    public void startReusableGroup(int, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1, $r4;
        androidx.compose.runtime.SlotReader $r2, $r3, $r5;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i1 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: int getGroupKey()>();

        if $i1 != i0 goto label1;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r4 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: java.lang.Object getGroupAux()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, r1);

        if $z0 != 0 goto label1;

        $i2 = r0.<androidx.compose.runtime.ComposerImpl: int reusingGroup>;

        if $i2 >= 0 goto label1;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i3 = virtualinvoke $r5.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        r0.<androidx.compose.runtime.ComposerImpl: int reusingGroup> = $i3;

        r0.<androidx.compose.runtime.ComposerImpl: boolean reusing> = 1;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, null, 0, r1);

        return;
    }

    public void endReusableGroup()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean $z0;
        androidx.compose.runtime.SlotReader $r1;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean reusing>;

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getParent()>();

        $i1 = r0.<androidx.compose.runtime.ComposerImpl: int reusingGroup>;

        if $i0 != $i1 goto label1;

        r0.<androidx.compose.runtime.ComposerImpl: int reusingGroup> = -1;

        r0.<androidx.compose.runtime.ComposerImpl: boolean reusing> = 0;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void end(boolean)>(0);

        return;
    }

    public void disableReusing()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r0.<androidx.compose.runtime.ComposerImpl: boolean reusing> = 0;

        return;
    }

    public void enableReusing()
    {
        androidx.compose.runtime.ComposerImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl: int reusingGroup>;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<androidx.compose.runtime.ComposerImpl: boolean reusing> = $z0;

        return;
    }

    public void apply(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function2 r2;
        kotlin.jvm.functions.Function3 r3;
        androidx.compose.runtime.ComposerImpl$apply$operation$1 $r4;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        $r4 = new androidx.compose.runtime.ComposerImpl$apply$operation$1;

        specialinvoke $r4.<androidx.compose.runtime.ComposerImpl$apply$operation$1: void <init>(kotlin.jvm.functions.Function2,java.lang.Object)>(r2, r1);

        r3 = (kotlin.jvm.functions.Function3) $r4;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordFixup(kotlin.jvm.functions.Function3)>(r3);

        goto label2;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordApplierOperation(kotlin.jvm.functions.Function3)>(r3);

     label2:
        return;
    }

    public java.lang.Object joinKey(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1, r2, $r4, $r5;
        androidx.compose.runtime.SlotReader $r3;
        androidx.compose.runtime.JoinedKey r6;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r4 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: java.lang.Object getGroupObjectKey()>();

        $r5 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object access$getKey(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r1, r2);

        if $r5 != null goto label1;

        r6 = new androidx.compose.runtime.JoinedKey;

        $r5 = r6;

        specialinvoke r6.<androidx.compose.runtime.JoinedKey: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        return $r5;
    }

    public final java.lang.Object nextSlot()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1, $r5;
        boolean $z1, $z2;
        androidx.compose.runtime.SlotReader $r2;
        androidx.compose.runtime.Composer$Companion $r3, $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void validateNodeNotExpected()>();

        $r4 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        goto label3;

     label1:
        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        r1 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: java.lang.Object next()>();

        $z2 = r0.<androidx.compose.runtime.ComposerImpl: boolean reusing>;

        if $z2 == 0 goto label2;

        $r3 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r5 = virtualinvoke $r3.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        goto label3;

     label2:
        $r5 = r1;

     label3:
        return $r5;
    }

    public boolean changed(java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1, $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>(r1);

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean changed(char)
    {
        androidx.compose.runtime.ComposerImpl r0;
        char c0, c1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Character $r2, $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        c0 := @parameter0: char;

        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Character;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Character) r1;

        c1 = virtualinvoke $r3.<java.lang.Character: char charValue()>();

        if c0 != c1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public boolean changed(byte)
    {
        androidx.compose.runtime.ComposerImpl r0;
        byte b0, b1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Byte $r2;
        java.lang.Number $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        b0 := @parameter0: byte;

        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Byte;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r1;

        b1 = virtualinvoke $r3.<java.lang.Number: byte byteValue()>();

        if b0 != b1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public boolean changed(short)
    {
        androidx.compose.runtime.ComposerImpl r0;
        short s0, s1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Short $r2;
        java.lang.Number $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        s0 := @parameter0: short;

        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Short;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r1;

        s1 = virtualinvoke $r3.<java.lang.Number: short shortValue()>();

        if s0 != s1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public boolean changed(boolean)
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0, z1, $z2;
        java.lang.Object r1;
        java.lang.Boolean $r2, $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z2 = r1 instanceof java.lang.Boolean;

        if $z2 == 0 goto label1;

        $r3 = (java.lang.Boolean) r1;

        z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if z0 != z1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public boolean changed(float)
    {
        androidx.compose.runtime.ComposerImpl r0;
        float f0, f1;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Float $r2;
        java.lang.Number $r3;
        byte $b0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        f0 := @parameter0: float;

        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Float;

        if $z0 == 0 goto label3;

        $r3 = (java.lang.Number) r1;

        f1 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        $b0 = f0 cmpg f1;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public boolean changed(long)
    {
        androidx.compose.runtime.ComposerImpl r0;
        long l0, l1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Long $r2;
        java.lang.Number $r3;
        byte $b2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        l0 := @parameter0: long;

        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Long;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r1;

        l1 = virtualinvoke $r3.<java.lang.Number: long longValue()>();

        $b2 = l0 cmp l1;

        if $b2 != 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public boolean changed(double)
    {
        androidx.compose.runtime.ComposerImpl r0;
        double d0, d1;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Double $r2;
        java.lang.Number $r3;
        byte $b0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        d0 := @parameter0: double;

        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Double;

        if $z0 == 0 goto label3;

        $r3 = (java.lang.Number) r1;

        d1 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        $b0 = d0 cmpg d1;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public boolean changed(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Integer $r2;
        java.lang.Number $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r1;

        i1 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        if i0 != i1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>($r2);

        return 1;
    }

    public final java.lang.Object cache(boolean, kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Object r2, $r4, r5;
        androidx.compose.runtime.Composer$Companion $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter0: boolean;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r5 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $r3 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r4 = virtualinvoke $r3.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        if r5 == $r4 goto label1;

        if z0 == 0 goto label2;

     label1:
        r2 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>(r2);

        r5 = r2;

     label2:
        return r5;
    }

    public final void updateValue(java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1;
        int i0, $i1;
        boolean $z0, $z1, $z3;
        androidx.compose.runtime.SlotReader $r2;
        androidx.compose.runtime.ComposerImpl$updateValue$2 $r3;
        kotlin.jvm.functions.Function3 $r4, $r9;
        java.util.Set $r5, $r10;
        androidx.compose.runtime.SlotWriter $r6;
        androidx.compose.runtime.ComposerImpl$updateValue$1 $r8;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        virtualinvoke $r6.<androidx.compose.runtime.SlotWriter: java.lang.Object update(java.lang.Object)>(r1);

        $z3 = r1 instanceof androidx.compose.runtime.RememberObserver;

        if $z3 == 0 goto label3;

        $r8 = new androidx.compose.runtime.ComposerImpl$updateValue$1;

        specialinvoke $r8.<androidx.compose.runtime.ComposerImpl$updateValue$1: void <init>(java.lang.Object)>(r1);

        $r9 = (kotlin.jvm.functions.Function3) $r8;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r9);

        $r10 = r0.<androidx.compose.runtime.ComposerImpl: java.util.Set abandonSet>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label3;

     label1:
        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i1 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: int getGroupSlotIndex()>();

        i0 = $i1 - 1;

        $z1 = r1 instanceof androidx.compose.runtime.RememberObserver;

        if $z1 == 0 goto label2;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: java.util.Set abandonSet>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label2:
        $r3 = new androidx.compose.runtime.ComposerImpl$updateValue$2;

        specialinvoke $r3.<androidx.compose.runtime.ComposerImpl$updateValue$2: void <init>(java.lang.Object,int)>(r1, i0);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordSlotTableOperation(boolean,kotlin.jvm.functions.Function3)>(1, $r4);

     label3:
        return;
    }

    public final void updateCachedValue(java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>(r1);

        return;
    }

    public androidx.compose.runtime.tooling.CompositionData getCompositionData()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotTable $r1;
        androidx.compose.runtime.tooling.CompositionData $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        $r2 = (androidx.compose.runtime.tooling.CompositionData) $r1;

        return $r2;
    }

    public void recordSideEffect(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.runtime.ComposerImpl$recordSideEffect$1 $r2;
        kotlin.jvm.functions.Function3 $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "effect");

        $r2 = new androidx.compose.runtime.ComposerImpl$recordSideEffect$1;

        specialinvoke $r2.<androidx.compose.runtime.ComposerImpl$recordSideEffect$1: void <init>(kotlin.jvm.functions.Function0)>(r1);

        $r3 = (kotlin.jvm.functions.Function3) $r2;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r3);

        return;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap currentCompositionLocalScope(java.lang.Integer)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Integer r1, $r12;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap r2, $r3, $r4, r24, r25, $r27, r28;
        boolean $z1, $z2, $z3, $z4;
        androidx.compose.runtime.SlotReader $r5, $r6, $r7, $r8, $r14, $r26;
        int $i0, $i1, i2, $i3, $i4, i5;
        java.lang.Object $r9, $r10, $r13, $r15, $r20, $r21, $r23;
        java.util.HashMap $r11;
        androidx.compose.runtime.SlotWriter $r16, $r17, $r18, $r19, $r22;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.Integer;

        if r1 != null goto label01;

        r24 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache>;

        if r24 == null goto label01;

        r2 = r24;

        return r2;

     label01:
        $z1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z1 == 0 goto label04;

        $z3 = r0.<androidx.compose.runtime.ComposerImpl: boolean writerHasAProvider>;

        if $z3 == 0 goto label04;

        $r16 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        i2 = virtualinvoke $r16.<androidx.compose.runtime.SlotWriter: int getParent()>();

     label02:
        if i2 <= 0 goto label04;

        $r17 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $i1 = virtualinvoke $r17.<androidx.compose.runtime.SlotWriter: int groupKey(int)>(i2);

        if $i1 != 202 goto label03;

        $r19 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r20 = virtualinvoke $r19.<androidx.compose.runtime.SlotWriter: java.lang.Object groupObjectKey(int)>(i2);

        $r21 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getCompositionLocalMap()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r20, $r21);

        if $z4 == 0 goto label03;

        $r22 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r23 = virtualinvoke $r22.<androidx.compose.runtime.SlotWriter: java.lang.Object groupAux(int)>(i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r23, "null cannot be cast to non-null type androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap<androidx.compose.runtime.CompositionLocal<kotlin.Any?>, androidx.compose.runtime.State<kotlin.Any?>>{ androidx.compose.runtime.ComposerKt.CompositionLocalMap }");

        r25 = (androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap) $r23;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = r25;

        return r25;

     label03:
        $r18 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        i2 = virtualinvoke $r18.<androidx.compose.runtime.SlotWriter: int parent(int)>(i2);

        goto label02;

     label04:
        $r26 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i3 = virtualinvoke $r26.<androidx.compose.runtime.SlotReader: int getSize()>();

        if $i3 <= 0 goto label10;

        if r1 == null goto label05;

        $i4 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        goto label06;

     label05:
        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i4 = virtualinvoke $r5.<androidx.compose.runtime.SlotReader: int getParent()>();

     label06:
        i5 = $i4;

     label07:
        if i5 <= 0 goto label10;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i0 = virtualinvoke $r6.<androidx.compose.runtime.SlotReader: int groupKey(int)>(i5);

        if $i0 != 202 goto label09;

        $r8 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r9 = virtualinvoke $r8.<androidx.compose.runtime.SlotReader: java.lang.Object groupObjectKey(int)>(i5);

        $r10 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getCompositionLocalMap()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, $r10);

        if $z2 == 0 goto label09;

        $r11 = r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap providerUpdates>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r13 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r12);

        $r27 = (androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap) $r13;

        if $r27 != null goto label08;

        $r14 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r15 = virtualinvoke $r14.<androidx.compose.runtime.SlotReader: java.lang.Object groupAux(int)>(i5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r15, "null cannot be cast to non-null type androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap<androidx.compose.runtime.CompositionLocal<kotlin.Any?>, androidx.compose.runtime.State<kotlin.Any?>>{ androidx.compose.runtime.ComposerKt.CompositionLocalMap }");

        $r27 = (androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap) $r15;

     label08:
        r28 = $r27;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = r28;

        return r28;

     label09:
        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i5 = virtualinvoke $r7.<androidx.compose.runtime.SlotReader: int parent(int)>(i5);

        goto label07;

     label10:
        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap parentProvider>;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = $r3;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap parentProvider>;

        return $r4;
    }

    static androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap currentCompositionLocalScope$default(androidx.compose.runtime.ComposerImpl, java.lang.Integer, int, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r2;
        java.lang.Integer r3;

        r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        r3 := @parameter1: java.lang.Integer;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap currentCompositionLocalScope(java.lang.Integer)>(r3);

        return $r2;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap updateProviderMapGroup(androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap, androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap r1, r2, r3;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap$Builder r4;
        java.util.Map r5, $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap;

        r2 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap;

        r4 = interfaceinvoke r1.<androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap$Builder builder()>();

        r5 = (java.util.Map) r4;

        $r6 = (java.util.Map) r2;

        interfaceinvoke r5.<java.util.Map: void putAll(java.util.Map)>($r6);

        r3 = interfaceinvoke r4.<androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap$Builder: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap build()>();

        $r7 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getProviderMaps()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startGroup(int,java.lang.Object)>(204, $r7);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean changed(java.lang.Object)>(r3);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean changed(java.lang.Object)>(r2);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        return r3;
    }

    public void startProviders(androidx.compose.runtime.ProvidedValue[])
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.ProvidedValue[] r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap r2, r3, r4, r5, r20;
        java.lang.Object $r6, $r7, $r11, $r13, $r15, $r22;
        androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1 $r8;
        androidx.compose.runtime.Composer $r9;
        kotlin.jvm.functions.Function2 $r10;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, $z7;
        androidx.compose.runtime.SlotReader $r12, $r14, $r17;
        java.util.HashMap $r16;
        java.util.Map $r18;
        int $i0, $i1;
        java.lang.Integer $r19;
        androidx.compose.runtime.IntStack $r21;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.ProvidedValue[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "values");

        r2 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap currentCompositionLocalScope$default(androidx.compose.runtime.ComposerImpl,java.lang.Integer,int,java.lang.Object)>(r0, null, 1, null);

        $r6 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getProvider()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startGroup(int,java.lang.Object)>(201, $r6);

        $r7 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getProviderValues()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startGroup(int,java.lang.Object)>(203, $r7);

        $r9 = (androidx.compose.runtime.Composer) r0;

        $r8 = new androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1;

        specialinvoke $r8.<androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1: void <init>(androidx.compose.runtime.ProvidedValue[],androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)>(r1, r2);

        $r10 = (kotlin.jvm.functions.Function2) $r8;

        $r11 = staticinvoke <androidx.compose.runtime.ActualJvm_jvmKt: java.lang.Object invokeComposableForResult(androidx.compose.runtime.Composer,kotlin.jvm.functions.Function2)>($r9, $r10);

        r3 = (androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap) $r11;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        $z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z0 == 0 goto label1;

        r20 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap updateProviderMapGroup(androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)>(r2, r3);

        z5 = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean writerHasAProvider> = 1;

        goto label6;

     label1:
        $r12 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r13 = virtualinvoke $r12.<androidx.compose.runtime.SlotReader: java.lang.Object groupGet(int)>(0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r13, "null cannot be cast to non-null type androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap<androidx.compose.runtime.CompositionLocal<kotlin.Any?>, androidx.compose.runtime.State<kotlin.Any?>>{ androidx.compose.runtime.ComposerKt.CompositionLocalMap }");

        r4 = (androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap) $r13;

        $r14 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r15 = virtualinvoke $r14.<androidx.compose.runtime.SlotReader: java.lang.Object groupGet(int)>(1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r15, "null cannot be cast to non-null type androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap<androidx.compose.runtime.CompositionLocal<kotlin.Any?>, androidx.compose.runtime.State<kotlin.Any?>>{ androidx.compose.runtime.ComposerKt.CompositionLocalMap }");

        r5 = (androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap) $r15;

        $z1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getSkipping()>();

        if $z1 == 0 goto label2;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r5, r3);

        if $z4 != 0 goto label5;

     label2:
        r20 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap updateProviderMapGroup(androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)>(r2, r3);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r20, r4);

        if $z2 != 0 goto label3;

        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        z5 = $z6;

        goto label6;

     label5:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void skipGroup()>();

        r20 = r4;

        z5 = 0;

     label6:
        if z5 == 0 goto label7;

        $z3 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z3 != 0 goto label7;

        $r16 = r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap providerUpdates>;

        $r18 = (java.util.Map) $r16;

        $r17 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i0 = virtualinvoke $r17.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r20);

     label7:
        $r21 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack providersInvalidStack>;

        $z7 = r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid>;

        $i1 = staticinvoke <androidx.compose.runtime.ComposerKt: int access$asInt(boolean)>($z7);

        virtualinvoke $r21.<androidx.compose.runtime.IntStack: void push(int)>($i1);

        r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid> = z5;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = r20;

        $r22 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getCompositionLocalMap()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(202, $r22, 0, r20);

        return;
    }

    public void endProviders()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.IntStack $r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack providersInvalidStack>;

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.IntStack: int pop()>();

        $z0 = staticinvoke <androidx.compose.runtime.ComposerKt: boolean access$asBool(int)>($i0);

        r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid> = $z0;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = null;

        return;
    }

    public java.lang.Object consume(androidx.compose.runtime.CompositionLocal)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.CompositionLocal r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.CompositionLocal;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        $r2 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap currentCompositionLocalScope$default(androidx.compose.runtime.ComposerImpl,java.lang.Integer,int,java.lang.Object)>(r0, null, 1, null);

        $r3 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object resolveCompositionLocal(androidx.compose.runtime.CompositionLocal,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)>(r1, $r2);

        return $r3;
    }

    public androidx.compose.runtime.CompositionContext buildContext()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1, $r2;
        boolean $z0, $z1, $z2;
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl $r3, $r5, $r8;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r4;
        androidx.compose.runtime.CompositionContext $r6;
        androidx.compose.runtime.ComposerImpl$CompositionContextHolder $r7, $r10, r11;
        int $i0;
        androidx.compose.runtime.SlotWriter $r9;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r2 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getReference()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startGroup(int,java.lang.Object)>(206, $r2);

        $z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        staticinvoke <androidx.compose.runtime.SlotWriter: void markGroup$default(androidx.compose.runtime.SlotWriter,int,int,java.lang.Object)>($r9, 0, 1, null);

     label1:
        r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        $z1 = r1 instanceof androidx.compose.runtime.ComposerImpl$CompositionContextHolder;

        if $z1 == 0 goto label2;

        $r10 = (androidx.compose.runtime.ComposerImpl$CompositionContextHolder) r1;

        goto label3;

     label2:
        $r10 = null;

     label3:
        r11 = $r10;

        if r11 != null goto label4;

        $r7 = new androidx.compose.runtime.ComposerImpl$CompositionContextHolder;

        $r8 = new androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $i0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: int getCompoundKeyHash()>();

        $z2 = r0.<androidx.compose.runtime.ComposerImpl: boolean forceRecomposeScopes>;

        specialinvoke $r8.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: void <init>(androidx.compose.runtime.ComposerImpl,int,boolean)>(r0, $i0, $z2);

        specialinvoke $r7.<androidx.compose.runtime.ComposerImpl$CompositionContextHolder: void <init>(androidx.compose.runtime.ComposerImpl$CompositionContextImpl)>($r8);

        r11 = $r7;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>(r11);

     label4:
        $r3 = virtualinvoke r11.<androidx.compose.runtime.ComposerImpl$CompositionContextHolder: androidx.compose.runtime.ComposerImpl$CompositionContextImpl getRef()>();

        $r4 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap currentCompositionLocalScope$default(androidx.compose.runtime.ComposerImpl,java.lang.Integer,int,java.lang.Object)>(r0, null, 1, null);

        virtualinvoke $r3.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: void updateCompositionLocalScope(androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)>($r4);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        $r5 = virtualinvoke r11.<androidx.compose.runtime.ComposerImpl$CompositionContextHolder: androidx.compose.runtime.ComposerImpl$CompositionContextImpl getRef()>();

        $r6 = (androidx.compose.runtime.CompositionContext) $r5;

        return $r6;
    }

    private final java.lang.Object resolveCompositionLocal(androidx.compose.runtime.CompositionLocal, androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.CompositionLocal r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap r2;
        boolean $z0;
        androidx.compose.runtime.LazyValueHolder $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.CompositionLocal;

        r2 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap;

        $z0 = staticinvoke <androidx.compose.runtime.ComposerKt: boolean contains(androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap,androidx.compose.runtime.CompositionLocal)>(r2, r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getValueOf(androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap,androidx.compose.runtime.CompositionLocal)>(r2, r1);

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<androidx.compose.runtime.CompositionLocal: androidx.compose.runtime.LazyValueHolder getDefaultValueHolder$runtime_release()>();

        $r4 = virtualinvoke $r3.<androidx.compose.runtime.LazyValueHolder: java.lang.Object getValue()>();

     label2:
        return $r4;
    }

    public final int getChangeCount$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public final androidx.compose.runtime.RecomposeScopeImpl getCurrentRecomposeScope$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.Stack r1;
        int $i0;
        boolean $z1;
        java.lang.Object $r2;
        androidx.compose.runtime.RecomposeScopeImpl $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl: int childrenComposing>;

        if $i0 != 0 goto label1;

        $z1 = virtualinvoke r1.<androidx.compose.runtime.Stack: boolean isNotEmpty()>();

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r1.<androidx.compose.runtime.Stack: java.lang.Object peek()>();

        $r3 = (androidx.compose.runtime.RecomposeScopeImpl) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    private final void ensureWriter()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotWriter $r1, $r3, $r4;
        boolean $z0;
        androidx.compose.runtime.SlotTable $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.SlotWriter: boolean getClosed()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer> = $r3;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        virtualinvoke $r4.<androidx.compose.runtime.SlotWriter: void skipToGroupEnd()>();

        r0.<androidx.compose.runtime.ComposerImpl: boolean writerHasAProvider> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = null;

     label1:
        return;
    }

    private final void createFreshInsertTable()
    {
        androidx.compose.runtime.ComposerImpl r0, r3;
        androidx.compose.runtime.SlotWriter r1, r2, $r4;
        boolean $z1;
        androidx.compose.runtime.SlotTable $r5, $r6;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $z1 = virtualinvoke $r4.<androidx.compose.runtime.SlotWriter: boolean getClosed()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z1);

        $r5 = new androidx.compose.runtime.SlotTable;

        specialinvoke $r5.<androidx.compose.runtime.SlotTable: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable> = $r5;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        r1 = virtualinvoke $r6.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

        r2 = r1;

        r3 = r0;

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void close()>();

        r3.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer> = r1;

        return;
    }

    private final void startReaderGroup(boolean, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0;
        java.lang.Object r1, $r3;
        androidx.compose.runtime.SlotReader $r2, $r6, $r7;
        androidx.compose.runtime.ComposerImpl$startReaderGroup$1 $r4;
        kotlin.jvm.functions.Function3 $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Object;

        if z0 == 0 goto label1;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r6.<androidx.compose.runtime.SlotReader: void startNode()>();

        goto label3;

     label1:
        if r1 == null goto label2;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: java.lang.Object getGroupAux()>();

        if $r3 == r1 goto label2;

        $r4 = new androidx.compose.runtime.ComposerImpl$startReaderGroup$1;

        specialinvoke $r4.<androidx.compose.runtime.ComposerImpl$startReaderGroup$1: void <init>(java.lang.Object)>(r1);

        $r5 = (kotlin.jvm.functions.Function3) $r4;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void recordSlotTableOperation$default(androidx.compose.runtime.ComposerImpl,boolean,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r5, 1, null);

     label2:
        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r7.<androidx.compose.runtime.SlotReader: void startGroup()>();

     label3:
        return;
    }

    private final void start(int, java.lang.Object, boolean, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i15, i16, i17, $i18, i19, i20, $i21, $i22, $i23, $i24, $i25;
        java.lang.Object r1, r2, $r16, $r25, $r36, $r37, $r38, $r44, $r45;
        boolean z0, $z1, $z4;
        androidx.compose.runtime.KeyInfo r3, $r29, r41, $r48;
        androidx.compose.runtime.Pending $r4, $r9, $r21, $r39, r40, r42, r43;
        androidx.compose.runtime.SlotReader $r5, $r17, $r20, $r22, $r24, $r26;
        androidx.compose.runtime.SlotWriter $r6, $r7, $r8, $r12, $r15, $r27, $r28, $r32, $r35, $r46;
        java.util.List $r10, $r23;
        androidx.compose.runtime.Composer$Companion $r11, $r13, $r14, $r31, $r33, $r34;
        androidx.compose.runtime.ComposerImpl$start$2 $r18;
        kotlin.jvm.functions.Function3 $r19;
        java.lang.Integer $r30, $r49;
        androidx.compose.runtime.Anchor $r47;
        java.util.ArrayList $r51;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Object;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void validateNodeNotExpected()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeEnterGroup(int,java.lang.Object,java.lang.Object)>(i0, r1, r2);

        $z1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z1 == 0 goto label07;

        $r26 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r26.<androidx.compose.runtime.SlotReader: void beginEmpty()>();

        $r27 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        i15 = virtualinvoke $r27.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        if z0 == 0 goto label01;

        $r35 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r34 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r36 = virtualinvoke $r34.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        virtualinvoke $r35.<androidx.compose.runtime.SlotWriter: void startNode(java.lang.Object)>($r36);

        goto label05;

     label01:
        if r2 == null goto label03;

        $r32 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r37 = r1;

        if r1 != null goto label02;

        $r33 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r37 = virtualinvoke $r33.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

     label02:
        virtualinvoke $r32.<androidx.compose.runtime.SlotWriter: void startData(int,java.lang.Object,java.lang.Object)>(i0, $r37, r2);

        goto label05;

     label03:
        $r28 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r38 = r1;

        if r1 != null goto label04;

        $r31 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r38 = virtualinvoke $r31.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

     label04:
        virtualinvoke $r28.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object)>(i0, $r38);

     label05:
        $r39 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending>;

        if $r39 == null goto label06;

        r40 = $r39;

        $r29 = new androidx.compose.runtime.KeyInfo;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $i9 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int insertedGroupVirtualIndex(int)>(i15);

        specialinvoke $r29.<androidx.compose.runtime.KeyInfo: void <init>(int,java.lang.Object,int,int,int)>(i0, $r30, $i9, -1, 0);

        r41 = $r29;

        $i10 = r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex>;

        $i11 = virtualinvoke r40.<androidx.compose.runtime.Pending: int getStartIndex()>();

        $i12 = $i10 - $i11;

        virtualinvoke r40.<androidx.compose.runtime.Pending: void registerInsert(androidx.compose.runtime.KeyInfo,int)>(r41, $i12);

        virtualinvoke r40.<androidx.compose.runtime.Pending: boolean recordUsed(androidx.compose.runtime.KeyInfo)>(r41);

        goto label06;

     label06:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void enterGroup(boolean,androidx.compose.runtime.Pending)>(z0, null);

        return;

     label07:
        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending>;

        if $r4 != null goto label09;

        $r20 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i16 = virtualinvoke $r20.<androidx.compose.runtime.SlotReader: int getGroupKey()>();

        if i16 != i0 goto label08;

        $r24 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r25 = virtualinvoke $r24.<androidx.compose.runtime.SlotReader: java.lang.Object getGroupObjectKey()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r25);

        if $z4 == 0 goto label08;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startReaderGroup(boolean,java.lang.Object)>(z0, r2);

        goto label09;

     label08:
        $r21 = new androidx.compose.runtime.Pending;

        $r22 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r23 = virtualinvoke $r22.<androidx.compose.runtime.SlotReader: java.util.List extractKeys()>();

        $i8 = r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex>;

        specialinvoke $r21.<androidx.compose.runtime.Pending: void <init>(java.util.List,int)>($r23, $i8);

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending> = $r21;

     label09:
        r42 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending>;

        r43 = null;

        if r42 == null goto label19;

        r3 = virtualinvoke r42.<androidx.compose.runtime.Pending: androidx.compose.runtime.KeyInfo getNext(int,java.lang.Object)>(i0, r1);

        if r3 == null goto label11;

        virtualinvoke r42.<androidx.compose.runtime.Pending: boolean recordUsed(androidx.compose.runtime.KeyInfo)>(r3);

        i17 = virtualinvoke r3.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        $i3 = virtualinvoke r42.<androidx.compose.runtime.Pending: int nodePositionOf(androidx.compose.runtime.KeyInfo)>(r3);

        $i4 = virtualinvoke r42.<androidx.compose.runtime.Pending: int getStartIndex()>();

        $i5 = $i3 + $i4;

        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = $i5;

        $i18 = virtualinvoke r42.<androidx.compose.runtime.Pending: int slotPositionOf(androidx.compose.runtime.KeyInfo)>(r3);

        $i6 = virtualinvoke r42.<androidx.compose.runtime.Pending: int getGroupIndex()>();

        i19 = $i18 - $i6;

        $i7 = virtualinvoke r42.<androidx.compose.runtime.Pending: int getGroupIndex()>();

        virtualinvoke r42.<androidx.compose.runtime.Pending: void registerMoveSlot(int,int)>($i18, $i7);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordReaderMoving(int)>(i17);

        $r17 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r17.<androidx.compose.runtime.SlotReader: void reposition(int)>(i17);

        if i19 <= 0 goto label10;

        $r18 = new androidx.compose.runtime.ComposerImpl$start$2;

        specialinvoke $r18.<androidx.compose.runtime.ComposerImpl$start$2: void <init>(int)>(i19);

        $r19 = (kotlin.jvm.functions.Function3) $r18;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordSlotEditingOperation(kotlin.jvm.functions.Function3)>($r19);

     label10:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startReaderGroup(boolean,java.lang.Object)>(z0, r2);

        goto label19;

     label11:
        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r5.<androidx.compose.runtime.SlotReader: void beginEmpty()>();

        r0.<androidx.compose.runtime.ComposerImpl: boolean inserting> = 1;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = null;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void ensureWriter()>();

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        virtualinvoke $r6.<androidx.compose.runtime.SlotWriter: void beginInsert()>();

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        i20 = virtualinvoke $r7.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        if z0 == 0 goto label12;

        $r15 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r14 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r16 = virtualinvoke $r14.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        virtualinvoke $r15.<androidx.compose.runtime.SlotWriter: void startNode(java.lang.Object)>($r16);

        goto label16;

     label12:
        if r2 == null goto label14;

        $r12 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r44 = r1;

        if r1 != null goto label13;

        $r13 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r44 = virtualinvoke $r13.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

     label13:
        virtualinvoke $r12.<androidx.compose.runtime.SlotWriter: void startData(int,java.lang.Object,java.lang.Object)>(i0, $r44, r2);

        goto label16;

     label14:
        $r8 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r45 = r1;

        if r1 != null goto label15;

        $r11 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r45 = virtualinvoke $r11.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

     label15:
        virtualinvoke $r8.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object)>(i0, $r45);

     label16:
        $r46 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r47 = virtualinvoke $r46.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.Anchor anchor(int)>(i20);

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Anchor insertAnchor> = $r47;

        $r48 = new androidx.compose.runtime.KeyInfo;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $i21 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int insertedGroupVirtualIndex(int)>(i20);

        specialinvoke $r48.<androidx.compose.runtime.KeyInfo: void <init>(int,java.lang.Object,int,int,int)>(i0, $r49, $i21, -1, 0);

        $i22 = r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex>;

        $i23 = virtualinvoke r42.<androidx.compose.runtime.Pending: int getStartIndex()>();

        $i24 = $i22 - $i23;

        virtualinvoke r42.<androidx.compose.runtime.Pending: void registerInsert(androidx.compose.runtime.KeyInfo,int)>($r48, $i24);

        virtualinvoke r42.<androidx.compose.runtime.Pending: boolean recordUsed(androidx.compose.runtime.KeyInfo)>($r48);

        $r9 = new androidx.compose.runtime.Pending;

        $r51 = new java.util.ArrayList;

        specialinvoke $r51.<java.util.ArrayList: void <init>()>();

        $r10 = (java.util.List) $r51;

        if z0 == 0 goto label17;

        $i25 = 0;

        goto label18;

     label17:
        $i25 = r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex>;

     label18:
        specialinvoke $r9.<androidx.compose.runtime.Pending: void <init>(java.util.List,int)>($r10, $i25);

        r43 = $r9;

     label19:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void enterGroup(boolean,androidx.compose.runtime.Pending)>(z0, r43);

        return;
    }

    private final void enterGroup(boolean, androidx.compose.runtime.Pending)
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0;
        androidx.compose.runtime.Pending r1, $r2;
        androidx.compose.runtime.Stack $r3;
        int $i0, $i1;
        androidx.compose.runtime.IntStack $r4, $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.compose.runtime.Pending;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack pendingStack>;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending>;

        virtualinvoke $r3.<androidx.compose.runtime.Stack: boolean push(java.lang.Object)>($r2);

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending> = r1;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack nodeIndexStack>;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex>;

        virtualinvoke $r4.<androidx.compose.runtime.IntStack: void push(int)>($i0);

        if z0 == 0 goto label1;

        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = 0;

     label1:
        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack groupNodeCountStack>;

        $i1 = r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount>;

        virtualinvoke $r5.<androidx.compose.runtime.IntStack: void push(int)>($i1);

        r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount> = 0;

        return;
    }

    private final void exitGroup(int, boolean)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        androidx.compose.runtime.Pending r1;
        androidx.compose.runtime.Stack $r2;
        java.lang.Object $r3;
        androidx.compose.runtime.IntStack $r4, $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack pendingStack>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.Stack: java.lang.Object pop()>();

        r1 = (androidx.compose.runtime.Pending) $r3;

        if r1 == null goto label1;

        if z0 != 0 goto label1;

        i1 = virtualinvoke r1.<androidx.compose.runtime.Pending: int getGroupIndex()>();

        $i2 = i1 + 1;

        virtualinvoke r1.<androidx.compose.runtime.Pending: void setGroupIndex(int)>($i2);

     label1:
        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending> = r1;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack nodeIndexStack>;

        $i3 = virtualinvoke $r4.<androidx.compose.runtime.IntStack: int pop()>();

        $i4 = $i3 + i0;

        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = $i4;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack groupNodeCountStack>;

        $i5 = virtualinvoke $r5.<androidx.compose.runtime.IntStack: int pop()>();

        $i6 = $i5 + i0;

        r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount> = $i6;

        return;
    }

    private final void end(boolean)
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z8, z9;
        androidx.compose.runtime.Pending r1;
        int i0, i1, i2, i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31, i32, i33, $i34, i35, i36, i37, i38, i39, i40, i41;
        androidx.compose.runtime.KeyInfo r2, r43;
        androidx.compose.runtime.SlotReader $r3, $r4, $r5, $r7, $r9, $r10, $r11, $r14, $r19, $r20, $r21, $r25, $r26, $r29, $r30, $r32, $r44;
        java.lang.Object $r6, $r8, $r27, $r28, $r36, $r38;
        androidx.compose.runtime.SlotWriter $r12, $r13, $r15, $r16, $r33, $r34, $r35, $r37;
        androidx.compose.runtime.Anchor $r17;
        androidx.compose.runtime.SlotTable $r18;
        java.util.List $r22, $r23, $r31, r39, r40;
        java.util.LinkedHashSet $r24;
        java.util.Set r41, r42;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z1 == 0 goto label01;

        $r33 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        i27 = virtualinvoke $r33.<androidx.compose.runtime.SlotWriter: int getParent()>();

        $r34 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $i26 = virtualinvoke $r34.<androidx.compose.runtime.SlotWriter: int groupKey(int)>(i27);

        $r35 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r36 = virtualinvoke $r35.<androidx.compose.runtime.SlotWriter: java.lang.Object groupObjectKey(int)>(i27);

        $r37 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r38 = virtualinvoke $r37.<androidx.compose.runtime.SlotWriter: java.lang.Object groupAux(int)>(i27);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeExitGroup(int,java.lang.Object,java.lang.Object)>($i26, $r36, $r38);

        goto label02;

     label01:
        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i28 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: int getParent()>();

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i4 = virtualinvoke $r4.<androidx.compose.runtime.SlotReader: int groupKey(int)>(i28);

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.SlotReader: java.lang.Object groupObjectKey(int)>(i28);

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r8 = virtualinvoke $r7.<androidx.compose.runtime.SlotReader: java.lang.Object groupAux(int)>(i28);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeExitGroup(int,java.lang.Object,java.lang.Object)>($i4, $r6, $r8);

     label02:
        i29 = r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount>;

        r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending>;

        if r1 == null goto label09;

        $r23 = virtualinvoke r1.<androidx.compose.runtime.Pending: java.util.List getKeyInfos()>();

        $i7 = interfaceinvoke $r23.<java.util.List: int size()>();

        if $i7 <= 0 goto label09;

        r39 = virtualinvoke r1.<androidx.compose.runtime.Pending: java.util.List getKeyInfos()>();

        r40 = virtualinvoke r1.<androidx.compose.runtime.Pending: java.util.List getUsed()>();

        r41 = staticinvoke <androidx.compose.runtime.snapshots.ListUtilsKt: java.util.Set fastToSet(java.util.List)>(r40);

        $r24 = new java.util.LinkedHashSet;

        specialinvoke $r24.<java.util.LinkedHashSet: void <init>()>();

        r42 = (java.util.Set) $r24;

        i30 = 0;

        i0 = interfaceinvoke r40.<java.util.List: int size()>();

        i31 = 0;

        i1 = interfaceinvoke r39.<java.util.List: int size()>();

        i32 = 0;

     label03:
        if i31 >= i1 goto label08;

        $r27 = interfaceinvoke r39.<java.util.List: java.lang.Object get(int)>(i31);

        r2 = (androidx.compose.runtime.KeyInfo) $r27;

        $z4 = interfaceinvoke r41.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z4 != 0 goto label04;

        i33 = virtualinvoke r1.<androidx.compose.runtime.Pending: int nodePositionOf(androidx.compose.runtime.KeyInfo)>(r2);

        $i14 = virtualinvoke r1.<androidx.compose.runtime.Pending: int getStartIndex()>();

        $i15 = i33 + $i14;

        $i16 = virtualinvoke r2.<androidx.compose.runtime.KeyInfo: int getNodes()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordRemoveNode(int,int)>($i15, $i16);

        $i17 = virtualinvoke r2.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        virtualinvoke r1.<androidx.compose.runtime.Pending: boolean updateNodeCount(int,int)>($i17, 0);

        $i18 = virtualinvoke r2.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordReaderMoving(int)>($i18);

        $r29 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i19 = virtualinvoke r2.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        virtualinvoke $r29.<androidx.compose.runtime.SlotReader: void reposition(int)>($i19);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordDelete()>();

        $r30 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r30.<androidx.compose.runtime.SlotReader: int skipGroup()>();

        $r31 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $i21 = virtualinvoke r2.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        $i22 = virtualinvoke r2.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        $r32 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i23 = virtualinvoke r2.<androidx.compose.runtime.KeyInfo: int getLocation()>();

        $i24 = virtualinvoke $r32.<androidx.compose.runtime.SlotReader: int groupSize(int)>($i23);

        $i25 = $i22 + $i24;

        staticinvoke <androidx.compose.runtime.ComposerKt: void access$removeRange(java.util.List,int,int)>($r31, $i21, $i25);

        i31 = i31 + 1;

        goto label03;

     label04:
        $z5 = interfaceinvoke r42.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z5 == 0 goto label05;

        i31 = i31 + 1;

        goto label03;

     label05:
        if i30 >= i0 goto label03;

        $r28 = interfaceinvoke r40.<java.util.List: java.lang.Object get(int)>(i30);

        r43 = (androidx.compose.runtime.KeyInfo) $r28;

        if r43 == r2 goto label06;

        i2 = virtualinvoke r1.<androidx.compose.runtime.Pending: int nodePositionOf(androidx.compose.runtime.KeyInfo)>(r43);

        interfaceinvoke r42.<java.util.Set: boolean add(java.lang.Object)>(r43);

        if i2 == i32 goto label07;

        i3 = virtualinvoke r1.<androidx.compose.runtime.Pending: int updatedNodeCountOf(androidx.compose.runtime.KeyInfo)>(r43);

        $i10 = virtualinvoke r1.<androidx.compose.runtime.Pending: int getStartIndex()>();

        $i11 = i2 + $i10;

        $i12 = virtualinvoke r1.<androidx.compose.runtime.Pending: int getStartIndex()>();

        $i13 = i32 + $i12;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordMoveNode(int,int,int)>($i11, $i13, i3);

        virtualinvoke r1.<androidx.compose.runtime.Pending: void registerMoveNode(int,int,int)>(i2, i32, i3);

        goto label07;

     label06:
        i31 = i31 + 1;

     label07:
        i30 = i30 + 1;

        $i34 = virtualinvoke r1.<androidx.compose.runtime.Pending: int updatedNodeCountOf(androidx.compose.runtime.KeyInfo)>(r43);

        i32 = i32 + $i34;

        goto label03;

     label08:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeMovement()>();

        $i8 = interfaceinvoke r39.<java.util.List: int size()>();

        if $i8 <= 0 goto label09;

        $r25 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i9 = virtualinvoke $r25.<androidx.compose.runtime.SlotReader: int getGroupEnd()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordReaderMoving(int)>($i9);

        $r26 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r26.<androidx.compose.runtime.SlotReader: void skipToGroupEnd()>();

     label09:
        i35 = r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex>;

     label10:
        $r44 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z8 = virtualinvoke $r44.<androidx.compose.runtime.SlotReader: boolean isGroupEnd()>();

        if $z8 != 0 goto label11;

        $r19 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i36 = virtualinvoke $r19.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordDelete()>();

        $r20 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i37 = virtualinvoke $r20.<androidx.compose.runtime.SlotReader: int skipGroup()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordRemoveNode(int,int)>(i35, i37);

        $r22 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $r21 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i6 = virtualinvoke $r21.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: void access$removeRange(java.util.List,int,int)>($r22, i36, $i6);

        goto label10;

     label11:
        z9 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if z9 == 0 goto label13;

        if z0 == 0 goto label12;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void registerInsertUpFixup()>();

        i29 = 1;

     label12:
        $r11 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r11.<androidx.compose.runtime.SlotReader: void endEmpty()>();

        $r12 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        i38 = virtualinvoke $r12.<androidx.compose.runtime.SlotWriter: int getParent()>();

        $r13 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        virtualinvoke $r13.<androidx.compose.runtime.SlotWriter: int endGroup()>();

        $r14 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z2 = virtualinvoke $r14.<androidx.compose.runtime.SlotReader: boolean getInEmpty()>();

        if $z2 != 0 goto label17;

        i39 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int insertedGroupVirtualIndex(int)>(i38);

        $r15 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        virtualinvoke $r15.<androidx.compose.runtime.SlotWriter: void endInsert()>();

        $r16 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        virtualinvoke $r16.<androidx.compose.runtime.SlotWriter: void close()>();

        $r17 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Anchor insertAnchor>;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordInsert(androidx.compose.runtime.Anchor)>($r17);

        r0.<androidx.compose.runtime.ComposerImpl: boolean inserting> = 0;

        $r18 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        $z3 = virtualinvoke $r18.<androidx.compose.runtime.SlotTable: boolean isEmpty()>();

        if $z3 != 0 goto label17;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateNodeCount(int,int)>(i39, 0);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateNodeCountOverrides(int,int)>(i39, i29);

        goto label17;

     label13:
        if z0 == 0 goto label14;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordUp()>();

     label14:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordEndGroup()>();

        $r9 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i40 = virtualinvoke $r9.<androidx.compose.runtime.SlotReader: int getParent()>();

        i41 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int updatedNodeCount(int)>(i40);

        if i29 == i41 goto label15;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateNodeCountOverrides(int,int)>(i40, i29);

     label15:
        if z0 == 0 goto label16;

        i29 = 1;

     label16:
        $r10 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r10.<androidx.compose.runtime.SlotReader: void endGroup()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeMovement()>();

     label17:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void exitGroup(int,boolean)>(i29, z9);

        return;
    }

    private final void recomposeToGroupEnd()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0, $z1, z3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        androidx.compose.runtime.SlotReader $r1, $r2, $r3, $r5, $r13, $r15, $r16, $r17, $r20;
        java.util.List $r4, $r6, $r14;
        androidx.compose.runtime.Stack $r8, $r11;
        androidx.compose.runtime.RecomposeScopeImpl $r9, $r10, $r18;
        androidx.compose.runtime.Composer $r19;
        androidx.compose.runtime.Invalidation r21;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing>;

        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = 1;

        z3 = 0;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i0 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getParent()>();

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i6 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: int groupSize(int)>(i0);

        i1 = i0 + $i6;

        i2 = r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex>;

        i3 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: int getCompoundKeyHash()>();

        i4 = r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount>;

        i14 = i0;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i7 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        r21 = staticinvoke <androidx.compose.runtime.ComposerKt: androidx.compose.runtime.Invalidation access$firstInRange(java.util.List,int,int)>($r4, $i7, i1);

     label1:
        if r21 == null goto label4;

        i15 = virtualinvoke r21.<androidx.compose.runtime.Invalidation: int getLocation()>();

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        staticinvoke <androidx.compose.runtime.ComposerKt: androidx.compose.runtime.Invalidation access$removeLocation(java.util.List,int)>($r6, i15);

        $z1 = virtualinvoke r21.<androidx.compose.runtime.Invalidation: boolean isInvalid()>();

        if $z1 == 0 goto label2;

        z3 = 1;

        $r15 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r15.<androidx.compose.runtime.SlotReader: void reposition(int)>(i15);

        $r16 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i5 = virtualinvoke $r16.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordUpsAndDowns(int,int,int)>(i14, i5, i0);

        i14 = i5;

        $i11 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int nodeIndexOf(int,int,int,int)>(i15, i5, i0, i2);

        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = $i11;

        $r17 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i12 = virtualinvoke $r17.<androidx.compose.runtime.SlotReader: int parent(int)>(i5);

        $i13 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyOf(int,int,int)>($i12, i0, i3);

        r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash> = $i13;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = null;

        $r18 = virtualinvoke r21.<androidx.compose.runtime.Invalidation: androidx.compose.runtime.RecomposeScopeImpl getScope()>();

        $r19 = (androidx.compose.runtime.Composer) r0;

        virtualinvoke $r18.<androidx.compose.runtime.RecomposeScopeImpl: void compose(androidx.compose.runtime.Composer)>($r19);

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = null;

        $r20 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r20.<androidx.compose.runtime.SlotReader: void restoreParent(int)>(i0);

        goto label3;

     label2:
        $r8 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>;

        $r9 = virtualinvoke r21.<androidx.compose.runtime.Invalidation: androidx.compose.runtime.RecomposeScopeImpl getScope()>();

        virtualinvoke $r8.<androidx.compose.runtime.Stack: boolean push(java.lang.Object)>($r9);

        $r10 = virtualinvoke r21.<androidx.compose.runtime.Invalidation: androidx.compose.runtime.RecomposeScopeImpl getScope()>();

        virtualinvoke $r10.<androidx.compose.runtime.RecomposeScopeImpl: void rereadTrackedInstances()>();

        $r11 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>;

        virtualinvoke $r11.<androidx.compose.runtime.Stack: java.lang.Object pop()>();

     label3:
        $r14 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $r13 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i10 = virtualinvoke $r13.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        r21 = staticinvoke <androidx.compose.runtime.ComposerKt: androidx.compose.runtime.Invalidation access$firstInRange(java.util.List,int,int)>($r14, $i10, i1);

        goto label1;

     label4:
        if z3 == 0 goto label5;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordUpsAndDowns(int,int,int)>(i14, i0, i0);

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r5.<androidx.compose.runtime.SlotReader: void skipToGroupEnd()>();

        i16 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int updatedNodeCount(int)>(i0);

        $i8 = i2 + i16;

        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = $i8;

        $i9 = i4 + i16;

        r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount> = $i9;

        goto label6;

     label5:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void skipReaderToGroupEnd()>();

     label6:
        r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash> = i3;

        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = z0;

        return;
    }

    private final int insertedGroupVirtualIndex(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        $i1 = -2 - i0;

        return $i1;
    }

    private final void updateNodeCountOverrides(int, int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, i2, i3, i4, $i5, $i6, i7, i8, i9;
        androidx.compose.runtime.Pending r1;
        androidx.compose.runtime.Stack $r2, $r6;
        androidx.compose.runtime.SlotReader $r3, $r4, $r5;
        boolean $z0, $z1;
        java.lang.Object $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int updatedNodeCount(int)>(i0);

        if i2 == i1 goto label6;

        i3 = i1 - i2;

        i7 = i0;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack pendingStack>;

        $i5 = virtualinvoke $r2.<androidx.compose.runtime.Stack: int getSize()>();

        i8 = $i5 - 1;

     label1:
        if i7 == -1 goto label6;

        $i6 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int updatedNodeCount(int)>(i7);

        i4 = $i6 + i3;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateNodeCount(int,int)>(i7, i4);

        i9 = i8;

     label2:
        if -1 >= i9 goto label4;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack pendingStack>;

        $r7 = virtualinvoke $r6.<androidx.compose.runtime.Stack: java.lang.Object peek(int)>(i9);

        r1 = (androidx.compose.runtime.Pending) $r7;

        if r1 == null goto label3;

        $z1 = virtualinvoke r1.<androidx.compose.runtime.Pending: boolean updateNodeCount(int,int)>(i7, i4);

        if $z1 == 0 goto label3;

        i8 = i9 - 1;

        goto label4;

     label3:
        i9 = i9 + -1;

        goto label2;

     label4:
        if i7 >= 0 goto label5;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i7 = virtualinvoke $r5.<androidx.compose.runtime.SlotReader: int getParent()>();

        goto label1;

     label5:
        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z0 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: boolean isNode(int)>(i7);

        if $z0 != 0 goto label6;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i7 = virtualinvoke $r4.<androidx.compose.runtime.SlotReader: int parent(int)>(i7);

        goto label1;

     label6:
        return;
    }

    private final int nodeIndexOf(int, int, int, int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, i13, i14;
        androidx.compose.runtime.SlotReader $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i11 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int parent(int)>(i1);

     label1:
        if i11 == i2 goto label2;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z1 = virtualinvoke $r5.<androidx.compose.runtime.SlotReader: boolean isNode(int)>(i11);

        if $z1 != 0 goto label2;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i11 = virtualinvoke $r6.<androidx.compose.runtime.SlotReader: int parent(int)>(i11);

        goto label1;

     label2:
        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z0 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: boolean isNode(int)>(i11);

        if $z0 == 0 goto label3;

        $i12 = 0;

        goto label4;

     label3:
        $i12 = i3;

     label4:
        i13 = $i12;

        if i11 != i1 goto label5;

        return i13;

     label5:
        i14 = i11;

        $i6 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int updatedNodeCount(int)>(i11);

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i7 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: int nodeCount(int)>(i1);

        $i8 = $i6 - $i7;

        i4 = i13 + $i8;

     label6:
        if i13 >= i4 goto label8;

        if i14 == i0 goto label8;

        i14 = i14 + 1;

     label7:
        if i14 >= i0 goto label8;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i9 = virtualinvoke $r4.<androidx.compose.runtime.SlotReader: int groupSize(int)>(i14);

        i5 = i14 + $i9;

        if i0 < i5 goto label6;

        $i10 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int updatedNodeCount(int)>(i14);

        i13 = i13 + $i10;

        i14 = i5;

        goto label7;

     label8:
        return i13;
    }

    private final int updatedNodeCount(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, $i2, $i3;
        int[] r1;
        java.util.HashMap r2, $r4;
        androidx.compose.runtime.SlotReader $r3;
        java.lang.Integer $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label3;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap nodeCountVirtualOverrides>;

        if $r4 == null goto label1;

        r2 = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        if $r7 == null goto label1;

        $i3 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i3 = 0;

     label2:
        return $i3;

     label3:
        r1 = r0.<androidx.compose.runtime.ComposerImpl: int[] nodeCountOverrides>;

        if r1 == null goto label4;

        i1 = r1[i0];

        if i1 < 0 goto label4;

        return i1;

     label4:
        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i2 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: int nodeCount(int)>(i0);

        return $i2;
    }

    private final void updateNodeCount(int, int)
    {
        androidx.compose.runtime.ComposerImpl r0, $r8, $r12;
        int i0, i1, $i2, $i3;
        java.lang.Integer r1, $r6;
        androidx.compose.runtime.SlotReader $r2;
        java.util.Map $r3;
        java.util.HashMap $r5, $r7, r9, r10;
        int[] $r11, r13, r14;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int updatedNodeCount(int)>(i0);

        if $i2 == i1 goto label4;

        if i0 >= 0 goto label2;

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap nodeCountVirtualOverrides>;

        if $r7 != null goto label1;

        $r8 = (androidx.compose.runtime.ComposerImpl) r0;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r9 = $r5;

        $r8.<androidx.compose.runtime.ComposerImpl: java.util.HashMap nodeCountVirtualOverrides> = r9;

        $r7 = r9;

     label1:
        r10 = $r7;

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = (java.util.Map) r10;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        goto label4;

     label2:
        $r11 = r0.<androidx.compose.runtime.ComposerImpl: int[] nodeCountOverrides>;

        if $r11 != null goto label3;

        $r12 = (androidx.compose.runtime.ComposerImpl) r0;

        $r2 = $r12.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i3 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: int getSize()>();

        r13 = newarray (int)[$i3];

        staticinvoke <kotlin.collections.ArraysKt: void fill$default(int[],int,int,int,int,java.lang.Object)>(r13, -1, 0, 0, 6, null);

        $r12.<androidx.compose.runtime.ComposerImpl: int[] nodeCountOverrides> = r13;

        $r11 = r13;

     label3:
        r14 = $r11;

        r14[i0] = i1;

     label4:
        return;
    }

    private final void clearUpdatedNodeCounts()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r0.<androidx.compose.runtime.ComposerImpl: int[] nodeCountOverrides> = null;

        r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap nodeCountVirtualOverrides> = null;

        return;
    }

    private final void recordUpsAndDowns(int, int, int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, i2, i3, i4;
        androidx.compose.runtime.SlotReader r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i3 = staticinvoke <androidx.compose.runtime.ComposerKt: int access$nearestCommonRootOf(androidx.compose.runtime.SlotReader,int,int,int)>(r1, i0, i1, i2);

        i4 = i0;

     label1:
        if i4 <= 0 goto label3;

        if i4 == i3 goto label3;

        $z0 = virtualinvoke r1.<androidx.compose.runtime.SlotReader: boolean isNode(int)>(i4);

        if $z0 == 0 goto label2;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordUp()>();

     label2:
        i4 = virtualinvoke r1.<androidx.compose.runtime.SlotReader: int parent(int)>(i4);

        goto label1;

     label3:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void doRecordDownsFor(int,int)>(i1, i3);

        return;
    }

    private final void doRecordDownsFor(int, int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, $i2;
        androidx.compose.runtime.SlotReader $r1, $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= 0 goto label1;

        if i0 == i1 goto label1;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i2 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int parent(int)>(i0);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void doRecordDownsFor(int,int)>($i2, i1);

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z0 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: boolean isNode(int)>(i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r4 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nodeAt(androidx.compose.runtime.SlotReader,int)>($r3, i0);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordDown(java.lang.Object)>($r4);

     label1:
        return;
    }

    private final int compoundKeyOf(int, int, int)
    {
        androidx.compose.runtime.ComposerImpl r0, $r1;
        int i0, i1, i2, i3, $i4, $i6, $i7, $i8;
        byte b5;
        androidx.compose.runtime.SlotReader $r2, $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 != i1 goto label1;

        $i8 = i2;

        goto label3;

     label1:
        $r1 = (androidx.compose.runtime.ComposerImpl) r0;

        $r2 = $r1.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i3 = specialinvoke $r1.<androidx.compose.runtime.ComposerImpl: int groupCompoundKeyPart(androidx.compose.runtime.SlotReader,int)>($r2, i0);

        if i3 != 126665345 goto label2;

        $i8 = i3;

        goto label3;

     label2:
        $r3 = $r1.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i6 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: int parent(int)>(i0);

        $i4 = specialinvoke $r1.<androidx.compose.runtime.ComposerImpl: int compoundKeyOf(int,int,int)>($i6, i1, i2);

        b5 = 3;

        $i7 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i4, b5);

        $i8 = $i7 ^ i3;

     label3:
        return $i8;
    }

    private final int groupCompoundKeyPart(androidx.compose.runtime.SlotReader, int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotReader $r1;
        int i0, i1, $i2;
        java.lang.Object r2, $r3, $r5, $r6, r8, r9;
        boolean $z1, $z2, $z3, $z4;
        androidx.compose.runtime.Composer$Companion $r4;
        java.lang.Enum $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 := @parameter0: androidx.compose.runtime.SlotReader;

        i0 := @parameter1: int;

        $z1 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: boolean hasObjectKey(int)>(i0);

        if $z1 == 0 goto label05;

        $r6 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: java.lang.Object groupObjectKey(int)>(i0);

        if $r6 == null goto label04;

        r8 = $r6;

        r2 = r8;

        $z3 = r2 instanceof java.lang.Enum;

        if $z3 == 0 goto label01;

        $r7 = (java.lang.Enum) r8;

        $i2 = virtualinvoke $r7.<java.lang.Enum: int ordinal()>();

        goto label03;

     label01:
        $z4 = r2 instanceof androidx.compose.runtime.MovableContent;

        if $z4 == 0 goto label02;

        $i2 = 126665345;

        goto label03;

     label02:
        $i2 = virtualinvoke r8.<java.lang.Object: int hashCode()>();

     label03:
        goto label10;

     label04:
        $i2 = 0;

        goto label10;

     label05:
        i1 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int groupKey(int)>(i0);

        if i1 != 207 goto label09;

        $r3 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: java.lang.Object groupAux(int)>(i0);

        if $r3 == null goto label08;

        r9 = $r3;

        $r4 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r9, $r5);

        if $z2 == 0 goto label06;

        $i2 = i1;

        goto label07;

     label06:
        $i2 = virtualinvoke r9.<java.lang.Object: int hashCode()>();

     label07:
        goto label10;

     label08:
        $i2 = i1;

        goto label10;

     label09:
        $i2 = i1;

     label10:
        return $i2;
    }

    public final boolean tryImminentInvalidation$runtime_release(androidx.compose.runtime.RecomposeScopeImpl, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.RecomposeScopeImpl r1;
        java.lang.Object r2;
        androidx.compose.runtime.Anchor r3, $r4;
        int i0, $i1;
        androidx.compose.runtime.SlotTable $r5;
        boolean $z0;
        androidx.compose.runtime.SlotReader $r6;
        java.util.List $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.RecomposeScopeImpl;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        $r4 = virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.Anchor getAnchor()>();

        if $r4 != null goto label1;

        return 0;

     label1:
        r3 = $r4;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        i0 = virtualinvoke r3.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotTable)>($r5);

        $z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing>;

        if $z0 == 0 goto label2;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i1 = virtualinvoke $r6.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        if i0 < $i1 goto label2;

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        staticinvoke <androidx.compose.runtime.ComposerKt: void access$insertIfMissing(java.util.List,int,androidx.compose.runtime.RecomposeScopeImpl,java.lang.Object)>($r7, i0, r1, r2);

        return 1;

     label2:
        return 0;
    }

    public final int parentKey$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean $z0;
        androidx.compose.runtime.SlotReader $r1, $r2;
        int $i0, $i1, $i2;
        androidx.compose.runtime.SlotWriter $r3, $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $i1 = virtualinvoke $r3.<androidx.compose.runtime.SlotWriter: int getParent()>();

        $i2 = virtualinvoke $r4.<androidx.compose.runtime.SlotWriter: int groupKey(int)>($i1);

        goto label2;

     label1:
        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getParent()>();

        $i2 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: int groupKey(int)>($i0);

     label2:
        return $i2;
    }

    public void skipCurrentGroup()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotReader r1;
        int i0;
        java.lang.Object r2, r3;
        java.util.List $r4;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void skipGroup()>();

        goto label2;

     label1:
        r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i0 = virtualinvoke r1.<androidx.compose.runtime.SlotReader: int getGroupKey()>();

        r2 = virtualinvoke r1.<androidx.compose.runtime.SlotReader: java.lang.Object getGroupObjectKey()>();

        r3 = virtualinvoke r1.<androidx.compose.runtime.SlotReader: java.lang.Object getGroupAux()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeEnterGroup(int,java.lang.Object,java.lang.Object)>(i0, r2, r3);

        $z1 = virtualinvoke r1.<androidx.compose.runtime.SlotReader: boolean isNode()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startReaderGroup(boolean,java.lang.Object)>($z1, null);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recomposeToGroupEnd()>();

        virtualinvoke r1.<androidx.compose.runtime.SlotReader: void endGroup()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeExitGroup(int,java.lang.Object,java.lang.Object)>(i0, r2, r3);

     label2:
        return;
    }

    private final void skipReaderToGroupEnd()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotReader $r1, $r2;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getParentNodes()>();

        r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount> = $i0;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r2.<androidx.compose.runtime.SlotReader: void skipToGroupEnd()>();

        return;
    }

    public void skipToGroupEnd()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0, $z2, $z3;
        int $i0;
        androidx.compose.runtime.RecomposeScopeImpl $r1;
        java.util.List $r2;
        java.lang.String $r3, $r6;
        kotlin.KotlinNothingValueException $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount>;

        if $i0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        if z0 != 0 goto label3;

        $r6 = "No nodes can be emitted before calling skipAndEndGroup";

        $r3 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r3);

        $r5 = new kotlin.KotlinNothingValueException;

        specialinvoke $r5.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r5;

     label3:
        $r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.RecomposeScopeImpl getCurrentRecomposeScope$runtime_release()>();

        if $r1 == null goto label4;

        virtualinvoke $r1.<androidx.compose.runtime.RecomposeScopeImpl: void scopeSkipped()>();

        goto label4;

     label4:
        $r2 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $z2 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label5;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void skipReaderToGroupEnd()>();

        goto label6;

     label5:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recomposeToGroupEnd()>();

     label6:
        return;
    }

    public void deactivateToEndGroup(boolean)
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0, $z1, $z2, z3;
        int $i0, i1, $i2, $i3;
        androidx.compose.runtime.SlotReader $r1, $r2, $r4, $r5, $r7;
        java.util.List $r3;
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2 $r6;
        kotlin.jvm.functions.Function2 $r8;
        java.lang.String $r9, $r12;
        kotlin.KotlinNothingValueException $r11;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter0: boolean;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount>;

        if $i0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z3 = $z2;

        if z3 != 0 goto label3;

        $r12 = "No nodes can be emitted before calling dactivateToEndGroup";

        $r9 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r9);

        $r11 = new kotlin.KotlinNothingValueException;

        specialinvoke $r11.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r11;

     label3:
        $z1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z1 != 0 goto label7;

        if z0 != 0 goto label4;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void skipReaderToGroupEnd()>();

        return;

     label4:
        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i1 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i2 = virtualinvoke $r2.<androidx.compose.runtime.SlotReader: int getCurrentEnd()>();

        $i3 = i1;

     label5:
        if $i3 >= $i2 goto label6;

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r6 = new androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2;

        specialinvoke $r6.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: void <init>(androidx.compose.runtime.ComposerImpl,int)>(r0, $i3);

        $r8 = (kotlin.jvm.functions.Function2) $r6;

        virtualinvoke $r7.<androidx.compose.runtime.SlotReader: void forEachData$runtime_release(int,kotlin.jvm.functions.Function2)>($i3, $r8);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        $r3 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        staticinvoke <androidx.compose.runtime.ComposerKt: void access$removeRange(java.util.List,int,int)>($r3, i1, $i2);

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r4.<androidx.compose.runtime.SlotReader: void reposition(int)>(i1);

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        virtualinvoke $r5.<androidx.compose.runtime.SlotReader: void skipToGroupEnd()>();

     label7:
        return;
    }

    public androidx.compose.runtime.Composer startRestartGroup(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0;
        androidx.compose.runtime.Composer $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, null, 0, null);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void addRecomposeScope()>();

        $r1 = (androidx.compose.runtime.Composer) r0;

        return $r1;
    }

    private final void addRecomposeScope()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1, $r8;
        androidx.compose.runtime.RecomposeScopeImpl r2, r3, $r11, $r14, r18, $r20;
        boolean $z0, $z1, $z4;
        androidx.compose.runtime.SlotReader $r4, $r6;
        java.util.List $r5;
        int $i0, $i1, $i2;
        androidx.compose.runtime.Composer$Companion $r7;
        androidx.compose.runtime.Stack $r9, $r17;
        androidx.compose.runtime.ControlledComposition $r12, $r15;
        androidx.compose.runtime.CompositionImpl $r13, $r16;
        androidx.compose.runtime.Invalidation r19;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z0 == 0 goto label1;

        $r14 = new androidx.compose.runtime.RecomposeScopeImpl;

        $r15 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition getComposition()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r15, "null cannot be cast to non-null type androidx.compose.runtime.CompositionImpl");

        $r16 = (androidx.compose.runtime.CompositionImpl) $r15;

        specialinvoke $r14.<androidx.compose.runtime.RecomposeScopeImpl: void <init>(androidx.compose.runtime.CompositionImpl)>($r16);

        r18 = $r14;

        $r17 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>;

        virtualinvoke $r17.<androidx.compose.runtime.Stack: boolean push(java.lang.Object)>(r18);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>(r18);

        $i2 = r0.<androidx.compose.runtime.ComposerImpl: int compositionToken>;

        virtualinvoke r18.<androidx.compose.runtime.RecomposeScopeImpl: void start(int)>($i2);

        goto label6;

     label1:
        $r5 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i0 = virtualinvoke $r4.<androidx.compose.runtime.SlotReader: int getParent()>();

        r19 = staticinvoke <androidx.compose.runtime.ComposerKt: androidx.compose.runtime.Invalidation access$removeLocation(java.util.List,int)>($r5, $i0);

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        r1 = virtualinvoke $r6.<androidx.compose.runtime.SlotReader: java.lang.Object next()>();

        $r7 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r8 = virtualinvoke $r7.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r8);

        if $z1 == 0 goto label2;

        $r11 = new androidx.compose.runtime.RecomposeScopeImpl;

        $r12 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition getComposition()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r12, "null cannot be cast to non-null type androidx.compose.runtime.CompositionImpl");

        $r13 = (androidx.compose.runtime.CompositionImpl) $r12;

        specialinvoke $r11.<androidx.compose.runtime.RecomposeScopeImpl: void <init>(androidx.compose.runtime.CompositionImpl)>($r13);

        r3 = $r11;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>(r3);

        $r20 = r3;

        goto label3;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r1, "null cannot be cast to non-null type androidx.compose.runtime.RecomposeScopeImpl");

        $r20 = (androidx.compose.runtime.RecomposeScopeImpl) r1;

     label3:
        r2 = $r20;

        if r19 == null goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        virtualinvoke r2.<androidx.compose.runtime.RecomposeScopeImpl: void setRequiresRecompose(boolean)>($z4);

        $r9 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>;

        virtualinvoke $r9.<androidx.compose.runtime.Stack: boolean push(java.lang.Object)>(r2);

        $i1 = r0.<androidx.compose.runtime.ComposerImpl: int compositionToken>;

        virtualinvoke r2.<androidx.compose.runtime.RecomposeScopeImpl: void start(int)>($i1);

     label6:
        return;
    }

    public androidx.compose.runtime.ScopeUpdateScope endRestartGroup()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.RecomposeScopeImpl r1, r2, $r18, $r20;
        kotlin.jvm.functions.Function1 r3, $r11;
        androidx.compose.runtime.Stack $r4, $r15;
        boolean $z1, $z2, $z3, $z4, $z5;
        androidx.compose.runtime.Anchor $r5, $r19;
        androidx.compose.runtime.SlotReader $r6, $r7;
        int $i0, $i1, $i2;
        androidx.compose.runtime.SlotWriter $r8, $r9;
        androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1 $r12;
        kotlin.jvm.functions.Function3 $r13;
        java.lang.Object $r16;
        androidx.compose.runtime.ScopeUpdateScope $r21;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>;

        $z1 = virtualinvoke $r4.<androidx.compose.runtime.Stack: boolean isNotEmpty()>();

        if $z1 == 0 goto label01;

        $r15 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>;

        $r16 = virtualinvoke $r15.<androidx.compose.runtime.Stack: java.lang.Object pop()>();

        $r18 = (androidx.compose.runtime.RecomposeScopeImpl) $r16;

        goto label02;

     label01:
        $r18 = null;

     label02:
        r1 = $r18;

        if r1 != null goto label03;

        goto label04;

     label03:
        virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: void setRequiresRecompose(boolean)>(0);

     label04:
        if r1 == null goto label05;

        $i2 = r0.<androidx.compose.runtime.ComposerImpl: int compositionToken>;

        $r11 = virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: kotlin.jvm.functions.Function1 end(int)>($i2);

        if $r11 == null goto label05;

        r3 = $r11;

        $r12 = new androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1;

        specialinvoke $r12.<androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1: void <init>(kotlin.jvm.functions.Function1,androidx.compose.runtime.ComposerImpl)>(r3, r0);

        $r13 = (kotlin.jvm.functions.Function3) $r12;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r13);

        goto label05;

     label05:
        if r1 == null goto label10;

        $z2 = virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: boolean getSkipped$runtime_release()>();

        if $z2 != 0 goto label10;

        $z3 = virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: boolean getUsed()>();

        if $z3 != 0 goto label06;

        $z5 = r0.<androidx.compose.runtime.ComposerImpl: boolean forceRecomposeScopes>;

        if $z5 == 0 goto label10;

     label06:
        $r5 = virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.Anchor getAnchor()>();

        if $r5 != null goto label09;

        $z4 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z4 == 0 goto label07;

        $r9 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r8 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $i1 = virtualinvoke $r8.<androidx.compose.runtime.SlotWriter: int getParent()>();

        $r19 = virtualinvoke $r9.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.Anchor anchor(int)>($i1);

        goto label08;

     label07:
        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i0 = virtualinvoke $r6.<androidx.compose.runtime.SlotReader: int getParent()>();

        $r19 = virtualinvoke $r7.<androidx.compose.runtime.SlotReader: androidx.compose.runtime.Anchor anchor(int)>($i0);

     label08:
        virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: void setAnchor(androidx.compose.runtime.Anchor)>($r19);

     label09:
        virtualinvoke r1.<androidx.compose.runtime.RecomposeScopeImpl: void setDefaultsInvalid(boolean)>(0);

        $r20 = r1;

        goto label11;

     label10:
        $r20 = (androidx.compose.runtime.RecomposeScopeImpl) null;

     label11:
        r2 = $r20;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void end(boolean)>(0);

        $r21 = (androidx.compose.runtime.ScopeUpdateScope) r2;

        return $r21;
    }

    public void insertMovableContent(androidx.compose.runtime.MovableContent, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.MovableContent r1;
        java.lang.Object r2;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.MovableContent;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap currentCompositionLocalScope$default(androidx.compose.runtime.ComposerImpl,java.lang.Integer,int,java.lang.Object)>(r0, null, 1, null);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void invokeMovableContentLambda(androidx.compose.runtime.MovableContent,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap,java.lang.Object,boolean)>(r1, $r3, r2, 0);

        return;
    }

    private final void invokeMovableContentLambda(androidx.compose.runtime.MovableContent, androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap, java.lang.Object, boolean)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.MovableContent r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap r2, $r19;
        java.lang.Object r3, $r6, $r7;
        boolean z0, $z2, $z3, $z4, $z5, $z6, z7, z8;
        int i0, $i1, $i2, $i3;
        androidx.compose.runtime.MovableContentStateReference r4, $r15;
        androidx.compose.runtime.SlotReader $r5, $r22;
        androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1 $r8;
        androidx.compose.runtime.Composer $r9;
        androidx.compose.runtime.internal.ComposableLambda $r10;
        kotlin.jvm.functions.Function2 $r11;
        androidx.compose.runtime.SlotWriter $r12, $r13, $r14, $r26;
        androidx.compose.runtime.ControlledComposition $r16;
        androidx.compose.runtime.SlotTable $r17;
        java.util.List $r18;
        androidx.compose.runtime.CompositionContext $r20;
        java.util.HashMap $r21;
        java.util.Map $r23;
        java.lang.Integer $r24;
        java.lang.Throwable $r27, r29;
        androidx.compose.runtime.Anchor r28;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.MovableContent;

        r2 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap;

        r3 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void startMovableGroup(int,java.lang.Object)>(126665345, r1);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean changed(java.lang.Object)>(r3);

        i0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: int getCompoundKeyHash()>();

     label01:
        r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash> = 126665345;

        $z2 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z2 == 0 goto label02;

        $r26 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        staticinvoke <androidx.compose.runtime.SlotWriter: void markGroup$default(androidx.compose.runtime.SlotWriter,int,int,java.lang.Object)>($r26, 0, 1, null);

     label02:
        $z3 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z3 == 0 goto label03;

        $z6 = 0;

        goto label05;

     label03:
        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.SlotReader: java.lang.Object getGroupAux()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, r2);

        if $z4 != 0 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        z7 = $z6;

        if z7 == 0 goto label06;

        $r21 = r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap providerUpdates>;

        $r23 = (java.util.Map) $r21;

        $r22 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i3 = virtualinvoke $r22.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r2);

     label06:
        $r7 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getCompositionLocalMap()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(202, $r7, 0, r2);

        $z5 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z5 == 0 goto label07;

        if z0 != 0 goto label07;

        r0.<androidx.compose.runtime.ComposerImpl: boolean writerHasAProvider> = 1;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap providerCache> = null;

        $r13 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r14 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $r12 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        $i1 = virtualinvoke $r12.<androidx.compose.runtime.SlotWriter: int getParent()>();

        $i2 = virtualinvoke $r14.<androidx.compose.runtime.SlotWriter: int parent(int)>($i1);

        r28 = virtualinvoke $r13.<androidx.compose.runtime.SlotWriter: androidx.compose.runtime.Anchor anchor(int)>($i2);

        $r15 = new androidx.compose.runtime.MovableContentStateReference;

        $r16 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition getComposition()>();

        $r17 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        $r18 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r19 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap currentCompositionLocalScope$default(androidx.compose.runtime.ComposerImpl,java.lang.Integer,int,java.lang.Object)>(r0, null, 1, null);

        specialinvoke $r15.<androidx.compose.runtime.MovableContentStateReference: void <init>(androidx.compose.runtime.MovableContent,java.lang.Object,androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.SlotTable,androidx.compose.runtime.Anchor,java.util.List,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)>(r1, r3, $r16, $r17, r28, $r18, $r19);

        r4 = $r15;

        $r20 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        virtualinvoke $r20.<androidx.compose.runtime.CompositionContext: void insertMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)>(r4);

        goto label08;

     label07:
        z8 = r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid>;

        r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid> = z7;

        $r9 = (androidx.compose.runtime.Composer) r0;

        $r8 = new androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1;

        specialinvoke $r8.<androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1: void <init>(androidx.compose.runtime.MovableContent,java.lang.Object)>(r1, r3);

        $r10 = staticinvoke <androidx.compose.runtime.internal.ComposableLambdaKt: androidx.compose.runtime.internal.ComposableLambda composableLambdaInstance(int,boolean,java.lang.Object)>(694380496, 1, $r8);

        $r11 = (kotlin.jvm.functions.Function2) $r10;

        staticinvoke <androidx.compose.runtime.ActualJvm_jvmKt: void invokeComposable(androidx.compose.runtime.Composer,kotlin.jvm.functions.Function2)>($r9, $r11);

        r0.<androidx.compose.runtime.ComposerImpl: boolean providersInvalid> = z8;

     label08:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash> = i0;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void endMovableGroup()>();

        goto label11;

     label09:
        $r27 := @caughtexception;

        r29 = $r27;

     label10:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash> = i0;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void endMovableGroup()>();

        throw r29;

     label11:
        return;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void insertMovableContentReferences(java.util.List)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.util.List r1;
        java.lang.Throwable r2, $r3;
        boolean z0, z1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "references");

        z0 = 0;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void insertMovableContentGuarded(java.util.List)>(r1);

        z1 = 1;

     label2:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void cleanUpCompose()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void abortRoot()>();

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void insertMovableContentGuarded(java.util.List)
    {
        androidx.compose.runtime.ComposerImpl r0, r2, r12, r16;
        java.util.List r1, r3, r4, r15, r17, r59, r68, $r78;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8;
        java.lang.Object r6, $r23, $r24;
        kotlin.Pair r7;
        androidx.compose.runtime.MovableContentStateReference r8, r9;
        androidx.compose.runtime.Anchor r10, $r41, $r66, $r67;
        kotlin.jvm.internal.Ref$IntRef r11, $r26;
        androidx.compose.runtime.SlotReader r13, r57, r58, $r72, r73;
        int[] r14;
        kotlin.Unit r18, r60, r81, r83, r85;
        java.lang.Throwable r19, $r50, $r51, $r52, $r53, $r54, r82, r84, r86;
        kotlin.jvm.functions.Function3 $r20, $r22, $r28, $r32, $r34, $r36, $r49, $r71;
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2 $r21;
        androidx.compose.runtime.SlotTable $r25, $r37, $r38, $r39, $r40, $r42, r55, r56, $r63, r64;
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1 $r27;
        androidx.compose.runtime.CompositionContext $r29;
        java.util.Collection $r31, $r47, $r69;
        boolean $z8, $z9, $z10, $z11, $z15, $z16, $z17, z18, z19, $z21;
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2 $r33;
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3 $r35;
        java.util.ArrayList $r43, $r74;
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1 $r44;
        kotlin.jvm.functions.Function0 $r45, $r80;
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2 $r48;
        androidx.compose.runtime.MovableContentState r62;
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4 $r70;
        androidx.compose.runtime.ControlledComposition $r75, $r76;
        java.lang.Integer $r77;
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1 $r79;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.util.List;

        r2 = r0;

        r3 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List lateChanges>;

        r4 = staticinvoke <androidx.compose.runtime.ComposerImpl: java.util.List access$getChanges$p(androidx.compose.runtime.ComposerImpl)>(r2);

     label01:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r2, r3);

        $r20 = staticinvoke <androidx.compose.runtime.ComposerKt: kotlin.jvm.functions.Function3 access$getResetSlotsInstance$p()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r20);

        i6 = 0;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

     label02:
        if i6 >= i0 goto label38;

        r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i6);

        r7 = (kotlin.Pair) r6;

        $r23 = virtualinvoke r7.<kotlin.Pair: java.lang.Object component1()>();

        r8 = (androidx.compose.runtime.MovableContentStateReference) $r23;

        $r24 = virtualinvoke r7.<kotlin.Pair: java.lang.Object component2()>();

        r9 = (androidx.compose.runtime.MovableContentStateReference) $r24;

        r10 = virtualinvoke r8.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.Anchor getAnchor$runtime_release()>();

        $r25 = virtualinvoke r8.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.SlotTable getSlotTable$runtime_release()>();

        i1 = virtualinvoke $r25.<androidx.compose.runtime.SlotTable: int anchorIndex(androidx.compose.runtime.Anchor)>(r10);

        $r26 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke $r26.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        r11 = $r26;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeUps()>();

        $r27 = new androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1;

        specialinvoke $r27.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1: void <init>(kotlin.jvm.internal.Ref$IntRef,androidx.compose.runtime.Anchor)>(r11, r10);

        $r28 = (kotlin.jvm.functions.Function3) $r27;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r28);

        if r9 != null goto label12;

        r55 = virtualinvoke r8.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.SlotTable getSlotTable$runtime_release()>();

        $r42 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        $z10 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r55, $r42);

        if $z10 == 0 goto label03;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void createFreshInsertTable()>();

     label03:
        r56 = virtualinvoke r8.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.SlotTable getSlotTable$runtime_release()>();

        r57 = virtualinvoke r56.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotReader openReader()>();

     label04:
        r58 = r57;

        virtualinvoke r58.<androidx.compose.runtime.SlotReader: void reposition(int)>(i1);

        r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta> = i1;

        $r43 = new java.util.ArrayList;

        specialinvoke $r43.<java.util.ArrayList: void <init>()>();

        r59 = (java.util.List) $r43;

        $r44 = new androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1;

        specialinvoke $r44.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: void <init>(androidx.compose.runtime.ComposerImpl,java.util.List,androidx.compose.runtime.SlotReader,androidx.compose.runtime.MovableContentStateReference)>(r0, r59, r58, r8);

        $r45 = (kotlin.jvm.functions.Function0) $r44;

        staticinvoke <androidx.compose.runtime.ComposerImpl: java.lang.Object recomposeMovableContent$default(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.ControlledComposition,java.lang.Integer,java.util.List,kotlin.jvm.functions.Function0,int,java.lang.Object)>(r0, null, null, null, null, $r45, 15, null);

        $r47 = (java.util.Collection) r59;

        $z11 = interfaceinvoke $r47.<java.util.Collection: boolean isEmpty()>();

        if $z11 != 0 goto label05;

        $z15 = 1;

        goto label06;

     label05:
        $z15 = 0;

     label06:
        if $z15 == 0 goto label07;

        $r48 = new androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2;

        specialinvoke $r48.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2: void <init>(kotlin.jvm.internal.Ref$IntRef,java.util.List)>(r11, r59);

        $r49 = (kotlin.jvm.functions.Function3) $r48;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r49);

     label07:
        r60 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        virtualinvoke r57.<androidx.compose.runtime.SlotReader: void close()>();

        goto label11;

     label09:
        $r50 := @caughtexception;

     label10:
        virtualinvoke r57.<androidx.compose.runtime.SlotReader: void close()>();

        throw $r50;

     label11:
        goto label37;

     label12:
        $r29 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        r62 = virtualinvoke $r29.<androidx.compose.runtime.CompositionContext: androidx.compose.runtime.MovableContentState movableContentStateResolve$runtime_release(androidx.compose.runtime.MovableContentStateReference)>(r9);

        if r62 == null goto label13;

        $r63 = virtualinvoke r62.<androidx.compose.runtime.MovableContentState: androidx.compose.runtime.SlotTable getSlotTable$runtime_release()>();

        if $r63 != null goto label14;

     label13:
        $r63 = virtualinvoke r9.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.SlotTable getSlotTable$runtime_release()>();

     label14:
        r64 = $r63;

        if r62 == null goto label15;

        $r40 = virtualinvoke r62.<androidx.compose.runtime.MovableContentState: androidx.compose.runtime.SlotTable getSlotTable$runtime_release()>();

        if $r40 == null goto label15;

        $r41 = virtualinvoke $r40.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.Anchor anchor(int)>(0);

        $r66 = $r41;

        if $r41 != null goto label16;

     label15:
        $r66 = virtualinvoke r9.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.Anchor getAnchor$runtime_release()>();

     label16:
        $r67 = $r66;

        r68 = staticinvoke <androidx.compose.runtime.ComposerKt: java.util.List access$collectNodesFrom(androidx.compose.runtime.SlotTable,androidx.compose.runtime.Anchor)>(r64, $r66);

        $r69 = (java.util.Collection) r68;

        $z16 = interfaceinvoke $r69.<java.util.Collection: boolean isEmpty()>();

        if $z16 != 0 goto label17;

        $z17 = 1;

        goto label18;

     label17:
        $z17 = 0;

     label18:
        if $z17 == 0 goto label19;

        $r35 = new androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3;

        specialinvoke $r35.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3: void <init>(kotlin.jvm.internal.Ref$IntRef,java.util.List)>(r11, r68);

        $r36 = (kotlin.jvm.functions.Function3) $r35;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r36);

        $r37 = virtualinvoke r8.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.SlotTable getSlotTable$runtime_release()>();

        $r38 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        $z9 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r37, $r38);

        if $z9 == 0 goto label19;

        $r39 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        $i7 = virtualinvoke $r39.<androidx.compose.runtime.SlotTable: int anchorIndex(androidx.compose.runtime.Anchor)>(r10);

        $i3 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: int updatedNodeCount(int)>($i7);

        $i4 = interfaceinvoke r68.<java.util.List: int size()>();

        $i5 = $i3 + $i4;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateNodeCount(int,int)>($i7, $i5);

     label19:
        $r70 = new androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4;

        specialinvoke $r70.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: void <init>(androidx.compose.runtime.MovableContentState,androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.MovableContentStateReference,androidx.compose.runtime.MovableContentStateReference)>(r62, r0, r9, r8);

        $r71 = (kotlin.jvm.functions.Function3) $r70;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r71);

        z18 = 0;

        $r72 = virtualinvoke r64.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotReader openReader()>();

        z19 = 0;

     label20:
        r73 = $r72;

        r12 = r0;

        r13 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader access$getReader$p(androidx.compose.runtime.ComposerImpl)>(r12);

        r14 = staticinvoke <androidx.compose.runtime.ComposerImpl: int[] access$getNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl)>(r12);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl,int[])>(r12, null);

     label21:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setReader$p(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.SlotReader)>(r12, r73);

        i2 = virtualinvoke r64.<androidx.compose.runtime.SlotTable: int anchorIndex(androidx.compose.runtime.Anchor)>($r67);

        virtualinvoke r73.<androidx.compose.runtime.SlotReader: void reposition(int)>(i2);

        r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta> = i2;

        $r74 = new java.util.ArrayList;

        specialinvoke $r74.<java.util.ArrayList: void <init>()>();

        r15 = (java.util.List) $r74;

        r16 = r0;

        r17 = staticinvoke <androidx.compose.runtime.ComposerImpl: java.util.List access$getChanges$p(androidx.compose.runtime.ComposerImpl)>(r16);

     label22:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r16, r15);

        $r75 = virtualinvoke r9.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.ControlledComposition getComposition$runtime_release()>();

        $r76 = virtualinvoke r8.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.ControlledComposition getComposition$runtime_release()>();

        $i8 = virtualinvoke r73.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        $r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r78 = virtualinvoke r9.<androidx.compose.runtime.MovableContentStateReference: java.util.List getInvalidations$runtime_release()>();

        $r79 = new androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1;

        specialinvoke $r79.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: void <init>(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.MovableContentStateReference)>(r0, r8);

        $r80 = (kotlin.jvm.functions.Function0) $r79;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object recomposeMovableContent(androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.ControlledComposition,java.lang.Integer,java.util.List,kotlin.jvm.functions.Function0)>($r75, $r76, $r77, $r78, $r80);

        r81 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label23:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r16, r17);

        goto label26;

     label24:
        $r54 := @caughtexception;

        r82 = $r54;

     label25:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r16, r17);

        throw r82;

     label26:
        $r31 = (java.util.Collection) r15;

        $z8 = interfaceinvoke $r31.<java.util.Collection: boolean isEmpty()>();

        if $z8 != 0 goto label27;

        $z21 = 1;

        goto label28;

     label27:
        $z21 = 0;

     label28:
        if $z21 == 0 goto label29;

        $r33 = new androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2;

        specialinvoke $r33.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2: void <init>(kotlin.jvm.internal.Ref$IntRef,java.util.List)>(r11, r15);

        $r34 = (kotlin.jvm.functions.Function3) $r33;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r34);

     label29:
        r83 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label30:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setReader$p(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.SlotReader)>(r12, r13);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl,int[])>(r12, r14);

        goto label33;

     label31:
        $r52 := @caughtexception;

        r84 = $r52;

     label32:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setReader$p(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.SlotReader)>(r12, r13);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl,int[])>(r12, r14);

        throw r84;

     label33:
        r18 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label34:
        virtualinvoke $r72.<androidx.compose.runtime.SlotReader: void close()>();

        goto label37;

     label35:
        $r51 := @caughtexception;

        r19 = $r51;

     label36:
        virtualinvoke $r72.<androidx.compose.runtime.SlotReader: void close()>();

        throw r19;

     label37:
        $r32 = staticinvoke <androidx.compose.runtime.ComposerKt: kotlin.jvm.functions.Function3 access$getSkipToGroupEndInstance$p()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r32);

        i6 = i6 + 1;

        goto label02;

     label38:
        $r21 = <androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2 INSTANCE>;

        $r22 = (kotlin.jvm.functions.Function3) $r21;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r22);

        r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta> = 0;

        r85 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label39:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r2, r4);

        goto label42;

     label40:
        $r53 := @caughtexception;

        r86 = $r53;

     label41:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r2, r4);

        throw r86;

     label42:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
        catch java.lang.Throwable from label21 to label30 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
        catch java.lang.Throwable from label20 to label34 with label35;
        catch java.lang.Throwable from label35 to label36 with label35;
        catch java.lang.Throwable from label01 to label39 with label40;
        catch java.lang.Throwable from label40 to label41 with label40;
    }

    private final java.lang.Object withChanges(java.util.List, kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.util.List r1, r3;
        kotlin.jvm.functions.Function0 r2;
        java.lang.Throwable $r4, r6;
        java.lang.Object r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: java.util.List access$getChanges$p(androidx.compose.runtime.ComposerImpl)>(r0);

     label1:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r0, r1);

        r5 = interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r0, r3);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return r5;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r0, r3);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final java.lang.Object withReader(androidx.compose.runtime.SlotReader, kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotReader r1, r3;
        kotlin.jvm.functions.Function0 r2;
        int[] r4;
        java.lang.Throwable $r5, r7;
        java.lang.Object r6;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.SlotReader;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader access$getReader$p(androidx.compose.runtime.ComposerImpl)>(r0);

        r4 = staticinvoke <androidx.compose.runtime.ComposerImpl: int[] access$getNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl)>(r0);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl,int[])>(r0, null);

     label1:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setReader$p(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.SlotReader)>(r0, r1);

        r6 = interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setReader$p(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.SlotReader)>(r0, r3);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl,int[])>(r0, r4);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return r6;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setReader$p(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.SlotReader)>(r0, r3);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl,int[])>(r0, r4);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final java.lang.Object recomposeMovableContent(androidx.compose.runtime.ControlledComposition, androidx.compose.runtime.ControlledComposition, java.lang.Integer, java.util.List, kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.ControlledComposition r1, r2;
        java.lang.Integer r3;
        java.util.List r4;
        kotlin.jvm.functions.Function0 r5;
        boolean z0, z1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Object r6, r11, $r14, $r15, $r18;
        kotlin.Pair r7;
        androidx.compose.runtime.RecomposeScopeImpl r8;
        androidx.compose.runtime.collection.IdentityArraySet r9, r10;
        java.lang.Throwable $r16;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        r2 := @parameter1: androidx.compose.runtime.ControlledComposition;

        r3 := @parameter2: java.lang.Integer;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: kotlin.jvm.functions.Function0;

        z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean implicitRootStart>;

        z1 = r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing>;

        i0 = r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex>;

     label01:
        r0.<androidx.compose.runtime.ComposerImpl: boolean implicitRootStart> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = 1;

        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = 0;

        i3 = 0;

        i1 = interfaceinvoke r4.<java.util.List: int size()>();

     label02:
        if i3 >= i1 goto label07;

        r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i3);

        r7 = (kotlin.Pair) r6;

        $r14 = virtualinvoke r7.<kotlin.Pair: java.lang.Object component1()>();

        r8 = (androidx.compose.runtime.RecomposeScopeImpl) $r14;

        $r15 = virtualinvoke r7.<kotlin.Pair: java.lang.Object component2()>();

        r9 = (androidx.compose.runtime.collection.IdentityArraySet) $r15;

        if r9 == null goto label05;

        r10 = r9;

        i4 = 0;

        i2 = virtualinvoke r10.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label03:
        if i4 >= i2 goto label04;

        r11 = virtualinvoke r10.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i4);

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean tryImminentInvalidation$runtime_release(androidx.compose.runtime.RecomposeScopeImpl,java.lang.Object)>(r8, r11);

        i4 = i4 + 1;

        goto label03;

     label04:
        goto label06;

     label05:
        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean tryImminentInvalidation$runtime_release(androidx.compose.runtime.RecomposeScopeImpl,java.lang.Object)>(r8, null);

     label06:
        i3 = i3 + 1;

        goto label02;

     label07:
        if r1 == null goto label10;

        if r3 == null goto label08;

        $i5 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        goto label09;

     label08:
        $i5 = -1;

     label09:
        $r18 = interfaceinvoke r1.<androidx.compose.runtime.ControlledComposition: java.lang.Object delegateInvalidations(androidx.compose.runtime.ControlledComposition,int,kotlin.jvm.functions.Function0)>(r2, $i5, r5);

        if $r18 != null goto label11;

     label10:
        $r18 = interfaceinvoke r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label11:
        r0.<androidx.compose.runtime.ComposerImpl: boolean implicitRootStart> = z0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = z1;

        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = i0;

        return $r18;

     label12:
        $r16 := @caughtexception;

     label13:
        r0.<androidx.compose.runtime.ComposerImpl: boolean implicitRootStart> = z0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = z1;

        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = i0;

        throw $r16;

        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    static java.lang.Object recomposeMovableContent$default(androidx.compose.runtime.ComposerImpl, androidx.compose.runtime.ControlledComposition, androidx.compose.runtime.ControlledComposition, java.lang.Integer, java.util.List, kotlin.jvm.functions.Function0, int, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function0 r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r2, $r3;
        androidx.compose.runtime.ControlledComposition r4, r5;
        java.lang.Integer r6;
        java.util.List r7;

        r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        r4 := @parameter1: androidx.compose.runtime.ControlledComposition;

        r5 := @parameter2: androidx.compose.runtime.ControlledComposition;

        r6 := @parameter3: java.lang.Integer;

        r7 := @parameter4: java.util.List;

        r1 := @parameter5: kotlin.jvm.functions.Function0;

        i0 := @parameter6: int;

        r2 := @parameter7: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r5 = null;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        r6 = null;

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label4:
        $r3 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object recomposeMovableContent(androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.ControlledComposition,java.lang.Integer,java.util.List,kotlin.jvm.functions.Function0)>(r4, r5, r6, r7, r1);

        return $r3;
    }

    public void sourceInformation(java.lang.String)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.String r1;
        boolean $z0;
        androidx.compose.runtime.SlotWriter $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sourceInformation");

        $z0 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: boolean getInserting()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotWriter writer>;

        virtualinvoke $r2.<androidx.compose.runtime.SlotWriter: void insertAux(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void sourceInformationMarkerStart(int, java.lang.String)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0;
        java.lang.String r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sourceInformation");

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void start(int,java.lang.Object,boolean,java.lang.Object)>(i0, null, 0, r1);

        return;
    }

    public void sourceInformationMarkerEnd()
    {
        androidx.compose.runtime.ComposerImpl r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void end(boolean)>(0);

        return;
    }

    public final void composeContent$runtime_release(androidx.compose.runtime.collection.IdentityArrayMap, kotlin.jvm.functions.Function2)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.collection.IdentityArrayMap r1;
        kotlin.jvm.functions.Function2 r2;
        boolean z0;
        java.util.List $r3;
        java.lang.String $r4, $r7;
        kotlin.KotlinNothingValueException $r6;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.collection.IdentityArrayMap;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "invalidationsRequested");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "content");

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes>;

        z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if z0 != 0 goto label1;

        $r7 = "Expected applyChanges() to have been called";

        $r4 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r4);

        $r6 = new kotlin.KotlinNothingValueException;

        specialinvoke $r6.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r6;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void doCompose(androidx.compose.runtime.collection.IdentityArrayMap,kotlin.jvm.functions.Function2)>(r1, r2);

        return;
    }

    public final void prepareCompose$runtime_release(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function0 r1;
        boolean $z1, $z2, z3;
        java.lang.String $r3, $r7;
        kotlin.KotlinNothingValueException $r5;
        java.lang.Throwable $r6, r8;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $z1 = r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing>;

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z3 = $z2;

        if z3 != 0 goto label3;

        $r7 = "Preparing a composition while composing is not supported";

        $r3 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r3);

        $r5 = new kotlin.KotlinNothingValueException;

        specialinvoke $r5.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r5;

     label3:
        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = 1;

     label4:
        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label5:
        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = 0;

        goto label8;

     label6:
        $r6 := @caughtexception;

        r8 = $r6;

     label7:
        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = 0;

        throw r8;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final boolean recompose$runtime_release(androidx.compose.runtime.collection.IdentityArrayMap)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.collection.IdentityArrayMap r1;
        boolean z0, $z2, $z3, $z4, $z6, $z7, $z8;
        java.util.List $r2, $r3, $r9;
        java.util.Collection $r4, $r10;
        java.lang.String $r5, $r8;
        kotlin.KotlinNothingValueException $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.collection.IdentityArrayMap;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "invalidationsRequested");

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes>;

        z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if z0 != 0 goto label1;

        $r8 = "Expected applyChanges() to have been called";

        $r5 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r5);

        $r7 = new kotlin.KotlinNothingValueException;

        specialinvoke $r7.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r7;

     label1:
        $z2 = virtualinvoke r1.<androidx.compose.runtime.collection.IdentityArrayMap: boolean isNotEmpty()>();

        if $z2 != 0 goto label4;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $r4 = (java.util.Collection) $r3;

        $z3 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label2;

        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        if $z6 != 0 goto label4;

        $z4 = r0.<androidx.compose.runtime.ComposerImpl: boolean forciblyRecompose>;

        if $z4 == 0 goto label7;

     label4:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void doCompose(androidx.compose.runtime.collection.IdentityArrayMap,kotlin.jvm.functions.Function2)>(r1, null);

        $r9 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes>;

        $r10 = (java.util.Collection) $r9;

        $z7 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z7 != 0 goto label5;

        $z8 = 1;

        goto label6;

     label5:
        $z8 = 0;

     label6:
        return $z8;

     label7:
        return 0;
    }

    private final void doCompose(androidx.compose.runtime.collection.IdentityArrayMap, kotlin.jvm.functions.Function2)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.collection.IdentityArrayMap r1, r31;
        kotlin.jvm.functions.Function2 r2;
        int i0, i1, $i2, $i3, $i4, i5;
        androidx.compose.runtime.collection.IdentityArraySet r3;
        androidx.compose.runtime.RecomposeScopeImpl r4;
        boolean $z2, $z4, z5, z11, z12;
        androidx.compose.runtime.Trace $r5, $r9, $r18, $r27;
        androidx.compose.runtime.snapshots.Snapshot $r6, $r7;
        java.util.HashMap $r8;
        java.lang.Object $r10, $r14, $r16, $r30, $r33;
        androidx.compose.runtime.ComposerImpl$doCompose$lambda-37$$inlined$sortBy$1 $r11;
        java.util.Comparator $r12;
        java.lang.Object[] $r13, $r15;
        androidx.compose.runtime.Anchor $r17;
        androidx.compose.runtime.Invalidation $r19;
        java.util.List $r20, $r25, r32, $r40;
        java.lang.String $r21, $r28, r29;
        kotlin.KotlinNothingValueException $r23;
        java.lang.Throwable $r24, $r26, r43;
        androidx.compose.runtime.ComposerImpl$doCompose$2$3 $r34;
        kotlin.jvm.functions.Function1 $r35, $r37;
        androidx.compose.runtime.ComposerImpl$doCompose$2$4 $r36;
        androidx.compose.runtime.ComposerImpl$doCompose$2$5 $r38;
        kotlin.jvm.functions.Function0 $r39;
        kotlin.Unit r42;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.collection.IdentityArrayMap;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        $z2 = r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing>;

        if $z2 != 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z5 = $z4;

        if z5 != 0 goto label03;

        $r28 = "Reentrant composition is not supported";

        $r21 = virtualinvoke $r28.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r21);

        $r23 = new kotlin.KotlinNothingValueException;

        specialinvoke $r23.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r23;

     label03:
        r29 = "Compose:recompose";

        $r5 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        $r30 = virtualinvoke $r5.<androidx.compose.runtime.Trace: java.lang.Object beginSection(java.lang.String)>(r29);

     label04:
        $r6 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.Snapshot currentSnapshot()>();

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.snapshots.Snapshot snapshot> = $r6;

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.snapshots.Snapshot snapshot>;

        $i2 = virtualinvoke $r7.<androidx.compose.runtime.snapshots.Snapshot: int getId()>();

        r0.<androidx.compose.runtime.ComposerImpl: int compositionToken> = $i2;

        $r8 = r0.<androidx.compose.runtime.ComposerImpl: java.util.HashMap providerUpdates>;

        virtualinvoke $r8.<java.util.HashMap: void clear()>();

        r31 = r1;

        i5 = 0;

        i0 = virtualinvoke r31.<androidx.compose.runtime.collection.IdentityArrayMap: int getSize$runtime_release()>();

     label05:
        if i5 >= i0 goto label08;

        $r13 = virtualinvoke r31.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object[] getKeys$runtime_release()>();

        $r14 = $r13[i5];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r14, "null cannot be cast to non-null type Key of androidx.compose.runtime.collection.IdentityArrayMap");

        $r15 = virtualinvoke r31.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object[] getValues$runtime_release()>();

        $r16 = $r15[i5];

        r3 = (androidx.compose.runtime.collection.IdentityArraySet) $r16;

        r4 = (androidx.compose.runtime.RecomposeScopeImpl) $r14;

        $r17 = virtualinvoke r4.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.Anchor getAnchor()>();

        if $r17 == null goto label06;

        $i4 = virtualinvoke $r17.<androidx.compose.runtime.Anchor: int getLocation$runtime_release()>();

        goto label07;

     label06:
        $r18 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r18.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>($r30);

        return;

     label07:
        i1 = $i4;

        $r20 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $r19 = new androidx.compose.runtime.Invalidation;

        specialinvoke $r19.<androidx.compose.runtime.Invalidation: void <init>(androidx.compose.runtime.RecomposeScopeImpl,int,androidx.compose.runtime.collection.IdentityArraySet)>(r4, i1, r3);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r19);

        i5 = i5 + 1;

        goto label05;

     label08:
        r32 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $i3 = interfaceinvoke r32.<java.util.List: int size()>();

        if $i3 <= 1 goto label09;

        $r11 = new androidx.compose.runtime.ComposerImpl$doCompose$lambda-37$$inlined$sortBy$1;

        specialinvoke $r11.<androidx.compose.runtime.ComposerImpl$doCompose$lambda-37$$inlined$sortBy$1: void <init>()>();

        $r12 = (java.util.Comparator) $r11;

        staticinvoke <kotlin.collections.CollectionsKt: void sortWith(java.util.List,java.util.Comparator)>(r32, $r12);

     label09:
        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = 0;

        z11 = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = 1;

     label10:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void startRoot()>();

        $r33 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        if $r33 == r2 goto label11;

        if r2 == null goto label11;

        $r10 = (java.lang.Object) r2;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>($r10);

     label11:
        $r34 = new androidx.compose.runtime.ComposerImpl$doCompose$2$3;

        specialinvoke $r34.<androidx.compose.runtime.ComposerImpl$doCompose$2$3: void <init>(androidx.compose.runtime.ComposerImpl)>(r0);

        $r35 = (kotlin.jvm.functions.Function1) $r34;

        $r36 = new androidx.compose.runtime.ComposerImpl$doCompose$2$4;

        specialinvoke $r36.<androidx.compose.runtime.ComposerImpl$doCompose$2$4: void <init>(androidx.compose.runtime.ComposerImpl)>(r0);

        $r37 = (kotlin.jvm.functions.Function1) $r36;

        $r38 = new androidx.compose.runtime.ComposerImpl$doCompose$2$5;

        specialinvoke $r38.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: void <init>(kotlin.jvm.functions.Function2,androidx.compose.runtime.ComposerImpl,java.lang.Object)>(r2, r0, $r33);

        $r39 = (kotlin.jvm.functions.Function0) $r38;

        staticinvoke <androidx.compose.runtime.SnapshotStateKt: void observeDerivedStateRecalculations(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>($r35, $r37, $r39);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void endRoot()>();

        z12 = 1;

     label12:
        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = 0;

        $r40 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        interfaceinvoke $r40.<java.util.List: void clear()>();

        goto label15;

     label13:
        $r24 := @caughtexception;

     label14:
        r0.<androidx.compose.runtime.ComposerImpl: boolean isComposing> = 0;

        $r25 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        interfaceinvoke $r25.<java.util.List: void clear()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void abortRoot()>();

        throw $r24;

     label15:
        r42 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label16:
        $r9 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r9.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>($r30);

        goto label19;

     label17:
        $r26 := @caughtexception;

        r43 = $r26;

     label18:
        $r27 = <androidx.compose.runtime.Trace: androidx.compose.runtime.Trace INSTANCE>;

        virtualinvoke $r27.<androidx.compose.runtime.Trace: void endSection(java.lang.Object)>($r30);

        throw r43;

     label19:
        return;

        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label04 to label06 with label17;
        catch java.lang.Throwable from label07 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public final boolean getHasInvalidations()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.util.List $r1;
        java.util.Collection $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private final java.lang.Object getNode(androidx.compose.runtime.SlotReader)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotReader $r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 := @parameter0: androidx.compose.runtime.SlotReader;

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getParent()>();

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: java.lang.Object node(int)>($i0);

        return $r2;
    }

    private final java.lang.Object nodeAt(androidx.compose.runtime.SlotReader, int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotReader $r1;
        int i0;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 := @parameter0: androidx.compose.runtime.SlotReader;

        i0 := @parameter1: int;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: java.lang.Object node(int)>(i0);

        return $r2;
    }

    private final void validateNodeExpected()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0;
        java.lang.String $r1, $r4;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean nodeExpected>;

        if z0 != 0 goto label1;

        $r4 = "A call to createNode(), emitNode() or useNode() expected was not expected";

        $r1 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r1);

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;

     label1:
        r0.<androidx.compose.runtime.ComposerImpl: boolean nodeExpected> = 0;

        return;
    }

    private final void validateNodeNotExpected()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0, $z2, $z3;
        java.lang.String $r1, $r4;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z2 = r0.<androidx.compose.runtime.ComposerImpl: boolean nodeExpected>;

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        if z0 != 0 goto label3;

        $r4 = "A call to createNode(), emitNode() or useNode() expected";

        $r1 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r1);

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;

     label3:
        return;
    }

    private final void record(kotlin.jvm.functions.Function3)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function3 r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private final void recordApplierOperation(kotlin.jvm.functions.Function3)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function3 r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeUps()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeDowns()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>(r1);

        return;
    }

    private final void recordSlotEditingOperation(kotlin.jvm.functions.Function3)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function3 r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void realizeOperationLocation$default(androidx.compose.runtime.ComposerImpl,boolean,int,java.lang.Object)>(r0, 0, 1, null);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordSlotEditing()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>(r1);

        return;
    }

    private final void recordSlotTableOperation(boolean, kotlin.jvm.functions.Function3)
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0;
        kotlin.jvm.functions.Function3 r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter0: boolean;

        r1 := @parameter1: kotlin.jvm.functions.Function3;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeOperationLocation(boolean)>(z0);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>(r1);

        return;
    }

    static void recordSlotTableOperation$default(androidx.compose.runtime.ComposerImpl, boolean, kotlin.jvm.functions.Function3, int, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function3 r1;
        int i0, $i1;
        java.lang.Object r2;
        boolean z0;

        r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter1: boolean;

        r1 := @parameter2: kotlin.jvm.functions.Function3;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordSlotTableOperation(boolean,kotlin.jvm.functions.Function3)>(z0, r1);

        return;
    }

    private final void realizeUps()
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0;
        androidx.compose.runtime.ComposerImpl$realizeUps$1 $r1;
        kotlin.jvm.functions.Function3 $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 = r0.<androidx.compose.runtime.ComposerImpl: int pendingUps>;

        if i0 <= 0 goto label1;

        r0.<androidx.compose.runtime.ComposerImpl: int pendingUps> = 0;

        $r1 = new androidx.compose.runtime.ComposerImpl$realizeUps$1;

        specialinvoke $r1.<androidx.compose.runtime.ComposerImpl$realizeUps$1: void <init>(int)>(i0);

        $r2 = (kotlin.jvm.functions.Function3) $r1;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r2);

     label1:
        return;
    }

    private final void realizeDowns(java.lang.Object[])
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object[] r1;
        androidx.compose.runtime.ComposerImpl$realizeDowns$1 $r2;
        kotlin.jvm.functions.Function3 $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.Object[];

        $r2 = new androidx.compose.runtime.ComposerImpl$realizeDowns$1;

        specialinvoke $r2.<androidx.compose.runtime.ComposerImpl$realizeDowns$1: void <init>(java.lang.Object[])>(r1);

        $r3 = (kotlin.jvm.functions.Function3) $r2;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r3);

        return;
    }

    private final void realizeDowns()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.Stack $r1, $r2, $r4;
        boolean $z0;
        java.lang.Object[] $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack downNodes>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.Stack: boolean isNotEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack downNodes>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.Stack: java.lang.Object[] toArray()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeDowns(java.lang.Object[])>($r3);

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack downNodes>;

        virtualinvoke $r4.<androidx.compose.runtime.Stack: void clear()>();

     label1:
        return;
    }

    private final void recordDown(java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1;
        androidx.compose.runtime.Stack $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack downNodes>;

        virtualinvoke $r2.<androidx.compose.runtime.Stack: boolean push(java.lang.Object)>(r1);

        return;
    }

    private final void recordUp()
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i1;
        androidx.compose.runtime.Stack $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack downNodes>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.Stack: boolean isNotEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack downNodes>;

        virtualinvoke $r2.<androidx.compose.runtime.Stack: java.lang.Object pop()>();

        goto label2;

     label1:
        i0 = r0.<androidx.compose.runtime.ComposerImpl: int pendingUps>;

        $i1 = i0 + 1;

        r0.<androidx.compose.runtime.ComposerImpl: int pendingUps> = $i1;

     label2:
        return;
    }

    private final void realizeOperationLocation(boolean)
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean z0, z1, $z3;
        int i0, i1, $i2, $i3;
        androidx.compose.runtime.SlotReader $r1, $r7;
        androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2 $r2;
        kotlin.jvm.functions.Function3 $r3;
        java.lang.String $r4, $r8;
        kotlin.KotlinNothingValueException $r6;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i3 = virtualinvoke $r7.<androidx.compose.runtime.SlotReader: int getParent()>();

        goto label2;

     label1:
        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i3 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

     label2:
        i0 = $i3;

        $i2 = r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta>;

        i1 = i0 - $i2;

        if i1 < 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z1 = $z3;

        if z1 != 0 goto label5;

        $r8 = "Tried to seek backward";

        $r4 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r4);

        $r6 = new kotlin.KotlinNothingValueException;

        specialinvoke $r6.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r6;

     label5:
        if i1 <= 0 goto label6;

        $r2 = new androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2;

        specialinvoke $r2.<androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2: void <init>(int)>(i1);

        $r3 = (kotlin.jvm.functions.Function3) $r2;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r3);

        r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta> = i0;

     label6:
        return;
    }

    static void realizeOperationLocation$default(androidx.compose.runtime.ComposerImpl, boolean, int, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeOperationLocation(boolean)>(z0);

        return;
    }

    private final void recordInsert(androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.Anchor r1;
        androidx.compose.runtime.SlotTable r2, r11;
        java.util.List $r3, $r4, $r6, r12;
        boolean $z0;
        java.util.Collection $r5;
        androidx.compose.runtime.ComposerImpl$recordInsert$2 $r7;
        kotlin.jvm.functions.Function3 $r8, $r10;
        androidx.compose.runtime.ComposerImpl$recordInsert$1 $r9;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.Anchor;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List insertFixups>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r11 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        $r9 = new androidx.compose.runtime.ComposerImpl$recordInsert$1;

        specialinvoke $r9.<androidx.compose.runtime.ComposerImpl$recordInsert$1: void <init>(androidx.compose.runtime.SlotTable,androidx.compose.runtime.Anchor)>(r11, r1);

        $r10 = (kotlin.jvm.functions.Function3) $r9;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordSlotEditingOperation(kotlin.jvm.functions.Function3)>($r10);

        goto label2;

     label1:
        $r4 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List insertFixups>;

        $r5 = (java.util.Collection) $r4;

        r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r5);

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List insertFixups>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeUps()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeDowns()>();

        r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        $r7 = new androidx.compose.runtime.ComposerImpl$recordInsert$2;

        specialinvoke $r7.<androidx.compose.runtime.ComposerImpl$recordInsert$2: void <init>(androidx.compose.runtime.SlotTable,androidx.compose.runtime.Anchor,java.util.List)>(r2, r1, r12);

        $r8 = (kotlin.jvm.functions.Function3) $r7;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordSlotEditingOperation(kotlin.jvm.functions.Function3)>($r8);

     label2:
        return;
    }

    private final void recordFixup(kotlin.jvm.functions.Function3)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function3 r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List insertFixups>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private final void recordInsertUpFixup(kotlin.jvm.functions.Function3)
    {
        androidx.compose.runtime.ComposerImpl r0;
        kotlin.jvm.functions.Function3 r1;
        androidx.compose.runtime.Stack $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function3;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack insertUpFixups>;

        virtualinvoke $r2.<androidx.compose.runtime.Stack: boolean push(java.lang.Object)>(r1);

        return;
    }

    private final void registerInsertUpFixup()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.Stack $r1;
        java.util.List $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List insertFixups>;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack insertUpFixups>;

        $r3 = virtualinvoke $r1.<androidx.compose.runtime.Stack: java.lang.Object pop()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    private final void recordDelete()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotReader $r1, $r3;
        int $i0, $i1, $i2, $i3;
        kotlin.jvm.functions.Function3 $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void reportFreeMovableContent(int)>($i0);

        $r2 = staticinvoke <androidx.compose.runtime.ComposerKt: kotlin.jvm.functions.Function3 access$getRemoveCurrentGroupInstance$p()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordSlotEditingOperation(kotlin.jvm.functions.Function3)>($r2);

        $i1 = r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta>;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i2 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: int getGroupSize()>();

        $i3 = $i1 + $i2;

        r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta> = $i3;

        return;
    }

    private final void reportFreeMovableContent(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        staticinvoke <androidx.compose.runtime.ComposerImpl: int reportFreeMovableContent$reportGroup(androidx.compose.runtime.ComposerImpl,int,boolean,int)>(r0, i0, 0, 0);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeMovement()>();

        return;
    }

    private final void releaseMovableGroupAtCurrent(androidx.compose.runtime.MovableContentStateReference, androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        androidx.compose.runtime.SlotWriter r2, r4, r5;
        androidx.compose.runtime.SlotTable r3, $r8, r17;
        kotlin.Unit r6;
        java.lang.Throwable r7, $r16;
        androidx.compose.runtime.MovableContent $r9;
        java.lang.Object $r10;
        androidx.compose.runtime.Anchor $r12;
        androidx.compose.runtime.MovableContentState $r14, r18;
        androidx.compose.runtime.CompositionContext $r15;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        $r8 = new androidx.compose.runtime.SlotTable;

        specialinvoke $r8.<androidx.compose.runtime.SlotTable: void <init>()>();

        r3 = $r8;

        r17 = r3;

        r4 = virtualinvoke r17.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

     label1:
        r5 = r4;

        virtualinvoke r5.<androidx.compose.runtime.SlotWriter: void beginInsert()>();

        $r9 = virtualinvoke r1.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.MovableContent getContent$runtime_release()>();

        virtualinvoke r5.<androidx.compose.runtime.SlotWriter: void startGroup(int,java.lang.Object)>(126665345, $r9);

        staticinvoke <androidx.compose.runtime.SlotWriter: void markGroup$default(androidx.compose.runtime.SlotWriter,int,int,java.lang.Object)>(r5, 0, 1, null);

        $r10 = virtualinvoke r1.<androidx.compose.runtime.MovableContentStateReference: java.lang.Object getParameter$runtime_release()>();

        virtualinvoke r5.<androidx.compose.runtime.SlotWriter: java.lang.Object update(java.lang.Object)>($r10);

        $r12 = virtualinvoke r1.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.Anchor getAnchor$runtime_release()>();

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.util.List moveTo(androidx.compose.runtime.Anchor,int,androidx.compose.runtime.SlotWriter)>($r12, 1, r5);

        virtualinvoke r5.<androidx.compose.runtime.SlotWriter: int skipGroup()>();

        virtualinvoke r5.<androidx.compose.runtime.SlotWriter: int endGroup()>();

        virtualinvoke r5.<androidx.compose.runtime.SlotWriter: void endInsert()>();

        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        virtualinvoke r4.<androidx.compose.runtime.SlotWriter: void close()>();

        goto label5;

     label3:
        $r16 := @caughtexception;

        r7 = $r16;

     label4:
        virtualinvoke r4.<androidx.compose.runtime.SlotWriter: void close()>();

        throw r7;

     label5:
        $r14 = new androidx.compose.runtime.MovableContentState;

        specialinvoke $r14.<androidx.compose.runtime.MovableContentState: void <init>(androidx.compose.runtime.SlotTable)>(r3);

        r18 = $r14;

        $r15 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        virtualinvoke $r15.<androidx.compose.runtime.CompositionContext: void movableContentStateReleased$runtime_release(androidx.compose.runtime.MovableContentStateReference,androidx.compose.runtime.MovableContentState)>(r1, r18);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void reportAllMovableContent()
    {
        androidx.compose.runtime.ComposerImpl r0, r5;
        java.util.List r1, r6;
        androidx.compose.runtime.SlotTable r2, $r9;
        androidx.compose.runtime.SlotReader r3, r4;
        kotlin.Unit r7, $r14;
        java.lang.Throwable r8, $r12, $r13;
        boolean $z4, $z5;
        java.util.ArrayList $r10;
        kotlin.jvm.functions.Function3 $r11;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r9 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        $z4 = virtualinvoke $r9.<androidx.compose.runtime.SlotTable: boolean containsMark()>();

        if $z4 == 0 goto label11;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.List) $r10;

        r0.<androidx.compose.runtime.ComposerImpl: java.util.List deferredChanges> = r1;

        r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        r3 = virtualinvoke r2.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotReader openReader()>();

     label01:
        r4 = r3;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader> = r4;

        r5 = r0;

        r6 = staticinvoke <androidx.compose.runtime.ComposerImpl: java.util.List access$getChanges$p(androidx.compose.runtime.ComposerImpl)>(r5);

     label02:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r5, r1);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void reportFreeMovableContent(int)>(0);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeUps()>();

        $z5 = r0.<androidx.compose.runtime.ComposerImpl: boolean startedGroup>;

        if $z5 == 0 goto label03;

        $r11 = staticinvoke <androidx.compose.runtime.ComposerKt: kotlin.jvm.functions.Function3 access$getSkipToGroupEndInstance$p()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r11);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordEndRoot()>();

     label03:
        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label04:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r5, r6);

        goto label07;

     label05:
        $r12 := @caughtexception;

     label06:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r5, r6);

        throw $r12;

     label07:
        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        virtualinvoke r3.<androidx.compose.runtime.SlotReader: void close()>();

        goto label11;

     label09:
        $r13 := @caughtexception;

        r8 = $r13;

     label10:
        virtualinvoke r3.<androidx.compose.runtime.SlotReader: void close()>();

        throw r8;

     label11:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private final void recordReaderMoving(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, $i2, $i3, $i4;
        androidx.compose.runtime.SlotReader $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i2 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getCurrentGroup()>();

        $i3 = r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta>;

        i1 = $i2 - $i3;

        $i4 = i0 - i1;

        r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta> = $i4;

        return;
    }

    private final void recordSlotEditing()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotReader r1, $r3;
        int i0, $i1, $i2;
        androidx.compose.runtime.Anchor r2;
        androidx.compose.runtime.IntStack $r4, $r5;
        boolean $z0, $z1;
        androidx.compose.runtime.ComposerImpl$recordSlotEditing$1 $r6;
        kotlin.jvm.functions.Function3 $r7, $r8;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i1 = virtualinvoke $r3.<androidx.compose.runtime.SlotReader: int getSize()>();

        if $i1 <= 0 goto label2;

        r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i0 = virtualinvoke r1.<androidx.compose.runtime.SlotReader: int getParent()>();

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack startedGroups>;

        $i2 = virtualinvoke $r4.<androidx.compose.runtime.IntStack: int peekOr(int)>(-2);

        if $i2 == i0 goto label2;

        $z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean startedGroup>;

        if $z0 != 0 goto label1;

        $z1 = r0.<androidx.compose.runtime.ComposerImpl: boolean implicitRootStart>;

        if $z1 == 0 goto label1;

        $r8 = staticinvoke <androidx.compose.runtime.ComposerKt: kotlin.jvm.functions.Function3 access$getStartRootGroup$p()>();

        staticinvoke <androidx.compose.runtime.ComposerImpl: void recordSlotTableOperation$default(androidx.compose.runtime.ComposerImpl,boolean,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r8, 1, null);

        r0.<androidx.compose.runtime.ComposerImpl: boolean startedGroup> = 1;

     label1:
        if i0 <= 0 goto label2;

        r2 = virtualinvoke r1.<androidx.compose.runtime.SlotReader: androidx.compose.runtime.Anchor anchor(int)>(i0);

        $r5 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack startedGroups>;

        virtualinvoke $r5.<androidx.compose.runtime.IntStack: void push(int)>(i0);

        $r6 = new androidx.compose.runtime.ComposerImpl$recordSlotEditing$1;

        specialinvoke $r6.<androidx.compose.runtime.ComposerImpl$recordSlotEditing$1: void <init>(androidx.compose.runtime.Anchor)>(r2);

        $r7 = (kotlin.jvm.functions.Function3) $r6;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void recordSlotTableOperation$default(androidx.compose.runtime.ComposerImpl,boolean,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r7, 1, null);

     label2:
        return;
    }

    private final void recordEndGroup()
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, $i2;
        boolean z0, $z2;
        androidx.compose.runtime.SlotReader $r1;
        androidx.compose.runtime.IntStack $r2, $r3, $r4;
        kotlin.jvm.functions.Function3 $r5;
        java.lang.String $r6, $r9;
        kotlin.KotlinNothingValueException $r8;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i0 = virtualinvoke $r1.<androidx.compose.runtime.SlotReader: int getParent()>();

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack startedGroups>;

        i1 = virtualinvoke $r2.<androidx.compose.runtime.IntStack: int peekOr(int)>(-1);

        if i1 > i0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 != 0 goto label3;

        $r9 = "Missed recording an endGroup";

        $r6 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r6);

        $r8 = new kotlin.KotlinNothingValueException;

        specialinvoke $r8.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r8;

     label3:
        $r3 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack startedGroups>;

        $i2 = virtualinvoke $r3.<androidx.compose.runtime.IntStack: int peekOr(int)>(-1);

        if $i2 != i0 goto label4;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack startedGroups>;

        virtualinvoke $r4.<androidx.compose.runtime.IntStack: int pop()>();

        $r5 = staticinvoke <androidx.compose.runtime.ComposerKt: kotlin.jvm.functions.Function3 access$getEndGroupInstance$p()>();

        staticinvoke <androidx.compose.runtime.ComposerImpl: void recordSlotTableOperation$default(androidx.compose.runtime.ComposerImpl,boolean,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r5, 1, null);

     label4:
        return;
    }

    private final void recordEndRoot()
    {
        androidx.compose.runtime.ComposerImpl r0;
        boolean $z0;
        kotlin.jvm.functions.Function3 $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $z0 = r0.<androidx.compose.runtime.ComposerImpl: boolean startedGroup>;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <androidx.compose.runtime.ComposerKt: kotlin.jvm.functions.Function3 access$getEndGroupInstance$p()>();

        staticinvoke <androidx.compose.runtime.ComposerImpl: void recordSlotTableOperation$default(androidx.compose.runtime.ComposerImpl,boolean,kotlin.jvm.functions.Function3,int,java.lang.Object)>(r0, 0, $r1, 1, null);

        r0.<androidx.compose.runtime.ComposerImpl: boolean startedGroup> = 0;

     label1:
        return;
    }

    private final void finalizeCompose()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.Stack $r1;
        androidx.compose.runtime.IntStack $r2;
        java.lang.String $r3, $r6, $r9, $r10;
        kotlin.KotlinNothingValueException $r5, $r8;
        boolean z0, z3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeUps()>();

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack pendingStack>;

        z0 = virtualinvoke $r1.<androidx.compose.runtime.Stack: boolean isEmpty()>();

        if z0 != 0 goto label1;

        $r9 = "Start/end imbalance";

        $r6 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r6);

        $r8 = new kotlin.KotlinNothingValueException;

        specialinvoke $r8.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r8;

     label1:
        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack startedGroups>;

        z3 = virtualinvoke $r2.<androidx.compose.runtime.IntStack: boolean isEmpty()>();

        if z3 != 0 goto label2;

        $r10 = "Missed recording an endGroup()";

        $r3 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r3);

        $r5 = new kotlin.KotlinNothingValueException;

        specialinvoke $r5.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r5;

     label2:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void cleanUpCompose()>();

        return;
    }

    private final void cleanUpCompose()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.IntStack $r1;
        androidx.compose.runtime.Stack $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Pending pending> = null;

        r0.<androidx.compose.runtime.ComposerImpl: int nodeIndex> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: int groupNodeCount> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: int writersReaderDelta> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean nodeExpected> = 0;

        r0.<androidx.compose.runtime.ComposerImpl: boolean startedGroup> = 0;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.IntStack startedGroups>;

        virtualinvoke $r1.<androidx.compose.runtime.IntStack: void clear()>();

        $r2 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.Stack invalidateStack>;

        virtualinvoke $r2.<androidx.compose.runtime.Stack: void clear()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void clearUpdatedNodeCounts()>();

        return;
    }

    public final void verifyConsistent$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.SlotTable $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable insertTable>;

        virtualinvoke $r1.<androidx.compose.runtime.SlotTable: void verifyWellFormed()>();

        return;
    }

    private final void recordRemoveNode(int, int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, $i2, $i3, $i4;
        boolean z0, $z3;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;
        kotlin.KotlinNothingValueException $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= 0 goto label5;

        if i0 < 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        if z0 != 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid remove index ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r5);

        $r7 = new kotlin.KotlinNothingValueException;

        specialinvoke $r7.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r7;

     label3:
        $i2 = r0.<androidx.compose.runtime.ComposerImpl: int previousRemove>;

        if $i2 != i0 goto label4;

        $i3 = r0.<androidx.compose.runtime.ComposerImpl: int previousCount>;

        $i4 = $i3 + i1;

        r0.<androidx.compose.runtime.ComposerImpl: int previousCount> = $i4;

        goto label5;

     label4:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeMovement()>();

        r0.<androidx.compose.runtime.ComposerImpl: int previousRemove> = i0;

        r0.<androidx.compose.runtime.ComposerImpl: int previousCount> = i1;

     label5:
        return;
    }

    private final void recordMoveNode(int, int, int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i2 <= 0 goto label2;

        $i3 = r0.<androidx.compose.runtime.ComposerImpl: int previousCount>;

        if $i3 <= 0 goto label1;

        $i6 = r0.<androidx.compose.runtime.ComposerImpl: int previousMoveFrom>;

        $i4 = r0.<androidx.compose.runtime.ComposerImpl: int previousCount>;

        $i5 = i0 - $i4;

        if $i6 != $i5 goto label1;

        $i9 = r0.<androidx.compose.runtime.ComposerImpl: int previousMoveTo>;

        $i7 = r0.<androidx.compose.runtime.ComposerImpl: int previousCount>;

        $i8 = i1 - $i7;

        if $i9 != $i8 goto label1;

        $i10 = r0.<androidx.compose.runtime.ComposerImpl: int previousCount>;

        $i11 = $i10 + i2;

        r0.<androidx.compose.runtime.ComposerImpl: int previousCount> = $i11;

        goto label2;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeMovement()>();

        r0.<androidx.compose.runtime.ComposerImpl: int previousMoveFrom> = i0;

        r0.<androidx.compose.runtime.ComposerImpl: int previousMoveTo> = i1;

        r0.<androidx.compose.runtime.ComposerImpl: int previousCount> = i2;

     label2:
        return;
    }

    private final void realizeMovement()
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, i1, $i2, i3, i4;
        androidx.compose.runtime.ComposerImpl$realizeMovement$2 $r1;
        kotlin.jvm.functions.Function3 $r2, $r4;
        androidx.compose.runtime.ComposerImpl$realizeMovement$1 $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 = r0.<androidx.compose.runtime.ComposerImpl: int previousCount>;

        r0.<androidx.compose.runtime.ComposerImpl: int previousCount> = 0;

        if i0 <= 0 goto label2;

        $i2 = r0.<androidx.compose.runtime.ComposerImpl: int previousRemove>;

        if $i2 < 0 goto label1;

        i3 = r0.<androidx.compose.runtime.ComposerImpl: int previousRemove>;

        r0.<androidx.compose.runtime.ComposerImpl: int previousRemove> = -1;

        $r3 = new androidx.compose.runtime.ComposerImpl$realizeMovement$1;

        specialinvoke $r3.<androidx.compose.runtime.ComposerImpl$realizeMovement$1: void <init>(int,int)>(i3, i0);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordApplierOperation(kotlin.jvm.functions.Function3)>($r4);

        goto label2;

     label1:
        i4 = r0.<androidx.compose.runtime.ComposerImpl: int previousMoveFrom>;

        r0.<androidx.compose.runtime.ComposerImpl: int previousMoveFrom> = -1;

        i1 = r0.<androidx.compose.runtime.ComposerImpl: int previousMoveTo>;

        r0.<androidx.compose.runtime.ComposerImpl: int previousMoveTo> = -1;

        $r1 = new androidx.compose.runtime.ComposerImpl$realizeMovement$2;

        specialinvoke $r1.<androidx.compose.runtime.ComposerImpl$realizeMovement$2: void <init>(int,int,int)>(i4, i1, i0);

        $r2 = (kotlin.jvm.functions.Function3) $r1;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordApplierOperation(kotlin.jvm.functions.Function3)>($r2);

     label2:
        return;
    }

    private final void updateCompoundKeyWhenWeEnterGroup(int, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1, r2, $r5;
        boolean $z0, $z1;
        java.lang.Enum $r3;
        androidx.compose.runtime.Composer$Companion $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r1 != null goto label2;

        if r2 == null goto label1;

        if i0 != 207 goto label1;

        $r4 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r5);

        if $z1 != 0 goto label1;

        $i3 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeEnterGroupKeyHash(int)>($i3);

        goto label4;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeEnterGroupKeyHash(int)>(i0);

        goto label4;

     label2:
        $z0 = r1 instanceof java.lang.Enum;

        if $z0 == 0 goto label3;

        $r3 = (java.lang.Enum) r1;

        $i2 = virtualinvoke $r3.<java.lang.Enum: int ordinal()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeEnterGroupKeyHash(int)>($i2);

        goto label4;

     label3:
        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeEnterGroupKeyHash(int)>($i1);

     label4:
        return;
    }

    private final void updateCompoundKeyWhenWeEnterGroupKeyHash(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i1, $i3, $i4;
        byte b2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: int getCompoundKeyHash()>();

        b2 = 3;

        $i3 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i1, b2);

        $i4 = $i3 ^ i0;

        r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash> = $i4;

        return;
    }

    private final void updateCompoundKeyWhenWeExitGroup(int, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1, r2, $r5;
        boolean $z0, $z1;
        java.lang.Enum $r3;
        androidx.compose.runtime.Composer$Companion $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r1 != null goto label2;

        if r2 == null goto label1;

        if i0 != 207 goto label1;

        $r4 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r5);

        if $z1 != 0 goto label1;

        $i3 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeExitGroupKeyHash(int)>($i3);

        goto label4;

     label1:
        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeExitGroupKeyHash(int)>(i0);

        goto label4;

     label2:
        $z0 = r1 instanceof java.lang.Enum;

        if $z0 == 0 goto label3;

        $r3 = (java.lang.Enum) r1;

        $i2 = virtualinvoke $r3.<java.lang.Enum: int ordinal()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeExitGroupKeyHash(int)>($i2);

        goto label4;

     label3:
        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateCompoundKeyWhenWeExitGroupKeyHash(int)>($i1);

     label4:
        return;
    }

    private final void updateCompoundKeyWhenWeExitGroupKeyHash(int)
    {
        androidx.compose.runtime.ComposerImpl r0;
        int i0, $i1, $i3, $i4, $i5;
        byte b2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter0: int;

        $i3 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: int getCompoundKeyHash()>();

        $i4 = staticinvoke <java.lang.Integer: int hashCode(int)>(i0);

        $i1 = $i3 ^ $i4;

        b2 = 3;

        $i5 = staticinvoke <java.lang.Integer: int rotateRight(int,int)>($i1, b2);

        r0.<androidx.compose.runtime.ComposerImpl: int compoundKeyHash> = $i5;

        return;
    }

    public androidx.compose.runtime.RecomposeScope getRecomposeScope()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.RecomposeScopeImpl $r1;
        androidx.compose.runtime.RecomposeScope $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.RecomposeScopeImpl getCurrentRecomposeScope$runtime_release()>();

        $r2 = (androidx.compose.runtime.RecomposeScope) $r1;

        return $r2;
    }

    public java.lang.Object getRecomposeScopeIdentity()
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.RecomposeScopeImpl $r1;
        androidx.compose.runtime.Anchor $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.RecomposeScopeImpl getCurrentRecomposeScope$runtime_release()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.Anchor getAnchor()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public java.lang.Object rememberedValue()
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: java.lang.Object nextSlot()>();

        return $r1;
    }

    public void updateRememberedValue(java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl r0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: void updateValue(java.lang.Object)>(r1);

        return;
    }

    public void recordUsed(androidx.compose.runtime.RecomposeScope)
    {
        androidx.compose.runtime.ComposerImpl r0;
        androidx.compose.runtime.RecomposeScope r1;
        boolean $z0;
        androidx.compose.runtime.RecomposeScopeImpl $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter0: androidx.compose.runtime.RecomposeScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        $z0 = r1 instanceof androidx.compose.runtime.RecomposeScopeImpl;

        if $z0 == 0 goto label1;

        $r2 = (androidx.compose.runtime.RecomposeScopeImpl) r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        if $r2 != null goto label3;

        goto label4;

     label3:
        virtualinvoke $r2.<androidx.compose.runtime.RecomposeScopeImpl: void setUsed(boolean)>(1);

     label4:
        return;
    }

    private static final void insertMovableContentGuarded$positionToParentOf(androidx.compose.runtime.SlotWriter, androidx.compose.runtime.Applier, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Applier r1;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        r1 := @parameter1: androidx.compose.runtime.Applier;

        i0 := @parameter2: int;

     label1:
        $z0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean indexInParent(int)>(i0);

        if $z0 != 0 goto label3;

        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void skipToGroupEnd()>();

        $i1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getParent()>();

        $z1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean isNode(int)>($i1);

        if $z1 == 0 goto label2;

        interfaceinvoke r1.<androidx.compose.runtime.Applier: void up()>();

     label2:
        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int endGroup()>();

        goto label1;

     label3:
        return;
    }

    private static final int insertMovableContentGuarded$currentNodeIndex(androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.SlotWriter r0;
        int i0, $i1, $i2, i3, i4, i5, $i6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        i0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        i3 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getParent()>();

     label1:
        if i3 < 0 goto label2;

        $z3 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean isNode(int)>(i3);

        if $z3 != 0 goto label2;

        i3 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int parent(int)>(i3);

        goto label1;

     label2:
        i4 = 0;

        i5 = i3 + 1;

     label3:
        if i5 >= i0 goto label8;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean indexInGroup(int,int)>(i0, i5);

        if $z0 == 0 goto label5;

        $z2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean isNode(int)>(i5);

        if $z2 == 0 goto label4;

        i4 = 0;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $i2 = i4;

        $z1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean isNode(int)>(i5);

        if $z1 == 0 goto label6;

        $i6 = 1;

        goto label7;

     label6:
        $i6 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int nodeCount(int)>(i5);

     label7:
        i4 = $i2 + $i6;

        $i1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int groupSize(int)>(i5);

        i5 = i5 + $i1;

        goto label3;

     label8:
        return i4;
    }

    private static final int insertMovableContentGuarded$positionToInsert(androidx.compose.runtime.SlotWriter, androidx.compose.runtime.Anchor, androidx.compose.runtime.Applier)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Anchor r1;
        androidx.compose.runtime.Applier r2;
        int i0, $i1, $i2, $i3, $i4, i5, $i6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r3;

        r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        r1 := @parameter1: androidx.compose.runtime.Anchor;

        r2 := @parameter2: androidx.compose.runtime.Applier;

        i0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int anchorIndex(androidx.compose.runtime.Anchor)>(r1);

        $i1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        if $i1 >= i0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z2);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void insertMovableContentGuarded$positionToParentOf(androidx.compose.runtime.SlotWriter,androidx.compose.runtime.Applier,int)>(r0, r2, i0);

        i5 = staticinvoke <androidx.compose.runtime.ComposerImpl: int insertMovableContentGuarded$currentNodeIndex(androidx.compose.runtime.SlotWriter)>(r0);

     label3:
        $i6 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        if $i6 >= i0 goto label6;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean indexInCurrentGroup(int)>(i0);

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: boolean isNode()>();

        if $z1 == 0 goto label4;

        $i4 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        $r3 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: java.lang.Object node(int)>($i4);

        interfaceinvoke r2.<androidx.compose.runtime.Applier: void down(java.lang.Object)>($r3);

        i5 = 0;

     label4:
        virtualinvoke r0.<androidx.compose.runtime.SlotWriter: void startGroup()>();

        goto label3;

     label5:
        $i3 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int skipGroup()>();

        i5 = i5 + $i3;

        goto label3;

     label6:
        $i2 = virtualinvoke r0.<androidx.compose.runtime.SlotWriter: int getCurrentGroup()>();

        if $i2 != i0 goto label7;

        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        staticinvoke <androidx.compose.runtime.ComposerKt: void runtimeCheck(boolean)>($z3);

        return i5;
    }

    private static final int reportFreeMovableContent$reportGroup(androidx.compose.runtime.ComposerImpl, int, boolean, int)
    {
        androidx.compose.runtime.ComposerImpl r0, $r55;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8, $i9, $i11, i12, i13, i14, i15, $i16, $i17, $i18, $i19;
        boolean z0, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z13, z14, z15, $z16;
        java.lang.Object r2, r3, $r13, $r17, r40, r42, r48, $r54;
        androidx.compose.runtime.Invalidation r4;
        java.util.Collection r5;
        androidx.compose.runtime.SlotReader $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r21, $r22, $r23, $r34, $r35, $r36;
        java.util.Set $r20;
        java.util.List $r24, $r44, r46;
        java.util.ArrayList $r25, r45;
        androidx.compose.runtime.MovableContentStateReference $r26;
        androidx.compose.runtime.ControlledComposition $r27;
        androidx.compose.runtime.SlotTable $r28;
        java.lang.Integer $r29;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r30;
        androidx.compose.runtime.CompositionContext $r31;
        androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1 $r32;
        kotlin.jvm.functions.Function3 $r33;
        androidx.compose.runtime.RecomposeScopeImpl $r37;
        androidx.compose.runtime.collection.IdentityArraySet $r38;
        kotlin.Pair $r39;
        androidx.compose.runtime.MovableContent r41;
        androidx.compose.runtime.Anchor r43;
        androidx.compose.runtime.ComposerImpl$CompositionContextHolder $r49, r50;
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r51;
        java.lang.Iterable r52;
        java.util.Iterator r53;

        r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z4 = virtualinvoke $r6.<androidx.compose.runtime.SlotReader: boolean hasMark(int)>(i0);

        if $z4 == 0 goto label13;

        $r14 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i6 = virtualinvoke $r14.<androidx.compose.runtime.SlotReader: int groupKey(int)>(i0);

        $r15 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        r40 = virtualinvoke $r15.<androidx.compose.runtime.SlotReader: java.lang.Object groupObjectKey(int)>(i0);

        if i6 != 126665345 goto label07;

        $z9 = r40 instanceof androidx.compose.runtime.MovableContent;

        if $z9 == 0 goto label07;

        r41 = (androidx.compose.runtime.MovableContent) r40;

        $r21 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        r42 = virtualinvoke $r21.<androidx.compose.runtime.SlotReader: java.lang.Object groupGet(int,int)>(i0, 0);

        $r22 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        r43 = virtualinvoke $r22.<androidx.compose.runtime.SlotReader: androidx.compose.runtime.Anchor anchor(int)>(i0);

        $r23 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i4 = virtualinvoke $r23.<androidx.compose.runtime.SlotReader: int groupSize(int)>(i0);

        i7 = i0 + $i4;

        $r24 = r0.<androidx.compose.runtime.ComposerImpl: java.util.List invalidations>;

        $r44 = staticinvoke <androidx.compose.runtime.ComposerKt: java.util.List access$filterToRange(java.util.List,int,int)>($r24, i0, i7);

        $r25 = new java.util.ArrayList;

        $i5 = interfaceinvoke $r44.<java.util.List: int size()>();

        specialinvoke $r25.<java.util.ArrayList: void <init>(int)>($i5);

        r45 = $r25;

        i8 = 0;

        i2 = interfaceinvoke $r44.<java.util.List: int size()>();

     label01:
        if i8 >= i2 goto label02;

        r2 = interfaceinvoke $r44.<java.util.List: java.lang.Object get(int)>(i8);

        r3 = r2;

        r4 = (androidx.compose.runtime.Invalidation) r3;

        r5 = (java.util.Collection) r45;

        $r37 = virtualinvoke r4.<androidx.compose.runtime.Invalidation: androidx.compose.runtime.RecomposeScopeImpl getScope()>();

        $r38 = virtualinvoke r4.<androidx.compose.runtime.Invalidation: androidx.compose.runtime.collection.IdentityArraySet getInstances()>();

        $r39 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r37, $r38);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r39);

        i8 = i8 + 1;

        goto label01;

     label02:
        r46 = (java.util.List) r45;

        $r26 = new androidx.compose.runtime.MovableContentStateReference;

        $r27 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition getComposition()>();

        $r28 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r30 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap currentCompositionLocalScope(java.lang.Integer)>($r29);

        specialinvoke $r26.<androidx.compose.runtime.MovableContentStateReference: void <init>(androidx.compose.runtime.MovableContent,java.lang.Object,androidx.compose.runtime.ControlledComposition,androidx.compose.runtime.SlotTable,androidx.compose.runtime.Anchor,java.util.List,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)>(r41, r42, $r27, $r28, r43, r46, $r30);

        $r31 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        virtualinvoke $r31.<androidx.compose.runtime.CompositionContext: void deletedMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)>($r26);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordSlotEditing()>();

        $r32 = new androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1;

        specialinvoke $r32.<androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1: void <init>(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.MovableContentStateReference)>(r0, $r26);

        $r33 = (kotlin.jvm.functions.Function3) $r32;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void record(kotlin.jvm.functions.Function3)>($r33);

        if z0 == 0 goto label06;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeMovement()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeUps()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeDowns()>();

        $r35 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z10 = virtualinvoke $r35.<androidx.compose.runtime.SlotReader: boolean isNode(int)>(i0);

        if $z10 == 0 goto label03;

        $i9 = 1;

        goto label04;

     label03:
        $r36 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i9 = virtualinvoke $r36.<androidx.compose.runtime.SlotReader: int nodeCount(int)>(i0);

     label04:
        if $i9 <= 0 goto label05;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordRemoveNode(int,int)>(i1, $i9);

     label05:
        $i11 = 0;

        goto label24;

     label06:
        $r34 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i11 = virtualinvoke $r34.<androidx.compose.runtime.SlotReader: int nodeCount(int)>(i0);

        goto label24;

     label07:
        if i6 != 206 goto label12;

        $r17 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getReference()>();

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r40, $r17);

        if $z6 == 0 goto label12;

        $r18 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        r48 = virtualinvoke $r18.<androidx.compose.runtime.SlotReader: java.lang.Object groupGet(int,int)>(i0, 0);

        $z7 = r48 instanceof androidx.compose.runtime.ComposerImpl$CompositionContextHolder;

        if $z7 == 0 goto label08;

        $r49 = (androidx.compose.runtime.ComposerImpl$CompositionContextHolder) r48;

        goto label09;

     label08:
        $r49 = null;

     label09:
        r50 = $r49;

        if r50 == null goto label11;

        r51 = virtualinvoke r50.<androidx.compose.runtime.ComposerImpl$CompositionContextHolder: androidx.compose.runtime.ComposerImpl$CompositionContextImpl getRef()>();

        $r20 = virtualinvoke r51.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set getComposers()>();

        r52 = (java.lang.Iterable) $r20;

        z13 = 0;

        r53 = interfaceinvoke r52.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z8 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label11;

        $r54 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        $r55 = (androidx.compose.runtime.ComposerImpl) $r54;

        z14 = 0;

        specialinvoke $r55.<androidx.compose.runtime.ComposerImpl: void reportAllMovableContent()>();

        goto label10;

     label11:
        $r19 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i11 = virtualinvoke $r19.<androidx.compose.runtime.SlotReader: int nodeCount(int)>(i0);

        goto label24;

     label12:
        $r16 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i11 = virtualinvoke $r16.<androidx.compose.runtime.SlotReader: int nodeCount(int)>(i0);

        goto label24;

     label13:
        $r7 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $z5 = virtualinvoke $r7.<androidx.compose.runtime.SlotReader: boolean containsMark(int)>(i0);

        if $z5 == 0 goto label23;

        $r9 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        i12 = virtualinvoke $r9.<androidx.compose.runtime.SlotReader: int groupSize(int)>(i0);

        i13 = i0 + i12;

        i14 = i0 + 1;

        i15 = 0;

     label14:
        if i14 >= i13 goto label22;

        $r10 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        z15 = virtualinvoke $r10.<androidx.compose.runtime.SlotReader: boolean isNode(int)>(i14);

        if z15 == 0 goto label15;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeMovement()>();

        $r12 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $r13 = virtualinvoke $r12.<androidx.compose.runtime.SlotReader: java.lang.Object node(int)>(i14);

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordDown(java.lang.Object)>($r13);

     label15:
        $i16 = i15;

        $i17 = i14;

        if z15 != 0 goto label16;

        if z0 == 0 goto label17;

     label16:
        $z16 = 1;

        goto label18;

     label17:
        $z16 = 0;

     label18:
        if z15 == 0 goto label19;

        $i18 = 0;

        goto label20;

     label19:
        $i18 = i1 + i15;

     label20:
        $i19 = staticinvoke <androidx.compose.runtime.ComposerImpl: int reportFreeMovableContent$reportGroup(androidx.compose.runtime.ComposerImpl,int,boolean,int)>(r0, $i17, $z16, $i18);

        i15 = $i16 + $i19;

        if z15 == 0 goto label21;

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void realizeMovement()>();

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl: void recordUp()>();

     label21:
        $r11 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i3 = virtualinvoke $r11.<androidx.compose.runtime.SlotReader: int groupSize(int)>(i14);

        i14 = i14 + $i3;

        goto label14;

     label22:
        $i11 = i15;

        goto label24;

     label23:
        $r8 = r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        $i11 = virtualinvoke $r8.<androidx.compose.runtime.SlotReader: int nodeCount(int)>(i0);

     label24:
        return $i11;
    }

    public static final androidx.compose.runtime.SlotReader access$getReader$p(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        androidx.compose.runtime.SlotReader $r1;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $r1 = $r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader>;

        return $r1;
    }

    public static final java.util.List access$getChanges$p(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        java.util.List $r1;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $r1 = $r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes>;

        return $r1;
    }

    public static final void access$setChanges$p(androidx.compose.runtime.ComposerImpl, java.util.List)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter1: java.util.List;

        $r0.<androidx.compose.runtime.ComposerImpl: java.util.List changes> = r1;

        return;
    }

    public static final int[] access$getNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        int[] $r1;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $r1 = $r0.<androidx.compose.runtime.ComposerImpl: int[] nodeCountOverrides>;

        return $r1;
    }

    public static final void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl, int[])
    {
        androidx.compose.runtime.ComposerImpl $r0;
        int[] r1;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter1: int[];

        $r0.<androidx.compose.runtime.ComposerImpl: int[] nodeCountOverrides> = r1;

        return;
    }

    public static final void access$setReader$p(androidx.compose.runtime.ComposerImpl, androidx.compose.runtime.SlotReader)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        androidx.compose.runtime.SlotReader r1;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter1: androidx.compose.runtime.SlotReader;

        $r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader reader> = r1;

        return;
    }

    public static final androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        androidx.compose.runtime.CompositionContext $r1;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $r1 = $r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext parentContext>;

        return $r1;
    }

    public static final int access$getChildrenComposing$p(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $i0 = $r0.<androidx.compose.runtime.ComposerImpl: int childrenComposing>;

        return $i0;
    }

    public static final void access$setChildrenComposing$p(androidx.compose.runtime.ComposerImpl, int)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter1: int;

        $r0.<androidx.compose.runtime.ComposerImpl: int childrenComposing> = i0;

        return;
    }

    public static final androidx.compose.runtime.SlotTable access$getSlotTable$p(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        androidx.compose.runtime.SlotTable $r1;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $r1 = $r0.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable slotTable>;

        return $r1;
    }

    public static final void access$invokeMovableContentLambda(androidx.compose.runtime.ComposerImpl, androidx.compose.runtime.MovableContent, androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap, java.lang.Object, boolean)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        androidx.compose.runtime.MovableContent r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap r2;
        java.lang.Object r3;
        boolean z0;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter1: androidx.compose.runtime.MovableContent;

        r2 := @parameter2: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap;

        r3 := @parameter3: java.lang.Object;

        z0 := @parameter4: boolean;

        specialinvoke $r0.<androidx.compose.runtime.ComposerImpl: void invokeMovableContentLambda(androidx.compose.runtime.MovableContent,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap,java.lang.Object,boolean)>(r1, r2, r3, z0);

        return;
    }

    public static final int access$insertMovableContentGuarded$positionToInsert(androidx.compose.runtime.SlotWriter, androidx.compose.runtime.Anchor, androidx.compose.runtime.Applier)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Anchor r1;
        androidx.compose.runtime.Applier r2;
        int $i0;

        r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        r1 := @parameter1: androidx.compose.runtime.Anchor;

        r2 := @parameter2: androidx.compose.runtime.Applier;

        $i0 = staticinvoke <androidx.compose.runtime.ComposerImpl: int insertMovableContentGuarded$positionToInsert(androidx.compose.runtime.SlotWriter,androidx.compose.runtime.Anchor,androidx.compose.runtime.Applier)>(r0, r1, r2);

        return $i0;
    }

    public static final void access$insertMovableContentGuarded$positionToParentOf(androidx.compose.runtime.SlotWriter, androidx.compose.runtime.Applier, int)
    {
        androidx.compose.runtime.SlotWriter r0;
        androidx.compose.runtime.Applier r1;
        int i0;

        r0 := @parameter0: androidx.compose.runtime.SlotWriter;

        r1 := @parameter1: androidx.compose.runtime.Applier;

        i0 := @parameter2: int;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void insertMovableContentGuarded$positionToParentOf(androidx.compose.runtime.SlotWriter,androidx.compose.runtime.Applier,int)>(r0, r1, i0);

        return;
    }

    public static final void access$startGroup(androidx.compose.runtime.ComposerImpl, int, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        int i0;
        java.lang.Object r1;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        specialinvoke $r0.<androidx.compose.runtime.ComposerImpl: void startGroup(int,java.lang.Object)>(i0, r1);

        return;
    }

    public static final void access$endGroup(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl $r0;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        specialinvoke $r0.<androidx.compose.runtime.ComposerImpl: void endGroup()>();

        return;
    }

    public static final boolean access$getForciblyRecompose$p(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $z0 = $r0.<androidx.compose.runtime.ComposerImpl: boolean forciblyRecompose>;

        return $z0;
    }

    public static final void access$releaseMovableGroupAtCurrent(androidx.compose.runtime.ComposerImpl, androidx.compose.runtime.MovableContentStateReference, androidx.compose.runtime.SlotWriter)
    {
        androidx.compose.runtime.ComposerImpl $r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        androidx.compose.runtime.SlotWriter r2;

        $r0 := @parameter0: androidx.compose.runtime.ComposerImpl;

        r1 := @parameter1: androidx.compose.runtime.MovableContentStateReference;

        r2 := @parameter2: androidx.compose.runtime.SlotWriter;

        specialinvoke $r0.<androidx.compose.runtime.ComposerImpl: void releaseMovableGroupAtCurrent(androidx.compose.runtime.MovableContentStateReference,androidx.compose.runtime.SlotWriter)>(r1, r2);

        return;
    }

androidx.compose.runtime.ComposerImpl$apply$operation$1
<androidx.compose.runtime.ComposerImpl$apply$operation$1: kotlin.jvm.functions.Function2 $block>
<androidx.compose.runtime.ComposerImpl$apply$operation$1: java.lang.Object $value>
    void <init>(kotlin.jvm.functions.Function2, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$apply$operation$1 r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$apply$operation$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: java.lang.Object;

        r0.<androidx.compose.runtime.ComposerImpl$apply$operation$1: kotlin.jvm.functions.Function2 $block> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$apply$operation$1: java.lang.Object $value> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$apply$operation$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        kotlin.jvm.functions.Function2 $r4;
        java.lang.Object $r5, $r6;

        r0 := @this: androidx.compose.runtime.ComposerImpl$apply$operation$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$apply$operation$1: kotlin.jvm.functions.Function2 $block>;

        $r5 = interfaceinvoke r1.<androidx.compose.runtime.Applier: java.lang.Object getCurrent()>();

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$apply$operation$1: java.lang.Object $value>;

        interfaceinvoke $r4.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$apply$operation$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$apply$operation$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$apply$operation$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$CompositionContextHolder
<androidx.compose.runtime.ComposerImpl$CompositionContextHolder: androidx.compose.runtime.ComposerImpl$CompositionContextImpl ref>
    public void <init>(androidx.compose.runtime.ComposerImpl$CompositionContextImpl)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextHolder r0;
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextHolder;

        r1 := @parameter0: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ref");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl$CompositionContextHolder: androidx.compose.runtime.ComposerImpl$CompositionContextImpl ref> = r1;

        return;
    }

    public final androidx.compose.runtime.ComposerImpl$CompositionContextImpl getRef()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextHolder r0;
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextHolder;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextHolder: androidx.compose.runtime.ComposerImpl$CompositionContextImpl ref>;

        return $r1;
    }

    public void onRemembered()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextHolder r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextHolder;

        return;
    }

    public void onAbandoned()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextHolder r0;
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextHolder;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextHolder: androidx.compose.runtime.ComposerImpl$CompositionContextImpl ref>;

        virtualinvoke $r1.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: void dispose()>();

        return;
    }

    public void onForgotten()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextHolder r0;
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextHolder;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextHolder: androidx.compose.runtime.ComposerImpl$CompositionContextImpl ref>;

        virtualinvoke $r1.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: void dispose()>();

        return;
    }

androidx.compose.runtime.ComposerImpl$CompositionContextImpl
<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: int compoundHashKey>
<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: boolean collectingParameterInformation>
<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set inspectionTables>
<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set composers>
<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.MutableState compositionLocalScope$delegate>
<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>
    public void <init>(androidx.compose.runtime.ComposerImpl, int, boolean)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.ComposerImpl r1;
        int i0;
        boolean z0;
        java.util.LinkedHashSet $r2;
        java.util.Set $r3;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r4;
        androidx.compose.runtime.MutableState $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.ComposerImpl;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0> = r1;

        specialinvoke r0.<androidx.compose.runtime.CompositionContext: void <init>()>();

        r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: int compoundHashKey> = i0;

        r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: boolean collectingParameterInformation> = z0;

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        $r3 = (java.util.Set) $r2;

        r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set composers> = $r3;

        $r4 = staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.ExtensionsKt: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap persistentHashMapOf()>();

        $r5 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r4, null, 2, null);

        r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.MutableState compositionLocalScope$delegate> = $r5;

        return;
    }

    public int getCompoundHashKey$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: int compoundHashKey>;

        return $i0;
    }

    public boolean getCollectingParameterInformation$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $z0 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: boolean collectingParameterInformation>;

        return $z0;
    }

    public final java.util.Set getInspectionTables()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        java.util.Set $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set inspectionTables>;

        return $r1;
    }

    public final void setInspectionTables(java.util.Set)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        java.util.Set r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: java.util.Set;

        r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set inspectionTables> = r1;

        return;
    }

    public final java.util.Set getComposers()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        java.util.Set $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set composers>;

        return $r1;
    }

    public final void dispose()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        java.util.Set r1, r5, $r6, $r8, $r9, $r10;
        java.util.Iterator r2, r4;
        androidx.compose.runtime.ComposerImpl r3;
        java.util.Collection $r7;
        boolean $z1, $z2, $z3, $z5;
        java.lang.Object $r11, $r12;
        androidx.compose.runtime.SlotTable $r13;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set composers>;

        $r7 = (java.util.Collection) $r6;

        $z1 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        if $z5 == 0 goto label7;

        $r8 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set inspectionTables>;

        if $r8 == null goto label6;

        r1 = $r8;

        $r10 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set composers>;

        r2 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.compose.runtime.ComposerImpl) $r11;

        r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Set) $r12;

        $r13 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable access$getSlotTable$p(androidx.compose.runtime.ComposerImpl)>(r3);

        interfaceinvoke r5.<java.util.Set: boolean remove(java.lang.Object)>($r13);

        goto label4;

     label5:
        goto label6;

     label6:
        $r9 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set composers>;

        interfaceinvoke $r9.<java.util.Set: void clear()>();

     label7:
        return;
    }

    public void registerComposer$runtime_release(androidx.compose.runtime.Composer)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.Composer r1, $r3;
        androidx.compose.runtime.ComposerImpl $r2;
        java.util.Set $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.Composer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composer");

        $r2 = (androidx.compose.runtime.ComposerImpl) r1;

        $r3 = (androidx.compose.runtime.Composer) $r2;

        specialinvoke r0.<androidx.compose.runtime.CompositionContext: void registerComposer$runtime_release(androidx.compose.runtime.Composer)>($r3);

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set composers>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void unregisterComposer$runtime_release(androidx.compose.runtime.Composer)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.Composer r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.util.Set r5, $r6, $r7;
        java.util.Collection $r8, $r9;
        boolean $z3;
        androidx.compose.runtime.ComposerImpl $r10;
        androidx.compose.runtime.SlotTable $r11;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.Composer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composer");

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set inspectionTables>;

        if $r6 == null goto label3;

        $r2 = (java.lang.Iterable) $r6;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Set) r4;

        $r10 = (androidx.compose.runtime.ComposerImpl) r1;

        $r11 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotTable access$getSlotTable$p(androidx.compose.runtime.ComposerImpl)>($r10);

        interfaceinvoke r5.<java.util.Set: boolean remove(java.lang.Object)>($r11);

        goto label1;

     label2:
        goto label3;

     label3:
        $r7 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set composers>;

        $r8 = (java.util.Collection) $r7;

        $r9 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.util.Collection asMutableCollection(java.lang.Object)>($r8);

        interfaceinvoke $r9.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void registerComposition$runtime_release(androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.ControlledComposition r1;
        androidx.compose.runtime.ComposerImpl $r2;
        androidx.compose.runtime.CompositionContext $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composition");

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r2);

        virtualinvoke $r3.<androidx.compose.runtime.CompositionContext: void registerComposition$runtime_release(androidx.compose.runtime.ControlledComposition)>(r1);

        return;
    }

    public void unregisterComposition$runtime_release(androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.ControlledComposition r1;
        androidx.compose.runtime.ComposerImpl $r2;
        androidx.compose.runtime.CompositionContext $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composition");

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r2);

        virtualinvoke $r3.<androidx.compose.runtime.CompositionContext: void unregisterComposition$runtime_release(androidx.compose.runtime.ControlledComposition)>(r1);

        return;
    }

    public kotlin.coroutines.CoroutineContext getEffectCoroutineContext$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.ComposerImpl $r1;
        androidx.compose.runtime.CompositionContext $r2;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r2 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r1);

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.CompositionContext: kotlin.coroutines.CoroutineContext getEffectCoroutineContext$runtime_release()>();

        return $r3;
    }

    public kotlin.coroutines.CoroutineContext getRecomposeCoroutineContext$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.ComposerImpl $r1;
        androidx.compose.runtime.ControlledComposition $r2;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition getComposition()>();

        $r3 = staticinvoke <androidx.compose.runtime.CompositionKt: kotlin.coroutines.CoroutineContext getRecomposeCoroutineContext(androidx.compose.runtime.ControlledComposition)>($r2);

        return $r3;
    }

    public static void getRecomposeCoroutineContext$runtime_release$annotations()
    {
        return;
    }

    public void composeInitial$runtime_release(androidx.compose.runtime.ControlledComposition, kotlin.jvm.functions.Function2)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.ControlledComposition r1;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.runtime.ComposerImpl $r3;
        androidx.compose.runtime.CompositionContext $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composition");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "content");

        $r3 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r4 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r3);

        virtualinvoke $r4.<androidx.compose.runtime.CompositionContext: void composeInitial$runtime_release(androidx.compose.runtime.ControlledComposition,kotlin.jvm.functions.Function2)>(r1, r2);

        return;
    }

    public void invalidate$runtime_release(androidx.compose.runtime.ControlledComposition)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.ControlledComposition r1, $r5;
        androidx.compose.runtime.ComposerImpl $r2, $r4, $r6;
        androidx.compose.runtime.CompositionContext $r3, $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.ControlledComposition;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "composition");

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r2);

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r5 = virtualinvoke $r4.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition getComposition()>();

        virtualinvoke $r3.<androidx.compose.runtime.CompositionContext: void invalidate$runtime_release(androidx.compose.runtime.ControlledComposition)>($r5);

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r7 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r6);

        virtualinvoke $r7.<androidx.compose.runtime.CompositionContext: void invalidate$runtime_release(androidx.compose.runtime.ControlledComposition)>(r1);

        return;
    }

    public void invalidateScope$runtime_release(androidx.compose.runtime.RecomposeScopeImpl)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.RecomposeScopeImpl r1;
        androidx.compose.runtime.ComposerImpl $r2;
        androidx.compose.runtime.CompositionContext $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.RecomposeScopeImpl;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r2);

        virtualinvoke $r3.<androidx.compose.runtime.CompositionContext: void invalidateScope$runtime_release(androidx.compose.runtime.RecomposeScopeImpl)>(r1);

        return;
    }

    private final androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap getCompositionLocalScope()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.MutableState compositionLocalScope$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap) $r3;

        return $r4;
    }

    private final void setCompositionLocalScope(androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.MutableState compositionLocalScope$delegate>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        return;
    }

    public androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap getCompositionLocalScope$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        $r1 = specialinvoke r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap getCompositionLocalScope()>();

        return $r1;
    }

    public final void updateCompositionLocalScope(androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        specialinvoke r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: void setCompositionLocalScope(androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)>(r1);

        return;
    }

    public void recordInspectionTable$runtime_release(java.util.Set)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        java.util.Set r1, $r5, $r6;
        java.util.HashSet r2, r3, $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set inspectionTables>;

        if $r6 != null goto label1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r2 = $r4;

        r3 = r2;

        $r5 = (java.util.Set) r3;

        r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: java.util.Set inspectionTables> = $r5;

        $r6 = (java.util.Set) r2;

     label1:
        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void startComposing$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.ComposerImpl r1;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        i0 = staticinvoke <androidx.compose.runtime.ComposerImpl: int access$getChildrenComposing$p(androidx.compose.runtime.ComposerImpl)>(r1);

        $i1 = i0 + 1;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChildrenComposing$p(androidx.compose.runtime.ComposerImpl,int)>(r1, $i1);

        return;
    }

    public void doneComposing$runtime_release()
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.ComposerImpl r1;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        i0 = staticinvoke <androidx.compose.runtime.ComposerImpl: int access$getChildrenComposing$p(androidx.compose.runtime.ComposerImpl)>(r1);

        $i1 = i0 + -1;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChildrenComposing$p(androidx.compose.runtime.ComposerImpl,int)>(r1, $i1);

        return;
    }

    public void insertMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        androidx.compose.runtime.ComposerImpl $r2;
        androidx.compose.runtime.CompositionContext $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reference");

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r2);

        virtualinvoke $r3.<androidx.compose.runtime.CompositionContext: void insertMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)>(r1);

        return;
    }

    public void deletedMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        androidx.compose.runtime.ComposerImpl $r2;
        androidx.compose.runtime.CompositionContext $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reference");

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r2);

        virtualinvoke $r3.<androidx.compose.runtime.CompositionContext: void deletedMovableContent$runtime_release(androidx.compose.runtime.MovableContentStateReference)>(r1);

        return;
    }

    public androidx.compose.runtime.MovableContentState movableContentStateResolve$runtime_release(androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        androidx.compose.runtime.ComposerImpl $r2;
        androidx.compose.runtime.CompositionContext $r3;
        androidx.compose.runtime.MovableContentState $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reference");

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r3 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r2);

        $r4 = virtualinvoke $r3.<androidx.compose.runtime.CompositionContext: androidx.compose.runtime.MovableContentState movableContentStateResolve$runtime_release(androidx.compose.runtime.MovableContentStateReference)>(r1);

        return $r4;
    }

    public void movableContentStateReleased$runtime_release(androidx.compose.runtime.MovableContentStateReference, androidx.compose.runtime.MovableContentState)
    {
        androidx.compose.runtime.ComposerImpl$CompositionContextImpl r0;
        androidx.compose.runtime.MovableContentStateReference r1;
        androidx.compose.runtime.MovableContentState r2;
        androidx.compose.runtime.ComposerImpl $r3;
        androidx.compose.runtime.CompositionContext $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$CompositionContextImpl;

        r1 := @parameter0: androidx.compose.runtime.MovableContentStateReference;

        r2 := @parameter1: androidx.compose.runtime.MovableContentState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reference");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "data");

        $r3 = r0.<androidx.compose.runtime.ComposerImpl$CompositionContextImpl: androidx.compose.runtime.ComposerImpl this$0>;

        $r4 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r3);

        virtualinvoke $r4.<androidx.compose.runtime.CompositionContext: void movableContentStateReleased$runtime_release(androidx.compose.runtime.MovableContentStateReference,androidx.compose.runtime.MovableContentState)>(r1, r2);

        return;
    }

androidx.compose.runtime.ComposerImpl$createNode$2
<androidx.compose.runtime.ComposerImpl$createNode$2: kotlin.jvm.functions.Function0 $factory>
<androidx.compose.runtime.ComposerImpl$createNode$2: androidx.compose.runtime.Anchor $groupAnchor>
<androidx.compose.runtime.ComposerImpl$createNode$2: int $insertIndex>
    void <init>(kotlin.jvm.functions.Function0, androidx.compose.runtime.Anchor, int)
    {
        androidx.compose.runtime.ComposerImpl$createNode$2 r0;
        kotlin.jvm.functions.Function0 $r1;
        androidx.compose.runtime.Anchor $r2;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$createNode$2;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r2 := @parameter1: androidx.compose.runtime.Anchor;

        $i0 := @parameter2: int;

        r0.<androidx.compose.runtime.ComposerImpl$createNode$2: kotlin.jvm.functions.Function0 $factory> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$createNode$2: androidx.compose.runtime.Anchor $groupAnchor> = $r2;

        r0.<androidx.compose.runtime.ComposerImpl$createNode$2: int $insertIndex> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$createNode$2 r0;
        androidx.compose.runtime.Applier r1, r5;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        java.lang.Object r4;
        kotlin.jvm.functions.Function0 $r6;
        androidx.compose.runtime.Anchor $r7;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$createNode$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$createNode$2: kotlin.jvm.functions.Function0 $factory>;

        r4 = interfaceinvoke $r6.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r7 = r0.<androidx.compose.runtime.ComposerImpl$createNode$2: androidx.compose.runtime.Anchor $groupAnchor>;

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void updateNode(androidx.compose.runtime.Anchor,java.lang.Object)>($r7, r4);

        r5 = r1;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl$createNode$2: int $insertIndex>;

        interfaceinvoke r5.<androidx.compose.runtime.Applier: void insertTopDown(int,java.lang.Object)>($i0, r4);

        interfaceinvoke r1.<androidx.compose.runtime.Applier: void down(java.lang.Object)>(r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$createNode$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$createNode$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$createNode$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$createNode$3
<androidx.compose.runtime.ComposerImpl$createNode$3: androidx.compose.runtime.Anchor $groupAnchor>
<androidx.compose.runtime.ComposerImpl$createNode$3: int $insertIndex>
    void <init>(androidx.compose.runtime.Anchor, int)
    {
        androidx.compose.runtime.ComposerImpl$createNode$3 r0;
        androidx.compose.runtime.Anchor $r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$createNode$3;

        $r1 := @parameter0: androidx.compose.runtime.Anchor;

        $i0 := @parameter1: int;

        r0.<androidx.compose.runtime.ComposerImpl$createNode$3: androidx.compose.runtime.Anchor $groupAnchor> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$createNode$3: int $insertIndex> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$createNode$3 r0;
        androidx.compose.runtime.Applier r1, r5;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        java.lang.Object r4;
        androidx.compose.runtime.Anchor $r6;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$createNode$3;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$createNode$3: androidx.compose.runtime.Anchor $groupAnchor>;

        r4 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.lang.Object node(androidx.compose.runtime.Anchor)>($r6);

        interfaceinvoke r1.<androidx.compose.runtime.Applier: void up()>();

        r5 = r1;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl$createNode$3: int $insertIndex>;

        interfaceinvoke r5.<androidx.compose.runtime.Applier: void insertBottomUp(int,java.lang.Object)>($i0, r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$createNode$3 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$createNode$3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$createNode$3: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1
<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: java.lang.Object $data>
<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: int $group>
<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: int $index>
    void <init>(java.lang.Object, int, int)
    {
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1 r0;
        java.lang.Object $r1;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: java.lang.Object $data> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: int $group> = $i0;

        r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: int $index> = $i1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        boolean z0;
        int $i0, $i1, $i2;
        java.lang.Object $r4, $r5, $r6, $r9;
        androidx.compose.runtime.RememberObserver $r7;
        androidx.compose.runtime.Composer$Companion $r8;
        java.lang.String $r11, $r14;
        kotlin.KotlinNothingValueException $r13;

        r0 := @this: androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "rememberManager");

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: java.lang.Object $data>;

        $i1 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: int $group>;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: int $index>;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.lang.Object slot(int,int)>($i1, $i0);

        z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if z0 != 0 goto label1;

        $r14 = "Slot table is out of sync";

        $r11 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r11);

        $r13 = new kotlin.KotlinNothingValueException;

        specialinvoke $r13.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r13;

     label1:
        $r6 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: java.lang.Object $data>;

        $r7 = (androidx.compose.runtime.RememberObserver) $r6;

        interfaceinvoke r3.<androidx.compose.runtime.RememberManager: void forgetting(androidx.compose.runtime.RememberObserver)>($r7);

        $i2 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: int $index>;

        $r8 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r9 = virtualinvoke $r8.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.lang.Object set(int,java.lang.Object)>($i2, $r9);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2
<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: java.lang.Object $data>
<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: int $group>
<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: int $index>
    void <init>(java.lang.Object, int, int)
    {
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2 r0;
        java.lang.Object $r1;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: java.lang.Object $data> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: int $group> = $i0;

        r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: int $index> = $i1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        boolean z0;
        int $i0, $i1, $i2;
        java.lang.Object $r4, $r5, $r7;
        androidx.compose.runtime.Composer$Companion $r6;
        java.lang.String $r9, $r12;
        kotlin.KotlinNothingValueException $r11;

        r0 := @this: androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: java.lang.Object $data>;

        $i1 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: int $group>;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: int $index>;

        $r5 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.lang.Object slot(int,int)>($i1, $i0);

        z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if z0 != 0 goto label1;

        $r12 = "Slot table is out of sync";

        $r9 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>($r9);

        $r11 = new kotlin.KotlinNothingValueException;

        specialinvoke $r11.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r11;

     label1:
        $i2 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: int $index>;

        $r6 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r7 = virtualinvoke $r6.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.lang.Object set(int,java.lang.Object)>($i2, $r7);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2
<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: androidx.compose.runtime.ComposerImpl this$0>
<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: int $group>
    void <init>(androidx.compose.runtime.ComposerImpl, int)
    {
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2 r0;
        androidx.compose.runtime.ComposerImpl $r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2;

        $r1 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $i0 := @parameter1: int;

        r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: androidx.compose.runtime.ComposerImpl this$0> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: int $group> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(int, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2 r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, r2;
        androidx.compose.runtime.CompositionImpl r3;
        boolean $z0, $z1;
        androidx.compose.runtime.RecomposeScopeImpl $r4, $r10;
        androidx.compose.runtime.ComposerImpl $r5, $r8, $r11, $r14;
        androidx.compose.runtime.SlotReader $r6, $r12;
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2 $r7;
        kotlin.jvm.functions.Function3 $r9, $r15;
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1 $r13;

        r0 := @this: androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 = r1;

        $z0 = r2 instanceof androidx.compose.runtime.RememberObserver;

        if $z0 == 0 goto label1;

        $r11 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: androidx.compose.runtime.ComposerImpl this$0>;

        $r12 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader access$getReader$p(androidx.compose.runtime.ComposerImpl)>($r11);

        $i3 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: int $group>;

        virtualinvoke $r12.<androidx.compose.runtime.SlotReader: void reposition(int)>($i3);

        $r14 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: androidx.compose.runtime.ComposerImpl this$0>;

        $r13 = new androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1;

        $i4 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: int $group>;

        specialinvoke $r13.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$1: void <init>(java.lang.Object,int,int)>(r1, $i4, i0);

        $r15 = (kotlin.jvm.functions.Function3) $r13;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void recordSlotTableOperation$default(androidx.compose.runtime.ComposerImpl,boolean,kotlin.jvm.functions.Function3,int,java.lang.Object)>($r14, 0, $r15, 1, null);

        goto label3;

     label1:
        $z1 = r2 instanceof androidx.compose.runtime.RecomposeScopeImpl;

        if $z1 == 0 goto label3;

        $r4 = (androidx.compose.runtime.RecomposeScopeImpl) r1;

        r3 = virtualinvoke $r4.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.CompositionImpl getComposition()>();

        if r3 == null goto label2;

        virtualinvoke r3.<androidx.compose.runtime.CompositionImpl: void setPendingInvalidScopes$runtime_release(boolean)>(1);

        $r10 = (androidx.compose.runtime.RecomposeScopeImpl) r1;

        virtualinvoke $r10.<androidx.compose.runtime.RecomposeScopeImpl: void release()>();

     label2:
        $r5 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: androidx.compose.runtime.ComposerImpl this$0>;

        $r6 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader access$getReader$p(androidx.compose.runtime.ComposerImpl)>($r5);

        $i1 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: int $group>;

        virtualinvoke $r6.<androidx.compose.runtime.SlotReader: void reposition(int)>($i1);

        $r8 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: androidx.compose.runtime.ComposerImpl this$0>;

        $r7 = new androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2;

        $i2 = r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: int $group>;

        specialinvoke $r7.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2$2: void <init>(java.lang.Object,int,int)>(r1, $i2, i0);

        $r9 = (kotlin.jvm.functions.Function3) $r7;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void recordSlotTableOperation$default(androidx.compose.runtime.ComposerImpl,boolean,kotlin.jvm.functions.Function3,int,java.lang.Object)>($r8, 0, $r9, 1, null);

     label3:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2 r0;
        java.lang.Object r1, r2;
        java.lang.Number $r3;
        int $i0;
        kotlin.Unit $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Number) r1;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$deactivateToEndGroup$2: void invoke(int,java.lang.Object)>($i0, r2);

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;
    }

androidx.compose.runtime.ComposerImpl$doCompose$2$3
<androidx.compose.runtime.ComposerImpl$doCompose$2$3: androidx.compose.runtime.ComposerImpl this$0>
    void <init>(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl$doCompose$2$3 r0;
        androidx.compose.runtime.ComposerImpl $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$2$3;

        $r1 := @parameter0: androidx.compose.runtime.ComposerImpl;

        r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$3: androidx.compose.runtime.ComposerImpl this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.runtime.State)
    {
        androidx.compose.runtime.ComposerImpl$doCompose$2$3 r0;
        androidx.compose.runtime.State r1;
        androidx.compose.runtime.ComposerImpl r2;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$2$3;

        r1 := @parameter0: androidx.compose.runtime.State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        r2 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$3: androidx.compose.runtime.ComposerImpl this$0>;

        i0 = staticinvoke <androidx.compose.runtime.ComposerImpl: int access$getChildrenComposing$p(androidx.compose.runtime.ComposerImpl)>(r2);

        $i1 = i0 + 1;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChildrenComposing$p(androidx.compose.runtime.ComposerImpl,int)>(r2, $i1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$doCompose$2$3 r0;
        java.lang.Object r1;
        androidx.compose.runtime.State $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$2$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.runtime.State) r1;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$3: void invoke(androidx.compose.runtime.State)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.runtime.ComposerImpl$doCompose$2$4
<androidx.compose.runtime.ComposerImpl$doCompose$2$4: androidx.compose.runtime.ComposerImpl this$0>
    void <init>(androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl$doCompose$2$4 r0;
        androidx.compose.runtime.ComposerImpl $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$2$4;

        $r1 := @parameter0: androidx.compose.runtime.ComposerImpl;

        r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$4: androidx.compose.runtime.ComposerImpl this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.runtime.State)
    {
        androidx.compose.runtime.ComposerImpl$doCompose$2$4 r0;
        androidx.compose.runtime.State r1;
        androidx.compose.runtime.ComposerImpl r2;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$2$4;

        r1 := @parameter0: androidx.compose.runtime.State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        r2 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$4: androidx.compose.runtime.ComposerImpl this$0>;

        i0 = staticinvoke <androidx.compose.runtime.ComposerImpl: int access$getChildrenComposing$p(androidx.compose.runtime.ComposerImpl)>(r2);

        $i1 = i0 + -1;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChildrenComposing$p(androidx.compose.runtime.ComposerImpl,int)>(r2, $i1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$doCompose$2$4 r0;
        java.lang.Object r1;
        androidx.compose.runtime.State $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$2$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.runtime.State) r1;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$4: void invoke(androidx.compose.runtime.State)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.runtime.ComposerImpl$doCompose$2$5
<androidx.compose.runtime.ComposerImpl$doCompose$2$5: kotlin.jvm.functions.Function2 $content>
<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0>
<androidx.compose.runtime.ComposerImpl$doCompose$2$5: java.lang.Object $savedContent>
    void <init>(kotlin.jvm.functions.Function2, androidx.compose.runtime.ComposerImpl, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$doCompose$2$5 r0;
        kotlin.jvm.functions.Function2 $r1;
        androidx.compose.runtime.ComposerImpl $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$2$5;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: androidx.compose.runtime.ComposerImpl;

        $r3 := @parameter2: java.lang.Object;

        r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: kotlin.jvm.functions.Function2 $content> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0> = $r2;

        r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: java.lang.Object $savedContent> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.runtime.ComposerImpl$doCompose$2$5 r0;
        kotlin.jvm.functions.Function2 $r1, $r13, $r18;
        androidx.compose.runtime.ComposerImpl $r2, $r7, $r9, $r14, $r15, $r17, $r20, $r21;
        boolean $z0, $z1;
        java.lang.Object $r3, $r5, $r6, $r8, $r10, $r12, $r16;
        androidx.compose.runtime.Composer$Companion $r4;
        androidx.compose.runtime.Composer $r11, $r19;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$2$5;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: kotlin.jvm.functions.Function2 $content>;

        if $r1 == null goto label1;

        $r15 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0>;

        $r16 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getInvocation()>();

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$startGroup(androidx.compose.runtime.ComposerImpl,int,java.lang.Object)>($r15, 200, $r16);

        $r17 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0>;

        $r19 = (androidx.compose.runtime.Composer) $r17;

        $r18 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: kotlin.jvm.functions.Function2 $content>;

        staticinvoke <androidx.compose.runtime.ActualJvm_jvmKt: void invokeComposable(androidx.compose.runtime.Composer,kotlin.jvm.functions.Function2)>($r19, $r18);

        $r20 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0>;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$endGroup(androidx.compose.runtime.ComposerImpl)>($r20);

        goto label3;

     label1:
        $r2 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0>;

        $z0 = staticinvoke <androidx.compose.runtime.ComposerImpl: boolean access$getForciblyRecompose$p(androidx.compose.runtime.ComposerImpl)>($r2);

        if $z0 == 0 goto label2;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: java.lang.Object $savedContent>;

        if $r3 == null goto label2;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: java.lang.Object $savedContent>;

        $r4 = <androidx.compose.runtime.Composer: androidx.compose.runtime.Composer$Companion Companion>;

        $r6 = virtualinvoke $r4.<androidx.compose.runtime.Composer$Companion: java.lang.Object getEmpty()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z1 != 0 goto label2;

        $r7 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0>;

        $r8 = staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Object getInvocation()>();

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$startGroup(androidx.compose.runtime.ComposerImpl,int,java.lang.Object)>($r7, 200, $r8);

        $r9 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0>;

        $r11 = (androidx.compose.runtime.Composer) $r9;

        $r10 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: java.lang.Object $savedContent>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r10, "null cannot be cast to non-null type kotlin.Function2<androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit>");

        $r12 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r10, 2);

        $r13 = (kotlin.jvm.functions.Function2) $r12;

        staticinvoke <androidx.compose.runtime.ActualJvm_jvmKt: void invokeComposable(androidx.compose.runtime.Composer,kotlin.jvm.functions.Function2)>($r11, $r13);

        $r14 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0>;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$endGroup(androidx.compose.runtime.ComposerImpl)>($r14);

        goto label3;

     label2:
        $r21 = r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: androidx.compose.runtime.ComposerImpl this$0>;

        virtualinvoke $r21.<androidx.compose.runtime.ComposerImpl: void skipCurrentGroup()>();

     label3:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.runtime.ComposerImpl$doCompose$2$5 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$2$5;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$doCompose$2$5: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.runtime.ComposerImpl$doCompose$lambda-37$$inlined$sortBy$1
    public void <init>()
    {
        androidx.compose.runtime.ComposerImpl$doCompose$lambda-37$$inlined$sortBy$1 r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$lambda-37$$inlined$sortBy$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final int compare(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$doCompose$lambda-37$$inlined$sortBy$1 r0;
        java.lang.Object r1, r2;
        java.lang.Comparable r3, $r6;
        int $i0, $i1, $i2;
        java.lang.Integer $r4, $r5;
        androidx.compose.runtime.Invalidation r7, r8;

        r0 := @this: androidx.compose.runtime.ComposerImpl$doCompose$lambda-37$$inlined$sortBy$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r7 = (androidx.compose.runtime.Invalidation) r1;

        $i0 = virtualinvoke r7.<androidx.compose.runtime.Invalidation: int getLocation()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r8 = (androidx.compose.runtime.Invalidation) r2;

        r3 = (java.lang.Comparable) $r4;

        $i1 = virtualinvoke r8.<androidx.compose.runtime.Invalidation: int getLocation()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = (java.lang.Comparable) $r5;

        $i2 = staticinvoke <kotlin.comparisons.ComparisonsKt: int compareValues(java.lang.Comparable,java.lang.Comparable)>(r3, $r6);

        return $i2;
    }

androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1
<androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1: kotlin.jvm.functions.Function1 $it>
<androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1: androidx.compose.runtime.ComposerImpl this$0>
    void <init>(kotlin.jvm.functions.Function1, androidx.compose.runtime.ComposerImpl)
    {
        androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1 r0;
        kotlin.jvm.functions.Function1 $r1;
        androidx.compose.runtime.ComposerImpl $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: androidx.compose.runtime.ComposerImpl;

        r0.<androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1: kotlin.jvm.functions.Function1 $it> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1: androidx.compose.runtime.ComposerImpl this$0> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        androidx.compose.runtime.ComposerImpl $r4;
        kotlin.jvm.functions.Function1 $r5;
        androidx.compose.runtime.ControlledComposition $r6;

        r0 := @this: androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r5 = r0.<androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1: kotlin.jvm.functions.Function1 $it>;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1: androidx.compose.runtime.ComposerImpl this$0>;

        $r6 = virtualinvoke $r4.<androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.ControlledComposition getComposition()>();

        interfaceinvoke $r5.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$endRestartGroup$1$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1: androidx.compose.runtime.Anchor $anchor>
    void <init>(kotlin.jvm.internal.Ref$IntRef, androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1 r0;
        kotlin.jvm.internal.Ref$IntRef $r1;
        androidx.compose.runtime.Anchor $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$IntRef;

        $r2 := @parameter1: androidx.compose.runtime.Anchor;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1: androidx.compose.runtime.Anchor $anchor> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        androidx.compose.runtime.Anchor $r4;
        kotlin.jvm.internal.Ref$IntRef $r5;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r5 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1: androidx.compose.runtime.Anchor $anchor>;

        $i0 = staticinvoke <androidx.compose.runtime.ComposerImpl: int access$insertMovableContentGuarded$positionToInsert(androidx.compose.runtime.SlotWriter,androidx.compose.runtime.Anchor,androidx.compose.runtime.Applier)>(r2, $r4, r1);

        $r5.<kotlin.jvm.internal.Ref$IntRef: int element> = $i0;

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.ComposerImpl this$0>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: java.util.List $offsetChanges>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.SlotReader $reader>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.MovableContentStateReference $to>
    void <init>(androidx.compose.runtime.ComposerImpl, java.util.List, androidx.compose.runtime.SlotReader, androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1 r0;
        androidx.compose.runtime.ComposerImpl $r1;
        java.util.List $r2;
        androidx.compose.runtime.SlotReader $r3;
        androidx.compose.runtime.MovableContentStateReference $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1;

        $r1 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: androidx.compose.runtime.SlotReader;

        $r4 := @parameter3: androidx.compose.runtime.MovableContentStateReference;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.ComposerImpl this$0> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: java.util.List $offsetChanges> = $r2;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.SlotReader $reader> = $r3;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.MovableContentStateReference $to> = $r4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1 r0;
        androidx.compose.runtime.ComposerImpl r1, r3, r7;
        java.util.List r2, r6;
        androidx.compose.runtime.SlotReader r4, r8;
        androidx.compose.runtime.MovableContentStateReference r5;
        int[] r9;
        androidx.compose.runtime.MovableContent $r10;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r11;
        java.lang.Object $r12;
        java.lang.Throwable $r13, $r14, r18;
        kotlin.Unit $r15, r17;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1;

        r1 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.ComposerImpl this$0>;

        r2 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: java.util.List $offsetChanges>;

        r3 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.ComposerImpl this$0>;

        r4 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.SlotReader $reader>;

        r5 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: androidx.compose.runtime.MovableContentStateReference $to>;

        r6 = staticinvoke <androidx.compose.runtime.ComposerImpl: java.util.List access$getChanges$p(androidx.compose.runtime.ComposerImpl)>(r1);

     label01:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r1, r2);

        r7 = r3;

        r8 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.SlotReader access$getReader$p(androidx.compose.runtime.ComposerImpl)>(r7);

        r9 = staticinvoke <androidx.compose.runtime.ComposerImpl: int[] access$getNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl)>(r7);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl,int[])>(r7, null);

     label02:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setReader$p(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.SlotReader)>(r7, r4);

        $r10 = virtualinvoke r5.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.MovableContent getContent$runtime_release()>();

        $r11 = virtualinvoke r5.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap getLocals$runtime_release()>();

        $r12 = virtualinvoke r5.<androidx.compose.runtime.MovableContentStateReference: java.lang.Object getParameter$runtime_release()>();

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$invokeMovableContentLambda(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.MovableContent,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap,java.lang.Object,boolean)>(r3, $r10, $r11, $r12, 1);

        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label03:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setReader$p(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.SlotReader)>(r7, r8);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl,int[])>(r7, r9);

        goto label06;

     label04:
        $r13 := @caughtexception;

     label05:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setReader$p(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.SlotReader)>(r7, r8);

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setNodeCountOverrides$p(androidx.compose.runtime.ComposerImpl,int[])>(r7, r9);

        throw $r13;

     label06:
        r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r1, r6);

        goto label10;

     label08:
        $r14 := @caughtexception;

        r18 = $r14;

     label09:
        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$setChanges$p(androidx.compose.runtime.ComposerImpl,java.util.List)>(r1, r6);

        throw r18;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2: java.util.List $offsetChanges>
    void <init>(kotlin.jvm.internal.Ref$IntRef, java.util.List)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2 r0;
        kotlin.jvm.internal.Ref$IntRef $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$IntRef;

        $r2 := @parameter1: java.util.List;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2: java.util.List $offsetChanges> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2 r0;
        androidx.compose.runtime.Applier r1, r4, $r12;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        java.util.List $r5;
        int i0, $i1, $i2, i3;
        java.lang.Object r6;
        kotlin.jvm.functions.Function3 r7;
        kotlin.jvm.internal.Ref$IntRef $r8, $r11;
        androidx.compose.runtime.OffsetApplier $r10;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "rememberManager");

        $r8 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>;

        $i1 = $r8.<kotlin.jvm.internal.Ref$IntRef: int element>;

        if $i1 <= 0 goto label1;

        $r10 = new androidx.compose.runtime.OffsetApplier;

        $r11 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>;

        $i2 = $r11.<kotlin.jvm.internal.Ref$IntRef: int element>;

        specialinvoke $r10.<androidx.compose.runtime.OffsetApplier: void <init>(androidx.compose.runtime.Applier,int)>(r1, $i2);

        $r12 = (androidx.compose.runtime.Applier) $r10;

        goto label2;

     label1:
        $r12 = r1;

     label2:
        r4 = $r12;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2: java.util.List $offsetChanges>;

        i3 = 0;

        i0 = interfaceinvoke $r5.<java.util.List: int size()>();

     label3:
        if i3 >= i0 goto label4;

        r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i3);

        r7 = (kotlin.jvm.functions.Function3) r6;

        interfaceinvoke r7.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>(r4, r2, r3);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$2$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3: java.util.List $nodesToInsert>
    void <init>(kotlin.jvm.internal.Ref$IntRef, java.util.List)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3 r0;
        kotlin.jvm.internal.Ref$IntRef $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$IntRef;

        $r2 := @parameter1: java.util.List;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3: java.util.List $nodesToInsert> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        int i0, i1, i2, $i3, $i4, i5;
        java.util.List $r4;
        java.lang.Object r5, r6;
        kotlin.jvm.internal.Ref$IntRef $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r7 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>;

        i0 = $r7.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3: java.util.List $nodesToInsert>;

        i5 = 0;

        i1 = interfaceinvoke $r4.<java.util.List: int size()>();

     label1:
        if i5 >= i1 goto label2;

        r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i5);

        r6 = r5;

        i2 = i5;

        $i3 = i0 + i2;

        interfaceinvoke r1.<androidx.compose.runtime.Applier: void insertBottomUp(int,java.lang.Object)>($i3, r6);

        $i4 = i0 + i2;

        interfaceinvoke r1.<androidx.compose.runtime.Applier: void insertTopDown(int,java.lang.Object)>($i4, r6);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$3: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.MovableContentState $resolvedState>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.ComposerImpl this$0>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.MovableContentStateReference $from>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.MovableContentStateReference $to>
    void <init>(androidx.compose.runtime.MovableContentState, androidx.compose.runtime.ComposerImpl, androidx.compose.runtime.MovableContentStateReference, androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4 r0;
        androidx.compose.runtime.MovableContentState $r1;
        androidx.compose.runtime.ComposerImpl $r2;
        androidx.compose.runtime.MovableContentStateReference $r3, $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4;

        $r1 := @parameter0: androidx.compose.runtime.MovableContentState;

        $r2 := @parameter1: androidx.compose.runtime.ComposerImpl;

        $r3 := @parameter2: androidx.compose.runtime.MovableContentStateReference;

        $r4 := @parameter3: androidx.compose.runtime.MovableContentStateReference;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.MovableContentState $resolvedState> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.ComposerImpl this$0> = $r2;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.MovableContentStateReference $from> = $r3;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.MovableContentStateReference $to> = $r4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        androidx.compose.runtime.MovableContentState r4, $r22;
        java.util.List r5;
        androidx.compose.runtime.CompositionImpl r6;
        int i0, i1;
        java.lang.Object r8, r10;
        androidx.compose.runtime.Anchor r9;
        androidx.compose.runtime.RecomposeScopeImpl r11, $r23;
        androidx.compose.runtime.SlotTable $r12;
        java.util.Collection $r13;
        boolean $z2, $z3, $z4;
        androidx.compose.runtime.MovableContentStateReference $r14, $r19;
        androidx.compose.runtime.ControlledComposition $r15;
        androidx.compose.runtime.ComposerImpl $r17;
        androidx.compose.runtime.CompositionContext $r18;
        kotlin.KotlinNothingValueException $r21;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r22 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.MovableContentState $resolvedState>;

        if $r22 != null goto label1;

        $r17 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.ComposerImpl this$0>;

        $r18 = staticinvoke <androidx.compose.runtime.ComposerImpl: androidx.compose.runtime.CompositionContext access$getParentContext$p(androidx.compose.runtime.ComposerImpl)>($r17);

        $r19 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.MovableContentStateReference $from>;

        $r22 = virtualinvoke $r18.<androidx.compose.runtime.CompositionContext: androidx.compose.runtime.MovableContentState movableContentStateResolve$runtime_release(androidx.compose.runtime.MovableContentStateReference)>($r19);

        if $r22 != null goto label1;

        staticinvoke <androidx.compose.runtime.ComposerKt: java.lang.Void composeRuntimeError(java.lang.String)>("Could not resolve state for movable content");

        $r21 = new kotlin.KotlinNothingValueException;

        specialinvoke $r21.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r21;

     label1:
        r4 = $r22;

        $r12 = virtualinvoke r4.<androidx.compose.runtime.MovableContentState: androidx.compose.runtime.SlotTable getSlotTable$runtime_release()>();

        r5 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.util.List moveIntoGroupFrom(int,androidx.compose.runtime.SlotTable,int)>(1, $r12, 2);

        $r13 = (java.util.Collection) r5;

        $z2 = interfaceinvoke $r13.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        if $z4 == 0 goto label8;

        $r14 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: androidx.compose.runtime.MovableContentStateReference $to>;

        $r15 = virtualinvoke $r14.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.ControlledComposition getComposition$runtime_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r15, "null cannot be cast to non-null type androidx.compose.runtime.CompositionImpl");

        r6 = (androidx.compose.runtime.CompositionImpl) $r15;

        i1 = 0;

        i0 = interfaceinvoke r5.<java.util.List: int size()>();

     label4:
        if i1 >= i0 goto label8;

        r8 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i1);

        r9 = (androidx.compose.runtime.Anchor) r8;

        r10 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.lang.Object slot(androidx.compose.runtime.Anchor,int)>(r9, 0);

        $z3 = r10 instanceof androidx.compose.runtime.RecomposeScopeImpl;

        if $z3 == 0 goto label5;

        $r23 = (androidx.compose.runtime.RecomposeScopeImpl) r10;

        goto label6;

     label5:
        $r23 = null;

     label6:
        r11 = $r23;

        if r11 == null goto label7;

        virtualinvoke r11.<androidx.compose.runtime.RecomposeScopeImpl: void adoptedBy(androidx.compose.runtime.CompositionImpl)>(r6);

        goto label7;

     label7:
        i1 = i1 + 1;

        goto label4;

     label8:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$4: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: androidx.compose.runtime.ComposerImpl this$0>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: androidx.compose.runtime.MovableContentStateReference $to>
    void <init>(androidx.compose.runtime.ComposerImpl, androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1 r0;
        androidx.compose.runtime.ComposerImpl $r1;
        androidx.compose.runtime.MovableContentStateReference $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1;

        $r1 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $r2 := @parameter1: androidx.compose.runtime.MovableContentStateReference;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: androidx.compose.runtime.ComposerImpl this$0> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: androidx.compose.runtime.MovableContentStateReference $to> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1 r0;
        androidx.compose.runtime.MovableContentStateReference $r1, $r4, $r6;
        androidx.compose.runtime.ComposerImpl $r2;
        androidx.compose.runtime.MovableContent $r3;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r5;
        java.lang.Object $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1;

        $r2 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: androidx.compose.runtime.ComposerImpl this$0>;

        $r1 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: androidx.compose.runtime.MovableContentStateReference $to>;

        $r3 = virtualinvoke $r1.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.MovableContent getContent$runtime_release()>();

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: androidx.compose.runtime.MovableContentStateReference $to>;

        $r5 = virtualinvoke $r4.<androidx.compose.runtime.MovableContentStateReference: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap getLocals$runtime_release()>();

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: androidx.compose.runtime.MovableContentStateReference $to>;

        $r7 = virtualinvoke $r6.<androidx.compose.runtime.MovableContentStateReference: java.lang.Object getParameter$runtime_release()>();

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$invokeMovableContentLambda(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.MovableContent,androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap,java.lang.Object,boolean)>($r2, $r3, $r5, $r7, 1);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$1$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2: java.util.List $offsetChanges>
    void <init>(kotlin.jvm.internal.Ref$IntRef, java.util.List)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2 r0;
        kotlin.jvm.internal.Ref$IntRef $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$IntRef;

        $r2 := @parameter1: java.util.List;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2: java.util.List $offsetChanges> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2 r0;
        androidx.compose.runtime.Applier r1, r4, $r12;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        java.util.List $r5;
        int i0, $i1, $i2, i3;
        java.lang.Object r6;
        kotlin.jvm.functions.Function3 r7;
        kotlin.jvm.internal.Ref$IntRef $r8, $r11;
        androidx.compose.runtime.OffsetApplier $r10;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "rememberManager");

        $r8 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>;

        $i1 = $r8.<kotlin.jvm.internal.Ref$IntRef: int element>;

        if $i1 <= 0 goto label1;

        $r10 = new androidx.compose.runtime.OffsetApplier;

        $r11 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2: kotlin.jvm.internal.Ref$IntRef $effectiveNodeIndex>;

        $i2 = $r11.<kotlin.jvm.internal.Ref$IntRef: int element>;

        specialinvoke $r10.<androidx.compose.runtime.OffsetApplier: void <init>(androidx.compose.runtime.Applier,int)>(r1, $i2);

        $r12 = (androidx.compose.runtime.Applier) $r10;

        goto label2;

     label1:
        $r12 = r1;

     label2:
        r4 = $r12;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2: java.util.List $offsetChanges>;

        i3 = 0;

        i0 = interfaceinvoke $r5.<java.util.List: int size()>();

     label3:
        if i3 >= i0 goto label4;

        r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i3);

        r7 = (kotlin.jvm.functions.Function3) r6;

        interfaceinvoke r7.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>(r4, r2, r3);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$1$5$1$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2
<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2 INSTANCE>
    void <init>()
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2 r0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$insertMovableContentGuarded$positionToParentOf(androidx.compose.runtime.SlotWriter,androidx.compose.runtime.Applier,int)>(r2, r1, 0);

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: int endGroup()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

    static void <clinit>()
    {
        androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2 $r0;

        $r0 = new androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2;

        specialinvoke $r0.<androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2: void <init>()>();

        <androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2: androidx.compose.runtime.ComposerImpl$insertMovableContentGuarded$1$2 INSTANCE> = $r0;

        return;
    }

androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1
<androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1: androidx.compose.runtime.MovableContent $content>
<androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1: java.lang.Object $parameter>
    void <init>(androidx.compose.runtime.MovableContent, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1 r0;
        androidx.compose.runtime.MovableContent $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1;

        $r1 := @parameter0: androidx.compose.runtime.MovableContent;

        $r2 := @parameter1: java.lang.Object;

        r0.<androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1: androidx.compose.runtime.MovableContent $content> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1: java.lang.Object $parameter> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.compose.runtime.Composer, int)
    {
        androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1 r0;
        androidx.compose.runtime.Composer $r1;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        androidx.compose.runtime.MovableContent $r2;
        kotlin.jvm.functions.Function3 $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1;

        $r1 := @parameter0: androidx.compose.runtime.Composer;

        $i0 := @parameter1: int;

        staticinvoke <androidx.compose.runtime.ComposerKt: void sourceInformation(androidx.compose.runtime.Composer,java.lang.String)>($r1, "C2848@108576L18:Composer.kt#9igjgp");

        $i1 = $i0 & 11;

        if $i1 != 2 goto label1;

        $z2 = interfaceinvoke $r1.<androidx.compose.runtime.Composer: boolean getSkipping()>();

        if $z2 != 0 goto label3;

     label1:
        $z0 = staticinvoke <androidx.compose.runtime.ComposerKt: boolean isTraceInProgress()>();

        if $z0 == 0 goto label2;

        staticinvoke <androidx.compose.runtime.ComposerKt: void traceEventStart(int,int,int,java.lang.String)>(694380496, $i0, -1, "androidx.compose.runtime.ComposerImpl.invokeMovableContentLambda.<anonymous> (Composer.kt:2848)");

     label2:
        $r2 = r0.<androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1: androidx.compose.runtime.MovableContent $content>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.MovableContent: kotlin.jvm.functions.Function3 getContent()>();

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1: java.lang.Object $parameter>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        interfaceinvoke $r3.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r1, $r5);

        $z1 = staticinvoke <androidx.compose.runtime.ComposerKt: boolean isTraceInProgress()>();

        if $z1 == 0 goto label4;

        staticinvoke <androidx.compose.runtime.ComposerKt: void traceEventEnd()>();

        goto label4;

     label3:
        interfaceinvoke $r1.<androidx.compose.runtime.Composer: void skipToGroupEnd()>();

     label4:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1 r0;
        java.lang.Object r1, r2;
        java.lang.Number $r3;
        androidx.compose.runtime.Composer $r4;
        int $i0;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.runtime.Composer) r1;

        $r3 = (java.lang.Number) r2;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$invokeMovableContentLambda$1: void invoke(androidx.compose.runtime.Composer,int)>($r4, $i0);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

androidx.compose.runtime.ComposerImpl$realizeDowns$1
<androidx.compose.runtime.ComposerImpl$realizeDowns$1: java.lang.Object[] $nodes>
    void <init>(java.lang.Object[])
    {
        androidx.compose.runtime.ComposerImpl$realizeDowns$1 r0;
        java.lang.Object[] $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeDowns$1;

        $r1 := @parameter0: java.lang.Object[];

        r0.<androidx.compose.runtime.ComposerImpl$realizeDowns$1: java.lang.Object[] $nodes> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$realizeDowns$1 r0;
        androidx.compose.runtime.Applier r1, r4;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        int i0, i1;
        java.lang.Object[] $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeDowns$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        i1 = 0;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl$realizeDowns$1: java.lang.Object[] $nodes>;

        i0 = lengthof $r5;

     label1:
        if i1 >= i0 goto label2;

        r4 = r1;

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$realizeDowns$1: java.lang.Object[] $nodes>;

        $r7 = $r6[i1];

        interfaceinvoke r4.<androidx.compose.runtime.Applier: void down(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$realizeDowns$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeDowns$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$realizeDowns$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$realizeMovement$1
<androidx.compose.runtime.ComposerImpl$realizeMovement$1: int $removeIndex>
<androidx.compose.runtime.ComposerImpl$realizeMovement$1: int $count>
    void <init>(int, int)
    {
        androidx.compose.runtime.ComposerImpl$realizeMovement$1 r0;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeMovement$1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$1: int $removeIndex> = $i0;

        r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$1: int $count> = $i1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$realizeMovement$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        int $i0, $i1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeMovement$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $i1 = r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$1: int $removeIndex>;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$1: int $count>;

        interfaceinvoke r1.<androidx.compose.runtime.Applier: void remove(int,int)>($i1, $i0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$realizeMovement$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeMovement$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$realizeMovement$2
<androidx.compose.runtime.ComposerImpl$realizeMovement$2: int $from>
<androidx.compose.runtime.ComposerImpl$realizeMovement$2: int $to>
<androidx.compose.runtime.ComposerImpl$realizeMovement$2: int $count>
    void <init>(int, int, int)
    {
        androidx.compose.runtime.ComposerImpl$realizeMovement$2 r0;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeMovement$2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$2: int $from> = $i0;

        r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$2: int $to> = $i1;

        r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$2: int $count> = $i2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$realizeMovement$2 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeMovement$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $i2 = r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$2: int $from>;

        $i1 = r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$2: int $to>;

        $i0 = r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$2: int $count>;

        interfaceinvoke r1.<androidx.compose.runtime.Applier: void move(int,int,int)>($i2, $i1, $i0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$realizeMovement$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeMovement$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$realizeMovement$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2
<androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2: int $distance>
    void <init>(int)
    {
        androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2 r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2;

        $i0 := @parameter0: int;

        r0.<androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2: int $distance> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $i0 = r0.<androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2: int $distance>;

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void advanceBy(int)>($i0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$realizeOperationLocation$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$realizeUps$1
<androidx.compose.runtime.ComposerImpl$realizeUps$1: int $count>
    void <init>(int)
    {
        androidx.compose.runtime.ComposerImpl$realizeUps$1 r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeUps$1;

        $i0 := @parameter0: int;

        r0.<androidx.compose.runtime.ComposerImpl$realizeUps$1: int $count> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$realizeUps$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        int i0, i1, i2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeUps$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        i0 = r0.<androidx.compose.runtime.ComposerImpl$realizeUps$1: int $count>;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        i1 = i2;

        interfaceinvoke r1.<androidx.compose.runtime.Applier: void up()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$realizeUps$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$realizeUps$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$realizeUps$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$recordInsert$1
<androidx.compose.runtime.ComposerImpl$recordInsert$1: androidx.compose.runtime.SlotTable $insertTable>
<androidx.compose.runtime.ComposerImpl$recordInsert$1: androidx.compose.runtime.Anchor $anchor>
    void <init>(androidx.compose.runtime.SlotTable, androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.ComposerImpl$recordInsert$1 r0;
        androidx.compose.runtime.SlotTable $r1;
        androidx.compose.runtime.Anchor $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordInsert$1;

        $r1 := @parameter0: androidx.compose.runtime.SlotTable;

        $r2 := @parameter1: androidx.compose.runtime.Anchor;

        r0.<androidx.compose.runtime.ComposerImpl$recordInsert$1: androidx.compose.runtime.SlotTable $insertTable> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$recordInsert$1: androidx.compose.runtime.Anchor $anchor> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$recordInsert$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        androidx.compose.runtime.SlotTable $r4, $r6;
        androidx.compose.runtime.Anchor $r5;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordInsert$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void beginInsert()>();

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$recordInsert$1: androidx.compose.runtime.SlotTable $insertTable>;

        $r5 = r0.<androidx.compose.runtime.ComposerImpl$recordInsert$1: androidx.compose.runtime.Anchor $anchor>;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$recordInsert$1: androidx.compose.runtime.SlotTable $insertTable>;

        $i0 = virtualinvoke $r5.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotTable)>($r4);

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.util.List moveFrom(androidx.compose.runtime.SlotTable,int)>($r6, $i0);

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void endInsert()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$recordInsert$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordInsert$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$recordInsert$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$recordInsert$2
<androidx.compose.runtime.ComposerImpl$recordInsert$2: androidx.compose.runtime.SlotTable $insertTable>
<androidx.compose.runtime.ComposerImpl$recordInsert$2: androidx.compose.runtime.Anchor $anchor>
<androidx.compose.runtime.ComposerImpl$recordInsert$2: java.util.List $fixups>
    void <init>(androidx.compose.runtime.SlotTable, androidx.compose.runtime.Anchor, java.util.List)
    {
        androidx.compose.runtime.ComposerImpl$recordInsert$2 r0;
        androidx.compose.runtime.SlotTable $r1;
        androidx.compose.runtime.Anchor $r2;
        java.util.List $r3;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordInsert$2;

        $r1 := @parameter0: androidx.compose.runtime.SlotTable;

        $r2 := @parameter1: androidx.compose.runtime.Anchor;

        $r3 := @parameter2: java.util.List;

        r0.<androidx.compose.runtime.ComposerImpl$recordInsert$2: androidx.compose.runtime.SlotTable $insertTable> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$recordInsert$2: androidx.compose.runtime.Anchor $anchor> = $r2;

        r0.<androidx.compose.runtime.ComposerImpl$recordInsert$2: java.util.List $fixups> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$recordInsert$2 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2, r6, r7;
        androidx.compose.runtime.RememberManager r3;
        androidx.compose.runtime.SlotTable r4, $r13, $r15;
        java.util.List r5;
        int i0, $i1, i2;
        java.lang.Object r9;
        kotlin.jvm.functions.Function3 r10;
        kotlin.Unit r11;
        java.lang.Throwable r12, $r18;
        androidx.compose.runtime.Anchor $r14;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordInsert$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applier");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "rememberManager");

        r4 = r0.<androidx.compose.runtime.ComposerImpl$recordInsert$2: androidx.compose.runtime.SlotTable $insertTable>;

        r5 = r0.<androidx.compose.runtime.ComposerImpl$recordInsert$2: java.util.List $fixups>;

        r6 = virtualinvoke r4.<androidx.compose.runtime.SlotTable: androidx.compose.runtime.SlotWriter openWriter()>();

     label1:
        r7 = r6;

        i2 = 0;

        i0 = interfaceinvoke r5.<java.util.List: int size()>();

     label2:
        if i2 >= i0 goto label3;

        r9 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i2);

        r10 = (kotlin.jvm.functions.Function3) r9;

        interfaceinvoke r10.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r7, r3);

        i2 = i2 + 1;

        goto label2;

     label3:
        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        virtualinvoke r6.<androidx.compose.runtime.SlotWriter: void close()>();

        goto label7;

     label5:
        $r18 := @caughtexception;

        r12 = $r18;

     label6:
        virtualinvoke r6.<androidx.compose.runtime.SlotWriter: void close()>();

        throw r12;

     label7:
        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void beginInsert()>();

        $r15 = r0.<androidx.compose.runtime.ComposerImpl$recordInsert$2: androidx.compose.runtime.SlotTable $insertTable>;

        $r14 = r0.<androidx.compose.runtime.ComposerImpl$recordInsert$2: androidx.compose.runtime.Anchor $anchor>;

        $r13 = r0.<androidx.compose.runtime.ComposerImpl$recordInsert$2: androidx.compose.runtime.SlotTable $insertTable>;

        $i1 = virtualinvoke $r14.<androidx.compose.runtime.Anchor: int toIndexFor(androidx.compose.runtime.SlotTable)>($r13);

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.util.List moveFrom(androidx.compose.runtime.SlotTable,int)>($r15, $i1);

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void endInsert()>();

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$recordInsert$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordInsert$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$recordInsert$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$recordSideEffect$1
<androidx.compose.runtime.ComposerImpl$recordSideEffect$1: kotlin.jvm.functions.Function0 $effect>
    void <init>(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.ComposerImpl$recordSideEffect$1 r0;
        kotlin.jvm.functions.Function0 $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordSideEffect$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        r0.<androidx.compose.runtime.ComposerImpl$recordSideEffect$1: kotlin.jvm.functions.Function0 $effect> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$recordSideEffect$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        kotlin.jvm.functions.Function0 $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordSideEffect$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "rememberManager");

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$recordSideEffect$1: kotlin.jvm.functions.Function0 $effect>;

        interfaceinvoke r3.<androidx.compose.runtime.RememberManager: void sideEffect(kotlin.jvm.functions.Function0)>($r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$recordSideEffect$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordSideEffect$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$recordSideEffect$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$recordSlotEditing$1
<androidx.compose.runtime.ComposerImpl$recordSlotEditing$1: androidx.compose.runtime.Anchor $anchor>
    void <init>(androidx.compose.runtime.Anchor)
    {
        androidx.compose.runtime.ComposerImpl$recordSlotEditing$1 r0;
        androidx.compose.runtime.Anchor $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordSlotEditing$1;

        $r1 := @parameter0: androidx.compose.runtime.Anchor;

        r0.<androidx.compose.runtime.ComposerImpl$recordSlotEditing$1: androidx.compose.runtime.Anchor $anchor> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$recordSlotEditing$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        androidx.compose.runtime.Anchor $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordSlotEditing$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$recordSlotEditing$1: androidx.compose.runtime.Anchor $anchor>;

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void ensureStarted(androidx.compose.runtime.Anchor)>($r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$recordSlotEditing$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$recordSlotEditing$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$recordSlotEditing$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1
<androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1: androidx.compose.runtime.ComposerImpl this$0>
<androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1: androidx.compose.runtime.MovableContentStateReference $reference>
    void <init>(androidx.compose.runtime.ComposerImpl, androidx.compose.runtime.MovableContentStateReference)
    {
        androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1 r0;
        androidx.compose.runtime.ComposerImpl $r1;
        androidx.compose.runtime.MovableContentStateReference $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1;

        $r1 := @parameter0: androidx.compose.runtime.ComposerImpl;

        $r2 := @parameter1: androidx.compose.runtime.MovableContentStateReference;

        r0.<androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1: androidx.compose.runtime.ComposerImpl this$0> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1: androidx.compose.runtime.MovableContentStateReference $reference> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        androidx.compose.runtime.MovableContentStateReference $r4;
        androidx.compose.runtime.ComposerImpl $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r5 = r0.<androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1: androidx.compose.runtime.ComposerImpl this$0>;

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1: androidx.compose.runtime.MovableContentStateReference $reference>;

        staticinvoke <androidx.compose.runtime.ComposerImpl: void access$releaseMovableGroupAtCurrent(androidx.compose.runtime.ComposerImpl,androidx.compose.runtime.MovableContentStateReference,androidx.compose.runtime.SlotWriter)>($r5, $r4, r2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$reportFreeMovableContent$reportGroup$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$start$2
<androidx.compose.runtime.ComposerImpl$start$2: int $currentRelativePosition>
    void <init>(int)
    {
        androidx.compose.runtime.ComposerImpl$start$2 r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$start$2;

        $i0 := @parameter0: int;

        r0.<androidx.compose.runtime.ComposerImpl$start$2: int $currentRelativePosition> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$start$2 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$start$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $i0 = r0.<androidx.compose.runtime.ComposerImpl$start$2: int $currentRelativePosition>;

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void moveGroup(int)>($i0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$start$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$start$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$start$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1
<androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1: androidx.compose.runtime.ProvidedValue[] $values>
<androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $parentScope>
    void <init>(androidx.compose.runtime.ProvidedValue[], androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap)
    {
        androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1 r0;
        androidx.compose.runtime.ProvidedValue[] $r1;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r2;

        r0 := @this: androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1;

        $r1 := @parameter0: androidx.compose.runtime.ProvidedValue[];

        $r2 := @parameter1: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap;

        r0.<androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1: androidx.compose.runtime.ProvidedValue[] $values> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $parentScope> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap invoke(androidx.compose.runtime.Composer, int)
    {
        androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1 r0;
        androidx.compose.runtime.Composer $r1;
        int $i0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap r2, $r3;
        boolean $z0, $z1;
        androidx.compose.runtime.ProvidedValue[] $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1;

        $r1 := @parameter0: androidx.compose.runtime.Composer;

        $i0 := @parameter1: int;

        interfaceinvoke $r1.<androidx.compose.runtime.Composer: void startReplaceableGroup(int)>(935231726);

        staticinvoke <androidx.compose.runtime.ComposerKt: void sourceInformation(androidx.compose.runtime.Composer,java.lang.String)>($r1, "C1894@69916L42:Composer.kt#9igjgp");

        $z0 = staticinvoke <androidx.compose.runtime.ComposerKt: boolean isTraceInProgress()>();

        if $z0 == 0 goto label1;

        staticinvoke <androidx.compose.runtime.ComposerKt: void traceEventStart(int,int,int,java.lang.String)>(935231726, $i0, -1, "androidx.compose.runtime.ComposerImpl.startProviders.<anonymous> (Composer.kt:1893)");

     label1:
        $r4 = r0.<androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1: androidx.compose.runtime.ProvidedValue[] $values>;

        $r3 = r0.<androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $parentScope>;

        r2 = staticinvoke <androidx.compose.runtime.ComposerKt: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap access$compositionLocalMapOf(androidx.compose.runtime.ProvidedValue[],androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap,androidx.compose.runtime.Composer,int)>($r4, $r3, $r1, 8);

        $z1 = staticinvoke <androidx.compose.runtime.ComposerKt: boolean isTraceInProgress()>();

        if $z1 == 0 goto label2;

        staticinvoke <androidx.compose.runtime.ComposerKt: void traceEventEnd()>();

     label2:
        interfaceinvoke $r1.<androidx.compose.runtime.Composer: void endReplaceableGroup()>();

        return r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1 r0;
        java.lang.Object r1, r2;
        java.lang.Number $r3;
        androidx.compose.runtime.Composer $r4;
        int $i0;
        androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.compose.runtime.Composer) r1;

        $r3 = (java.lang.Number) r2;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        $r5 = virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$startProviders$currentProviders$1: androidx.compose.runtime.external.kotlinx.collections.immutable.PersistentMap invoke(androidx.compose.runtime.Composer,int)>($r4, $i0);

        return $r5;
    }

androidx.compose.runtime.ComposerImpl$startReaderGroup$1
<androidx.compose.runtime.ComposerImpl$startReaderGroup$1: java.lang.Object $data>
    void <init>(java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$startReaderGroup$1 r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$startReaderGroup$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.compose.runtime.ComposerImpl$startReaderGroup$1: java.lang.Object $data> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$startReaderGroup$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.runtime.ComposerImpl$startReaderGroup$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "<anonymous parameter 2>");

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$startReaderGroup$1: java.lang.Object $data>;

        virtualinvoke r2.<androidx.compose.runtime.SlotWriter: void updateAux(java.lang.Object)>($r4);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$startReaderGroup$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$startReaderGroup$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$startReaderGroup$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$updateValue$1
<androidx.compose.runtime.ComposerImpl$updateValue$1: java.lang.Object $value>
    void <init>(java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$updateValue$1 r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.runtime.ComposerImpl$updateValue$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.compose.runtime.ComposerImpl$updateValue$1: java.lang.Object $value> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$updateValue$1 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        java.lang.Object $r4;
        androidx.compose.runtime.RememberObserver $r5;

        r0 := @this: androidx.compose.runtime.ComposerImpl$updateValue$1;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "rememberManager");

        $r4 = r0.<androidx.compose.runtime.ComposerImpl$updateValue$1: java.lang.Object $value>;

        $r5 = (androidx.compose.runtime.RememberObserver) $r4;

        interfaceinvoke r3.<androidx.compose.runtime.RememberManager: void remembering(androidx.compose.runtime.RememberObserver)>($r5);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$updateValue$1 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$updateValue$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$updateValue$1: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

androidx.compose.runtime.ComposerImpl$updateValue$2
<androidx.compose.runtime.ComposerImpl$updateValue$2: java.lang.Object $value>
<androidx.compose.runtime.ComposerImpl$updateValue$2: int $groupSlotIndex>
    void <init>(java.lang.Object, int)
    {
        androidx.compose.runtime.ComposerImpl$updateValue$2 r0;
        java.lang.Object $r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.ComposerImpl$updateValue$2;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        r0.<androidx.compose.runtime.ComposerImpl$updateValue$2: java.lang.Object $value> = $r1;

        r0.<androidx.compose.runtime.ComposerImpl$updateValue$2: int $groupSlotIndex> = $i0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public final void invoke(androidx.compose.runtime.Applier, androidx.compose.runtime.SlotWriter, androidx.compose.runtime.RememberManager)
    {
        androidx.compose.runtime.ComposerImpl$updateValue$2 r0;
        androidx.compose.runtime.Applier r1;
        androidx.compose.runtime.SlotWriter r2;
        androidx.compose.runtime.RememberManager r3;
        java.lang.Object r4, $r6, $r7, $r11;
        androidx.compose.runtime.CompositionImpl r5;
        boolean $z0, $z1, $z2;
        int $i0;
        androidx.compose.runtime.RecomposeScopeImpl $r8, $r9;
        androidx.compose.runtime.RememberObserver $r10, $r12;

        r0 := @this: androidx.compose.runtime.ComposerImpl$updateValue$2;

        r1 := @parameter0: androidx.compose.runtime.Applier;

        r2 := @parameter1: androidx.compose.runtime.SlotWriter;

        r3 := @parameter2: androidx.compose.runtime.RememberManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<anonymous parameter 0>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "slots");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "rememberManager");

        $r6 = r0.<androidx.compose.runtime.ComposerImpl$updateValue$2: java.lang.Object $value>;

        $z0 = $r6 instanceof androidx.compose.runtime.RememberObserver;

        if $z0 == 0 goto label1;

        $r11 = r0.<androidx.compose.runtime.ComposerImpl$updateValue$2: java.lang.Object $value>;

        $r12 = (androidx.compose.runtime.RememberObserver) $r11;

        interfaceinvoke r3.<androidx.compose.runtime.RememberManager: void remembering(androidx.compose.runtime.RememberObserver)>($r12);

     label1:
        $i0 = r0.<androidx.compose.runtime.ComposerImpl$updateValue$2: int $groupSlotIndex>;

        $r7 = r0.<androidx.compose.runtime.ComposerImpl$updateValue$2: java.lang.Object $value>;

        r4 = virtualinvoke r2.<androidx.compose.runtime.SlotWriter: java.lang.Object set(int,java.lang.Object)>($i0, $r7);

        $z1 = r4 instanceof androidx.compose.runtime.RememberObserver;

        if $z1 == 0 goto label2;

        $r10 = (androidx.compose.runtime.RememberObserver) r4;

        interfaceinvoke r3.<androidx.compose.runtime.RememberManager: void forgetting(androidx.compose.runtime.RememberObserver)>($r10);

        goto label3;

     label2:
        $z2 = r4 instanceof androidx.compose.runtime.RecomposeScopeImpl;

        if $z2 == 0 goto label3;

        $r8 = (androidx.compose.runtime.RecomposeScopeImpl) r4;

        r5 = virtualinvoke $r8.<androidx.compose.runtime.RecomposeScopeImpl: androidx.compose.runtime.CompositionImpl getComposition()>();

        if r5 == null goto label3;

        $r9 = (androidx.compose.runtime.RecomposeScopeImpl) r4;

        virtualinvoke $r9.<androidx.compose.runtime.RecomposeScopeImpl: void release()>();

        virtualinvoke r5.<androidx.compose.runtime.CompositionImpl: void setPendingInvalidScopes$runtime_release(boolean)>(1);

     label3:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.ComposerImpl$updateValue$2 r0;
        java.lang.Object r1, r2, r3;
        androidx.compose.runtime.RememberManager $r4;
        androidx.compose.runtime.SlotWriter $r5;
        androidx.compose.runtime.Applier $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.compose.runtime.ComposerImpl$updateValue$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (androidx.compose.runtime.Applier) r1;

        $r5 = (androidx.compose.runtime.SlotWriter) r2;

        $r4 = (androidx.compose.runtime.RememberManager) r3;

        virtualinvoke r0.<androidx.compose.runtime.ComposerImpl$updateValue$2: void invoke(androidx.compose.runtime.Applier,androidx.compose.runtime.SlotWriter,androidx.compose.runtime.RememberManager)>($r6, $r5, $r4);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

