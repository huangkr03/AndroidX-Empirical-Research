androidx.media3.test.utils.robolectric.TestPlayerRunHelper
    private void <init>()
    {
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper r0;

        r0 := @this: androidx.media3.test.utils.robolectric.TestPlayerRunHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void runUntilPlaybackState(androidx.media3.common.Player, int) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.common.Player r0;
        int i0;
        boolean $z0;
        com.google.common.base.Supplier $r1;
        androidx.media3.common.PlaybackException $r2, $r4;
        java.lang.IllegalStateException $r3;
        androidx.media3.exoplayer.ExoPlayer $r5;

        r0 := @parameter0: androidx.media3.common.Player;

        i0 := @parameter1: int;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        $z0 = r0 instanceof androidx.media3.exoplayer.ExoPlayer;

        if $z0 == 0 goto label1;

        $r5 = (androidx.media3.exoplayer.ExoPlayer) r0;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>($r5);

     label1:
        $r1 = dynamicinvoke "get" <com.google.common.base.Supplier (androidx.media3.common.Player,int)>(r0, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$runUntilPlaybackState$0(androidx.media3.common.Player,int)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r1);

        $r2 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r2 == null goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r3;

     label2:
        return;
    }

    public static void runUntilPlayWhenReady(androidx.media3.common.Player, boolean) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.common.Player r0;
        boolean z0, $z1;
        com.google.common.base.Supplier $r1;
        androidx.media3.common.PlaybackException $r2, $r4;
        java.lang.IllegalStateException $r3;
        androidx.media3.exoplayer.ExoPlayer $r5;

        r0 := @parameter0: androidx.media3.common.Player;

        z0 := @parameter1: boolean;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        $z1 = r0 instanceof androidx.media3.exoplayer.ExoPlayer;

        if $z1 == 0 goto label1;

        $r5 = (androidx.media3.exoplayer.ExoPlayer) r0;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>($r5);

     label1:
        $r1 = dynamicinvoke "get" <com.google.common.base.Supplier (androidx.media3.common.Player,boolean)>(r0, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$runUntilPlayWhenReady$1(androidx.media3.common.Player,boolean)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r1);

        $r2 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r2 == null goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r3;

     label2:
        return;
    }

    public static void runUntilIsLoading(androidx.media3.common.Player, boolean) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.common.Player r0;
        boolean z0, $z1;
        com.google.common.base.Supplier $r1;
        androidx.media3.common.PlaybackException $r2, $r4;
        java.lang.IllegalStateException $r3;
        androidx.media3.exoplayer.ExoPlayer $r5;

        r0 := @parameter0: androidx.media3.common.Player;

        z0 := @parameter1: boolean;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        $z1 = r0 instanceof androidx.media3.exoplayer.ExoPlayer;

        if $z1 == 0 goto label1;

        $r5 = (androidx.media3.exoplayer.ExoPlayer) r0;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>($r5);

     label1:
        $r1 = dynamicinvoke "get" <com.google.common.base.Supplier (androidx.media3.common.Player,boolean)>(r0, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$runUntilIsLoading$2(androidx.media3.common.Player,boolean)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r1);

        $r2 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r2 == null goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r3;

     label2:
        return;
    }

    public static void runUntilTimelineChanged(androidx.media3.common.Player, androidx.media3.common.Timeline) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.common.Player r0;
        androidx.media3.common.Timeline r1;
        boolean $z0;
        com.google.common.base.Supplier $r2;
        androidx.media3.common.PlaybackException $r3, $r5;
        java.lang.IllegalStateException $r4;
        androidx.media3.exoplayer.ExoPlayer $r6;

        r0 := @parameter0: androidx.media3.common.Player;

        r1 := @parameter1: androidx.media3.common.Timeline;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        $z0 = r0 instanceof androidx.media3.exoplayer.ExoPlayer;

        if $z0 == 0 goto label1;

        $r6 = (androidx.media3.exoplayer.ExoPlayer) r0;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>($r6);

     label1:
        $r2 = dynamicinvoke "get" <com.google.common.base.Supplier (androidx.media3.common.Timeline,androidx.media3.common.Player)>(r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$runUntilTimelineChanged$3(androidx.media3.common.Timeline,androidx.media3.common.Player)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r2);

        $r3 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r3 == null goto label2;

        $r4 = new java.lang.IllegalStateException;

        $r5 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;

     label2:
        return;
    }

    public static androidx.media3.common.Timeline runUntilTimelineChanged(androidx.media3.common.Player) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.common.Player r0;
        java.util.concurrent.atomic.AtomicReference r1, $r3;
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1 r2, $r4;
        com.google.common.base.Supplier $r5;
        androidx.media3.common.PlaybackException $r6, $r12;
        java.lang.Object $r7, $r9;
        androidx.media3.common.Timeline $r8, $r10;
        java.lang.IllegalStateException $r11;

        r0 := @parameter0: androidx.media3.common.Player;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r1 = $r3;

        $r4 = new androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1;

        specialinvoke $r4.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1: void <init>(java.util.concurrent.atomic.AtomicReference)>(r1);

        r2 = $r4;

        interfaceinvoke r0.<androidx.media3.common.Player: void addListener(androidx.media3.common.Player$Listener)>(r2);

        $r5 = dynamicinvoke "get" <com.google.common.base.Supplier (java.util.concurrent.atomic.AtomicReference,androidx.media3.common.Player)>(r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$runUntilTimelineChanged$4(java.util.concurrent.atomic.AtomicReference,androidx.media3.common.Player)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r5);

        interfaceinvoke r0.<androidx.media3.common.Player: void removeListener(androidx.media3.common.Player$Listener)>(r2);

        $r6 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r6 == null goto label1;

        $r11 = new java.lang.IllegalStateException;

        $r12 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r12);

        throw $r11;

     label1:
        $r7 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r8 = (androidx.media3.common.Timeline) $r7;

        $r9 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r8);

        $r10 = (androidx.media3.common.Timeline) $r9;

        return $r10;
    }

    public static void runUntilPositionDiscontinuity(androidx.media3.common.Player, int) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.common.Player r0;
        int i0;
        java.util.concurrent.atomic.AtomicBoolean r1, $r3;
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2 r2, $r4;
        boolean $z0;
        com.google.common.base.Supplier $r5;
        androidx.media3.common.PlaybackException $r6, $r8;
        java.lang.IllegalStateException $r7;
        androidx.media3.exoplayer.ExoPlayer $r9;

        r0 := @parameter0: androidx.media3.common.Player;

        i0 := @parameter1: int;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        $z0 = r0 instanceof androidx.media3.exoplayer.ExoPlayer;

        if $z0 == 0 goto label1;

        $r9 = (androidx.media3.exoplayer.ExoPlayer) r0;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>($r9);

     label1:
        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r1 = $r3;

        $r4 = new androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2;

        specialinvoke $r4.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2: void <init>(int,java.util.concurrent.atomic.AtomicBoolean)>(i0, r1);

        r2 = $r4;

        interfaceinvoke r0.<androidx.media3.common.Player: void addListener(androidx.media3.common.Player$Listener)>(r2);

        $r5 = dynamicinvoke "get" <com.google.common.base.Supplier (java.util.concurrent.atomic.AtomicBoolean,androidx.media3.common.Player)>(r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$runUntilPositionDiscontinuity$5(java.util.concurrent.atomic.AtomicBoolean,androidx.media3.common.Player)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r5);

        interfaceinvoke r0.<androidx.media3.common.Player: void removeListener(androidx.media3.common.Player$Listener)>(r2);

        $r6 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r6 == null goto label2;

        $r7 = new java.lang.IllegalStateException;

        $r8 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r8);

        throw $r7;

     label2:
        return;
    }

    public static androidx.media3.exoplayer.ExoPlaybackException runUntilError(androidx.media3.exoplayer.ExoPlayer) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        com.google.common.base.Supplier $r1;
        androidx.media3.exoplayer.ExoPlaybackException $r2, $r4;
        java.lang.Object $r3;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>(r0);

        $r1 = dynamicinvoke "get" <com.google.common.base.Supplier (androidx.media3.exoplayer.ExoPlayer)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$runUntilError$6(androidx.media3.exoplayer.ExoPlayer)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r1);

        $r2 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (androidx.media3.exoplayer.ExoPlaybackException) $r3;

        return $r4;
    }

    public static void runUntilSleepingForOffload(androidx.media3.exoplayer.ExoPlayer, boolean) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean r1, $r3;
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3 r2, $r4;
        com.google.common.base.Supplier $r5;
        androidx.media3.exoplayer.ExoPlaybackException $r6, $r8;
        java.lang.IllegalStateException $r7;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        z0 := @parameter1: boolean;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>(r0);

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r1 = $r3;

        $r4 = new androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3;

        specialinvoke $r4.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3: void <init>(boolean,java.util.concurrent.atomic.AtomicBoolean)>(z0, r1);

        r2 = $r4;

        interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: void addAudioOffloadListener(androidx.media3.exoplayer.ExoPlayer$AudioOffloadListener)>(r2);

        $r5 = dynamicinvoke "get" <com.google.common.base.Supplier (java.util.concurrent.atomic.AtomicBoolean,androidx.media3.exoplayer.ExoPlayer)>(r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$runUntilSleepingForOffload$7(java.util.concurrent.atomic.AtomicBoolean,androidx.media3.exoplayer.ExoPlayer)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r5);

        $r6 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        if $r6 == null goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r8);

        throw $r7;

     label1:
        return;
    }

    public static void runUntilRenderedFirstFrame(androidx.media3.exoplayer.ExoPlayer) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        java.util.concurrent.atomic.AtomicBoolean r1, $r3;
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4 r2, $r4;
        com.google.common.base.Supplier $r5;
        androidx.media3.exoplayer.ExoPlaybackException $r6, $r8;
        java.lang.IllegalStateException $r7;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>(r0);

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r1 = $r3;

        $r4 = new androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4;

        specialinvoke $r4.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4: void <init>(java.util.concurrent.atomic.AtomicBoolean)>(r1);

        r2 = $r4;

        interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: void addListener(androidx.media3.common.Player$Listener)>(r2);

        $r5 = dynamicinvoke "get" <com.google.common.base.Supplier (java.util.concurrent.atomic.AtomicBoolean,androidx.media3.exoplayer.ExoPlayer)>(r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$runUntilRenderedFirstFrame$8(java.util.concurrent.atomic.AtomicBoolean,androidx.media3.exoplayer.ExoPlayer)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r5);

        interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: void removeListener(androidx.media3.common.Player$Listener)>(r2);

        $r6 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        if $r6 == null goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r8);

        throw $r7;

     label1:
        return;
    }

    public static void playUntilPosition(androidx.media3.exoplayer.ExoPlayer, int, long) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        int i0;
        long l1;
        android.os.Looper r1;
        java.util.concurrent.atomic.AtomicBoolean r2, $r3;
        androidx.media3.exoplayer.PlayerMessage$Target $r4;
        androidx.media3.exoplayer.PlayerMessage $r5, $r6;
        com.google.common.base.Supplier $r8;
        androidx.media3.exoplayer.ExoPlaybackException $r9, $r11;
        java.lang.IllegalStateException $r10;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>(r0);

        r1 = staticinvoke <androidx.media3.common.util.Util: android.os.Looper getCurrentOrMainLooper()>();

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r2 = $r3;

        $r4 = dynamicinvoke "handleMessage" <androidx.media3.exoplayer.PlayerMessage$Target (androidx.media3.exoplayer.ExoPlayer,android.os.Looper,java.util.concurrent.atomic.AtomicBoolean)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void lambda$playUntilPosition$10(androidx.media3.exoplayer.ExoPlayer,android.os.Looper,java.util.concurrent.atomic.AtomicBoolean,int,java.lang.Object)>, methodtype: void __METHODTYPE__(int,java.lang.Object));

        $r5 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.PlayerMessage createMessage(androidx.media3.exoplayer.PlayerMessage$Target)>($r4);

        $r6 = virtualinvoke $r5.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setPosition(int,long)>(i0, l1);

        virtualinvoke $r6.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage send()>();

        interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: void play()>();

        $r8 = dynamicinvoke "get" <com.google.common.base.Supplier (java.util.concurrent.atomic.AtomicBoolean,androidx.media3.exoplayer.ExoPlayer)>(r2, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: java.lang.Boolean lambda$playUntilPosition$11(java.util.concurrent.atomic.AtomicBoolean,androidx.media3.exoplayer.ExoPlayer)>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r8);

        $r9 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        if $r9 == null goto label1;

        $r10 = new java.lang.IllegalStateException;

        $r11 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r11);

        throw $r10;

     label1:
        return;
    }

    public static void playUntilStartOfMediaItem(androidx.media3.exoplayer.ExoPlayer, int) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        int i0;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        i0 := @parameter1: int;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void playUntilPosition(androidx.media3.exoplayer.ExoPlayer,int,long)>(r0, i0, 0L);

        return;
    }

    public static void runUntilPendingCommandsAreFullyHandled(androidx.media3.exoplayer.ExoPlayer) throws java.util.concurrent.TimeoutException
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        java.util.concurrent.atomic.AtomicBoolean r1, $r2;
        androidx.media3.exoplayer.PlayerMessage$Target $r3;
        androidx.media3.exoplayer.PlayerMessage $r4, $r6;
        android.os.Looper $r5;
        com.google.common.base.Supplier $r9;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyMainTestThread(androidx.media3.common.Player)>(r0);

        staticinvoke <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)>(r0);

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r1 = $r2;

        $r3 = dynamicinvoke "handleMessage" <androidx.media3.exoplayer.PlayerMessage$Target (java.util.concurrent.atomic.AtomicBoolean)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void lambda$runUntilPendingCommandsAreFullyHandled$12(java.util.concurrent.atomic.AtomicBoolean,int,java.lang.Object)>, methodtype: void __METHODTYPE__(int,java.lang.Object));

        $r4 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.PlayerMessage createMessage(androidx.media3.exoplayer.PlayerMessage$Target)>($r3);

        $r5 = staticinvoke <androidx.media3.common.util.Util: android.os.Looper getCurrentOrMainLooper()>();

        $r6 = virtualinvoke $r4.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage setLooper(android.os.Looper)>($r5);

        virtualinvoke $r6.<androidx.media3.exoplayer.PlayerMessage: androidx.media3.exoplayer.PlayerMessage send()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r9 = dynamicinvoke "get" <com.google.common.base.Supplier (java.util.concurrent.atomic.AtomicBoolean)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <java.util.concurrent.atomic.AtomicBoolean: boolean get()>, methodtype: java.lang.Boolean __METHODTYPE__());

        staticinvoke <androidx.media3.test.utils.robolectric.RobolectricUtil: void runMainLooperUntil(com.google.common.base.Supplier)>($r9);

        return;
    }

    private static void verifyMainTestThread(androidx.media3.common.Player)
    {
        androidx.media3.common.Player r0;
        android.os.Looper $r1, $r2, $r4, $r5;
        java.lang.IllegalStateException $r3;

        r0 := @parameter0: androidx.media3.common.Player;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r1 != $r2 goto label1;

        $r4 = interfaceinvoke r0.<androidx.media3.common.Player: android.os.Looper getApplicationLooper()>();

        $r5 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r4 == $r5 goto label2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label2:
        return;
    }

    private static void verifyPlaybackThreadIsAlive(androidx.media3.exoplayer.ExoPlayer)
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        android.os.Looper $r1;
        java.lang.Thread $r2;
        boolean $z0;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        $r1 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: android.os.Looper getPlaybackLooper()>();

        $r2 = virtualinvoke $r1.<android.os.Looper: java.lang.Thread getThread()>();

        $z0 = virtualinvoke $r2.<java.lang.Thread: boolean isAlive()>();

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z0, "Playback thread is not alive, has the player been released?");

        return;
    }

    private static void lambda$runUntilPendingCommandsAreFullyHandled$12(java.util.concurrent.atomic.AtomicBoolean, int, java.lang.Object) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        int i0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

    private static java.lang.Boolean lambda$playUntilPosition$11(java.util.concurrent.atomic.AtomicBoolean, androidx.media3.exoplayer.ExoPlayer)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        boolean $z0, $z1;
        java.lang.Boolean $r2;
        androidx.media3.exoplayer.ExoPlaybackException $r3;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        r1 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        if $r3 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r2;
    }

    private static void lambda$playUntilPosition$10(androidx.media3.exoplayer.ExoPlayer, android.os.Looper, java.util.concurrent.atomic.AtomicBoolean, int, java.lang.Object) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        android.os.Looper r1;
        java.util.concurrent.atomic.AtomicBoolean r2;
        int i0;
        java.lang.Object r3;
        androidx.media3.common.util.ConditionVariable r4, $r6;
        java.lang.Throwable r5, $r11;
        androidx.media3.common.util.Clock $r7, $r10;
        androidx.media3.common.util.HandlerWrapper $r8;
        java.lang.Runnable $r9;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r1 := @parameter1: android.os.Looper;

        r2 := @parameter2: java.util.concurrent.atomic.AtomicBoolean;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.Object;

        $r6 = new androidx.media3.common.util.ConditionVariable;

        specialinvoke $r6.<androidx.media3.common.util.ConditionVariable: void <init>()>();

        r4 = $r6;

        $r7 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.common.util.Clock getClock()>();

        $r8 = interfaceinvoke $r7.<androidx.media3.common.util.Clock: androidx.media3.common.util.HandlerWrapper createHandler(android.os.Looper,android.os.Handler$Callback)>(r1, null);

        $r9 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.exoplayer.ExoPlayer,java.util.concurrent.atomic.AtomicBoolean,androidx.media3.common.util.ConditionVariable)>(r0, r2, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.robolectric.TestPlayerRunHelper: void lambda$playUntilPosition$9(androidx.media3.exoplayer.ExoPlayer,java.util.concurrent.atomic.AtomicBoolean,androidx.media3.common.util.ConditionVariable)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r8.<androidx.media3.common.util.HandlerWrapper: boolean post(java.lang.Runnable)>($r9);

     label1:
        $r10 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.common.util.Clock getClock()>();

        interfaceinvoke $r10.<androidx.media3.common.util.Clock: void onThreadBlocked()>();

        virtualinvoke r4.<androidx.media3.common.util.ConditionVariable: void block()>();

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r5 = $r11;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private static void lambda$playUntilPosition$9(androidx.media3.exoplayer.ExoPlayer, java.util.concurrent.atomic.AtomicBoolean, androidx.media3.common.util.ConditionVariable)
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        java.util.concurrent.atomic.AtomicBoolean r1;
        androidx.media3.common.util.ConditionVariable r2;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r1 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;

        r2 := @parameter2: androidx.media3.common.util.ConditionVariable;

        interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: void pause()>();

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        virtualinvoke r2.<androidx.media3.common.util.ConditionVariable: boolean open()>();

        return;
    }

    private static java.lang.Boolean lambda$runUntilRenderedFirstFrame$8(java.util.concurrent.atomic.AtomicBoolean, androidx.media3.exoplayer.ExoPlayer)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        boolean $z0, $z1;
        java.lang.Boolean $r2;
        androidx.media3.exoplayer.ExoPlaybackException $r3;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        r1 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        if $r3 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r2;
    }

    private static java.lang.Boolean lambda$runUntilSleepingForOffload$7(java.util.concurrent.atomic.AtomicBoolean, androidx.media3.exoplayer.ExoPlayer)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        boolean $z0, $z1;
        java.lang.Boolean $r2;
        androidx.media3.exoplayer.ExoPlaybackException $r3;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        r1 := @parameter1: androidx.media3.exoplayer.ExoPlayer;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r1.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        if $r3 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r2;
    }

    private static java.lang.Boolean lambda$runUntilError$6(androidx.media3.exoplayer.ExoPlayer)
    {
        androidx.media3.exoplayer.ExoPlayer r0;
        androidx.media3.exoplayer.ExoPlaybackException $r1;
        java.lang.Boolean $r2;
        boolean $z0;

        r0 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        $r1 = interfaceinvoke r0.<androidx.media3.exoplayer.ExoPlayer: androidx.media3.exoplayer.ExoPlaybackException getPlayerError()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    private static java.lang.Boolean lambda$runUntilPositionDiscontinuity$5(java.util.concurrent.atomic.AtomicBoolean, androidx.media3.common.Player)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        androidx.media3.common.Player r1;
        boolean $z0, $z1;
        java.lang.Boolean $r2;
        androidx.media3.common.PlaybackException $r3;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        r1 := @parameter1: androidx.media3.common.Player;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r1.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r3 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r2;
    }

    private static java.lang.Boolean lambda$runUntilTimelineChanged$4(java.util.concurrent.atomic.AtomicReference, androidx.media3.common.Player)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        androidx.media3.common.Player r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        androidx.media3.common.PlaybackException $r4;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: androidx.media3.common.Player;

        $r2 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r2 != null goto label1;

        $r4 = interfaceinvoke r1.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r4 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    private static java.lang.Boolean lambda$runUntilTimelineChanged$3(androidx.media3.common.Timeline, androidx.media3.common.Player)
    {
        androidx.media3.common.Timeline r0, $r2;
        androidx.media3.common.Player r1;
        boolean $z0, $z1;
        java.lang.Boolean $r3;
        androidx.media3.common.PlaybackException $r4;

        r0 := @parameter0: androidx.media3.common.Timeline;

        r1 := @parameter1: androidx.media3.common.Player;

        $r2 = interfaceinvoke r1.<androidx.media3.common.Player: androidx.media3.common.Timeline getCurrentTimeline()>();

        $z0 = virtualinvoke r0.<androidx.media3.common.Timeline: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r4 = interfaceinvoke r1.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r4 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r3;
    }

    private static java.lang.Boolean lambda$runUntilIsLoading$2(androidx.media3.common.Player, boolean)
    {
        androidx.media3.common.Player r0;
        boolean z0, $z1, $z2;
        java.lang.Boolean $r1;
        androidx.media3.common.PlaybackException $r2;

        r0 := @parameter0: androidx.media3.common.Player;

        z0 := @parameter1: boolean;

        $z1 = interfaceinvoke r0.<androidx.media3.common.Player: boolean isLoading()>();

        if $z1 == z0 goto label1;

        $r2 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r2 == null goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r1;
    }

    private static java.lang.Boolean lambda$runUntilPlayWhenReady$1(androidx.media3.common.Player, boolean)
    {
        androidx.media3.common.Player r0;
        boolean z0, $z1, $z2;
        java.lang.Boolean $r1;
        androidx.media3.common.PlaybackException $r2;

        r0 := @parameter0: androidx.media3.common.Player;

        z0 := @parameter1: boolean;

        $z1 = interfaceinvoke r0.<androidx.media3.common.Player: boolean getPlayWhenReady()>();

        if $z1 == z0 goto label1;

        $r2 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r2 == null goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r1;
    }

    private static java.lang.Boolean lambda$runUntilPlaybackState$0(androidx.media3.common.Player, int)
    {
        androidx.media3.common.Player r0;
        int i0, $i1;
        java.lang.Boolean $r1;
        androidx.media3.common.PlaybackException $r2;
        boolean $z0;

        r0 := @parameter0: androidx.media3.common.Player;

        i0 := @parameter1: int;

        $i1 = interfaceinvoke r0.<androidx.media3.common.Player: int getPlaybackState()>();

        if $i1 == i0 goto label1;

        $r2 = interfaceinvoke r0.<androidx.media3.common.Player: androidx.media3.common.PlaybackException getPlayerError()>();

        if $r2 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1
<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1: java.util.concurrent.atomic.AtomicReference val$receivedTimeline>
    void <init>(java.util.concurrent.atomic.AtomicReference)
    {
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1 r0;
        java.util.concurrent.atomic.AtomicReference r1;

        r0 := @this: androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1: java.util.concurrent.atomic.AtomicReference val$receivedTimeline> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onTimelineChanged(androidx.media3.common.Timeline, int)
    {
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1 r0;
        androidx.media3.common.Timeline r1;
        int i0;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1;

        r1 := @parameter0: androidx.media3.common.Timeline;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$1: java.util.concurrent.atomic.AtomicReference val$receivedTimeline>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return;
    }

androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2
<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2: int val$expectedReason>
<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2: java.util.concurrent.atomic.AtomicBoolean val$receivedCallback>
    void <init>(int, java.util.concurrent.atomic.AtomicBoolean)
    {
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2 r0;
        int i0;
        java.util.concurrent.atomic.AtomicBoolean r1;

        r0 := @this: androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;

        r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2: int val$expectedReason> = i0;

        r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2: java.util.concurrent.atomic.AtomicBoolean val$receivedCallback> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onPositionDiscontinuity(androidx.media3.common.Player$PositionInfo, androidx.media3.common.Player$PositionInfo, int)
    {
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2 r0;
        androidx.media3.common.Player$PositionInfo r1, r2;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicBoolean $r3;

        r0 := @this: androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2;

        r1 := @parameter0: androidx.media3.common.Player$PositionInfo;

        r2 := @parameter1: androidx.media3.common.Player$PositionInfo;

        i0 := @parameter2: int;

        $i1 = r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2: int val$expectedReason>;

        if i0 != $i1 goto label1;

        $r3 = r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$2: java.util.concurrent.atomic.AtomicBoolean val$receivedCallback>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label1:
        return;
    }

androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3
<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3: boolean val$expectedSleepForOffload>
<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3: java.util.concurrent.atomic.AtomicBoolean val$receiverCallback>
    void <init>(boolean, java.util.concurrent.atomic.AtomicBoolean)
    {
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3 r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean r1;

        r0 := @this: androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;

        r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3: boolean val$expectedSleepForOffload> = z0;

        r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3: java.util.concurrent.atomic.AtomicBoolean val$receiverCallback> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onExperimentalSleepingForOffloadChanged(boolean)
    {
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3 r0;
        boolean z0, $z1;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3: boolean val$expectedSleepForOffload>;

        if z0 != $z1 goto label1;

        $r1 = r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$3: java.util.concurrent.atomic.AtomicBoolean val$receiverCallback>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label1:
        return;
    }

androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4
<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4: java.util.concurrent.atomic.AtomicBoolean val$receivedCallback>
    void <init>(java.util.concurrent.atomic.AtomicBoolean)
    {
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4 r0;
        java.util.concurrent.atomic.AtomicBoolean r1;

        r0 := @this: androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4: java.util.concurrent.atomic.AtomicBoolean val$receivedCallback> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onRenderedFirstFrame()
    {
        androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4 r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4;

        $r1 = r0.<androidx.media3.test.utils.robolectric.TestPlayerRunHelper$4: java.util.concurrent.atomic.AtomicBoolean val$receivedCallback>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

