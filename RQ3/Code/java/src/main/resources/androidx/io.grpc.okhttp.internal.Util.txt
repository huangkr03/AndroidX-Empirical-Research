io.grpc.okhttp.internal.Util
<io.grpc.okhttp.internal.Util: java.lang.String[] EMPTY_STRING_ARRAY>
<io.grpc.okhttp.internal.Util: java.nio.charset.Charset UTF_8>
    static void <clinit>()
    {
        java.nio.charset.Charset $r0;
        java.lang.String[] $r1;

        $r1 = newarray (java.lang.String)[0];

        <io.grpc.okhttp.internal.Util: java.lang.String[] EMPTY_STRING_ARRAY> = $r1;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <io.grpc.okhttp.internal.Util: java.nio.charset.Charset UTF_8> = $r0;

        return;
    }

    public static java.util.List immutableList(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1;
        java.util.List $r2;

        $r0 := @parameter0: java.lang.Object[];

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (java.lang.Object[]) $r1;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r2;
    }

    private static java.util.List intersect(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] $r0, $r1;
        java.util.ArrayList $r2, r5;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r4;
        boolean $z0;
        java.util.List r6;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object[];

        r5 = new java.util.ArrayList;

        $r2 = r5;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof $r0;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label5;

        $r3 = $r0[$i2];

        $i1 = lengthof $r1;

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label4;

        $r4 = $r1[$i3];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        r6 = (java.util.List) $r2;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label4;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        $i2 = $i2 + 1;

        goto label1;

     label5:
        r6 = (java.util.List) $r2;

        return r6;
    }

    public static java.lang.Object[] intersect(java.lang.Class, java.lang.Object[], java.lang.Object[])
    {
        java.lang.Class $r0;
        java.lang.Object[] $r1, $r2;
        java.util.List $r3;
        int $i0;
        java.lang.Object $r4;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <io.grpc.okhttp.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r0, $i0);

        $r1 = (java.lang.Object[]) $r4;

        $r1 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r1;
    }

