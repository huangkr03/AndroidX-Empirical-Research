androidx.test.espresso.base.ThreadPoolExecutorExtractor
<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.lang.String ASYNC_TASK_CLASS_NAME>
<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.lang.String MODERN_ASYNC_TASK_CLASS_NAME>
<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.lang.String MODERN_ASYNC_TASK_FIELD_NAME>
<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.lang.String LEGACY_ASYNC_TASK_FIELD_NAME>
<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable MODERN_ASYNC_TASK_EXTRACTOR>
<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable LOAD_ASYNC_TASK_CLASS>
<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable LEGACY_ASYNC_TASK_EXECUTOR>
<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable POST_HONEYCOMB_ASYNC_TASK_EXECUTOR>
<androidx.test.espresso.base.ThreadPoolExecutorExtractor: android.os.Handler mainHandler>
    public androidx.test.espresso.core.internal.deps.guava.base.Optional getCompatAsyncTaskThreadPool()
    {
        java.util.concurrent.Callable $r0;
        java.util.concurrent.FutureTask $r1, r7, r13;
        java.lang.Object $r2;
        java.lang.Throwable $r3, $r4, $r5, r9, r11, r17, r18;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor r6;
        androidx.test.espresso.core.internal.deps.guava.base.Optional r8;
        java.lang.RuntimeException r10, r12, r14, r15;
        java.util.concurrent.ExecutionException r16;

        r6 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor;

     label1:
        r13 = new java.util.concurrent.FutureTask;

        r7 = r13;

        $r0 = <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable MODERN_ASYNC_TASK_EXTRACTOR>;

        specialinvoke r13.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r0);

        $r1 = specialinvoke r6.<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.FutureTask runOnMainThread(java.util.concurrent.FutureTask)>(r7);

        $r2 = virtualinvoke $r1.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        r8 = (androidx.test.espresso.core.internal.deps.guava.base.Optional) $r2;

        goto label4;

     label2:
        $r3 := @caughtexception;

        r9 = $r3;

        r14 = new java.lang.RuntimeException;

        r10 = r14;

        r16 = (java.util.concurrent.ExecutionException) r9;

        $r4 = virtualinvoke r16.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        r17 = (java.lang.Throwable) r10;

        throw r17;

     label3:
        $r5 := @caughtexception;

        r11 = $r5;

        r15 = new java.lang.RuntimeException;

        r12 = r15;

        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Interrupted while trying to get the compat async executor!", r11);

        r18 = (java.lang.Throwable) r12;

        throw r18;

     label4:
        return r8;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label2;
    }

    static volatile java.util.concurrent.Callable '-$$Nest$sfgetLOAD_ASYNC_TASK_CLASS'()
    {
        java.util.concurrent.Callable $r0;

        $r0 = <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable LOAD_ASYNC_TASK_CLASS>;

        return $r0;
    }

    private java.util.concurrent.FutureTask runOnMainThread(java.util.concurrent.FutureTask)
    {
        java.util.concurrent.CountDownLatch r0, r10;
        android.os.Handler r1;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$1 r2, r11;
        android.os.Looper $r3, $r4;
        java.lang.Throwable $r5, r9, r13;
        boolean $z1;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor r6;
        java.util.concurrent.FutureTask r7;
        java.lang.RuntimeException r8, r12;

        r6 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor;

        r7 := @parameter0: java.util.concurrent.FutureTask;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r3 == $r4 goto label3;

        r10 = new java.util.concurrent.CountDownLatch;

        r0 = r10;

        specialinvoke r10.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r1 = r6.<androidx.test.espresso.base.ThreadPoolExecutorExtractor: android.os.Handler mainHandler>;

        r11 = new androidx.test.espresso.base.ThreadPoolExecutorExtractor$1;

        r2 = r11;

        specialinvoke r11.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$1: void <init>(androidx.test.espresso.base.ThreadPoolExecutorExtractor,java.util.concurrent.FutureTask,java.util.concurrent.CountDownLatch)>(r6, r7, r0);

        virtualinvoke r1.<android.os.Handler: boolean post(java.lang.Runnable)>(r2);

     label1:
        virtualinvoke r0.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        return r7;

     label3:
        virtualinvoke r7.<java.util.concurrent.FutureTask: void run()>();

        goto label2;

     label4:
        r12 = new java.lang.RuntimeException;

        r8 = r12;

        specialinvoke r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Interrupted while waiting for task to complete.", r9);

        r13 = (java.lang.Throwable) r8;

        throw r13;

     label5:
        $r5 := @caughtexception;

        r9 = $r5;

        $z1 = virtualinvoke r7.<java.util.concurrent.FutureTask: boolean isDone()>();

        if $z1 != 0 goto label2;

        goto label4;

        catch java.lang.InterruptedException from label1 to label2 with label5;
    }

    public java.util.concurrent.ThreadPoolExecutor getAsyncTaskThreadPool()
    {
        int $i0;
        java.util.concurrent.Callable $r0, $r5;
        java.util.concurrent.FutureTask $r1, r10, r16, r19;
        java.lang.Object $r2, $r4;
        androidx.test.espresso.core.internal.deps.guava.base.Optional $r3;
        java.lang.Throwable $r6, $r7, $r8, r12, r14, r21, r22;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor r9;
        java.util.concurrent.ThreadPoolExecutor r11;
        java.lang.RuntimeException r13, r15, r17, r18;
        java.util.concurrent.ExecutionException r20;

        r9 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 11 goto label5;

        r16 = new java.util.concurrent.FutureTask;

        r10 = r16;

        $r5 = <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable LEGACY_ASYNC_TASK_EXECUTOR>;

        specialinvoke r16.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r5);

     label1:
        $r1 = specialinvoke r9.<androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.FutureTask runOnMainThread(java.util.concurrent.FutureTask)>(r10);

        $r2 = virtualinvoke $r1.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        $r3 = (androidx.test.espresso.core.internal.deps.guava.base.Optional) $r2;

        $r4 = virtualinvoke $r3.<androidx.test.espresso.core.internal.deps.guava.base.Optional: java.lang.Object get()>();

        r11 = (java.util.concurrent.ThreadPoolExecutor) $r4;

     label2:
        return r11;

     label3:
        $r6 := @caughtexception;

        r12 = $r6;

        r17 = new java.lang.RuntimeException;

        r13 = r17;

        r20 = (java.util.concurrent.ExecutionException) r12;

        $r7 = virtualinvoke r20.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        r21 = (java.lang.Throwable) r13;

        throw r21;

     label4:
        $r8 := @caughtexception;

        r14 = $r8;

        r18 = new java.lang.RuntimeException;

        r15 = r18;

        specialinvoke r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Interrupted while trying to get the async task executor!", r14);

        r22 = (java.lang.Throwable) r15;

        throw r22;

     label5:
        r19 = new java.util.concurrent.FutureTask;

        r10 = r19;

        $r0 = <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable POST_HONEYCOMB_ASYNC_TASK_EXECUTOR>;

        specialinvoke r19.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r0);

        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$2 r0;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$3 r1;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$4 r2;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$5 r3;

        r0 = new androidx.test.espresso.base.ThreadPoolExecutorExtractor$2;

        specialinvoke r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$2: void <init>()>();

        <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable MODERN_ASYNC_TASK_EXTRACTOR> = r0;

        r1 = new androidx.test.espresso.base.ThreadPoolExecutorExtractor$3;

        specialinvoke r1.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$3: void <init>()>();

        <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable LOAD_ASYNC_TASK_CLASS> = r1;

        r2 = new androidx.test.espresso.base.ThreadPoolExecutorExtractor$4;

        specialinvoke r2.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$4: void <init>()>();

        <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable LEGACY_ASYNC_TASK_EXECUTOR> = r2;

        r3 = new androidx.test.espresso.base.ThreadPoolExecutorExtractor$5;

        specialinvoke r3.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$5: void <init>()>();

        <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable POST_HONEYCOMB_ASYNC_TASK_EXECUTOR> = r3;

        return;
    }

    void <init>(android.os.Looper)
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor r0;
        android.os.Looper r1;
        android.os.Handler r2;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor;

        r1 := @parameter0: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = new android.os.Handler;

        specialinvoke r2.<android.os.Handler: void <init>(android.os.Looper)>(r1);

        r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor: android.os.Handler mainHandler> = r2;

        return;
    }

androidx.test.espresso.base.ThreadPoolExecutorExtractor$1
<androidx.test.espresso.base.ThreadPoolExecutorExtractor$1: java.util.concurrent.FutureTask val$futureToRun>
<androidx.test.espresso.base.ThreadPoolExecutorExtractor$1: java.util.concurrent.CountDownLatch val$latch>
    void <init>(androidx.test.espresso.base.ThreadPoolExecutorExtractor, java.util.concurrent.FutureTask, java.util.concurrent.CountDownLatch)
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$1 r0;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor r1;
        java.util.concurrent.FutureTask r2;
        java.util.concurrent.CountDownLatch r3;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$1;

        r1 := @parameter0: androidx.test.espresso.base.ThreadPoolExecutorExtractor;

        r2 := @parameter1: java.util.concurrent.FutureTask;

        r3 := @parameter2: java.util.concurrent.CountDownLatch;

        r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$1: java.util.concurrent.FutureTask val$futureToRun> = r2;

        r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$1: java.util.concurrent.CountDownLatch val$latch> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$1 r0;
        java.lang.Throwable r1, $r4;
        java.util.concurrent.FutureTask $r2;
        java.util.concurrent.CountDownLatch $r3, $r5;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$1;

     label1:
        $r2 = r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$1: java.util.concurrent.FutureTask val$futureToRun>;

        virtualinvoke $r2.<java.util.concurrent.FutureTask: void run()>();

        goto label3;

     label2:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$1: java.util.concurrent.CountDownLatch val$latch>;

        virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>();

        throw r1;

     label3:
        $r3 = r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$1: java.util.concurrent.CountDownLatch val$latch>;

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

androidx.test.espresso.base.ThreadPoolExecutorExtractor$2
    public androidx.test.espresso.core.internal.deps.guava.base.Optional call() throws java.lang.Exception
    {
        java.lang.Object $r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.lang.Throwable $r2, $r4;
        androidx.test.espresso.core.internal.deps.guava.base.Optional $r3, $r5, r8, r10, r11;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$2 r6;
        java.lang.Class r7;
        java.lang.reflect.Field r9;

        r6 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$2;

     label01:
        r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.loader.content.ModernAsyncTask");

     label02:
        if r7 != null goto label05;

     label03:
        r8 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional absent()>();

     label04:
        return r8;

     label05:
        r9 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("THREAD_POOL_EXECUTOR");

     label06:
        if r9 != null goto label09;

     label07:
        r10 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional absent()>();

     label08:
        return r10;

     label09:
        virtualinvoke r9.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r0 = virtualinvoke r9.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r1 = (java.util.concurrent.ThreadPoolExecutor) $r0;

        r11 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional of(java.lang.Object)>($r1);

     label10:
        return r11;

     label11:
        $r4 := @caughtexception;

        $r5 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional absent()>();

        return $r5;

     label12:
        $r2 := @caughtexception;

        $r3 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional absent()>();

        return $r3;

        catch java.lang.ClassNotFoundException from label01 to label02 with label11;
        catch java.lang.NoSuchFieldException from label01 to label02 with label12;
        catch java.lang.ClassNotFoundException from label03 to label04 with label11;
        catch java.lang.NoSuchFieldException from label03 to label04 with label12;
        catch java.lang.ClassNotFoundException from label05 to label06 with label11;
        catch java.lang.NoSuchFieldException from label05 to label06 with label12;
        catch java.lang.ClassNotFoundException from label07 to label08 with label11;
        catch java.lang.NoSuchFieldException from label07 to label08 with label12;
        catch java.lang.ClassNotFoundException from label09 to label10 with label11;
        catch java.lang.NoSuchFieldException from label09 to label10 with label12;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$2 r0;
        androidx.test.espresso.core.internal.deps.guava.base.Optional $r1;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$2;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$2: androidx.test.espresso.core.internal.deps.guava.base.Optional call()>();

        return $r1;
    }

    void <init>()
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$2 r0;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.ThreadPoolExecutorExtractor$3
    public java.lang.Class call() throws java.lang.Exception
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$3 r0;
        java.lang.Class $r1;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$3;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.os.AsyncTask");

        return $r1;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$3 r0;
        java.lang.Class $r1;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$3;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$3: java.lang.Class call()>();

        return $r1;
    }

    void <init>()
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$3 r0;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.ThreadPoolExecutorExtractor$4
    public androidx.test.espresso.core.internal.deps.guava.base.Optional call() throws java.lang.Exception
    {
        java.util.concurrent.Callable $r0;
        java.lang.Object $r1, $r3;
        java.lang.Class $r2;
        java.util.concurrent.ThreadPoolExecutor $r4;
        java.lang.Throwable $r5, $r7;
        androidx.test.espresso.core.internal.deps.guava.base.Optional $r6, $r8, r11;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$4 r9;
        java.lang.reflect.Field r10;

        r9 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$4;

     label1:
        $r0 = staticinvoke <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable '-$$Nest$sfgetLOAD_ASYNC_TASK_CLASS'()>();

        $r1 = interfaceinvoke $r0.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r2 = (java.lang.Class) $r1;

        r10 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("sExecutor");

        virtualinvoke r10.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r3 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r4 = (java.util.concurrent.ThreadPoolExecutor) $r3;

        r11 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional of(java.lang.Object)>($r4);

     label2:
        return r11;

     label3:
        $r7 := @caughtexception;

        $r8 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional absent()>();

        return $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional absent()>();

        return $r6;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchFieldException from label1 to label2 with label4;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$4 r0;
        androidx.test.espresso.core.internal.deps.guava.base.Optional $r1;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$4;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$4: androidx.test.espresso.core.internal.deps.guava.base.Optional call()>();

        return $r1;
    }

    void <init>()
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$4 r0;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.base.ThreadPoolExecutorExtractor$5
    public androidx.test.espresso.core.internal.deps.guava.base.Optional call() throws java.lang.Exception
    {
        java.util.concurrent.Callable $r0;
        java.lang.Object $r1, $r4;
        java.lang.Class $r2;
        java.lang.reflect.Field $r3;
        java.util.concurrent.ThreadPoolExecutor $r5;
        java.lang.Throwable $r6, $r8;
        androidx.test.espresso.core.internal.deps.guava.base.Optional $r7, $r9, r11;
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$5 r10;

        r10 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$5;

     label1:
        $r0 = staticinvoke <androidx.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.Callable '-$$Nest$sfgetLOAD_ASYNC_TASK_CLASS'()>();

        $r1 = interfaceinvoke $r0.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r2 = (java.lang.Class) $r1;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("THREAD_POOL_EXECUTOR");

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r5 = (java.util.concurrent.ThreadPoolExecutor) $r4;

        r11 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional of(java.lang.Object)>($r5);

     label2:
        return r11;

     label3:
        $r8 := @caughtexception;

        $r9 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional absent()>();

        return $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Optional: androidx.test.espresso.core.internal.deps.guava.base.Optional absent()>();

        return $r7;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchFieldException from label1 to label2 with label4;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$5 r0;
        androidx.test.espresso.core.internal.deps.guava.base.Optional $r1;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$5;

        $r1 = virtualinvoke r0.<androidx.test.espresso.base.ThreadPoolExecutorExtractor$5: androidx.test.espresso.core.internal.deps.guava.base.Optional call()>();

        return $r1;
    }

    void <init>()
    {
        androidx.test.espresso.base.ThreadPoolExecutorExtractor$5 r0;

        r0 := @this: androidx.test.espresso.base.ThreadPoolExecutorExtractor$5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

