androidx.lifecycle.testing.TestLifecycleOwner
<androidx.lifecycle.testing.TestLifecycleOwner: kotlinx.coroutines.CoroutineDispatcher coroutineDispatcher>
<androidx.lifecycle.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry lifecycleRegistry>
    public void <init>(androidx.lifecycle.Lifecycle$State, kotlinx.coroutines.CoroutineDispatcher)
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0, r4;
        androidx.lifecycle.Lifecycle$State r1;
        kotlinx.coroutines.CoroutineDispatcher r2;
        androidx.lifecycle.LifecycleRegistry r3;
        androidx.lifecycle.LifecycleOwner $r5;
        androidx.lifecycle.LifecycleRegistry$Companion $r6;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        r2 := @parameter1: kotlinx.coroutines.CoroutineDispatcher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "initialState");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "coroutineDispatcher");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.lifecycle.testing.TestLifecycleOwner: kotlinx.coroutines.CoroutineDispatcher coroutineDispatcher> = r2;

        $r6 = <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion>;

        $r5 = (androidx.lifecycle.LifecycleOwner) r0;

        r3 = virtualinvoke $r6.<androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.LifecycleRegistry createUnsafe(androidx.lifecycle.LifecycleOwner)>($r5);

        r4 = r0;

        virtualinvoke r3.<androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)>(r1);

        r4.<androidx.lifecycle.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry lifecycleRegistry> = r3;

        return;
    }

    public void <init>(androidx.lifecycle.Lifecycle$State, kotlinx.coroutines.CoroutineDispatcher, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        kotlinx.coroutines.MainCoroutineDispatcher $r2, $r3;
        androidx.lifecycle.Lifecycle$State r4;
        kotlinx.coroutines.CoroutineDispatcher r5;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        r4 := @parameter0: androidx.lifecycle.Lifecycle$State;

        r5 := @parameter1: kotlinx.coroutines.CoroutineDispatcher;

        i0 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r2 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>();

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.MainCoroutineDispatcher: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()>();

        r5 = (kotlinx.coroutines.CoroutineDispatcher) $r3;

     label2:
        specialinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner: void <init>(androidx.lifecycle.Lifecycle$State,kotlinx.coroutines.CoroutineDispatcher)>(r4, r5);

        return;
    }

    public androidx.lifecycle.LifecycleRegistry getLifecycle()
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0;
        androidx.lifecycle.LifecycleRegistry $r1;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        $r1 = r0.<androidx.lifecycle.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry lifecycleRegistry>;

        return $r1;
    }

    public final void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0;
        androidx.lifecycle.Lifecycle$Event r1;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1 $r3;
        kotlin.coroutines.CoroutineContext $r4;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$Event;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "event");

        $r2 = r0.<androidx.lifecycle.testing.TestLifecycleOwner: kotlinx.coroutines.CoroutineDispatcher coroutineDispatcher>;

        $r4 = (kotlin.coroutines.CoroutineContext) $r2;

        $r3 = new androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1;

        specialinvoke $r3.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: void <init>(androidx.lifecycle.testing.TestLifecycleOwner,androidx.lifecycle.Lifecycle$Event,kotlin.coroutines.Continuation)>(r0, r1, null);

        $r5 = (kotlin.jvm.functions.Function2) $r3;

        staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object runBlocking(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>($r4, $r5);

        return;
    }

    public final androidx.lifecycle.Lifecycle$State getCurrentState()
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0;
        kotlinx.coroutines.CoroutineDispatcher $r1;
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$1 $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlin.jvm.functions.Function2 $r4;
        java.lang.Object $r5;
        androidx.lifecycle.Lifecycle$State $r6;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        $r1 = r0.<androidx.lifecycle.testing.TestLifecycleOwner: kotlinx.coroutines.CoroutineDispatcher coroutineDispatcher>;

        $r3 = (kotlin.coroutines.CoroutineContext) $r1;

        $r2 = new androidx.lifecycle.testing.TestLifecycleOwner$currentState$1;

        specialinvoke $r2.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: void <init>(androidx.lifecycle.testing.TestLifecycleOwner,kotlin.coroutines.Continuation)>(r0, null);

        $r4 = (kotlin.jvm.functions.Function2) $r2;

        $r5 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object runBlocking(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>($r3, $r4);

        $r6 = (androidx.lifecycle.Lifecycle$State) $r5;

        return $r6;
    }

    public final void setCurrentState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0;
        androidx.lifecycle.Lifecycle$State r1;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$2 $r3;
        kotlin.coroutines.CoroutineContext $r4;
        kotlin.jvm.functions.Function2 $r5;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = r0.<androidx.lifecycle.testing.TestLifecycleOwner: kotlinx.coroutines.CoroutineDispatcher coroutineDispatcher>;

        $r4 = (kotlin.coroutines.CoroutineContext) $r2;

        $r3 = new androidx.lifecycle.testing.TestLifecycleOwner$currentState$2;

        specialinvoke $r3.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: void <init>(androidx.lifecycle.testing.TestLifecycleOwner,androidx.lifecycle.Lifecycle$State,kotlin.coroutines.Continuation)>(r0, r1, null);

        $r5 = (kotlin.jvm.functions.Function2) $r3;

        staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object runBlocking(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>($r4, $r5);

        return;
    }

    public final int getObserverCount()
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0;
        androidx.lifecycle.LifecycleRegistry $r1;
        int $i0;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        $r1 = r0.<androidx.lifecycle.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry lifecycleRegistry>;

        $i0 = virtualinvoke $r1.<androidx.lifecycle.LifecycleRegistry: int getObserverCount()>();

        return $i0;
    }

    public void <init>(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0;
        androidx.lifecycle.Lifecycle$State r1;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "initialState");

        specialinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner: void <init>(androidx.lifecycle.Lifecycle$State,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, null, 2, null);

        return;
    }

    public void <init>()
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        specialinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner: void <init>(androidx.lifecycle.Lifecycle$State,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, null, 3, null);

        return;
    }

    public volatile androidx.lifecycle.Lifecycle getLifecycle()
    {
        androidx.lifecycle.testing.TestLifecycleOwner r0;
        androidx.lifecycle.LifecycleRegistry $r1;
        androidx.lifecycle.Lifecycle $r2;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner;

        $r1 = virtualinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry getLifecycle()>();

        $r2 = (androidx.lifecycle.Lifecycle) $r1;

        return $r2;
    }

    public static final androidx.lifecycle.LifecycleRegistry access$getLifecycleRegistry$p(androidx.lifecycle.testing.TestLifecycleOwner)
    {
        androidx.lifecycle.testing.TestLifecycleOwner $r0;
        androidx.lifecycle.LifecycleRegistry $r1;

        $r0 := @parameter0: androidx.lifecycle.testing.TestLifecycleOwner;

        $r1 = $r0.<androidx.lifecycle.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry lifecycleRegistry>;

        return $r1;
    }

androidx.lifecycle.testing.TestLifecycleOwner$currentState$1
<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: int label>
<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: androidx.lifecycle.testing.TestLifecycleOwner this$0>
    void <init>(androidx.lifecycle.testing.TestLifecycleOwner, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$1 r0;
        androidx.lifecycle.testing.TestLifecycleOwner $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$1;

        $r1 := @parameter0: androidx.lifecycle.testing.TestLifecycleOwner;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: androidx.lifecycle.testing.TestLifecycleOwner this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$1 r0;
        java.lang.Object $r1;
        int $i0;
        androidx.lifecycle.testing.TestLifecycleOwner $r3;
        androidx.lifecycle.LifecycleRegistry $r4;
        androidx.lifecycle.Lifecycle$State $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: androidx.lifecycle.testing.TestLifecycleOwner this$0>;

        $r4 = staticinvoke <androidx.lifecycle.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry access$getLifecycleRegistry$p(androidx.lifecycle.testing.TestLifecycleOwner)>($r3);

        $r5 = virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        return $r5;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r6;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        androidx.lifecycle.testing.TestLifecycleOwner $r4;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.lifecycle.testing.TestLifecycleOwner$currentState$1;

        $r4 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: androidx.lifecycle.testing.TestLifecycleOwner this$0>;

        specialinvoke $r3.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: void <init>(androidx.lifecycle.testing.TestLifecycleOwner,kotlin.coroutines.Continuation)>($r4, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.lifecycle.testing.TestLifecycleOwner$currentState$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.lifecycle.testing.TestLifecycleOwner$currentState$2
<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: int label>
<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: androidx.lifecycle.testing.TestLifecycleOwner this$0>
<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: androidx.lifecycle.Lifecycle$State $value>
    void <init>(androidx.lifecycle.testing.TestLifecycleOwner, androidx.lifecycle.Lifecycle$State, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$2 r0;
        androidx.lifecycle.testing.TestLifecycleOwner $r1;
        androidx.lifecycle.Lifecycle$State $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$2;

        $r1 := @parameter0: androidx.lifecycle.testing.TestLifecycleOwner;

        $r2 := @parameter1: androidx.lifecycle.Lifecycle$State;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: androidx.lifecycle.testing.TestLifecycleOwner this$0> = $r1;

        r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: androidx.lifecycle.Lifecycle$State $value> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$2 r0;
        java.lang.Object $r1;
        int $i0;
        androidx.lifecycle.testing.TestLifecycleOwner $r3;
        androidx.lifecycle.LifecycleRegistry $r4;
        androidx.lifecycle.Lifecycle$State $r5;
        kotlin.Unit $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$2;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: androidx.lifecycle.testing.TestLifecycleOwner this$0>;

        $r4 = staticinvoke <androidx.lifecycle.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry access$getLifecycleRegistry$p(androidx.lifecycle.testing.TestLifecycleOwner)>($r3);

        $r5 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: androidx.lifecycle.Lifecycle$State $value>;

        virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)>($r5);

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label2:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r7;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$2 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.lifecycle.Lifecycle$State $r4;
        androidx.lifecycle.testing.TestLifecycleOwner $r5;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.lifecycle.testing.TestLifecycleOwner$currentState$2;

        $r5 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: androidx.lifecycle.testing.TestLifecycleOwner this$0>;

        $r4 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: androidx.lifecycle.Lifecycle$State $value>;

        specialinvoke $r3.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: void <init>(androidx.lifecycle.testing.TestLifecycleOwner,androidx.lifecycle.Lifecycle$State,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$2 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$2;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.lifecycle.testing.TestLifecycleOwner$currentState$2) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$currentState$2 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$currentState$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner$currentState$2: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1
<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: int label>
<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: androidx.lifecycle.testing.TestLifecycleOwner this$0>
<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: androidx.lifecycle.Lifecycle$Event $event>
    void <init>(androidx.lifecycle.testing.TestLifecycleOwner, androidx.lifecycle.Lifecycle$Event, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1 r0;
        androidx.lifecycle.testing.TestLifecycleOwner $r1;
        androidx.lifecycle.Lifecycle$Event $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1;

        $r1 := @parameter0: androidx.lifecycle.testing.TestLifecycleOwner;

        $r2 := @parameter1: androidx.lifecycle.Lifecycle$Event;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: androidx.lifecycle.testing.TestLifecycleOwner this$0> = $r1;

        r0.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: androidx.lifecycle.Lifecycle$Event $event> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1 r0;
        java.lang.Object $r1;
        int $i0;
        androidx.lifecycle.testing.TestLifecycleOwner $r3;
        androidx.lifecycle.LifecycleRegistry $r4;
        androidx.lifecycle.Lifecycle$Event $r5;
        kotlin.Unit $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: androidx.lifecycle.testing.TestLifecycleOwner this$0>;

        $r4 = staticinvoke <androidx.lifecycle.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry access$getLifecycleRegistry$p(androidx.lifecycle.testing.TestLifecycleOwner)>($r3);

        $r5 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: androidx.lifecycle.Lifecycle$Event $event>;

        virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r5);

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label2:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r7;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.lifecycle.Lifecycle$Event $r4;
        androidx.lifecycle.testing.TestLifecycleOwner $r5;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1;

        $r5 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: androidx.lifecycle.testing.TestLifecycleOwner this$0>;

        $r4 = r0.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: androidx.lifecycle.Lifecycle$Event $event>;

        specialinvoke $r3.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: void <init>(androidx.lifecycle.testing.TestLifecycleOwner,androidx.lifecycle.Lifecycle$Event,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.lifecycle.testing.TestLifecycleOwner$handleLifecycleEvent$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

