androidx.camera.core.SurfaceOrientedMeteringPointFactory
<androidx.camera.core.SurfaceOrientedMeteringPointFactory: float mWidth>
<androidx.camera.core.SurfaceOrientedMeteringPointFactory: float mHeight>
    public void <init>(float, float)
    {
        androidx.camera.core.SurfaceOrientedMeteringPointFactory r0;
        float f0, f1;

        r0 := @this: androidx.camera.core.SurfaceOrientedMeteringPointFactory;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<androidx.camera.core.MeteringPointFactory: void <init>()>();

        r0.<androidx.camera.core.SurfaceOrientedMeteringPointFactory: float mWidth> = f0;

        r0.<androidx.camera.core.SurfaceOrientedMeteringPointFactory: float mHeight> = f1;

        return;
    }

    public void <init>(float, float, androidx.camera.core.UseCase)
    {
        androidx.camera.core.SurfaceOrientedMeteringPointFactory r0;
        float f0, f1;
        androidx.camera.core.UseCase r1;
        android.util.Rational $r2;

        r0 := @this: androidx.camera.core.SurfaceOrientedMeteringPointFactory;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: androidx.camera.core.UseCase;

        $r2 = staticinvoke <androidx.camera.core.SurfaceOrientedMeteringPointFactory: android.util.Rational getUseCaseAspectRatio(androidx.camera.core.UseCase)>(r1);

        specialinvoke r0.<androidx.camera.core.MeteringPointFactory: void <init>(android.util.Rational)>($r2);

        r0.<androidx.camera.core.SurfaceOrientedMeteringPointFactory: float mWidth> = f0;

        r0.<androidx.camera.core.SurfaceOrientedMeteringPointFactory: float mHeight> = f1;

        return;
    }

    private static android.util.Rational getUseCaseAspectRatio(androidx.camera.core.UseCase)
    {
        androidx.camera.core.UseCase r0;
        android.util.Size r1;
        android.util.Rational $r2;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0: androidx.camera.core.UseCase;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = virtualinvoke r0.<androidx.camera.core.UseCase: android.util.Size getAttachedSurfaceResolution()>();

        if r1 != null goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UseCase ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not bound.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        $r2 = new android.util.Rational;

        $i0 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        specialinvoke $r2.<android.util.Rational: void <init>(int,int)>($i0, $i1);

        return $r2;
    }

    protected android.graphics.PointF convertPoint(float, float)
    {
        androidx.camera.core.SurfaceOrientedMeteringPointFactory r0;
        float f0, f1, $f2, $f3, $f4, $f5;
        android.graphics.PointF r1, $r2;

        r0 := @this: androidx.camera.core.SurfaceOrientedMeteringPointFactory;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r2 = new android.graphics.PointF;

        $f2 = r0.<androidx.camera.core.SurfaceOrientedMeteringPointFactory: float mWidth>;

        $f5 = f0 / $f2;

        $f3 = r0.<androidx.camera.core.SurfaceOrientedMeteringPointFactory: float mHeight>;

        $f4 = f1 / $f3;

        specialinvoke $r2.<android.graphics.PointF: void <init>(float,float)>($f5, $f4);

        r1 = $r2;

        return r1;
    }

