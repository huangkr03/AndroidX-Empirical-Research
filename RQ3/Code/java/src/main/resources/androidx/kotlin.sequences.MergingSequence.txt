kotlin.sequences.MergingSequence
<kotlin.sequences.MergingSequence: kotlin.sequences.Sequence sequence1>
<kotlin.sequences.MergingSequence: kotlin.sequences.Sequence sequence2>
<kotlin.sequences.MergingSequence: kotlin.jvm.functions.Function2 transform>
    public void <init>(kotlin.sequences.Sequence, kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.MergingSequence $r0;
        kotlin.sequences.Sequence $r1, $r2;
        kotlin.jvm.functions.Function2 $r3;

        $r0 := @this: kotlin.sequences.MergingSequence;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $r2 := @parameter1: kotlin.sequences.Sequence;

        $r3 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sequence1");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "sequence2");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "transform");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.sequences.MergingSequence: kotlin.sequences.Sequence sequence1> = $r1;

        $r0.<kotlin.sequences.MergingSequence: kotlin.sequences.Sequence sequence2> = $r2;

        $r0.<kotlin.sequences.MergingSequence: kotlin.jvm.functions.Function2 transform> = $r3;

        return;
    }

    public static final kotlin.sequences.Sequence access$getSequence1$p(kotlin.sequences.MergingSequence)
    {
        kotlin.sequences.MergingSequence $r0;
        kotlin.sequences.Sequence r1;

        $r0 := @parameter0: kotlin.sequences.MergingSequence;

        r1 = $r0.<kotlin.sequences.MergingSequence: kotlin.sequences.Sequence sequence1>;

        return r1;
    }

    public static final kotlin.sequences.Sequence access$getSequence2$p(kotlin.sequences.MergingSequence)
    {
        kotlin.sequences.MergingSequence $r0;
        kotlin.sequences.Sequence r1;

        $r0 := @parameter0: kotlin.sequences.MergingSequence;

        r1 = $r0.<kotlin.sequences.MergingSequence: kotlin.sequences.Sequence sequence2>;

        return r1;
    }

    public static final kotlin.jvm.functions.Function2 access$getTransform$p(kotlin.sequences.MergingSequence)
    {
        kotlin.sequences.MergingSequence $r0;
        kotlin.jvm.functions.Function2 r1;

        $r0 := @parameter0: kotlin.sequences.MergingSequence;

        r1 = $r0.<kotlin.sequences.MergingSequence: kotlin.jvm.functions.Function2 transform>;

        return r1;
    }

    public java.util.Iterator iterator()
    {
        kotlin.sequences.MergingSequence $r0;
        kotlin.sequences.MergingSequence$iterator$1 $r1;

        $r0 := @this: kotlin.sequences.MergingSequence;

        $r1 = new kotlin.sequences.MergingSequence$iterator$1;

        specialinvoke $r1.<kotlin.sequences.MergingSequence$iterator$1: void <init>(kotlin.sequences.MergingSequence)>($r0);

        return $r1;
    }

kotlin.sequences.MergingSequence$iterator$1
<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator1>
<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator2>
<kotlin.sequences.MergingSequence$iterator$1: kotlin.sequences.MergingSequence this$0>
    void <init>(kotlin.sequences.MergingSequence)
    {
        kotlin.sequences.MergingSequence$iterator$1 $r0;
        kotlin.sequences.MergingSequence $r1;
        kotlin.sequences.Sequence $r2;
        java.util.Iterator $r3;

        $r0 := @this: kotlin.sequences.MergingSequence$iterator$1;

        $r1 := @parameter0: kotlin.sequences.MergingSequence;

        $r0.<kotlin.sequences.MergingSequence$iterator$1: kotlin.sequences.MergingSequence this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kotlin.sequences.MergingSequence: kotlin.sequences.Sequence access$getSequence1$p(kotlin.sequences.MergingSequence)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $r0.<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator1> = $r3;

        $r2 = staticinvoke <kotlin.sequences.MergingSequence: kotlin.sequences.Sequence access$getSequence2$p(kotlin.sequences.MergingSequence)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $r0.<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator2> = $r3;

        return;
    }

    public final java.util.Iterator getIterator1()
    {
        kotlin.sequences.MergingSequence$iterator$1 $r0;
        java.util.Iterator r1;

        $r0 := @this: kotlin.sequences.MergingSequence$iterator$1;

        r1 = $r0.<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator1>;

        return r1;
    }

    public final java.util.Iterator getIterator2()
    {
        kotlin.sequences.MergingSequence$iterator$1 $r0;
        java.util.Iterator r1;

        $r0 := @this: kotlin.sequences.MergingSequence$iterator$1;

        r1 = $r0.<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator2>;

        return r1;
    }

    public boolean hasNext()
    {
        kotlin.sequences.MergingSequence$iterator$1 $r0;
        java.util.Iterator $r1;
        boolean $z0;

        $r0 := @this: kotlin.sequences.MergingSequence$iterator$1;

        $r1 = $r0.<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator1>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator2>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        kotlin.sequences.MergingSequence$iterator$1 $r0;
        kotlin.sequences.MergingSequence $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4, $r5;

        $r0 := @this: kotlin.sequences.MergingSequence$iterator$1;

        $r1 = $r0.<kotlin.sequences.MergingSequence$iterator$1: kotlin.sequences.MergingSequence this$0>;

        $r2 = staticinvoke <kotlin.sequences.MergingSequence: kotlin.jvm.functions.Function2 access$getTransform$p(kotlin.sequences.MergingSequence)>($r1);

        $r3 = $r0.<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator1>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r3 = $r0.<kotlin.sequences.MergingSequence$iterator$1: java.util.Iterator iterator2>;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $r4;
    }

    public void remove()
    {
        kotlin.sequences.MergingSequence$iterator$1 $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.sequences.MergingSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

