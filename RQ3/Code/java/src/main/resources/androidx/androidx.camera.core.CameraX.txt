androidx.camera.core.CameraX
<androidx.camera.core.CameraX: java.lang.String TAG>
<androidx.camera.core.CameraX: java.lang.String RETRY_TOKEN>
<androidx.camera.core.CameraX: long WAIT_INITIALIZED_TIMEOUT_MILLIS>
<androidx.camera.core.CameraX: long RETRY_SLEEP_MILLIS>
<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraRepository mCameraRepository>
<androidx.camera.core.CameraX: java.lang.Object mInitializeLock>
<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig>
<androidx.camera.core.CameraX: java.util.concurrent.Executor mCameraExecutor>
<androidx.camera.core.CameraX: android.os.Handler mSchedulerHandler>
<androidx.camera.core.CameraX: android.os.HandlerThread mSchedulerThread>
<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraFactory mCameraFactory>
<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraDeviceSurfaceManager mSurfaceManager>
<androidx.camera.core.CameraX: androidx.camera.core.impl.UseCaseConfigFactory mDefaultConfigFactory>
<androidx.camera.core.CameraX: android.content.Context mAppContext>
<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture mInitInternalFuture>
<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState>
<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture mShutdownInternalFuture>
<androidx.camera.core.CameraX: java.lang.Integer mMinLogLevel>
<androidx.camera.core.CameraX: java.lang.Object MIN_LOG_LEVEL_LOCK>
<androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>
    public void <init>(android.content.Context, androidx.camera.core.CameraXConfig$Provider)
    {
        androidx.camera.core.CameraX r0;
        android.content.Context r1;
        androidx.camera.core.CameraXConfig$Provider r2, r25;
        android.os.Handler r3, $r21;
        androidx.camera.core.CameraX$InternalInitState $r6;
        com.google.common.util.concurrent.ListenableFuture $r7, $r16;
        androidx.camera.core.CameraXConfig $r8, $r9, $r10, $r12, $r24;
        androidx.camera.core.impl.Config$Option $r11;
        java.lang.Object $r13, $r27, r29;
        java.lang.Integer $r14, $r15;
        android.os.HandlerThread $r18, $r19, r32;
        android.os.Looper $r20;
        java.util.concurrent.Executor r26, r33;
        androidx.camera.core.impl.CameraRepository r28;
        java.lang.IllegalStateException r30;
        androidx.camera.core.CameraExecutor r31;

        r0 := @this: androidx.camera.core.CameraX;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.camera.core.CameraXConfig$Provider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r28 = new androidx.camera.core.impl.CameraRepository;

        specialinvoke r28.<androidx.camera.core.impl.CameraRepository: void <init>()>();

        r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraRepository mCameraRepository> = r28;

        r29 = new java.lang.Object;

        specialinvoke r29.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.CameraX: java.lang.Object mInitializeLock> = r29;

        $r6 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState UNINITIALIZED>;

        r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState> = $r6;

        $r7 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        r0.<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture mShutdownInternalFuture> = $r7;

        if r2 == null goto label1;

        $r24 = interfaceinvoke r2.<androidx.camera.core.CameraXConfig$Provider: androidx.camera.core.CameraXConfig getCameraXConfig()>();

        r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig> = $r24;

        goto label3;

     label1:
        r25 = staticinvoke <androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig$Provider getConfigProvider(android.content.Context)>(r1);

        if r25 != null goto label2;

        r30 = new java.lang.IllegalStateException;

        specialinvoke r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CameraX is not configured properly. The most likely cause is you did not include a default implementation in your build such as \'camera-camera2\'.");

        throw r30;

     label2:
        $r8 = interfaceinvoke r25.<androidx.camera.core.CameraXConfig$Provider: androidx.camera.core.CameraXConfig getCameraXConfig()>();

        r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig> = $r8;

     label3:
        $r9 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig>;

        r26 = virtualinvoke $r9.<androidx.camera.core.CameraXConfig: java.util.concurrent.Executor getCameraExecutor(java.util.concurrent.Executor)>(null);

        $r10 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig>;

        r3 = virtualinvoke $r10.<androidx.camera.core.CameraXConfig: android.os.Handler getSchedulerHandler(android.os.Handler)>(null);

        if r26 != null goto label4;

        r31 = new androidx.camera.core.CameraExecutor;

        $r27 = r31;

        specialinvoke r31.<androidx.camera.core.CameraExecutor: void <init>()>();

        goto label5;

     label4:
        $r27 = r26;

     label5:
        r33 = (java.util.concurrent.Executor) $r27;

        r0.<androidx.camera.core.CameraX: java.util.concurrent.Executor mCameraExecutor> = r33;

        if r3 != null goto label6;

        r32 = new android.os.HandlerThread;

        specialinvoke r32.<android.os.HandlerThread: void <init>(java.lang.String,int)>("CameraX-scheduler", 10);

        r0.<androidx.camera.core.CameraX: android.os.HandlerThread mSchedulerThread> = r32;

        $r18 = r0.<androidx.camera.core.CameraX: android.os.HandlerThread mSchedulerThread>;

        virtualinvoke $r18.<android.os.HandlerThread: void start()>();

        $r19 = r0.<androidx.camera.core.CameraX: android.os.HandlerThread mSchedulerThread>;

        $r20 = virtualinvoke $r19.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r21 = staticinvoke <androidx.core.os.HandlerCompat: android.os.Handler createAsync(android.os.Looper)>($r20);

        r0.<androidx.camera.core.CameraX: android.os.Handler mSchedulerHandler> = $r21;

        goto label7;

     label6:
        r0.<androidx.camera.core.CameraX: android.os.HandlerThread mSchedulerThread> = null;

        r0.<androidx.camera.core.CameraX: android.os.Handler mSchedulerHandler> = r3;

     label7:
        $r12 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig>;

        $r11 = <androidx.camera.core.CameraXConfig: androidx.camera.core.impl.Config$Option OPTION_MIN_LOGGING_LEVEL>;

        $r13 = virtualinvoke $r12.<androidx.camera.core.CameraXConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r11, null);

        $r14 = (java.lang.Integer) $r13;

        r0.<androidx.camera.core.CameraX: java.lang.Integer mMinLogLevel> = $r14;

        $r15 = r0.<androidx.camera.core.CameraX: java.lang.Integer mMinLogLevel>;

        staticinvoke <androidx.camera.core.CameraX: void increaseMinLogLevelReference(java.lang.Integer)>($r15);

        $r16 = specialinvoke r0.<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture initInternal(android.content.Context)>(r1);

        r0.<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture mInitInternalFuture> = $r16;

        return;
    }

    public androidx.camera.core.impl.CameraFactory getCameraFactory()
    {
        androidx.camera.core.CameraX r0;
        androidx.camera.core.impl.CameraFactory $r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.camera.core.CameraX;

        $r1 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraFactory mCameraFactory>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CameraX not initialized yet.");

        throw $r3;

     label1:
        $r2 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraFactory mCameraFactory>;

        return $r2;
    }

    private static androidx.camera.core.CameraXConfig$Provider getConfigProvider(android.content.Context)
    {
        android.content.Context r0, r14;
        android.app.Application r1;
        android.content.pm.ServiceInfo r2;
        java.lang.Class r3;
        boolean $z0;
        android.content.pm.PackageManager $r4;
        android.content.ComponentName $r5;
        android.os.Bundle $r6, $r11;
        java.lang.Class[] $r7;
        java.lang.reflect.Constructor $r8;
        java.lang.Object[] $r9;
        java.lang.Object $r10;
        java.lang.Throwable $r12, r16;
        androidx.camera.core.CameraXConfig$Provider r13;
        java.lang.String r15;

        r0 := @parameter0: android.content.Context;

        r13 = null;

        r1 = staticinvoke <androidx.camera.core.impl.utils.ContextUtil: android.app.Application getApplicationFromContext(android.content.Context)>(r0);

        $z0 = r1 instanceof androidx.camera.core.CameraXConfig$Provider;

        if $z0 == 0 goto label1;

        r13 = (androidx.camera.core.CameraXConfig$Provider) r1;

        goto label7;

     label1:
        r14 = staticinvoke <androidx.camera.core.impl.utils.ContextUtil: android.content.Context getApplicationContext(android.content.Context)>(r0);

        $r4 = virtualinvoke r14.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = new android.content.ComponentName;

        specialinvoke $r5.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>(r14, class "Landroidx/camera/core/impl/MetadataHolderService;");

        r2 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>($r5, 640);

        r15 = null;

        $r6 = r2.<android.content.pm.ServiceInfo: android.os.Bundle metaData>;

        if $r6 == null goto label2;

        $r11 = r2.<android.content.pm.ServiceInfo: android.os.Bundle metaData>;

        r15 = virtualinvoke $r11.<android.os.Bundle: java.lang.String getString(java.lang.String)>("androidx.camera.core.impl.MetadataHolderService.DEFAULT_CONFIG_PROVIDER");

     label2:
        if r15 != null goto label4;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CameraX", "No default CameraXConfig.Provider specified in meta-data. The most likely cause is you did not include a default implementation in your build such as \'camera-camera2\'.");

     label3:
        return null;

     label4:
        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r15);

        $r7 = newarray (java.lang.Class)[0];

        $r8 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r7);

        $r9 = newarray (java.lang.Object)[0];

        $r10 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

        r13 = (androidx.camera.core.CameraXConfig$Provider) $r10;

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        r16 = $r12;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraX", "Failed to retrieve default CameraXConfig.Provider from meta-data", r16);

     label7:
        return r13;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label3 with label6;
        catch java.lang.ClassNotFoundException from label1 to label3 with label6;
        catch java.lang.InstantiationException from label1 to label3 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label3 with label6;
        catch java.lang.NoSuchMethodException from label1 to label3 with label6;
        catch java.lang.IllegalAccessException from label1 to label3 with label6;
        catch java.lang.NullPointerException from label1 to label3 with label6;
        catch android.content.pm.PackageManager$NameNotFoundException from label4 to label5 with label6;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
        catch java.lang.InstantiationException from label4 to label5 with label6;
        catch java.lang.reflect.InvocationTargetException from label4 to label5 with label6;
        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
        catch java.lang.IllegalAccessException from label4 to label5 with label6;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public androidx.camera.core.impl.CameraDeviceSurfaceManager getCameraDeviceSurfaceManager()
    {
        androidx.camera.core.CameraX r0;
        androidx.camera.core.impl.CameraDeviceSurfaceManager $r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.camera.core.CameraX;

        $r1 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraDeviceSurfaceManager mSurfaceManager>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CameraX not initialized yet.");

        throw $r3;

     label1:
        $r2 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraDeviceSurfaceManager mSurfaceManager>;

        return $r2;
    }

    public androidx.camera.core.impl.CameraRepository getCameraRepository()
    {
        androidx.camera.core.CameraX r0;
        androidx.camera.core.impl.CameraRepository $r1;

        r0 := @this: androidx.camera.core.CameraX;

        $r1 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraRepository mCameraRepository>;

        return $r1;
    }

    public androidx.camera.core.impl.UseCaseConfigFactory getDefaultConfigFactory()
    {
        androidx.camera.core.CameraX r0;
        androidx.camera.core.impl.UseCaseConfigFactory $r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: androidx.camera.core.CameraX;

        $r1 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.UseCaseConfigFactory mDefaultConfigFactory>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CameraX not initialized yet.");

        throw $r3;

     label1:
        $r2 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.UseCaseConfigFactory mDefaultConfigFactory>;

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture getInitializeFuture()
    {
        androidx.camera.core.CameraX r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.core.CameraX;

        $r1 = r0.<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture mInitInternalFuture>;

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture shutdown()
    {
        androidx.camera.core.CameraX r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.core.CameraX;

        $r1 = specialinvoke r0.<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture shutdownInternal()>();

        return $r1;
    }

    private com.google.common.util.concurrent.ListenableFuture initInternal(android.content.Context)
    {
        androidx.camera.core.CameraX r0;
        android.content.Context r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r10;
        androidx.camera.core.CameraX$InternalInitState $r5, $r6, $r7;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r8;
        com.google.common.util.concurrent.ListenableFuture $r9;
        boolean $z0;

        r0 := @this: androidx.camera.core.CameraX;

        r1 := @parameter0: android.content.Context;

        $r4 = r0.<androidx.camera.core.CameraX: java.lang.Object mInitializeLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r6 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState>;

        $r5 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState UNINITIALIZED>;

        if $r6 != $r5 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "CameraX.initInternal() should only be called once per instance");

        $r7 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING>;

        r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState> = $r7;

        $r8 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.core.CameraX,android.content.Context)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.CameraX: java.lang.Object lambda$initInternal$0(android.content.Context,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r9 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r8);

        exitmonitor r2;

     label4:
        return $r9;

     label5:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void initAndRetryRecursively(java.util.concurrent.Executor, long, android.content.Context, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.core.CameraX r0;
        java.util.concurrent.Executor r1;
        long l0;
        android.content.Context r2;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.core.CameraX;

        r1 := @parameter0: java.util.concurrent.Executor;

        l0 := @parameter1: long;

        r2 := @parameter2: android.content.Context;

        r3 := @parameter3: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.CameraX,android.content.Context,java.util.concurrent.Executor,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,long)>(r0, r2, r1, r3, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.CameraX: void lambda$initAndRetryRecursively$2(android.content.Context,java.util.concurrent.Executor,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,long)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    private void setStateToInitialized()
    {
        androidx.camera.core.CameraX r0;
        java.lang.Object r1, $r2;
        androidx.camera.core.CameraX$InternalInitState $r3;

        r0 := @this: androidx.camera.core.CameraX;

        $r2 = r0.<androidx.camera.core.CameraX: java.lang.Object mInitializeLock>;

        r1 = $r2;

        entermonitor $r2;

        $r3 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZED>;

        r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState> = $r3;

        exitmonitor r1;

        goto label1;

     label1:
        return;
    }

    private com.google.common.util.concurrent.ListenableFuture shutdownInternal()
    {
        androidx.camera.core.CameraX r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r15;
        android.os.Handler $r4;
        androidx.camera.core.CameraX$InternalInitState $r5, $r7, $r13;
        int[] $r6;
        int $i0, $i1;
        java.lang.Integer $r8;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r9;
        com.google.common.util.concurrent.ListenableFuture $r10, $r11, $r14;
        java.lang.IllegalStateException $r12;

        r0 := @this: androidx.camera.core.CameraX;

        $r3 = r0.<androidx.camera.core.CameraX: java.lang.Object mInitializeLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.core.CameraX: android.os.Handler mSchedulerHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>("retry_token");

        $r6 = <androidx.camera.core.CameraX$1: int[] $SwitchMap$androidx$camera$core$CameraX$InternalInitState>;

        $r5 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState>;

        $i0 = virtualinvoke $r5.<androidx.camera.core.CameraX$InternalInitState: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label6;
        };

     label2:
        $r13 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState SHUTDOWN>;

        r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState> = $r13;

        $r14 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        exitmonitor r1;

     label3:
        return $r14;

     label4:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CameraX could not be shutdown when it is initializing.");

        throw $r12;

     label5:
        $r7 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState SHUTDOWN>;

        r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState> = $r7;

        $r8 = r0.<androidx.camera.core.CameraX: java.lang.Integer mMinLogLevel>;

        staticinvoke <androidx.camera.core.CameraX: void decreaseMinLogLevelReference(java.lang.Integer)>($r8);

        $r9 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.core.CameraX)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.CameraX: java.lang.Object lambda$shutdownInternal$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r10 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r9);

        r0.<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture mShutdownInternalFuture> = $r10;

     label6:
        $r11 = r0.<androidx.camera.core.CameraX: com.google.common.util.concurrent.ListenableFuture mShutdownInternalFuture>;

        exitmonitor r1;

     label7:
        return $r11;

     label8:
        $r15 := @caughtexception;

        r2 = $r15;

        exitmonitor r1;

     label9:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    boolean isInitialized()
    {
        androidx.camera.core.CameraX r0;
        java.lang.Object r1, $r2;
        androidx.camera.core.CameraX$InternalInitState $r3, $r4;
        boolean $z0;

        r0 := @this: androidx.camera.core.CameraX;

        $r2 = r0.<androidx.camera.core.CameraX: java.lang.Object mInitializeLock>;

        r1 = $r2;

        entermonitor $r2;

        $r4 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState>;

        $r3 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZED>;

        if $r4 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        exitmonitor r1;

        return $z0;
    }

    private static void increaseMinLogLevelReference(java.lang.Integer)
    {
        java.lang.Integer r0, $r7, $r10;
        java.lang.Object r1, $r3, $r5, $r9;
        java.lang.Throwable r2, $r11;
        int $i0, $i2, $i3, $i4, $i5, i6;
        android.util.SparseArray $r4, $r6, $r8;

        r0 := @parameter0: java.lang.Integer;

        $r3 = <androidx.camera.core.CameraX: java.lang.Object MIN_LOG_LEVEL_LOCK>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        if r0 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        staticinvoke <androidx.core.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>($i0, 3, 6, "minLogLevel");

        i6 = 1;

        $r4 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $i2 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>($i2);

        if $r5 == null goto label4;

        $r8 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $i4 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>($i4);

        $r10 = (java.lang.Integer) $r9;

        $i5 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        i6 = $i5 + 1;

     label4:
        $r6 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $i3 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>($i3, $r7);

        staticinvoke <androidx.camera.core.CameraX: void updateOrResetMinLogLevel()>();

        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private static void decreaseMinLogLevelReference(java.lang.Integer)
    {
        java.lang.Integer r0, $r6, $r8;
        java.lang.Object r1, $r3, $r5;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r2, $r10;
        android.util.SparseArray $r4, $r7, $r9;

        r0 := @parameter0: java.lang.Integer;

        $r3 = <androidx.camera.core.CameraX: java.lang.Object MIN_LOG_LEVEL_LOCK>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        if r0 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $i1 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r6 = (java.lang.Integer) $r5;

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        i0 = $i2 - 1;

        if i0 != 0 goto label4;

        $r9 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $i4 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        virtualinvoke $r9.<android.util.SparseArray: void remove(int)>($i4);

        goto label5;

     label4:
        $r7 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $i3 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>($i3, $r8);

     label5:
        staticinvoke <androidx.camera.core.CameraX: void updateOrResetMinLogLevel()>();

        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private static void updateOrResetMinLogLevel()
    {
        android.util.SparseArray $r0, $r1, $r3, $r5, $r7;
        int $i0;
        java.lang.Object $r2, $r4, $r6, $r8;

        $r0 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $i0 = virtualinvoke $r0.<android.util.SparseArray: int size()>();

        if $i0 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void resetMinLogLevel()>();

        return;

     label1:
        $r1 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(3);

        if $r2 == null goto label2;

        staticinvoke <androidx.camera.core.Logger: void setMinLogLevel(int)>(3);

        goto label5;

     label2:
        $r3 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(4);

        if $r4 == null goto label3;

        staticinvoke <androidx.camera.core.Logger: void setMinLogLevel(int)>(4);

        goto label5;

     label3:
        $r5 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(5);

        if $r6 == null goto label4;

        staticinvoke <androidx.camera.core.Logger: void setMinLogLevel(int)>(5);

        goto label5;

     label4:
        $r7 = <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(6);

        if $r8 == null goto label5;

        staticinvoke <androidx.camera.core.Logger: void setMinLogLevel(int)>(6);

     label5:
        return;
    }

    private java.lang.Object lambda$shutdownInternal$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.core.CameraX r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        androidx.camera.core.impl.CameraRepository $r3;
        java.lang.Runnable $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.camera.core.CameraX;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraRepository mCameraRepository>;

        r2 = virtualinvoke $r3.<androidx.camera.core.impl.CameraRepository: com.google.common.util.concurrent.ListenableFuture deinit()>();

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.CameraX,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.CameraX: void lambda$shutdownInternal$3(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        $r5 = r0.<androidx.camera.core.CameraX: java.util.concurrent.Executor mCameraExecutor>;

        interfaceinvoke r2.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r5);

        return "CameraX shutdownInternal";
    }

    private void lambda$shutdownInternal$3(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.core.CameraX r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.core.CameraExecutor r2;
        android.os.HandlerThread $r3, $r5;
        java.util.concurrent.Executor $r4, $r6;
        boolean $z1;

        r0 := @this: androidx.camera.core.CameraX;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = r0.<androidx.camera.core.CameraX: android.os.HandlerThread mSchedulerThread>;

        if $r3 == null goto label2;

        $r4 = r0.<androidx.camera.core.CameraX: java.util.concurrent.Executor mCameraExecutor>;

        $z1 = $r4 instanceof androidx.camera.core.CameraExecutor;

        if $z1 == 0 goto label1;

        $r6 = r0.<androidx.camera.core.CameraX: java.util.concurrent.Executor mCameraExecutor>;

        r2 = (androidx.camera.core.CameraExecutor) $r6;

        virtualinvoke r2.<androidx.camera.core.CameraExecutor: void deinit()>();

     label1:
        $r5 = r0.<androidx.camera.core.CameraX: android.os.HandlerThread mSchedulerThread>;

        virtualinvoke $r5.<android.os.HandlerThread: boolean quit()>();

     label2:
        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;
    }

    private void lambda$initAndRetryRecursively$2(android.content.Context, java.util.concurrent.Executor, androidx.concurrent.futures.CallbackToFutureAdapter$Completer, long)
    {
        androidx.camera.core.CameraX r0;
        android.content.Context r1, $r9, $r14, $r18, $r24, $r29, $r37;
        java.util.concurrent.Executor r2, $r12;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r3;
        long l0, $l1, $l2, $l4;
        androidx.camera.core.CameraSelector r4;
        androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider r5;
        androidx.camera.core.impl.UseCaseConfigFactory$Provider r6;
        androidx.camera.core.CameraExecutor r7;
        android.app.Application $r8;
        androidx.camera.core.CameraXConfig $r10, $r13, $r16, $r23;
        android.os.Handler $r11, $r48;
        androidx.camera.core.impl.CameraFactory $r15, $r17, $r20, $r26, $r30;
        java.lang.Object $r19, $r39, r53;
        java.util.Set $r21;
        androidx.camera.core.impl.CameraDeviceSurfaceManager $r22;
        androidx.camera.core.impl.UseCaseConfigFactory $r25;
        boolean $z0, $z2, $z3;
        androidx.camera.core.impl.CameraRepository $r27, $r28;
        java.lang.Throwable $r38, r52, r62, r63, r64, r65;
        byte $b3;
        androidx.camera.core.CameraX$InternalInitState $r40;
        java.lang.StringBuilder $r43, $r44, $r45, $r46, r60;
        java.lang.String $r47;
        java.lang.Runnable $r49;
        androidx.camera.core.impl.CameraFactory$Provider r50;
        androidx.camera.core.impl.CameraThreadConfig r51;
        java.lang.IllegalArgumentException r54, r56, r58;
        androidx.camera.core.InitializationException r55, r57, r59, r61;

        r0 := @this: androidx.camera.core.CameraX;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        l0 := @parameter3: long;

     label01:
        $r8 = staticinvoke <androidx.camera.core.impl.utils.ContextUtil: android.app.Application getApplicationFromContext(android.content.Context)>(r1);

        r0.<androidx.camera.core.CameraX: android.content.Context mAppContext> = $r8;

        $r9 = r0.<androidx.camera.core.CameraX: android.content.Context mAppContext>;

        if $r9 != null goto label02;

        $r37 = staticinvoke <androidx.camera.core.impl.utils.ContextUtil: android.content.Context getApplicationContext(android.content.Context)>(r1);

        r0.<androidx.camera.core.CameraX: android.content.Context mAppContext> = $r37;

     label02:
        $r10 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig>;

        r50 = virtualinvoke $r10.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.CameraFactory$Provider getCameraFactoryProvider(androidx.camera.core.impl.CameraFactory$Provider)>(null);

        if r50 != null goto label03;

        r55 = new androidx.camera.core.InitializationException;

        r54 = new java.lang.IllegalArgumentException;

        specialinvoke r54.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid app configuration provided. Missing CameraFactory.");

        specialinvoke r55.<androidx.camera.core.InitializationException: void <init>(java.lang.Throwable)>(r54);

        r62 = (java.lang.Throwable) r55;

        throw r62;

     label03:
        $r12 = r0.<androidx.camera.core.CameraX: java.util.concurrent.Executor mCameraExecutor>;

        $r11 = r0.<androidx.camera.core.CameraX: android.os.Handler mSchedulerHandler>;

        r51 = staticinvoke <androidx.camera.core.impl.CameraThreadConfig: androidx.camera.core.impl.CameraThreadConfig create(java.util.concurrent.Executor,android.os.Handler)>($r12, $r11);

        $r13 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig>;

        r4 = virtualinvoke $r13.<androidx.camera.core.CameraXConfig: androidx.camera.core.CameraSelector getAvailableCamerasLimiter(androidx.camera.core.CameraSelector)>(null);

        $r14 = r0.<androidx.camera.core.CameraX: android.content.Context mAppContext>;

        $r15 = interfaceinvoke r50.<androidx.camera.core.impl.CameraFactory$Provider: androidx.camera.core.impl.CameraFactory newInstance(android.content.Context,androidx.camera.core.impl.CameraThreadConfig,androidx.camera.core.CameraSelector)>($r14, r51, r4);

        r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraFactory mCameraFactory> = $r15;

        $r16 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig>;

        r5 = virtualinvoke $r16.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider getDeviceSurfaceManagerProvider(androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider)>(null);

        if r5 != null goto label04;

        r57 = new androidx.camera.core.InitializationException;

        r56 = new java.lang.IllegalArgumentException;

        specialinvoke r56.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid app configuration provided. Missing CameraDeviceSurfaceManager.");

        specialinvoke r57.<androidx.camera.core.InitializationException: void <init>(java.lang.Throwable)>(r56);

        r63 = (java.lang.Throwable) r57;

        throw r63;

     label04:
        $r18 = r0.<androidx.camera.core.CameraX: android.content.Context mAppContext>;

        $r17 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraFactory mCameraFactory>;

        $r19 = interfaceinvoke $r17.<androidx.camera.core.impl.CameraFactory: java.lang.Object getCameraManager()>();

        $r20 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraFactory mCameraFactory>;

        $r21 = interfaceinvoke $r20.<androidx.camera.core.impl.CameraFactory: java.util.Set getAvailableCameraIds()>();

        $r22 = interfaceinvoke r5.<androidx.camera.core.impl.CameraDeviceSurfaceManager$Provider: androidx.camera.core.impl.CameraDeviceSurfaceManager newInstance(android.content.Context,java.lang.Object,java.util.Set)>($r18, $r19, $r21);

        r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraDeviceSurfaceManager mSurfaceManager> = $r22;

        $r23 = r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraXConfig mCameraXConfig>;

        r6 = virtualinvoke $r23.<androidx.camera.core.CameraXConfig: androidx.camera.core.impl.UseCaseConfigFactory$Provider getUseCaseConfigFactoryProvider(androidx.camera.core.impl.UseCaseConfigFactory$Provider)>(null);

        if r6 != null goto label05;

        r59 = new androidx.camera.core.InitializationException;

        r58 = new java.lang.IllegalArgumentException;

        specialinvoke r58.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid app configuration provided. Missing UseCaseConfigFactory.");

        specialinvoke r59.<androidx.camera.core.InitializationException: void <init>(java.lang.Throwable)>(r58);

        r64 = (java.lang.Throwable) r59;

        throw r64;

     label05:
        $r24 = r0.<androidx.camera.core.CameraX: android.content.Context mAppContext>;

        $r25 = interfaceinvoke r6.<androidx.camera.core.impl.UseCaseConfigFactory$Provider: androidx.camera.core.impl.UseCaseConfigFactory newInstance(android.content.Context)>($r24);

        r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.UseCaseConfigFactory mDefaultConfigFactory> = $r25;

        $z0 = r2 instanceof androidx.camera.core.CameraExecutor;

        if $z0 == 0 goto label06;

        r7 = (androidx.camera.core.CameraExecutor) r2;

        $r30 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraFactory mCameraFactory>;

        virtualinvoke r7.<androidx.camera.core.CameraExecutor: void init(androidx.camera.core.impl.CameraFactory)>($r30);

     label06:
        $r27 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraRepository mCameraRepository>;

        $r26 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraFactory mCameraFactory>;

        virtualinvoke $r27.<androidx.camera.core.impl.CameraRepository: void init(androidx.camera.core.impl.CameraFactory)>($r26);

        $r29 = r0.<androidx.camera.core.CameraX: android.content.Context mAppContext>;

        $r28 = r0.<androidx.camera.core.CameraX: androidx.camera.core.impl.CameraRepository mCameraRepository>;

        staticinvoke <androidx.camera.core.impl.CameraValidator: void validateCameras(android.content.Context,androidx.camera.core.impl.CameraRepository,androidx.camera.core.CameraSelector)>($r29, $r28, r4);

        specialinvoke r0.<androidx.camera.core.CameraX: void setStateToInitialized()>();

        virtualinvoke r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

     label07:
        goto label13;

     label08:
        $r38 := @caughtexception;

        r52 = $r38;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = $l1 - l0;

        $b3 = $l2 cmp 2500L;

        if $b3 >= 0 goto label09;

        r60 = new java.lang.StringBuilder;

        specialinvoke r60.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Retry init. Start time ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" current time ");

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraX", $r47, r52);

        $r48 = r0.<androidx.camera.core.CameraX: android.os.Handler mSchedulerHandler>;

        $r49 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.CameraX,java.util.concurrent.Executor,long,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r2, l0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.CameraX: void lambda$initAndRetryRecursively$1(java.util.concurrent.Executor,long,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        staticinvoke <androidx.core.os.HandlerCompat: boolean postDelayed(android.os.Handler,java.lang.Runnable,java.lang.Object,long)>($r48, $r49, "retry_token", 500L);

        goto label13;

     label09:
        $r39 = r0.<androidx.camera.core.CameraX: java.lang.Object mInitializeLock>;

        r53 = $r39;

        entermonitor $r39;

        $r40 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING_ERROR>;

        r0.<androidx.camera.core.CameraX: androidx.camera.core.CameraX$InternalInitState mInitState> = $r40;

        exitmonitor r53;

        goto label10;

     label10:
        $z2 = r52 instanceof androidx.camera.core.impl.CameraValidator$CameraIdListIncorrectException;

        if $z2 == 0 goto label11;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CameraX", "The device might underreport the amount of the cameras. Finish the initialize task since we are already reaching the maximum number of retries.");

        virtualinvoke r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        goto label13;

     label11:
        $z3 = r52 instanceof androidx.camera.core.InitializationException;

        if $z3 == 0 goto label12;

        virtualinvoke r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r52);

        goto label13;

     label12:
        r61 = new androidx.camera.core.InitializationException;

        specialinvoke r61.<androidx.camera.core.InitializationException: void <init>(java.lang.Throwable)>(r52);

        r65 = (java.lang.Throwable) r61;

        virtualinvoke r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r65);

     label13:
        return;

        catch androidx.camera.core.impl.CameraValidator$CameraIdListIncorrectException from label01 to label07 with label08;
        catch androidx.camera.core.InitializationException from label01 to label07 with label08;
        catch java.lang.RuntimeException from label01 to label07 with label08;
    }

    private void lambda$initAndRetryRecursively$1(java.util.concurrent.Executor, long, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.core.CameraX r0;
        java.util.concurrent.Executor r1;
        long l0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        android.content.Context $r3;

        r0 := @this: androidx.camera.core.CameraX;

        r1 := @parameter0: java.util.concurrent.Executor;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = r0.<androidx.camera.core.CameraX: android.content.Context mAppContext>;

        specialinvoke r0.<androidx.camera.core.CameraX: void initAndRetryRecursively(java.util.concurrent.Executor,long,android.content.Context,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r1, l0, $r3, r2);

        return;
    }

    private java.lang.Object lambda$initInternal$0(android.content.Context, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.core.CameraX r0;
        android.content.Context r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.util.concurrent.Executor $r3;
        long $l0;

        r0 := @this: androidx.camera.core.CameraX;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = r0.<androidx.camera.core.CameraX: java.util.concurrent.Executor mCameraExecutor>;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke r0.<androidx.camera.core.CameraX: void initAndRetryRecursively(java.util.concurrent.Executor,long,android.content.Context,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>($r3, $l0, r1, r2);

        return "CameraX initInternal";
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        android.util.SparseArray $r1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.camera.core.CameraX: java.lang.Object MIN_LOG_LEVEL_LOCK> = $r0;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <androidx.camera.core.CameraX: android.util.SparseArray sMinLogLevelReferenceCountMap> = $r1;

        return;
    }

androidx.camera.core.CameraX$1
<androidx.camera.core.CameraX$1: int[] $SwitchMap$androidx$camera$core$CameraX$InternalInitState>
    static void <clinit>()
    {
        androidx.camera.core.CameraX$InternalInitState[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r3, $r5, $r7, $r9, $r11;
        androidx.camera.core.CameraX$InternalInitState $r2, $r4, $r6, $r8, $r10;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, r17, r18, r19, r20, r21;

        $r0 = staticinvoke <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.core.CameraX$1: int[] $SwitchMap$androidx$camera$core$CameraX$InternalInitState> = $r1;

     label01:
        $r3 = <androidx.camera.core.CameraX$1: int[] $SwitchMap$androidx$camera$core$CameraX$InternalInitState>;

        $r2 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState UNINITIALIZED>;

        $i1 = virtualinvoke $r2.<androidx.camera.core.CameraX$InternalInitState: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        r17 = $r14;

     label04:
        $r5 = <androidx.camera.core.CameraX$1: int[] $SwitchMap$androidx$camera$core$CameraX$InternalInitState>;

        $r4 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING>;

        $i2 = virtualinvoke $r4.<androidx.camera.core.CameraX$InternalInitState: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

        r18 = $r15;

     label07:
        $r7 = <androidx.camera.core.CameraX$1: int[] $SwitchMap$androidx$camera$core$CameraX$InternalInitState>;

        $r6 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING_ERROR>;

        $i3 = virtualinvoke $r6.<androidx.camera.core.CameraX$InternalInitState: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        r19 = $r12;

     label10:
        $r9 = <androidx.camera.core.CameraX$1: int[] $SwitchMap$androidx$camera$core$CameraX$InternalInitState>;

        $r8 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZED>;

        $i4 = virtualinvoke $r8.<androidx.camera.core.CameraX$InternalInitState: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r16 := @caughtexception;

        r20 = $r16;

     label13:
        $r11 = <androidx.camera.core.CameraX$1: int[] $SwitchMap$androidx$camera$core$CameraX$InternalInitState>;

        $r10 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState SHUTDOWN>;

        $i5 = virtualinvoke $r10.<androidx.camera.core.CameraX$InternalInitState: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r13 := @caughtexception;

        r21 = $r13;

     label16:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
    }

androidx.camera.core.CameraX$InternalInitState
<androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState UNINITIALIZED>
<androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING>
<androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING_ERROR>
<androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZED>
<androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState SHUTDOWN>
<androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState[] $VALUES>
    public static androidx.camera.core.CameraX$InternalInitState[] values()
    {
        androidx.camera.core.CameraX$InternalInitState[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.core.CameraX$InternalInitState[]) $r1;

        return $r2;
    }

    public static androidx.camera.core.CameraX$InternalInitState valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.core.CameraX$InternalInitState $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/core/CameraX$InternalInitState;", r0);

        $r2 = (androidx.camera.core.CameraX$InternalInitState) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.core.CameraX$InternalInitState r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.core.CameraX$InternalInitState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.core.CameraX$InternalInitState $r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        androidx.camera.core.CameraX$InternalInitState[] $r5;

        $r0 = new androidx.camera.core.CameraX$InternalInitState;

        specialinvoke $r0.<androidx.camera.core.CameraX$InternalInitState: void <init>(java.lang.String,int)>("UNINITIALIZED", 0);

        <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState UNINITIALIZED> = $r0;

        $r1 = new androidx.camera.core.CameraX$InternalInitState;

        specialinvoke $r1.<androidx.camera.core.CameraX$InternalInitState: void <init>(java.lang.String,int)>("INITIALIZING", 1);

        <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING> = $r1;

        $r2 = new androidx.camera.core.CameraX$InternalInitState;

        specialinvoke $r2.<androidx.camera.core.CameraX$InternalInitState: void <init>(java.lang.String,int)>("INITIALIZING_ERROR", 2);

        <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING_ERROR> = $r2;

        $r3 = new androidx.camera.core.CameraX$InternalInitState;

        specialinvoke $r3.<androidx.camera.core.CameraX$InternalInitState: void <init>(java.lang.String,int)>("INITIALIZED", 3);

        <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZED> = $r3;

        $r4 = new androidx.camera.core.CameraX$InternalInitState;

        specialinvoke $r4.<androidx.camera.core.CameraX$InternalInitState: void <init>(java.lang.String,int)>("SHUTDOWN", 4);

        <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState SHUTDOWN> = $r4;

        $r5 = newarray (androidx.camera.core.CameraX$InternalInitState)[5];

        $r6 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState UNINITIALIZED>;

        $r5[0] = $r6;

        $r7 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING>;

        $r5[1] = $r7;

        $r8 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZING_ERROR>;

        $r5[2] = $r8;

        $r9 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState INITIALIZED>;

        $r5[3] = $r9;

        $r10 = <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState SHUTDOWN>;

        $r5[4] = $r10;

        <androidx.camera.core.CameraX$InternalInitState: androidx.camera.core.CameraX$InternalInitState[] $VALUES> = $r5;

        return;
    }

