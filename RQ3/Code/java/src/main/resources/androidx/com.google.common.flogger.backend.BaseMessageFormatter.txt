com.google.common.flogger.backend.BaseMessageFormatter
<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.Object[] args>
<com.google.common.flogger.backend.BaseMessageFormatter: int literalStart>
<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>
    protected void <init>(com.google.common.flogger.backend.TemplateContext, java.lang.Object[], java.lang.StringBuilder)
    {
        com.google.common.flogger.backend.BaseMessageFormatter $r0;
        java.lang.Object[] $r1;
        java.lang.StringBuilder $r2;
        com.google.common.flogger.backend.TemplateContext $r3;
        java.lang.Object $r4;

        $r0 := @this: com.google.common.flogger.backend.BaseMessageFormatter;

        $r3 := @parameter0: com.google.common.flogger.backend.TemplateContext;

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: java.lang.StringBuilder;

        specialinvoke $r0.<com.google.common.flogger.parser.MessageBuilder: void <init>(com.google.common.flogger.backend.TemplateContext)>($r3);

        $r0.<com.google.common.flogger.backend.BaseMessageFormatter: int literalStart> = 0;

        $r4 = staticinvoke <com.google.common.flogger.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r1, "arguments");

        $r1 = (java.lang.Object[]) $r4;

        $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.Object[] args> = $r1;

        $r4 = staticinvoke <com.google.common.flogger.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r2, "buffer");

        $r2 = (java.lang.StringBuilder) $r4;

        $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out> = $r2;

        return;
    }

    private static void appendFormatted(java.lang.StringBuilder, java.lang.Object, com.google.common.flogger.backend.FormatChar, com.google.common.flogger.backend.FormatOptions)
    {
        java.lang.StringBuilder $r0, $r10;
        java.lang.Object $r1;
        com.google.common.flogger.backend.FormatChar $r2;
        com.google.common.flogger.backend.FormatOptions $r3, $r7;
        int[] $r4;
        int $i0, $i1;
        boolean $z0;
        java.lang.Number $r5;
        char $c2, $c3;
        char[] $r6;
        java.lang.String $r8;
        java.util.Formattable $r9;
        java.util.Locale $r11;
        java.lang.Object[] $r12;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: com.google.common.flogger.backend.FormatChar;

        $r3 := @parameter3: com.google.common.flogger.backend.FormatOptions;

        $r4 = <com.google.common.flogger.backend.BaseMessageFormatter$1: int[] $SwitchMap$com$google$common$flogger$backend$FormatChar>;

        $i0 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label07;
            case 2: goto label06;
            case 3: goto label06;
            case 4: goto label05;
            case 5: goto label02;
            default: goto label01;
        };

     label01:
        goto label09;

     label02:
        $z0 = virtualinvoke $r3.<com.google.common.flogger.backend.FormatOptions: boolean isDefault()>();

        if $z0 == 0 goto label09;

        $z0 = $r1 instanceof java.lang.Character;

        if $z0 == 0 goto label03;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        return;

     label03:
        $r5 = (java.lang.Number) $r1;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        $i1 = $i0 >>> 16;

        if $i1 != 0 goto label04;

        $c2 = (char) $i0;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        return;

     label04:
        $r6 = staticinvoke <java.lang.Character: char[] toChars(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r6);

        return;

     label05:
        $r7 = virtualinvoke $r3.<com.google.common.flogger.backend.FormatOptions: com.google.common.flogger.backend.FormatOptions filter(int,boolean,boolean)>(128, 0, 0);

        $z0 = virtualinvoke $r7.<com.google.common.flogger.backend.FormatOptions: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label09;

        $r5 = (java.lang.Number) $r1;

        staticinvoke <com.google.common.flogger.backend.MessageUtils: void appendHex(java.lang.StringBuilder,java.lang.Number,com.google.common.flogger.backend.FormatOptions)>($r0, $r5, $r3);

        return;

     label06:
        $z0 = virtualinvoke $r3.<com.google.common.flogger.backend.FormatOptions: boolean isDefault()>();

        if $z0 == 0 goto label09;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        return;

     label07:
        $z0 = $r1 instanceof java.util.Formattable;

        if $z0 != 0 goto label08;

        $z0 = virtualinvoke $r3.<com.google.common.flogger.backend.FormatOptions: boolean isDefault()>();

        if $z0 == 0 goto label09;

        $r8 = staticinvoke <com.google.common.flogger.backend.MessageUtils: java.lang.String safeToString(java.lang.Object)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        return;

     label08:
        $r9 = (java.util.Formattable) $r1;

        staticinvoke <com.google.common.flogger.backend.MessageUtils: void safeFormatTo(java.util.Formattable,java.lang.StringBuilder,com.google.common.flogger.backend.FormatOptions)>($r9, $r0, $r3);

        return;

     label09:
        $r8 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: java.lang.String getDefaultFormatString()>();

        $z0 = virtualinvoke $r3.<com.google.common.flogger.backend.FormatOptions: boolean isDefault()>();

        if $z0 != 0 goto label11;

        $c2 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: char getChar()>();

        $c3 = $c2;

        $z0 = virtualinvoke $r3.<com.google.common.flogger.backend.FormatOptions: boolean shouldUpperCase()>();

        if $z0 == 0 goto label10;

        $c3 = $c2 & 65503;

     label10:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("%");

        $r10 = virtualinvoke $r3.<com.google.common.flogger.backend.FormatOptions: java.lang.StringBuilder appendPrintfOptions(java.lang.StringBuilder)>($r10);

        $c2 = $c3;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label11:
        $r11 = <com.google.common.flogger.backend.MessageUtils: java.util.Locale FORMAT_LOCALE>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = $r1;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r11, $r8, $r12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        return;
    }

    public static java.lang.StringBuilder appendFormattedMessage(com.google.common.flogger.backend.LogData, java.lang.StringBuilder)
    {
        com.google.common.flogger.backend.LogData $r0;
        java.lang.StringBuilder $r1;
        com.google.common.flogger.backend.TemplateContext $r2;
        com.google.common.flogger.backend.BaseMessageFormatter $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        int $i0, $i1;
        java.lang.String $r6;

        $r0 := @parameter0: com.google.common.flogger.backend.LogData;

        $r1 := @parameter1: java.lang.StringBuilder;

        $r2 = interfaceinvoke $r0.<com.google.common.flogger.backend.LogData: com.google.common.flogger.backend.TemplateContext getTemplateContext()>();

        if $r2 == null goto label2;

        $r3 = new com.google.common.flogger.backend.BaseMessageFormatter;

        $r2 = interfaceinvoke $r0.<com.google.common.flogger.backend.LogData: com.google.common.flogger.backend.TemplateContext getTemplateContext()>();

        $r4 = interfaceinvoke $r0.<com.google.common.flogger.backend.LogData: java.lang.Object[] getArguments()>();

        specialinvoke $r3.<com.google.common.flogger.backend.BaseMessageFormatter: void <init>(com.google.common.flogger.backend.TemplateContext,java.lang.Object[],java.lang.StringBuilder)>($r2, $r4, $r1);

        $r5 = virtualinvoke $r3.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.Object build()>();

        $r1 = (java.lang.StringBuilder) $r5;

        $r4 = interfaceinvoke $r0.<com.google.common.flogger.backend.LogData: java.lang.Object[] getArguments()>();

        $i0 = lengthof $r4;

        $i1 = virtualinvoke $r3.<com.google.common.flogger.backend.BaseMessageFormatter: int getExpectedArgumentCount()>();

        if $i0 > $i1 goto label1;

        return $r1;

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ERROR: UNUSED LOG ARGUMENTS]");

        return $r1;

     label2:
        $r5 = interfaceinvoke $r0.<com.google.common.flogger.backend.LogData: java.lang.Object getLiteralArgument()>();

        $r6 = staticinvoke <com.google.common.flogger.backend.MessageUtils: java.lang.String safeToString(java.lang.Object)>($r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        return $r1;
    }

    private static void appendInvalid(java.lang.StringBuilder, java.lang.Object, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        java.lang.Class $r3;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.String;

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[INVALID: format=");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type=");

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", value=");

        $r2 = staticinvoke <com.google.common.flogger.backend.MessageUtils: java.lang.String safeToString(java.lang.Object)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        return;
    }

    public void addParameterImpl(int, int, com.google.common.flogger.parameter.Parameter)
    {
        com.google.common.flogger.backend.BaseMessageFormatter $r0;
        int $i0, $i1, $i2;
        com.google.common.flogger.parameter.Parameter $r1;
        java.lang.StringBuilder $r2;
        com.google.common.flogger.parser.MessageParser $r3;
        java.lang.String $r4;
        java.lang.Object[] $r5;

        $r0 := @this: com.google.common.flogger.backend.BaseMessageFormatter;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $r1 := @parameter2: com.google.common.flogger.parameter.Parameter;

        $r3 = virtualinvoke $r0.<com.google.common.flogger.backend.BaseMessageFormatter: com.google.common.flogger.parser.MessageParser getParser()>();

        $r2 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>;

        $r4 = virtualinvoke $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.String getMessage()>();

        $i1 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: int literalStart>;

        virtualinvoke $r3.<com.google.common.flogger.parser.MessageParser: void unescape(java.lang.StringBuilder,java.lang.String,int,int)>($r2, $r4, $i1, $i2);

        $r5 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.Object[] args>;

        virtualinvoke $r1.<com.google.common.flogger.parameter.Parameter: void accept(com.google.common.flogger.parameter.ParameterVisitor,java.lang.Object[])>($r0, $r5);

        $r0.<com.google.common.flogger.backend.BaseMessageFormatter: int literalStart> = $i0;

        return;
    }

    public volatile java.lang.Object buildImpl()
    {
        com.google.common.flogger.backend.BaseMessageFormatter $r0;
        java.lang.StringBuilder $r1;

        $r0 := @this: com.google.common.flogger.backend.BaseMessageFormatter;

        $r1 = virtualinvoke $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder buildImpl()>();

        return $r1;
    }

    public java.lang.StringBuilder buildImpl()
    {
        com.google.common.flogger.backend.BaseMessageFormatter $r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1;
        com.google.common.flogger.parser.MessageParser $r2;
        java.lang.String $r3, $r4;

        $r0 := @this: com.google.common.flogger.backend.BaseMessageFormatter;

        $r2 = virtualinvoke $r0.<com.google.common.flogger.backend.BaseMessageFormatter: com.google.common.flogger.parser.MessageParser getParser()>();

        $r1 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>;

        $r3 = virtualinvoke $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.String getMessage()>();

        $i0 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: int literalStart>;

        $r4 = virtualinvoke $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.String getMessage()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        virtualinvoke $r2.<com.google.common.flogger.parser.MessageParser: void unescape(java.lang.StringBuilder,java.lang.String,int,int)>($r1, $r3, $i0, $i1);

        $r1 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>;

        return $r1;
    }

    public void visit(java.lang.Object, com.google.common.flogger.backend.FormatChar, com.google.common.flogger.backend.FormatOptions)
    {
        com.google.common.flogger.backend.BaseMessageFormatter $r0;
        java.lang.Object $r1;
        com.google.common.flogger.backend.FormatChar $r2;
        com.google.common.flogger.backend.FormatOptions $r3;
        com.google.common.flogger.backend.FormatType $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: com.google.common.flogger.backend.BaseMessageFormatter;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.common.flogger.backend.FormatChar;

        $r3 := @parameter2: com.google.common.flogger.backend.FormatOptions;

        $r4 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatType getType()>();

        $z0 = virtualinvoke $r4.<com.google.common.flogger.backend.FormatType: boolean canFormat(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r5 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>;

        staticinvoke <com.google.common.flogger.backend.BaseMessageFormatter: void appendFormatted(java.lang.StringBuilder,java.lang.Object,com.google.common.flogger.backend.FormatChar,com.google.common.flogger.backend.FormatOptions)>($r5, $r1, $r2, $r3);

        return;

     label1:
        $r5 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>;

        $r6 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: java.lang.String getDefaultFormatString()>();

        staticinvoke <com.google.common.flogger.backend.BaseMessageFormatter: void appendInvalid(java.lang.StringBuilder,java.lang.Object,java.lang.String)>($r5, $r1, $r6);

        return;
    }

    public void visitDateTime(java.lang.Object, com.google.common.flogger.parameter.DateTimeFormat, com.google.common.flogger.backend.FormatOptions)
    {
        com.google.common.flogger.backend.BaseMessageFormatter $r0;
        java.lang.Object $r1;
        com.google.common.flogger.parameter.DateTimeFormat $r2;
        com.google.common.flogger.backend.FormatOptions $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5;
        char $c0;
        java.lang.String $r6;
        java.util.Locale $r7;
        java.lang.Object[] $r8;

        $r0 := @this: com.google.common.flogger.backend.BaseMessageFormatter;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.common.flogger.parameter.DateTimeFormat;

        $r3 := @parameter2: com.google.common.flogger.backend.FormatOptions;

        $z0 = $r1 instanceof java.util.Date;

        if $z0 != 0 goto label2;

        $z0 = $r1 instanceof java.util.Calendar;

        if $z0 != 0 goto label2;

        $z0 = $r1 instanceof java.lang.Long;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r4 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>;

        $c0 = virtualinvoke $r2.<com.google.common.flogger.parameter.DateTimeFormat: char getChar()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%t");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.flogger.backend.BaseMessageFormatter: void appendInvalid(java.lang.StringBuilder,java.lang.Object,java.lang.String)>($r4, $r1, $r6);

        return;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("%");

        $r4 = virtualinvoke $r3.<com.google.common.flogger.backend.FormatOptions: java.lang.StringBuilder appendPrintfOptions(java.lang.StringBuilder)>($r4);

        $z0 = virtualinvoke $r3.<com.google.common.flogger.backend.FormatOptions: boolean shouldUpperCase()>();

        if $z0 == 0 goto label3;

        $c0 = 84;

        goto label4;

     label3:
        $c0 = 116;

     label4:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $c0 = virtualinvoke $r2.<com.google.common.flogger.parameter.DateTimeFormat: char getChar()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>;

        $r7 = <com.google.common.flogger.backend.MessageUtils: java.util.Locale FORMAT_LOCALE>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r7, $r6, $r8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        return;
    }

    public void visitMissing()
    {
        com.google.common.flogger.backend.BaseMessageFormatter $r0;
        java.lang.StringBuilder $r1;

        $r0 := @this: com.google.common.flogger.backend.BaseMessageFormatter;

        $r1 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ERROR: MISSING LOG ARGUMENT]");

        return;
    }

    public void visitNull()
    {
        com.google.common.flogger.backend.BaseMessageFormatter $r0;
        java.lang.StringBuilder $r1;

        $r0 := @this: com.google.common.flogger.backend.BaseMessageFormatter;

        $r1 = $r0.<com.google.common.flogger.backend.BaseMessageFormatter: java.lang.StringBuilder out>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        return;
    }

com.google.common.flogger.backend.BaseMessageFormatter$1
<com.google.common.flogger.backend.BaseMessageFormatter$1: int[] $SwitchMap$com$google$common$flogger$backend$FormatChar>
    static void <clinit>()
    {
        com.google.common.flogger.backend.FormatChar[] $r0;
        int $i0;
        int[] $r1;
        com.google.common.flogger.backend.FormatChar $r2;
        java.lang.Throwable $r3, $r4, $r5, $r6, $r7;

        $r0 = staticinvoke <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <com.google.common.flogger.backend.BaseMessageFormatter$1: int[] $SwitchMap$com$google$common$flogger$backend$FormatChar> = $r1;

        $r2 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar STRING>;

     label01:
        $i0 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: int ordinal()>();

     label02:
        $r1[$i0] = 1;

        goto label04;

     label03:
        $r3 := @caughtexception;

     label04:
        $r1 = <com.google.common.flogger.backend.BaseMessageFormatter$1: int[] $SwitchMap$com$google$common$flogger$backend$FormatChar>;

        $r2 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar DECIMAL>;

     label05:
        $i0 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: int ordinal()>();

     label06:
        $r1[$i0] = 2;

        goto label08;

     label07:
        $r4 := @caughtexception;

     label08:
        $r1 = <com.google.common.flogger.backend.BaseMessageFormatter$1: int[] $SwitchMap$com$google$common$flogger$backend$FormatChar>;

        $r2 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar BOOLEAN>;

     label09:
        $i0 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: int ordinal()>();

     label10:
        $r1[$i0] = 3;

        goto label12;

     label11:
        $r5 := @caughtexception;

     label12:
        $r1 = <com.google.common.flogger.backend.BaseMessageFormatter$1: int[] $SwitchMap$com$google$common$flogger$backend$FormatChar>;

        $r2 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar HEX>;

     label13:
        $i0 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: int ordinal()>();

     label14:
        $r1[$i0] = 4;

        goto label16;

     label15:
        $r6 := @caughtexception;

     label16:
        $r1 = <com.google.common.flogger.backend.BaseMessageFormatter$1: int[] $SwitchMap$com$google$common$flogger$backend$FormatChar>;

        $r2 = <com.google.common.flogger.backend.FormatChar: com.google.common.flogger.backend.FormatChar CHAR>;

     label17:
        $i0 = virtualinvoke $r2.<com.google.common.flogger.backend.FormatChar: int ordinal()>();

     label18:
        $r1[$i0] = 5;

        return;

     label19:
        $r7 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label09 to label10 with label11;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
    }

