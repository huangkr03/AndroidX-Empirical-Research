kotlinx.coroutines.scheduling.TasksKt
<kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.TaskContext BlockingContext>
<kotlinx.coroutines.scheduling.TasksKt: int CORE_POOL_SIZE>
<kotlinx.coroutines.scheduling.TasksKt: long IDLE_WORKER_KEEP_ALIVE_NS>
<kotlinx.coroutines.scheduling.TasksKt: int MAX_POOL_SIZE>
<kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.TaskContext NonBlockingContext>
<kotlinx.coroutines.scheduling.TasksKt: long WORK_STEALING_TIME_RESOLUTION_NS>
<kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.SchedulerTimeSource schedulerTimeSource>
    static void <clinit>()
    {
        long $l0;
        int $i1;
        java.util.concurrent.TimeUnit $r0;
        kotlinx.coroutines.scheduling.NanoTimeSource $r1;
        kotlinx.coroutines.scheduling.TaskContextImpl $r2;

        $l0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object)>("kotlinx.coroutines.scheduler.resolution.ns", 100000L, 0L, 0L, 12, null);

        <kotlinx.coroutines.scheduling.TasksKt: long WORK_STEALING_TIME_RESOLUTION_NS> = $l0;

        $i1 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: int getAVAILABLE_PROCESSORS()>();

        $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i1, 2);

        $i1 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>("kotlinx.coroutines.scheduler.core.pool.size", $i1, 1, 0, 8, null);

        <kotlinx.coroutines.scheduling.TasksKt: int CORE_POOL_SIZE> = $i1;

        $i1 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>("kotlinx.coroutines.scheduler.max.pool.size", 2097150, 0, 2097150, 4, null);

        <kotlinx.coroutines.scheduling.TasksKt: int MAX_POOL_SIZE> = $i1;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object)>("kotlinx.coroutines.scheduler.keep.alive.sec", 60L, 0L, 0L, 12, null);

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        <kotlinx.coroutines.scheduling.TasksKt: long IDLE_WORKER_KEEP_ALIVE_NS> = $l0;

        $r1 = <kotlinx.coroutines.scheduling.NanoTimeSource: kotlinx.coroutines.scheduling.NanoTimeSource INSTANCE>;

        <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.SchedulerTimeSource schedulerTimeSource> = $r1;

        $r2 = new kotlinx.coroutines.scheduling.TaskContextImpl;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.TaskContextImpl: void <init>(int)>(0);

        <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.TaskContext NonBlockingContext> = $r2;

        $r2 = new kotlinx.coroutines.scheduling.TaskContextImpl;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.TaskContextImpl: void <init>(int)>(1);

        <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.TaskContext BlockingContext> = $r2;

        return;
    }

