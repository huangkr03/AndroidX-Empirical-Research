androidx.arch.core.executor.ArchTaskExecutor
<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance>
<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate>
<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor>
<androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sMainThreadExecutor>
<androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sIOThreadExecutor>
    private void <init>()
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        androidx.arch.core.executor.DefaultTaskExecutor $r1;
        androidx.arch.core.executor.TaskExecutor $r2;

        r0 := @this: androidx.arch.core.executor.ArchTaskExecutor;

        specialinvoke r0.<androidx.arch.core.executor.TaskExecutor: void <init>()>();

        $r1 = new androidx.arch.core.executor.DefaultTaskExecutor;

        specialinvoke $r1.<androidx.arch.core.executor.DefaultTaskExecutor: void <init>()>();

        r0.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor> = $r1;

        $r2 = r0.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor>;

        r0.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate> = $r2;

        return;
    }

    public static androidx.arch.core.executor.ArchTaskExecutor getInstance()
    {
        java.lang.Class r0;
        java.lang.Throwable r1, $r7;
        androidx.arch.core.executor.ArchTaskExecutor $r2, $r3, $r4, $r5, $r6;

        $r2 = <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance>;

        if $r2 == null goto label1;

        $r6 = <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance>;

        return $r6;

     label1:
        r0 = class "Landroidx/arch/core/executor/ArchTaskExecutor;";

        entermonitor class "Landroidx/arch/core/executor/ArchTaskExecutor;";

     label2:
        $r3 = <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance>;

        if $r3 != null goto label3;

        $r5 = new androidx.arch.core.executor.ArchTaskExecutor;

        specialinvoke $r5.<androidx.arch.core.executor.ArchTaskExecutor: void <init>()>();

        <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance> = $r5;

     label3:
        exitmonitor r0;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

     label6:
        throw r1;

     label7:
        $r4 = <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance>;

        return $r4;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setDelegate(androidx.arch.core.executor.TaskExecutor)
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        androidx.arch.core.executor.TaskExecutor r1, $r3;

        r0 := @this: androidx.arch.core.executor.ArchTaskExecutor;

        r1 := @parameter0: androidx.arch.core.executor.TaskExecutor;

        if r1 != null goto label1;

        $r3 = r0.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor>;

        goto label2;

     label1:
        $r3 = r1;

     label2:
        r0.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate> = $r3;

        return;
    }

    public void executeOnDiskIO(java.lang.Runnable)
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        java.lang.Runnable r1;
        androidx.arch.core.executor.TaskExecutor $r2;

        r0 := @this: androidx.arch.core.executor.ArchTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate>;

        virtualinvoke $r2.<androidx.arch.core.executor.TaskExecutor: void executeOnDiskIO(java.lang.Runnable)>(r1);

        return;
    }

    public void postToMainThread(java.lang.Runnable)
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        java.lang.Runnable r1;
        androidx.arch.core.executor.TaskExecutor $r2;

        r0 := @this: androidx.arch.core.executor.ArchTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate>;

        virtualinvoke $r2.<androidx.arch.core.executor.TaskExecutor: void postToMainThread(java.lang.Runnable)>(r1);

        return;
    }

    public static java.util.concurrent.Executor getMainThreadExecutor()
    {
        java.util.concurrent.Executor $r0;

        $r0 = <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sMainThreadExecutor>;

        return $r0;
    }

    public static java.util.concurrent.Executor getIOThreadExecutor()
    {
        java.util.concurrent.Executor $r0;

        $r0 = <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sIOThreadExecutor>;

        return $r0;
    }

    public boolean isMainThread()
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        androidx.arch.core.executor.TaskExecutor $r1;
        boolean $z0;

        r0 := @this: androidx.arch.core.executor.ArchTaskExecutor;

        $r1 = r0.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate>;

        $z0 = virtualinvoke $r1.<androidx.arch.core.executor.TaskExecutor: boolean isMainThread()>();

        return $z0;
    }

    private static void lambda$static$1(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        androidx.arch.core.executor.ArchTaskExecutor $r1;

        r0 := @parameter0: java.lang.Runnable;

        $r1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        virtualinvoke $r1.<androidx.arch.core.executor.ArchTaskExecutor: void executeOnDiskIO(java.lang.Runnable)>(r0);

        return;
    }

    private static void lambda$static$0(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        androidx.arch.core.executor.ArchTaskExecutor $r1;

        r0 := @parameter0: java.lang.Runnable;

        $r1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        virtualinvoke $r1.<androidx.arch.core.executor.ArchTaskExecutor: void postToMainThread(java.lang.Runnable)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.Executor $r0, $r1;

        $r0 = dynamicinvoke "execute" <java.util.concurrent.Executor ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Runnable), methodhandle: "REF_INVOKE_STATIC" <androidx.arch.core.executor.ArchTaskExecutor: void lambda$static$0(java.lang.Runnable)>, methodtype: void __METHODTYPE__(java.lang.Runnable));

        <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sMainThreadExecutor> = $r0;

        $r1 = dynamicinvoke "execute" <java.util.concurrent.Executor ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Runnable), methodhandle: "REF_INVOKE_STATIC" <androidx.arch.core.executor.ArchTaskExecutor: void lambda$static$1(java.lang.Runnable)>, methodtype: void __METHODTYPE__(java.lang.Runnable));

        <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sIOThreadExecutor> = $r1;

        return;
    }

