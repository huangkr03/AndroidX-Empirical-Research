io.grpc.okhttp.OkHttpFrameLogger
<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>
<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>
    void <init>(java.util.logging.Level, java.lang.Class)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.util.logging.Logger $r4;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r1 := @parameter0: java.util.logging.Level;

        $r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: void <init>(java.util.logging.Level,java.util.logging.Logger)>($r1, $r4);

        return;
    }

    void <init>(java.util.logging.Level, java.util.logging.Logger)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        java.lang.Object $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: java.util.logging.Level;

        $r1 := @parameter1: java.util.logging.Logger;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "level");

        $r2 = (java.util.logging.Level) $r3;

        $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level> = $r2;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "logger");

        $r1 = (java.util.logging.Logger) $r3;

        $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger> = $r1;

        return;
    }

    private boolean isEnabled()
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        boolean $z0;
        java.util.logging.Logger $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    private static java.lang.String toString(io.grpc.okhttp.internal.framed.Settings)
    {
        java.util.EnumMap $r0;
        int $i0, $i1, $i2;
        io.grpc.okhttp.OkHttpFrameLogger$SettingParams $r1;
        io.grpc.okhttp.internal.framed.Settings $r2;
        io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] $r3;
        boolean $z0;
        java.lang.Integer $r4;
        java.lang.String $r5;

        $r2 := @parameter0: io.grpc.okhttp.internal.framed.Settings;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lio/grpc/okhttp/OkHttpFrameLogger$SettingParams;");

        $r3 = staticinvoke <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] values()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r1 = $r3[$i1];

        $i2 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: int getBit()>();

        $z0 = virtualinvoke $r2.<io.grpc.okhttp.internal.framed.Settings: boolean isSet(int)>($i2);

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: int getBit()>();

        $i2 = virtualinvoke $r2.<io.grpc.okhttp.internal.framed.Settings: int get(int)>($i2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r0.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r1, $r4);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke $r0.<java.util.EnumMap: java.lang.String toString()>();

        return $r5;
    }

    private static java.lang.String toString(okio.Buffer)
    {
        int $i0;
        byte $b1;
        okio.Buffer $r0;
        long $l2;
        okio.ByteString $r1;
        java.lang.String $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: okio.Buffer;

        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $b1 = $l2 cmp 64L;

        if $b1 > 0 goto label1;

        $r1 = virtualinvoke $r0.<okio.Buffer: okio.ByteString snapshot()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String hex()>();

        return $r2;

     label1:
        $l2 = virtualinvoke $r0.<okio.Buffer: long size()>();

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l2, 64L);

        $i0 = (int) $l2;

        $r1 = virtualinvoke $r0.<okio.Buffer: okio.ByteString snapshot(int)>($i0);

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String hex()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    void logData(io.grpc.okhttp.OkHttpFrameLogger$Direction, int, okio.Buffer, int, boolean)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        int $i0, $i1;
        boolean $z0, $z1;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        okio.Buffer $r3;
        java.util.logging.Logger $r4;
        java.lang.String $r5, $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $i1 := @parameter1: int;

        $r3 := @parameter2: okio.Buffer;

        $i0 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $z1 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        $r4 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r6 = staticinvoke <io.grpc.okhttp.OkHttpFrameLogger: java.lang.String toString(okio.Buffer)>($r3);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DATA: streamId=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" endStream=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logData", $r5);

     label1:
        return;
    }

    void logGoAway(io.grpc.okhttp.OkHttpFrameLogger$Direction, int, io.grpc.okhttp.internal.framed.ErrorCode, okio.ByteString)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        int $i0, $i1;
        io.grpc.okhttp.internal.framed.ErrorCode $r3;
        okio.ByteString $r4;
        boolean $z0;
        java.util.logging.Logger $r5;
        java.lang.String $r6, $r7, $r9;
        okio.Buffer $r8;
        java.lang.StringBuilder $r10;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $i0 := @parameter1: int;

        $r3 := @parameter2: io.grpc.okhttp.internal.framed.ErrorCode;

        $r4 := @parameter3: okio.ByteString;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r4.<okio.ByteString: int size()>();

        $r8 = new okio.Buffer;

        specialinvoke $r8.<okio.Buffer: void <init>()>();

        $r8 = virtualinvoke $r8.<okio.Buffer: okio.Buffer write(okio.ByteString)>($r4);

        $r9 = staticinvoke <io.grpc.okhttp.OkHttpFrameLogger: java.lang.String toString(okio.Buffer)>($r8);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" GO_AWAY: lastStreamId=");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" errorCode=");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length=");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes=");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logGoAway", $r6);

     label1:
        return;
    }

    void logHeaders(io.grpc.okhttp.OkHttpFrameLogger$Direction, int, java.util.List, boolean)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        boolean $z0, $z1;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        int $i0;
        java.util.List $r3;
        java.util.logging.Logger $r4;
        java.lang.String $r5, $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $i0 := @parameter1: int;

        $r3 := @parameter2: java.util.List;

        $z0 := @parameter3: boolean;

        $z1 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        $r4 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HEADERS: streamId=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" headers=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" endStream=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logHeaders", $r5);

     label1:
        return;
    }

    void logPing(io.grpc.okhttp.OkHttpFrameLogger$Direction, long)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        long $l0;
        boolean $z0;
        java.util.logging.Logger $r3;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $l0 := @parameter1: long;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PING: ack=false bytes=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logPing", $r4);

     label1:
        return;
    }

    void logPingAck(io.grpc.okhttp.OkHttpFrameLogger$Direction, long)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        long $l0;
        boolean $z0;
        java.util.logging.Logger $r3;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $l0 := @parameter1: long;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PING: ack=true bytes=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logPingAck", $r4);

     label1:
        return;
    }

    void logPushPromise(io.grpc.okhttp.OkHttpFrameLogger$Direction, int, int, java.util.List)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        int $i0, $i1;
        java.util.List $r3;
        boolean $z0;
        java.util.logging.Logger $r4;
        java.lang.String $r5, $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 := @parameter3: java.util.List;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PUSH_PROMISE: streamId=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" promisedStreamId=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" headers=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logPushPromise", $r5);

     label1:
        return;
    }

    void logRstStream(io.grpc.okhttp.OkHttpFrameLogger$Direction, int, io.grpc.okhttp.internal.framed.ErrorCode)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        int $i0;
        io.grpc.okhttp.internal.framed.ErrorCode $r3;
        boolean $z0;
        java.util.logging.Logger $r4;
        java.lang.String $r5, $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $i0 := @parameter1: int;

        $r3 := @parameter2: io.grpc.okhttp.internal.framed.ErrorCode;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" RST_STREAM: streamId=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" errorCode=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logRstStream", $r5);

     label1:
        return;
    }

    void logSettings(io.grpc.okhttp.OkHttpFrameLogger$Direction, io.grpc.okhttp.internal.framed.Settings)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        io.grpc.okhttp.internal.framed.Settings $r3;
        boolean $z0;
        java.util.logging.Logger $r4;
        java.lang.String $r5, $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $r3 := @parameter1: io.grpc.okhttp.internal.framed.Settings;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r6 = staticinvoke <io.grpc.okhttp.OkHttpFrameLogger: java.lang.String toString(io.grpc.okhttp.internal.framed.Settings)>($r3);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SETTINGS: ack=false settings=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logSettings", $r5);

     label1:
        return;
    }

    void logSettingsAck(io.grpc.okhttp.OkHttpFrameLogger$Direction)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        boolean $z0;
        java.util.logging.Logger $r3;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SETTINGS: ack=true");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logSettingsAck", $r4);

     label1:
        return;
    }

    void logWindowsUpdate(io.grpc.okhttp.OkHttpFrameLogger$Direction, int, long)
    {
        io.grpc.okhttp.OkHttpFrameLogger $r0;
        java.util.logging.Level $r1;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r2;
        int $i0;
        long $l1;
        boolean $z0;
        java.util.logging.Logger $r3;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpFrameLogger: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Logger logger>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpFrameLogger: java.util.logging.Level level>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WINDOW_UPDATE: streamId=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" windowSizeIncrement=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, "io.grpc.okhttp.OkHttpFrameLogger", "logWindowsUpdate", $r4);

     label1:
        return;
    }

io.grpc.okhttp.OkHttpFrameLogger$Direction
<io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction[] $VALUES>
<io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction INBOUND>
<io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>
    private static io.grpc.okhttp.OkHttpFrameLogger$Direction[] $values()
    {
        io.grpc.okhttp.OkHttpFrameLogger$Direction[] $r0;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r1;

        $r0 = newarray (io.grpc.okhttp.OkHttpFrameLogger$Direction)[2];

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction INBOUND>;

        $r0[0] = $r1;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND>;

        $r0[1] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        io.grpc.okhttp.OkHttpFrameLogger$Direction[] $r0;
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r1;

        $r1 = new io.grpc.okhttp.OkHttpFrameLogger$Direction;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$Direction: void <init>(java.lang.String,int)>("INBOUND", 0);

        <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction INBOUND> = $r1;

        $r1 = new io.grpc.okhttp.OkHttpFrameLogger$Direction;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$Direction: void <init>(java.lang.String,int)>("OUTBOUND", 1);

        <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction OUTBOUND> = $r1;

        $r0 = staticinvoke <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction[] $values()>();

        <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        io.grpc.okhttp.OkHttpFrameLogger$Direction $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger$Direction;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static io.grpc.okhttp.OkHttpFrameLogger$Direction[] values()
    {
        java.lang.Object $r0;
        io.grpc.okhttp.OkHttpFrameLogger$Direction[] $r1;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (io.grpc.okhttp.OkHttpFrameLogger$Direction[]) $r0;

        return $r1;
    }

io.grpc.okhttp.OkHttpFrameLogger$SettingParams
<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] $VALUES>
<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams ENABLE_PUSH>
<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams HEADER_TABLE_SIZE>
<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams INITIAL_WINDOW_SIZE>
<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams MAX_CONCURRENT_STREAMS>
<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams MAX_FRAME_SIZE>
<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams MAX_HEADER_LIST_SIZE>
<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: int bit>
    private static io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] $values()
    {
        io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] $r0;
        io.grpc.okhttp.OkHttpFrameLogger$SettingParams $r1;

        $r0 = newarray (io.grpc.okhttp.OkHttpFrameLogger$SettingParams)[6];

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams HEADER_TABLE_SIZE>;

        $r0[0] = $r1;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams ENABLE_PUSH>;

        $r0[1] = $r1;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams MAX_CONCURRENT_STREAMS>;

        $r0[2] = $r1;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams MAX_FRAME_SIZE>;

        $r0[3] = $r1;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams MAX_HEADER_LIST_SIZE>;

        $r0[4] = $r1;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams INITIAL_WINDOW_SIZE>;

        $r0[5] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] $r0;
        io.grpc.okhttp.OkHttpFrameLogger$SettingParams $r1;

        $r1 = new io.grpc.okhttp.OkHttpFrameLogger$SettingParams;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: void <init>(java.lang.String,int,int)>("HEADER_TABLE_SIZE", 0, 1);

        <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams HEADER_TABLE_SIZE> = $r1;

        $r1 = new io.grpc.okhttp.OkHttpFrameLogger$SettingParams;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: void <init>(java.lang.String,int,int)>("ENABLE_PUSH", 1, 2);

        <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams ENABLE_PUSH> = $r1;

        $r1 = new io.grpc.okhttp.OkHttpFrameLogger$SettingParams;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: void <init>(java.lang.String,int,int)>("MAX_CONCURRENT_STREAMS", 2, 4);

        <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams MAX_CONCURRENT_STREAMS> = $r1;

        $r1 = new io.grpc.okhttp.OkHttpFrameLogger$SettingParams;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: void <init>(java.lang.String,int,int)>("MAX_FRAME_SIZE", 3, 5);

        <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams MAX_FRAME_SIZE> = $r1;

        $r1 = new io.grpc.okhttp.OkHttpFrameLogger$SettingParams;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: void <init>(java.lang.String,int,int)>("MAX_HEADER_LIST_SIZE", 4, 6);

        <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams MAX_HEADER_LIST_SIZE> = $r1;

        $r1 = new io.grpc.okhttp.OkHttpFrameLogger$SettingParams;

        specialinvoke $r1.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: void <init>(java.lang.String,int,int)>("INITIAL_WINDOW_SIZE", 5, 7);

        <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams INITIAL_WINDOW_SIZE> = $r1;

        $r0 = staticinvoke <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] $values()>();

        <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int, int)
    {
        io.grpc.okhttp.OkHttpFrameLogger$SettingParams $r0;
        java.lang.String $r1;
        int $i0, $i1;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger$SettingParams;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        $r0.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: int bit> = $i1;

        return;
    }

    public static io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] values()
    {
        java.lang.Object $r0;
        io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] $r1;

        $r1 = <io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (io.grpc.okhttp.OkHttpFrameLogger$SettingParams[]) $r0;

        return $r1;
    }

    public int getBit()
    {
        io.grpc.okhttp.OkHttpFrameLogger$SettingParams $r0;
        int i0;

        $r0 := @this: io.grpc.okhttp.OkHttpFrameLogger$SettingParams;

        i0 = $r0.<io.grpc.okhttp.OkHttpFrameLogger$SettingParams: int bit>;

        return i0;
    }

