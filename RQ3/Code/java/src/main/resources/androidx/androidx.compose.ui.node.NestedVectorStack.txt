androidx.compose.ui.node.NestedVectorStack
<androidx.compose.ui.node.NestedVectorStack: int current>
<androidx.compose.ui.node.NestedVectorStack: int lastIndex>
<androidx.compose.ui.node.NestedVectorStack: int[] indexes>
<androidx.compose.ui.node.NestedVectorStack: androidx.compose.runtime.collection.MutableVector vectors>
    public void <init>()
    {
        androidx.compose.ui.node.NestedVectorStack r0;
        byte b0;
        int[] $r1;
        androidx.compose.runtime.collection.MutableVector $r2;
        androidx.compose.runtime.collection.MutableVector[] $r3;

        r0 := @this: androidx.compose.ui.node.NestedVectorStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.NestedVectorStack: int current> = -1;

        $r1 = newarray (int)[16];

        r0.<androidx.compose.ui.node.NestedVectorStack: int[] indexes> = $r1;

        b0 = 16;

        $r2 = new androidx.compose.runtime.collection.MutableVector;

        $r3 = newarray (androidx.compose.runtime.collection.MutableVector)[b0];

        specialinvoke $r2.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r3, 0);

        r0.<androidx.compose.ui.node.NestedVectorStack: androidx.compose.runtime.collection.MutableVector vectors> = $r2;

        return;
    }

    private final void pushIndex(int)
    {
        androidx.compose.ui.node.NestedVectorStack r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: androidx.compose.ui.node.NestedVectorStack;

        i0 := @parameter0: int;

        $i3 = r0.<androidx.compose.ui.node.NestedVectorStack: int lastIndex>;

        $r1 = r0.<androidx.compose.ui.node.NestedVectorStack: int[] indexes>;

        $i2 = lengthof $r1;

        if $i3 < $i2 goto label1;

        $r4 = r0.<androidx.compose.ui.node.NestedVectorStack: int[] indexes>;

        $r3 = r0.<androidx.compose.ui.node.NestedVectorStack: int[] indexes>;

        $i5 = lengthof $r3;

        $i6 = $i5 * 2;

        $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r4, $i6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "copyOf(this, newSize)");

        r0.<androidx.compose.ui.node.NestedVectorStack: int[] indexes> = $r5;

     label1:
        $r2 = r0.<androidx.compose.ui.node.NestedVectorStack: int[] indexes>;

        i1 = r0.<androidx.compose.ui.node.NestedVectorStack: int lastIndex>;

        $i4 = i1 + 1;

        r0.<androidx.compose.ui.node.NestedVectorStack: int lastIndex> = $i4;

        $r2[i1] = i0;

        return;
    }

    public final boolean isNotEmpty()
    {
        androidx.compose.ui.node.NestedVectorStack r0;
        int $i0, $i1, $i2;
        int[] $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NestedVectorStack;

        $i0 = r0.<androidx.compose.ui.node.NestedVectorStack: int current>;

        if $i0 < 0 goto label1;

        $r1 = r0.<androidx.compose.ui.node.NestedVectorStack: int[] indexes>;

        $i1 = r0.<androidx.compose.ui.node.NestedVectorStack: int current>;

        $i2 = $r1[$i1];

        if $i2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.Object pop()
    {
        androidx.compose.ui.node.NestedVectorStack r0;
        int i0, i1, $i2, $i3, $i4, i5;
        androidx.compose.runtime.collection.MutableVector r1, $r5, r7, r9;
        int[] $r2, r8;
        java.lang.Object[] $r3, $r10;
        java.lang.Object $r4, $r11;

        r0 := @this: androidx.compose.ui.node.NestedVectorStack;

        i0 = r0.<androidx.compose.ui.node.NestedVectorStack: int current>;

        $r2 = r0.<androidx.compose.ui.node.NestedVectorStack: int[] indexes>;

        i1 = $r2[i0];

        r7 = r0.<androidx.compose.ui.node.NestedVectorStack: androidx.compose.runtime.collection.MutableVector vectors>;

        $r3 = virtualinvoke r7.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r4 = $r3[i0];

        r1 = (androidx.compose.runtime.collection.MutableVector) $r4;

        if i1 <= 0 goto label1;

        r8 = r0.<androidx.compose.ui.node.NestedVectorStack: int[] indexes>;

        $i4 = r8[i0];

        $i3 = $i4 + -1;

        r8[i0] = $i3;

        goto label2;

     label1:
        if i1 != 0 goto label2;

        $r5 = r0.<androidx.compose.ui.node.NestedVectorStack: androidx.compose.runtime.collection.MutableVector vectors>;

        virtualinvoke $r5.<androidx.compose.runtime.collection.MutableVector: java.lang.Object removeAt(int)>(i0);

        i5 = r0.<androidx.compose.ui.node.NestedVectorStack: int current>;

        $i2 = i5 + -1;

        r0.<androidx.compose.ui.node.NestedVectorStack: int current> = $i2;

     label2:
        r9 = r1;

        $r10 = virtualinvoke r9.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r11 = $r10[i1];

        return $r11;
    }

    public final void push(androidx.compose.runtime.collection.MutableVector)
    {
        androidx.compose.ui.node.NestedVectorStack r0;
        androidx.compose.runtime.collection.MutableVector r1, $r2;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NestedVectorStack;

        r1 := @parameter0: androidx.compose.runtime.collection.MutableVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "vector");

        $z0 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: boolean isNotEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.ui.node.NestedVectorStack: androidx.compose.runtime.collection.MutableVector vectors>;

        virtualinvoke $r2.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>(r1);

        $i1 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        $i2 = $i1 - 1;

        specialinvoke r0.<androidx.compose.ui.node.NestedVectorStack: void pushIndex(int)>($i2);

        i0 = r0.<androidx.compose.ui.node.NestedVectorStack: int current>;

        $i3 = i0 + 1;

        r0.<androidx.compose.ui.node.NestedVectorStack: int current> = $i3;

     label1:
        return;
    }

