androidx.tv.material3.ScrollPauseHandleImpl
<androidx.tv.material3.ScrollPauseHandleImpl: androidx.tv.material3.CarouselState carouselState>
<androidx.tv.material3.ScrollPauseHandleImpl: androidx.compose.runtime.MutableState active$delegate>
    public void <init>(androidx.tv.material3.CarouselState)
    {
        androidx.tv.material3.ScrollPauseHandleImpl r0;
        androidx.tv.material3.CarouselState r1, r2;
        java.lang.Boolean $r3;
        androidx.compose.runtime.MutableState $r4;
        int $i0, $i1;

        r0 := @this: androidx.tv.material3.ScrollPauseHandleImpl;

        r1 := @parameter0: androidx.tv.material3.CarouselState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "carouselState");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.tv.material3.ScrollPauseHandleImpl: androidx.tv.material3.CarouselState carouselState> = r1;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r4 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r3, null, 2, null);

        r0.<androidx.tv.material3.ScrollPauseHandleImpl: androidx.compose.runtime.MutableState active$delegate> = $r4;

        r2 = r0.<androidx.tv.material3.ScrollPauseHandleImpl: androidx.tv.material3.CarouselState carouselState>;

        $i0 = virtualinvoke r2.<androidx.tv.material3.CarouselState: int getActivePauseHandlesCount$tv_material_release()>();

        $i1 = $i0 + 1;

        virtualinvoke r2.<androidx.tv.material3.CarouselState: void setActivePauseHandlesCount$tv_material_release(int)>($i1);

        return;
    }

    private final boolean getActive()
    {
        androidx.tv.material3.ScrollPauseHandleImpl r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: androidx.tv.material3.ScrollPauseHandleImpl;

        $r2 = r0.<androidx.tv.material3.ScrollPauseHandleImpl: androidx.compose.runtime.MutableState active$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private final void setActive(boolean)
    {
        androidx.tv.material3.ScrollPauseHandleImpl r0;
        boolean z0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Boolean r2;

        r0 := @this: androidx.tv.material3.ScrollPauseHandleImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.tv.material3.ScrollPauseHandleImpl: androidx.compose.runtime.MutableState active$delegate>;

        r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    public void resumeAutoScroll()
    {
        androidx.tv.material3.ScrollPauseHandleImpl r0;
        androidx.tv.material3.CarouselState r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: androidx.tv.material3.ScrollPauseHandleImpl;

        $z0 = specialinvoke r0.<androidx.tv.material3.ScrollPauseHandleImpl: boolean getActive()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.tv.material3.ScrollPauseHandleImpl: void setActive(boolean)>(0);

        r1 = r0.<androidx.tv.material3.ScrollPauseHandleImpl: androidx.tv.material3.CarouselState carouselState>;

        $i0 = virtualinvoke r1.<androidx.tv.material3.CarouselState: int getActivePauseHandlesCount$tv_material_release()>();

        $i1 = $i0 - 1;

        virtualinvoke r1.<androidx.tv.material3.CarouselState: void setActivePauseHandlesCount$tv_material_release(int)>($i1);

     label1:
        return;
    }

