androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep
<androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep INSTANCE>
<androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep: java.lang.String name>
<androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep: java.lang.String GEN_CLASS_OUT>
    private void <init>()
    {
        androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep;

        $r1 = <androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep: java.lang.String name>;

        return $r1;
    }

    public androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult execute(java.io.File, androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments)
    {
        androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep r0;
        java.io.File r1, r7, $r42, $r69, $r73, r78, r79;
        androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments r2, $r35;
        java.util.Map r3, r59, r63;
        java.util.Iterator r4, $r60, r67;
        java.lang.Object r5, r61, r68;
        javax.tools.JavaFileObject r6, $r53;
        java.io.Closeable r8, r80;
        java.util.List $r9, $r17, $r19, $r30, $r32, $r33, $r34, $r38, $r47, $r64, $r70, $r89, r90;
        java.lang.Iterable $r10, $r20, $r22, $r24, $r50, r65, $r74, r75;
        kotlin.sequences.Sequence $r11, $r58;
        androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1 $r12;
        kotlin.jvm.functions.Function1 $r13;
        java.util.LinkedHashMap $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.ArrayList $r15, $r37;
        com.google.testing.compile.Compiler $r16, $r21, $r71;
        java.util.Collection $r18, $r48, $r66, $r76, r77;
        java.util.Set $r23, $r49;
        com.google.testing.compile.Compilation$Status $r25, $r26, $r28, $r29;
        androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult $r27, $r52;
        com.google.common.collect.ImmutableList $r31, $r36;
        int $i0;
        java.net.URI $r39;
        java.lang.String $r40, $r41;
        java.io.InputStream $r43, $r81;
        java.io.FileOutputStream $r44, r82;
        java.io.OutputStream $r45;
        java.lang.Long $r46;
        androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult$Companion $r51;
        java.lang.Throwable $r54, $r55, $r56, $r57, r83, r84, r85, r87;
        androidx.room.compiler.processing.util.Source$JavaSource r62;
        com.google.testing.compile.Compilation $r72;
        long l1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workingDir");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "arguments");

        $r9 = virtualinvoke r2.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getSourceSets()>();

        $r10 = (java.lang.Iterable) $r9;

        $r11 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r10);

        $r12 = <androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1 INSTANCE>;

        $r13 = (kotlin.jvm.functions.Function1) $r12;

        $r58 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence flatMapIterable(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r11, $r13);

        $r14 = new java.util.LinkedHashMap;

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>();

        r59 = (java.util.Map) $r14;

        $r60 = interfaceinvoke $r58.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r60.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        r61 = interfaceinvoke $r60.<java.util.Iterator: java.lang.Object next()>();

        r62 = (androidx.room.compiler.processing.util.Source$JavaSource) r61;

        r63 = r59;

        $r53 = virtualinvoke r62.<androidx.room.compiler.processing.util.Source$JavaSource: javax.tools.JavaFileObject toJFO()>();

        interfaceinvoke r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r53, r61);

        goto label01;

     label02:
        r3 = r59;

        $z1 = interfaceinvoke r3.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        $r51 = <androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult: androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult$Companion Companion>;

        $r52 = virtualinvoke $r51.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult$Companion: androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult skip(androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments)>(r2);

        return $r52;

     label03:
        $z2 = virtualinvoke r2.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: boolean getInheritClasspaths()>();

        if $z2 == 0 goto label04;

        $r47 = virtualinvoke r2.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getAdditionalClasspaths()>();

        $r48 = (java.util.Collection) $r47;

        $r49 = staticinvoke <androidx.room.compiler.processing.util.TestUiltsKt: java.util.Set getSystemClasspathFiles()>();

        $r50 = (java.lang.Iterable) $r49;

        $r64 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r48, $r50);

        goto label05;

     label04:
        $r64 = virtualinvoke r2.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getAdditionalClasspaths()>();

     label05:
        r65 = (java.lang.Iterable) $r64;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r66 = (java.util.Collection) $r15;

        r67 = interfaceinvoke r65.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r67.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label07;

        r68 = interfaceinvoke r67.<java.util.Iterator: java.lang.Object next()>();

        $r69 = (java.io.File) r68;

        $z4 = virtualinvoke $r69.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label06;

        interfaceinvoke $r66.<java.util.Collection: boolean add(java.lang.Object)>(r68);

        goto label06;

     label07:
        $r70 = (java.util.List) $r66;

        $r16 = staticinvoke <com.google.testing.compile.Compiler: com.google.testing.compile.Compiler javac()>();

        $r17 = virtualinvoke r2.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getJavacArguments()>();

        $r18 = (java.util.Collection) $r17;

        $r19 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Object)>($r18, "-Xlint");

        $r20 = (java.lang.Iterable) $r19;

        $r21 = virtualinvoke $r16.<com.google.testing.compile.Compiler: com.google.testing.compile.Compiler withOptions(java.lang.Iterable)>($r20);

        $r22 = (java.lang.Iterable) $r70;

        $r71 = virtualinvoke $r21.<com.google.testing.compile.Compiler: com.google.testing.compile.Compiler withClasspath(java.lang.Iterable)>($r22);

        $r23 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>();

        $r24 = (java.lang.Iterable) $r23;

        $r72 = virtualinvoke $r71.<com.google.testing.compile.Compiler: com.google.testing.compile.Compilation compile(java.lang.Iterable)>($r24);

        $r25 = virtualinvoke $r72.<com.google.testing.compile.Compilation: com.google.testing.compile.Compilation$Status status()>();

        $r26 = <com.google.testing.compile.Compilation$Status: com.google.testing.compile.Compilation$Status SUCCESS>;

        if $r25 != $r26 goto label21;

        $r73 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r1, "classOut");

        $r36 = virtualinvoke $r72.<com.google.testing.compile.Compilation: com.google.common.collect.ImmutableList generatedFiles()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r36, "result.generatedFiles()");

        $r74 = (java.lang.Iterable) $r36;

        r75 = $r74;

        $r37 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r74, 10);

        specialinvoke $r37.<java.util.ArrayList: void <init>(int)>($i0);

        $r76 = (java.util.Collection) $r37;

        r4 = interfaceinvoke r75.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label20;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.tools.JavaFileObject) r5;

        r77 = $r76;

        $r39 = interfaceinvoke r6.<javax.tools.JavaFileObject: java.net.URI toUri()>();

        $r40 = virtualinvoke $r39.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r40, "it.toUri().path");

        $r41 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r40, "CLASS_OUTPUT/", null, 2, null);

        r78 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>($r73, $r41);

        r79 = r78;

        $r42 = virtualinvoke r79.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r42.<java.io.File: boolean mkdirs()>();

        r7 = r78;

        $r43 = interfaceinvoke r6.<javax.tools.JavaFileObject: java.io.InputStream openInputStream()>();

        r80 = (java.io.Closeable) $r43;

     label09:
        $r81 = (java.io.InputStream) r80;

        $r44 = new java.io.FileOutputStream;

        specialinvoke $r44.<java.io.FileOutputStream: void <init>(java.io.File)>(r7);

        r8 = (java.io.Closeable) $r44;

     label10:
        r82 = (java.io.FileOutputStream) r8;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r81, "inputStream");

        $r45 = (java.io.OutputStream) r82;

        l1 = staticinvoke <kotlin.io.ByteStreamsKt: long copyTo$default(java.io.InputStream,java.io.OutputStream,int,int,java.lang.Object)>($r81, $r45, 0, 2, null);

     label11:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r8, null);

        goto label15;

     label12:
        $r57 := @caughtexception;

        r83 = $r57;

        r84 = r83;

        throw r83;

     label13:
        $r56 := @caughtexception;

        r85 = $r56;

     label14:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r8, r84);

        throw r85;

     label15:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r80, null);

        goto label19;

     label16:
        $r54 := @caughtexception;

        r87 = $r54;

        throw $r54;

     label17:
        $r55 := @caughtexception;

     label18:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r80, r87);

        throw $r55;

     label19:
        $r46 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        interfaceinvoke r77.<java.util.Collection: boolean add(java.lang.Object)>($r46);

        goto label08;

     label20:
        $r38 = (java.util.List) $r76;

        $r89 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r73);

        goto label22;

     label21:
        $r89 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label22:
        r90 = $r89;

        $r27 = new androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult;

        $r28 = virtualinvoke $r72.<com.google.testing.compile.Compilation: com.google.testing.compile.Compilation$Status status()>();

        $r29 = <com.google.testing.compile.Compilation$Status: com.google.testing.compile.Compilation$Status SUCCESS>;

        if $r28 != $r29 goto label23;

        $z6 = 1;

        goto label24;

     label23:
        $z6 = 0;

     label24:
        $r30 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r31 = virtualinvoke $r72.<com.google.testing.compile.Compilation: com.google.common.collect.ImmutableList diagnostics()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r31, "result.diagnostics()");

        $r32 = (java.util.List) $r31;

        $r33 = staticinvoke <androidx.room.compiler.processing.util.TestUiltsKt: java.util.List toDiagnosticMessages(java.util.List,java.util.Map)>($r32, r3);

        $r34 = virtualinvoke r2.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getSourceSets()>();

        $r35 = staticinvoke <androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments copy$default(androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments,java.util.List,java.util.List,boolean,java.util.List,java.util.List,int,java.lang.Object)>(r2, $r34, null, 0, null, null, 30, null);

        specialinvoke $r27.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult: void <init>(boolean,java.util.List,java.util.List,androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments,java.util.List)>($z6, $r30, $r33, $r35, r90);

        return $r27;

        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label09 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep INSTANCE> = $r0;

        <androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep: java.lang.String name> = "javaSourceCompilation";

        return;
    }

androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1
<androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1 INSTANCE>
    void <init>()
    {
        androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1 r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.util.List invoke(androidx.room.compiler.processing.util.compiler.SourceSet)
    {
        androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1 r0;
        androidx.room.compiler.processing.util.compiler.SourceSet r1;
        java.util.List $r2;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1;

        r1 := @parameter0: androidx.room.compiler.processing.util.compiler.SourceSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<androidx.room.compiler.processing.util.compiler.SourceSet: java.util.List getJavaSources()>();

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1 r0;
        java.lang.Object r1;
        androidx.room.compiler.processing.util.compiler.SourceSet $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.room.compiler.processing.util.compiler.SourceSet) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1: java.util.List invoke(androidx.room.compiler.processing.util.compiler.SourceSet)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1 $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1: androidx.room.compiler.processing.util.compiler.steps.JavaSourceCompilationStep$execute$javaSources$1 INSTANCE> = $r0;

        return;
    }

