androidx.benchmark.MetricsContainer
<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>
<androidx.benchmark.MetricsContainer: int REPEAT_COUNT>
<androidx.benchmark.MetricsContainer: long[][] data>
<androidx.benchmark.MetricsContainer: long[] traceTiming>
<androidx.benchmark.MetricsContainer: int runNum>
    public void <init>(androidx.benchmark.MetricCapture[], int)
    {
        androidx.benchmark.MetricsContainer r0, r3;
        androidx.benchmark.MetricCapture[] r1, $r4;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        long[][] r2;
        long[] $r5, $r6;

        r0 := @this: androidx.benchmark.MetricsContainer;

        r1 := @parameter0: androidx.benchmark.MetricCapture[];

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "metrics");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics> = r1;

        r0.<androidx.benchmark.MetricsContainer: int REPEAT_COUNT> = i0;

        i6 = 0;

        $r4 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        i1 = lengthof $r4;

        r2 = newarray (long[])[i1];

        r3 = r0;

     label1:
        if i6 >= i1 goto label2;

        i2 = i6;

        $i5 = r0.<androidx.benchmark.MetricsContainer: int REPEAT_COUNT>;

        $r6 = newarray (long)[$i5];

        r2[i2] = $r6;

        i6 = i6 + 1;

        goto label1;

     label2:
        r3.<androidx.benchmark.MetricsContainer: long[][] data> = r2;

        $i3 = r0.<androidx.benchmark.MetricsContainer: int REPEAT_COUNT>;

        $i4 = $i3 * 2;

        $r5 = newarray (long)[$i4];

        r0.<androidx.benchmark.MetricsContainer: long[] traceTiming> = $r5;

        return;
    }

    public void <init>(androidx.benchmark.MetricCapture[], int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.benchmark.MetricsContainer r0;
        int i0, i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        androidx.benchmark.MetricCapture[] r2, r5;
        androidx.benchmark.TimeCapture $r3;
        androidx.benchmark.MetricCapture $r4;

        r0 := @this: androidx.benchmark.MetricsContainer;

        r5 := @parameter0: androidx.benchmark.MetricCapture[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i2 = i1 & 1;

        if $i2 == 0 goto label1;

        r2 = newarray (androidx.benchmark.MetricCapture)[1];

        $r3 = new androidx.benchmark.TimeCapture;

        specialinvoke $r3.<androidx.benchmark.TimeCapture: void <init>()>();

        $r4 = (androidx.benchmark.MetricCapture) $r3;

        r2[0] = $r4;

        r5 = r2;

     label1:
        specialinvoke r0.<androidx.benchmark.MetricsContainer: void <init>(androidx.benchmark.MetricCapture[],int)>(r5, i0);

        return;
    }

    public final long[][] getData$benchmark_common_release()
    {
        androidx.benchmark.MetricsContainer r0;
        long[][] $r1;

        r0 := @this: androidx.benchmark.MetricsContainer;

        $r1 = r0.<androidx.benchmark.MetricsContainer: long[][] data>;

        return $r1;
    }

    public final void captureInit()
    {
        androidx.benchmark.MetricsContainer r0;

        r0 := @this: androidx.benchmark.MetricsContainer;

        r0.<androidx.benchmark.MetricsContainer: int runNum> = 0;

        return;
    }

    public final void captureStart()
    {
        androidx.benchmark.MetricsContainer r0;
        long l0;
        int i1, i2, $i3, $i4, i5;
        long[] $r1;
        androidx.benchmark.MetricCapture[] $r2, $r3;
        androidx.benchmark.MetricCapture $r4;

        r0 := @this: androidx.benchmark.MetricsContainer;

        l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r1 = r0.<androidx.benchmark.MetricsContainer: long[] traceTiming>;

        $i3 = r0.<androidx.benchmark.MetricsContainer: int runNum>;

        $i4 = $i3 * 2;

        $r1[$i4] = l0;

        i5 = 0;

        $r2 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r2);

        if i5 > i1 goto label2;

     label1:
        i2 = i5;

        i5 = i5 + 1;

        $r3 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        $r4 = $r3[i2];

        virtualinvoke $r4.<androidx.benchmark.MetricCapture: void captureStart(long)>(l0);

        if i2 != i1 goto label1;

     label2:
        return;
    }

    public final void captureStop()
    {
        androidx.benchmark.MetricsContainer r0;
        long l0, $l8;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, i9;
        androidx.benchmark.MetricCapture[] $r1, $r4;
        long[] $r2, $r6;
        long[][] $r3;
        androidx.benchmark.MetricCapture $r5;

        r0 := @this: androidx.benchmark.MetricsContainer;

        l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r1 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        i9 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r1);

        if 0 > i9 goto label2;

     label1:
        i1 = i9;

        i9 = i9 + -1;

        $r3 = r0.<androidx.benchmark.MetricsContainer: long[][] data>;

        $r6 = $r3[i1];

        $i7 = r0.<androidx.benchmark.MetricsContainer: int runNum>;

        $r4 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        $r5 = $r4[i1];

        $l8 = virtualinvoke $r5.<androidx.benchmark.MetricCapture: long captureStop(long)>(l0);

        $r6[$i7] = $l8;

        if 0 <= i9 goto label1;

     label2:
        $r2 = r0.<androidx.benchmark.MetricsContainer: long[] traceTiming>;

        $i2 = r0.<androidx.benchmark.MetricsContainer: int runNum>;

        $i3 = $i2 * 2;

        $i4 = $i3 + 1;

        $r2[$i4] = l0;

        $i5 = r0.<androidx.benchmark.MetricsContainer: int runNum>;

        $i6 = $i5 + 1;

        r0.<androidx.benchmark.MetricsContainer: int runNum> = $i6;

        return;
    }

    public final void capturePaused()
    {
        androidx.benchmark.MetricsContainer r0;
        int i0, $i1, $i2, i3;
        androidx.benchmark.MetricCapture[] $r1, $r2, $r3;
        androidx.benchmark.MetricCapture $r4;

        r0 := @this: androidx.benchmark.MetricsContainer;

        $r1 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        i3 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r1);

        if 0 > i3 goto label2;

     label1:
        i0 = i3;

        i3 = i3 + -1;

        $r3 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        $r2 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r2);

        $i2 = $i1 - i0;

        $r4 = $r3[$i2];

        virtualinvoke $r4.<androidx.benchmark.MetricCapture: void capturePaused()>();

        if 0 <= i3 goto label1;

     label2:
        return;
    }

    public final void captureResumed()
    {
        androidx.benchmark.MetricsContainer r0;
        int i0, i1, i2;
        androidx.benchmark.MetricCapture[] $r1, $r2;
        androidx.benchmark.MetricCapture $r3;

        r0 := @this: androidx.benchmark.MetricsContainer;

        i2 = 0;

        $r1 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r1);

        if i2 > i0 goto label2;

     label1:
        i1 = i2;

        i2 = i2 + 1;

        $r2 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        $r3 = $r2[i1];

        virtualinvoke $r3.<androidx.benchmark.MetricCapture: void captureResumed()>();

        if i1 != i0 goto label1;

     label2:
        return;
    }

    public final java.util.List captureFinished(int)
    {
        androidx.benchmark.MetricsContainer r0;
        int i0, i1, i2, i3, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i17, $i18, $i19, i20, i21, i22, i23, i24, $i25, i26, i27, i28;
        java.lang.Object[] r1, r7, $r28, $r38;
        java.lang.Object r2, $r45;
        long[] r3, $r10, $r35, $r36, r42;
        androidx.benchmark.MetricCapture r4;
        long l4, l5, $l14, $l16;
        java.util.Collection r5, r9, r39, r41;
        java.util.List r6, $r13, $r17, r46;
        java.lang.String r8, $r19, $r20, $r27, $r29, $r34;
        long[][] $r11;
        java.util.ArrayList $r12, $r15;
        androidx.benchmark.MetricCapture[] $r14;
        java.lang.Iterable $r16, $r26, $r43;
        boolean $z4;
        androidx.benchmark.MetricResult $r18;
        java.lang.Integer $r21, $r22, $r33;
        androidx.benchmark.MetricsContainer$captureFinished$1$1$1 $r23;
        kotlin.jvm.functions.Function1 $r24;
        java.lang.CharSequence $r25;
        double $d0, $d1, $d2;
        java.lang.Double $r31;
        androidx.benchmark.UserspaceTracing $r32, $r37;
        java.util.Iterator r44;

        r0 := @this: androidx.benchmark.MetricsContainer;

        i0 := @parameter0: int;

        $r10 = r0.<androidx.benchmark.MetricsContainer: long[] traceTiming>;

        $i17 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r10);

        $i18 = 0;

        $i19 = staticinvoke <kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)>(0, $i17, 2);

        if 0 > $i19 goto label2;

     label1:
        i20 = $i18;

        $i18 = $i18 + 2;

        $r32 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        $i13 = i20 / 2;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        $r34 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("measurement ", $r33);

        $r35 = r0.<androidx.benchmark.MetricsContainer: long[] traceTiming>;

        $l14 = $r35[i20];

        virtualinvoke $r32.<androidx.benchmark.UserspaceTracing: void beginSection(java.lang.String,long)>($r34, $l14);

        $r37 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        $r36 = r0.<androidx.benchmark.MetricsContainer: long[] traceTiming>;

        $i15 = i20 + 1;

        $l16 = $r36[$i15];

        virtualinvoke $r37.<androidx.benchmark.UserspaceTracing: void endSection(long)>($l16);

        if i20 != $i19 goto label1;

     label2:
        $r11 = r0.<androidx.benchmark.MetricsContainer: long[][] data>;

        $r38 = (java.lang.Object[]) $r11;

        $r12 = new java.util.ArrayList;

        $i6 = lengthof $r38;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i6);

        r39 = (java.util.Collection) $r12;

        i21 = 0;

        r1 = $r38;

        i22 = 0;

        i1 = lengthof r1;

     label3:
        if i22 >= i1 goto label9;

        r2 = r1[i22];

        i22 = i22 + 1;

        i2 = i21;

        i21 = i2 + 1;

        r3 = (long[]) r2;

        i3 = i2;

        r9 = r39;

        $r14 = r0.<androidx.benchmark.MetricsContainer: androidx.benchmark.MetricCapture[] metrics>;

        r4 = $r14[i3];

        $r15 = new java.util.ArrayList;

        $i7 = lengthof r3;

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i7);

        r41 = (java.util.Collection) $r15;

        r42 = r3;

        i23 = 0;

        i24 = lengthof r42;

     label4:
        if i23 >= i24 goto label5;

        l4 = r42[i23];

        i23 = i23 + 1;

        l5 = l4;

        r5 = r41;

        $d1 = (double) l5;

        $d0 = (double) i0;

        $d2 = $d1 / $d0;

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r31);

        goto label4;

     label5:
        r6 = (java.util.List) r41;

        $r16 = (java.lang.Iterable) r6;

        $r17 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List chunked(java.lang.Iterable,int)>($r16, 10);

        $r43 = (java.lang.Iterable) $r17;

        $i25 = 0;

        r44 = interfaceinvoke $r43.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z4 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label8;

        $r45 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        i26 = $i25;

        $i25 = i26 + 1;

        i27 = i26;

        if i27 >= 0 goto label7;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label7:
        r46 = (java.util.List) $r45;

        i28 = i27;

        $r20 = virtualinvoke r4.<androidx.benchmark.MetricCapture: java.lang.String getName()>();

        r7 = newarray (java.lang.Object)[3];

        $i8 = i28 * 10;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        r7[0] = $r21;

        $i9 = i28 + 1;

        $i10 = $i9 * 10;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        r7[1] = $r22;

        $r26 = (java.lang.Iterable) r46;

        $r25 = (java.lang.CharSequence) " ";

        $r23 = <androidx.benchmark.MetricsContainer$captureFinished$1$1$1: androidx.benchmark.MetricsContainer$captureFinished$1$1$1 INSTANCE>;

        $r24 = (kotlin.jvm.functions.Function1) $r23;

        $r27 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r26, $r25, null, null, 0, null, $r24, 30, null);

        r7[2] = $r27;

        $i11 = lengthof r7;

        $r28 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r7, $i11);

        r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[%2d:%2d]: %s", $r28);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r8, "format(this, *args)");

        $r29 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>($r20, r8);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r29);

        goto label6;

     label8:
        $r18 = new androidx.benchmark.MetricResult;

        $r19 = virtualinvoke r4.<androidx.benchmark.MetricCapture: java.lang.String getName()>();

        specialinvoke $r18.<androidx.benchmark.MetricResult: void <init>(java.lang.String,java.util.List,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r19, r6, null, 4, null);

        interfaceinvoke r9.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        goto label3;

     label9:
        $r13 = (java.util.List) r39;

        return $r13;
    }

androidx.benchmark.MetricsContainer$captureFinished$1$1$1
<androidx.benchmark.MetricsContainer$captureFinished$1$1$1: androidx.benchmark.MetricsContainer$captureFinished$1$1$1 INSTANCE>
    void <init>()
    {
        androidx.benchmark.MetricsContainer$captureFinished$1$1$1 r0;

        r0 := @this: androidx.benchmark.MetricsContainer$captureFinished$1$1$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.CharSequence invoke(double)
    {
        androidx.benchmark.MetricsContainer$captureFinished$1$1$1 r0;
        double d0;
        long $l0;
        java.lang.String $r1;
        java.lang.CharSequence $r2;

        r0 := @this: androidx.benchmark.MetricsContainer$captureFinished$1$1$1;

        d0 := @parameter0: double;

        $l0 = (long) d0;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r2 = (java.lang.CharSequence) $r1;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.MetricsContainer$captureFinished$1$1$1 r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        double $d0;
        java.lang.CharSequence $r3;

        r0 := @this: androidx.benchmark.MetricsContainer$captureFinished$1$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        $r3 = virtualinvoke r0.<androidx.benchmark.MetricsContainer$captureFinished$1$1$1: java.lang.CharSequence invoke(double)>($d0);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.benchmark.MetricsContainer$captureFinished$1$1$1 $r0;

        $r0 = new androidx.benchmark.MetricsContainer$captureFinished$1$1$1;

        specialinvoke $r0.<androidx.benchmark.MetricsContainer$captureFinished$1$1$1: void <init>()>();

        <androidx.benchmark.MetricsContainer$captureFinished$1$1$1: androidx.benchmark.MetricsContainer$captureFinished$1$1$1 INSTANCE> = $r0;

        return;
    }

