androidx.room.compiler.processing.ksp.KspTypeMapper
<androidx.room.compiler.processing.ksp.KspTypeMapper: androidx.room.compiler.processing.ksp.KspTypeMapper INSTANCE>
<androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>
<androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map kotlinTypeToJavaPrimitiveMapping>
<androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Set javaPrimitiveQNames>
    private void <init>()
    {
        androidx.room.compiler.processing.ksp.KspTypeMapper r0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.String swapWithKotlinType(java.lang.String)
    {
        androidx.room.compiler.processing.ksp.KspTypeMapper r0;
        java.lang.String r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeMapper;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "javaType");

        $r2 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        if $r4 != null goto label1;

        $r4 = r1;

     label1:
        return $r4;
    }

    public final com.squareup.javapoet.TypeName getPrimitiveJavaTypeName(java.lang.String)
    {
        androidx.room.compiler.processing.ksp.KspTypeMapper r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.squareup.javapoet.TypeName $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeMapper;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "kotlinType");

        $r2 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map kotlinTypeToJavaPrimitiveMapping>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.squareup.javapoet.TypeName) $r3;

        return $r4;
    }

    public final boolean isJavaPrimitiveType(java.lang.String)
    {
        androidx.room.compiler.processing.ksp.KspTypeMapper r0;
        java.lang.String r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspTypeMapper;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "qName");

        $r2 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Set javaPrimitiveQNames>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.String r0, $r82, $r84;
        java.lang.Object r1, $r79, $r80, r89;
        java.util.Collection r2, $r24, r87;
        androidx.room.compiler.processing.ksp.KspTypeMapper $r3;
        java.util.LinkedHashMap $r4;
        java.util.Map $r5, $r22, $r23, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r77, $r91, $r95;
        com.squareup.javapoet.TypeName $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r81, r90;
        kotlin.Pair $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21;
        java.util.LinkedHashSet $r25;
        java.util.Set $r26, $r27, $r28;
        boolean $z0, $z1, z5, z6;
        kotlin.Pair[] $r85;
        java.lang.Iterable $r86;
        java.util.Iterator r88, $r92;
        java.util.Map$Entry r93, r94;

        $r3 = new androidx.room.compiler.processing.ksp.KspTypeMapper;

        specialinvoke $r3.<androidx.room.compiler.processing.ksp.KspTypeMapper: void <init>()>();

        <androidx.room.compiler.processing.ksp.KspTypeMapper: androidx.room.compiler.processing.ksp.KspTypeMapper INSTANCE> = $r3;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        $r5 = (java.util.Map) $r4;

        <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping> = $r5;

        $r85 = newarray (kotlin.Pair)[8];

        $r6 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName BYTE>;

        $r7 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("kotlin.Byte", $r6);

        $r85[0] = $r7;

        $r8 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName SHORT>;

        $r9 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("kotlin.Short", $r8);

        $r85[1] = $r9;

        $r10 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName INT>;

        $r11 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("kotlin.Int", $r10);

        $r85[2] = $r11;

        $r12 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName LONG>;

        $r13 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("kotlin.Long", $r12);

        $r85[3] = $r13;

        $r14 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName CHAR>;

        $r15 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("kotlin.Char", $r14);

        $r85[4] = $r15;

        $r16 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName FLOAT>;

        $r17 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("kotlin.Float", $r16);

        $r85[5] = $r17;

        $r18 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName DOUBLE>;

        $r19 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("kotlin.Double", $r18);

        $r85[6] = $r19;

        $r20 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName BOOLEAN>;

        $r21 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("kotlin.Boolean", $r20);

        $r85[7] = $r21;

        $r22 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair[])>($r85);

        <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map kotlinTypeToJavaPrimitiveMapping> = $r22;

        $r23 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map kotlinTypeToJavaPrimitiveMapping>;

        $r24 = interfaceinvoke $r23.<java.util.Map: java.util.Collection values()>();

        $r86 = (java.lang.Iterable) $r24;

        $r25 = new java.util.LinkedHashSet;

        specialinvoke $r25.<java.util.LinkedHashSet: void <init>()>();

        $r26 = (java.util.Set) $r25;

        r87 = (java.util.Collection) $r26;

        r88 = interfaceinvoke $r86.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r88.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r89 = interfaceinvoke r88.<java.util.Iterator: java.lang.Object next()>();

        r90 = (com.squareup.javapoet.TypeName) r89;

        r2 = r87;

        $r84 = virtualinvoke r90.<com.squareup.javapoet.TypeName: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r84);

        goto label1;

     label2:
        $r27 = (java.util.Set) r87;

        <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Set javaPrimitiveQNames> = $r27;

        $r91 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map kotlinTypeToJavaPrimitiveMapping>;

        z5 = 0;

        $r28 = interfaceinvoke $r91.<java.util.Map: java.util.Set entrySet()>();

        $r92 = interfaceinvoke $r28.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r92.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r79 = interfaceinvoke $r92.<java.util.Iterator: java.lang.Object next()>();

        r93 = (java.util.Map$Entry) $r79;

        r94 = r93;

        z6 = 0;

        $r95 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        $r80 = interfaceinvoke r94.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r81 = (com.squareup.javapoet.TypeName) $r80;

        $r82 = virtualinvoke $r81.<com.squareup.javapoet.TypeName: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r82, "it.value.toString()");

        r0 = $r82;

        r1 = interfaceinvoke r94.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r95.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        goto label3;

     label4:
        $r29 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Object", "kotlin.Any");

        $r31 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Cloneable", "kotlin.Cloneable");

        $r33 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Comparable", "kotlin.Comparable");

        $r35 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Enum", "kotlin.Enum");

        $r37 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Annotation", "kotlin.Annotation");

        $r39 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.CharSequence", "kotlin.CharSequence");

        $r41 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.String", "kotlin.String");

        $r43 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Number", "kotlin.Number");

        $r45 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Throwable", "kotlin.Throwable");

        $r47 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Byte", "kotlin.Byte");

        $r49 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Short", "kotlin.Short");

        $r51 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Integer", "kotlin.Int");

        $r53 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Long", "kotlin.Long");

        $r55 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Character", "kotlin.Char");

        $r57 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r57.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Float", "kotlin.Float");

        $r59 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r59.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Double", "kotlin.Double");

        $r61 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Boolean", "kotlin.Boolean");

        $r63 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Iterator", "kotlin.collections.MutableIterator");

        $r65 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Iterable", "kotlin.collections.Iterable");

        $r67 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r67.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Collection", "kotlin.collections.MutableCollection");

        $r69 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r69.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Set", "kotlin.collections.MutableSet");

        $r71 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r71.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.List", "kotlin.collections.MutableList");

        $r73 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.ListIterator", "kotlin.collections.ListIterator");

        $r75 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r75.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Map", "kotlin.collections.MutableMap");

        $r77 = <androidx.room.compiler.processing.ksp.KspTypeMapper: java.util.Map mapping>;

        interfaceinvoke $r77.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Map.Entry", "kotlin.collections.MutableEntry");

        return;
    }

