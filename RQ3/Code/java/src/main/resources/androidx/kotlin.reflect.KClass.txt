kotlin.reflect.KClass
<kotlin.reflect.KClass: boolean equals(java.lang.Object)>
<kotlin.reflect.KClass: java.util.Collection getConstructors()>
<kotlin.reflect.KClass: java.util.Collection getMembers()>
<kotlin.reflect.KClass: java.util.Collection getNestedClasses()>
<kotlin.reflect.KClass: java.lang.Object getObjectInstance()>
<kotlin.reflect.KClass: java.lang.String getQualifiedName()>
<kotlin.reflect.KClass: java.util.List getSealedSubclasses()>
<kotlin.reflect.KClass: java.lang.String getSimpleName()>
<kotlin.reflect.KClass: java.util.List getSupertypes()>
<kotlin.reflect.KClass: java.util.List getTypeParameters()>
<kotlin.reflect.KClass: kotlin.reflect.KVisibility getVisibility()>
<kotlin.reflect.KClass: int hashCode()>
<kotlin.reflect.KClass: boolean isAbstract()>
<kotlin.reflect.KClass: boolean isCompanion()>
<kotlin.reflect.KClass: boolean isData()>
<kotlin.reflect.KClass: boolean isFinal()>
<kotlin.reflect.KClass: boolean isFun()>
<kotlin.reflect.KClass: boolean isInner()>
<kotlin.reflect.KClass: boolean isInstance(java.lang.Object)>
<kotlin.reflect.KClass: boolean isOpen()>
<kotlin.reflect.KClass: boolean isSealed()>
<kotlin.reflect.KClass: boolean isValue()>
kotlin.reflect.KClass$DefaultImpls
    public static void getSealedSubclasses$annotations()
    {
        return;
    }

    public static void getSupertypes$annotations()
    {
        return;
    }

    public static void getTypeParameters$annotations()
    {
        return;
    }

    public static void getVisibility$annotations()
    {
        return;
    }

    public static void isAbstract$annotations()
    {
        return;
    }

    public static void isCompanion$annotations()
    {
        return;
    }

    public static void isData$annotations()
    {
        return;
    }

    public static void isFinal$annotations()
    {
        return;
    }

    public static void isFun$annotations()
    {
        return;
    }

    public static void isInner$annotations()
    {
        return;
    }

    public static void isOpen$annotations()
    {
        return;
    }

    public static void isSealed$annotations()
    {
        return;
    }

    public static void isValue$annotations()
    {
        return;
    }

