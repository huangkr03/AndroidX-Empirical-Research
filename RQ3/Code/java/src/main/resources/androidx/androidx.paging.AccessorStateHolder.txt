androidx.paging.AccessorStateHolder
<androidx.paging.AccessorStateHolder: java.util.concurrent.locks.ReentrantLock lock>
<androidx.paging.AccessorStateHolder: kotlinx.coroutines.flow.MutableStateFlow _loadStates>
<androidx.paging.AccessorStateHolder: androidx.paging.AccessorState internalState>
    public void <init>()
    {
        androidx.paging.AccessorStateHolder r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        androidx.paging.LoadStates$Companion $r2;
        androidx.paging.LoadStates $r3;
        kotlinx.coroutines.flow.MutableStateFlow $r4;
        androidx.paging.AccessorState $r5;

        r0 := @this: androidx.paging.AccessorStateHolder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<androidx.paging.AccessorStateHolder: java.util.concurrent.locks.ReentrantLock lock> = $r1;

        $r2 = <androidx.paging.LoadStates: androidx.paging.LoadStates$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.paging.LoadStates$Companion: androidx.paging.LoadStates getIDLE()>();

        $r4 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.flow.MutableStateFlow MutableStateFlow(java.lang.Object)>($r3);

        r0.<androidx.paging.AccessorStateHolder: kotlinx.coroutines.flow.MutableStateFlow _loadStates> = $r4;

        $r5 = new androidx.paging.AccessorState;

        specialinvoke $r5.<androidx.paging.AccessorState: void <init>()>();

        r0.<androidx.paging.AccessorStateHolder: androidx.paging.AccessorState internalState> = $r5;

        return;
    }

    public final kotlinx.coroutines.flow.StateFlow getLoadStates()
    {
        androidx.paging.AccessorStateHolder r0;
        kotlinx.coroutines.flow.MutableStateFlow $r1;
        kotlinx.coroutines.flow.StateFlow $r2;

        r0 := @this: androidx.paging.AccessorStateHolder;

        $r1 = r0.<androidx.paging.AccessorStateHolder: kotlinx.coroutines.flow.MutableStateFlow _loadStates>;

        $r2 = (kotlinx.coroutines.flow.StateFlow) $r1;

        return $r2;
    }

    public final java.lang.Object use(kotlin.jvm.functions.Function1)
    {
        androidx.paging.AccessorStateHolder r0;
        kotlin.jvm.functions.Function1 r1;
        java.util.concurrent.locks.Lock r2;
        boolean z0, z2, z3, z5;
        java.lang.Object r3, r4, r11;
        java.util.concurrent.locks.ReentrantLock $r5;
        androidx.paging.AccessorState $r6, $r7;
        kotlinx.coroutines.flow.MutableStateFlow $r8;
        androidx.paging.LoadStates $r9;
        java.lang.Throwable $r10, r12;

        r0 := @this: androidx.paging.AccessorStateHolder;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r5 = r0.<androidx.paging.AccessorStateHolder: java.util.concurrent.locks.ReentrantLock lock>;

        r2 = (java.util.concurrent.locks.Lock) $r5;

        z0 = 0;

        z5 = 0;

        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r6 = r0.<androidx.paging.AccessorStateHolder: androidx.paging.AccessorState internalState>;

        r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        z2 = 0;

        z3 = 0;

        r4 = r3;

        $r8 = r0.<androidx.paging.AccessorStateHolder: kotlinx.coroutines.flow.MutableStateFlow _loadStates>;

        $r7 = r0.<androidx.paging.AccessorStateHolder: androidx.paging.AccessorState internalState>;

        $r9 = virtualinvoke $r7.<androidx.paging.AccessorState: androidx.paging.LoadStates computeLoadStates()>();

        interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r9);

        r11 = r3;

     label2:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label3:
        $r10 := @caughtexception;

        r12 = $r10;

     label4:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r12;

     label5:
        return r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

