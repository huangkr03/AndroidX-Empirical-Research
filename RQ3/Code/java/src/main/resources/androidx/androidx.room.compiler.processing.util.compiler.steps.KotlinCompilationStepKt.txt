androidx.room.compiler.processing.util.compiler.steps.KotlinCompilationStepKt
    public static final java.util.List resolveDiagnostics(java.util.List, java.util.List)
    {
        java.util.List r0, r1, $r11;
        java.lang.Iterable $r2, $r12;
        java.util.Collection r3, r9;
        java.util.Iterator r4, $r29;
        java.lang.Object r5, $r24;
        androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage r6;
        androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location r7;
        androidx.room.compiler.processing.util.Source r8, r31, $r32;
        java.util.ArrayList $r10;
        int $i0, $i1;
        boolean $z4, $z5, $z7, $z8;
        javax.tools.Diagnostic$Kind $r13, $r26;
        java.lang.String $r14, $r20, $r21, $r25, $r27, $r33;
        androidx.room.compiler.processing.util.DiagnosticLocation $r15;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.IllegalStateException $r19;
        java.lang.CharSequence $r22, $r23;
        androidx.room.compiler.processing.util.DiagnosticMessage $r28;
        androidx.room.compiler.processing.util.compiler.SourceSet r30;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "diagnostics");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sourceSets");

        $r2 = (java.lang.Iterable) r0;

        $r10 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r2, 10);

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = (java.util.Collection) $r10;

        r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage) r5;

        r9 = r3;

        r7 = virtualinvoke r6.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage: androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location getLocation()>();

        if r7 != null goto label02;

        $r28 = new androidx.room.compiler.processing.util.DiagnosticMessage;

        $r26 = virtualinvoke r6.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage: javax.tools.Diagnostic$Kind getKind()>();

        $r27 = virtualinvoke r6.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage: java.lang.String getMessage()>();

        specialinvoke $r28.<androidx.room.compiler.processing.util.DiagnosticMessage: void <init>(javax.tools.Diagnostic$Kind,java.lang.String,androidx.room.compiler.processing.util.DiagnosticLocation)>($r26, $r27, null);

        goto label10;

     label02:
        $r12 = (java.lang.Iterable) r1;

        $r29 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke $r29.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label04;

        $r24 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (androidx.room.compiler.processing.util.compiler.SourceSet) $r24;

        $r25 = virtualinvoke r7.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location: java.lang.String getPath()>();

        r31 = virtualinvoke r30.<androidx.room.compiler.processing.util.compiler.SourceSet: androidx.room.compiler.processing.util.Source findSourceFile(java.lang.String)>($r25);

        if r31 == null goto label03;

        $r32 = r31;

        goto label05;

     label04:
        $r32 = null;

     label05:
        r8 = $r32;

        if r8 != null goto label06;

        $r21 = virtualinvoke r7.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location: java.lang.String getPath()>();

        $r23 = (java.lang.CharSequence) $r21;

        $r22 = (java.lang.CharSequence) "kapt";

        $z7 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r23, $r22, 0, 2, null);

        if $z7 == 0 goto label07;

     label06:
        $z8 = 1;

        goto label08;

     label07:
        $z8 = 0;

     label08:
        if $z8 != 0 goto label09;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find source file for the diagnostic :/ ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r33 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke $r33.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label09:
        $r28 = new androidx.room.compiler.processing.util.DiagnosticMessage;

        $r13 = virtualinvoke r6.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage: javax.tools.Diagnostic$Kind getKind()>();

        $r14 = virtualinvoke r6.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage: java.lang.String getMessage()>();

        $r15 = new androidx.room.compiler.processing.util.DiagnosticLocation;

        $i1 = virtualinvoke r7.<androidx.room.compiler.processing.util.compiler.steps.RawDiagnosticMessage$Location: int getLine()>();

        specialinvoke $r15.<androidx.room.compiler.processing.util.DiagnosticLocation: void <init>(androidx.room.compiler.processing.util.Source,int)>(r8, $i1);

        specialinvoke $r28.<androidx.room.compiler.processing.util.DiagnosticMessage: void <init>(javax.tools.Diagnostic$Kind,java.lang.String,androidx.room.compiler.processing.util.DiagnosticLocation)>($r13, $r14, $r15);

     label10:
        interfaceinvoke r9.<java.util.Collection: boolean add(java.lang.Object)>($r28);

        goto label01;

     label11:
        $r11 = (java.util.List) r3;

        return $r11;
    }

