androidx.ui.material.ripple.RippleAnimation
<androidx.ui.material.ripple.RippleAnimation: kotlin.reflect.KProperty[] $$delegatedProperties>
<androidx.ui.material.ripple.RippleAnimation: boolean clipped>
<androidx.ui.material.ripple.RippleAnimation: kotlin.jvm.functions.Function1 onAnimationFinished>
<androidx.ui.material.ripple.RippleAnimation: androidx.animation.TransitionAnimation animation>
<androidx.ui.material.ripple.RippleAnimation: androidx.ui.material.ripple.RippleTransition$State transitionState>
<androidx.ui.material.ripple.RippleAnimation: boolean finishRequested>
<androidx.ui.material.ripple.RippleAnimation: androidx.compose.MutableState animationPulse$delegate>
    public void <init>(androidx.ui.geometry.Size, androidx.ui.geometry.Offset, float, boolean, androidx.animation.AnimationClockObservable, kotlin.jvm.functions.Function1)
    {
        androidx.ui.material.ripple.RippleAnimation r0;
        androidx.ui.geometry.Size r1, r5;
        androidx.ui.geometry.Offset r2, r6;
        float f0, f1, f2;
        boolean z0;
        androidx.animation.AnimationClockObservable r3;
        kotlin.jvm.functions.Function1 r4, $r18;
        androidx.ui.material.ripple.RippleTransition$State $r7, $r19;
        java.lang.Long $r8;
        androidx.compose.MutableState $r9;
        androidx.ui.material.ripple.RippleTransition $r10;
        androidx.animation.TransitionDefinition $r11;
        androidx.animation.TransitionAnimation $r12, $r14, $r17, $r20;
        androidx.ui.material.ripple.RippleAnimation$1 $r13;
        kotlin.jvm.functions.Function0 $r15;
        androidx.ui.material.ripple.RippleAnimation$2 $r16;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation;

        r1 := @parameter0: androidx.ui.geometry.Size;

        r2 := @parameter1: androidx.ui.geometry.Offset;

        f0 := @parameter2: float;

        z0 := @parameter3: boolean;

        r3 := @parameter4: androidx.animation.AnimationClockObservable;

        r4 := @parameter5: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "size");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "startPosition");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "clock");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "onAnimationFinished");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.ui.material.ripple.RippleAnimation: boolean clipped> = z0;

        r0.<androidx.ui.material.ripple.RippleAnimation: kotlin.jvm.functions.Function1 onAnimationFinished> = r4;

        $r7 = <androidx.ui.material.ripple.RippleTransition$State: androidx.ui.material.ripple.RippleTransition$State Initial>;

        r0.<androidx.ui.material.ripple.RippleAnimation: androidx.ui.material.ripple.RippleTransition$State transitionState> = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r9 = staticinvoke <androidx.compose.MutableStateKt: androidx.compose.MutableState mutableStateOf$default(java.lang.Object,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r8, null, 2, null);

        r0.<androidx.ui.material.ripple.RippleAnimation: androidx.compose.MutableState animationPulse$delegate> = $r9;

        r5 = r1;

        f1 = staticinvoke <androidx.ui.material.ripple.RippleAnimationKt: float getRippleStartRadius(androidx.ui.geometry.Size)>(r5);

        f2 = f0;

        r6 = staticinvoke <androidx.ui.geometry.Size: androidx.ui.geometry.Offset center$default(androidx.ui.geometry.Size,androidx.ui.geometry.Offset,int,java.lang.Object)>(r1, null, 1, null);

        $r10 = <androidx.ui.material.ripple.RippleTransition: androidx.ui.material.ripple.RippleTransition INSTANCE>;

        $r11 = virtualinvoke $r10.<androidx.ui.material.ripple.RippleTransition: androidx.animation.TransitionDefinition definition(float,float,androidx.ui.geometry.Offset,androidx.ui.geometry.Offset)>(f1, f2, r2, r6);

        $r12 = staticinvoke <androidx.animation.TransitionDefinitionKt: androidx.animation.TransitionAnimation createAnimation$default(androidx.animation.TransitionDefinition,androidx.animation.AnimationClockObservable,java.lang.Object,int,java.lang.Object)>($r11, r3, null, 2, null);

        r0.<androidx.ui.material.ripple.RippleAnimation: androidx.animation.TransitionAnimation animation> = $r12;

        $r14 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.animation.TransitionAnimation animation>;

        $r13 = new androidx.ui.material.ripple.RippleAnimation$1;

        specialinvoke $r13.<androidx.ui.material.ripple.RippleAnimation$1: void <init>(androidx.ui.material.ripple.RippleAnimation)>(r0);

        $r15 = (kotlin.jvm.functions.Function0) $r13;

        virtualinvoke $r14.<androidx.animation.TransitionAnimation: void setOnUpdate(kotlin.jvm.functions.Function0)>($r15);

        $r17 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.animation.TransitionAnimation animation>;

        $r16 = new androidx.ui.material.ripple.RippleAnimation$2;

        specialinvoke $r16.<androidx.ui.material.ripple.RippleAnimation$2: void <init>(androidx.ui.material.ripple.RippleAnimation)>(r0);

        $r18 = (kotlin.jvm.functions.Function1) $r16;

        virtualinvoke $r17.<androidx.animation.TransitionAnimation: void setOnStateChangeFinished(kotlin.jvm.functions.Function1)>($r18);

        $r20 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.animation.TransitionAnimation animation>;

        $r19 = <androidx.ui.material.ripple.RippleTransition$State: androidx.ui.material.ripple.RippleTransition$State Revealed>;

        virtualinvoke $r20.<androidx.animation.TransitionAnimation: void toState(java.lang.Object)>($r19);

        return;
    }

    private final long getAnimationPulse()
    {
        androidx.ui.material.ripple.RippleAnimation r0;
        androidx.compose.State $r1;
        kotlin.reflect.KProperty r2;
        androidx.compose.MutableState $r3;
        kotlin.reflect.KProperty[] $r4;
        java.lang.Object $r5;
        java.lang.Number $r6;
        long $l0;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation;

        $r3 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.compose.MutableState animationPulse$delegate>;

        $r1 = (androidx.compose.State) $r3;

        $r4 = <androidx.ui.material.ripple.RippleAnimation: kotlin.reflect.KProperty[] $$delegatedProperties>;

        r2 = $r4[0];

        $r5 = interfaceinvoke $r1.<androidx.compose.State: java.lang.Object getValue()>();

        $r6 = (java.lang.Number) $r5;

        $l0 = virtualinvoke $r6.<java.lang.Number: long longValue()>();

        return $l0;
    }

    private final void setAnimationPulse(long)
    {
        androidx.ui.material.ripple.RippleAnimation r0;
        long l0;
        androidx.compose.MutableState $r1;
        kotlin.reflect.KProperty r2;
        java.lang.Long r3;
        kotlin.reflect.KProperty[] $r4;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.compose.MutableState animationPulse$delegate>;

        $r4 = <androidx.ui.material.ripple.RippleAnimation: kotlin.reflect.KProperty[] $$delegatedProperties>;

        r2 = $r4[0];

        r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r1.<androidx.compose.MutableState: void setValue(java.lang.Object)>(r3);

        return;
    }

    public final void finish()
    {
        androidx.ui.material.ripple.RippleAnimation r0;
        androidx.ui.material.ripple.RippleTransition$State $r1;
        androidx.animation.TransitionAnimation $r2;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation;

        r0.<androidx.ui.material.ripple.RippleAnimation: boolean finishRequested> = 1;

        $r2 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.animation.TransitionAnimation animation>;

        $r1 = <androidx.ui.material.ripple.RippleTransition$State: androidx.ui.material.ripple.RippleTransition$State Finished>;

        virtualinvoke $r2.<androidx.animation.TransitionAnimation: void toState(java.lang.Object)>($r1);

        return;
    }

    public final void draw-z8Px3OI(androidx.ui.graphics.drawscope.DrawScope, long)
    {
        androidx.ui.material.ripple.RippleAnimation r0;
        androidx.ui.graphics.drawscope.DrawScope $r1;
        long l0, l1;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8;
        androidx.ui.geometry.Offset r2;
        androidx.ui.graphics.ClipOp r4;
        androidx.ui.graphics.Canvas r6, r7;
        boolean z2, z3, $z7, $z8, $z9;
        androidx.ui.geometry.Size r8, $r18, $r19;
        androidx.ui.graphics.drawscope.DrawTransform $r9;
        androidx.ui.material.ripple.RippleTransition$State $r10, $r11;
        androidx.ui.material.ripple.RippleTransition $r12, $r21, $r26;
        androidx.animation.TransitionAnimation $r13, $r20, $r25;
        androidx.animation.FloatPropKey $r14, $r27;
        androidx.animation.PropKey $r15, $r23, $r28;
        java.lang.Object $r16, $r24, $r29;
        java.lang.Number $r17, $r30;
        androidx.ui.animation.PxPositionPropKey $r22;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation;

        $r1 := @parameter0: androidx.ui.graphics.drawscope.DrawScope;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$receiver");

        specialinvoke r0.<androidx.ui.material.ripple.RippleAnimation: long getAnimationPulse()>();

        $r11 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.ui.material.ripple.RippleTransition$State transitionState>;

        $r10 = <androidx.ui.material.ripple.RippleTransition$State: androidx.ui.material.ripple.RippleTransition$State Initial>;

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, $r10);

        if $z7 == 0 goto label1;

        $z8 = r0.<androidx.ui.material.ripple.RippleAnimation: boolean finishRequested>;

        if $z8 == 0 goto label1;

        $f6 = 1.0F;

        goto label2;

     label1:
        $r13 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.animation.TransitionAnimation animation>;

        $r12 = <androidx.ui.material.ripple.RippleTransition: androidx.ui.material.ripple.RippleTransition INSTANCE>;

        $r14 = virtualinvoke $r12.<androidx.ui.material.ripple.RippleTransition: androidx.animation.FloatPropKey getAlpha()>();

        $r15 = (androidx.animation.PropKey) $r14;

        $r16 = virtualinvoke $r13.<androidx.animation.TransitionAnimation: java.lang.Object get(androidx.animation.PropKey)>($r15);

        $r17 = (java.lang.Number) $r16;

        $f6 = virtualinvoke $r17.<java.lang.Number: float floatValue()>();

     label2:
        f0 = $f6;

        $r20 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.animation.TransitionAnimation animation>;

        $r21 = <androidx.ui.material.ripple.RippleTransition: androidx.ui.material.ripple.RippleTransition INSTANCE>;

        $r22 = virtualinvoke $r21.<androidx.ui.material.ripple.RippleTransition: androidx.ui.animation.PxPositionPropKey getCenter()>();

        $r23 = (androidx.animation.PropKey) $r22;

        $r24 = virtualinvoke $r20.<androidx.animation.TransitionAnimation: java.lang.Object get(androidx.animation.PropKey)>($r23);

        r2 = (androidx.ui.geometry.Offset) $r24;

        $r25 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.animation.TransitionAnimation animation>;

        $r26 = <androidx.ui.material.ripple.RippleTransition: androidx.ui.material.ripple.RippleTransition INSTANCE>;

        $r27 = virtualinvoke $r26.<androidx.ui.material.ripple.RippleTransition: androidx.animation.FloatPropKey getRadius()>();

        $r28 = (androidx.animation.PropKey) $r27;

        $r29 = virtualinvoke $r25.<androidx.animation.TransitionAnimation: java.lang.Object get(androidx.animation.PropKey)>($r28);

        $r30 = (java.lang.Number) $r29;

        f1 = virtualinvoke $r30.<java.lang.Number: float floatValue()>();

        $f7 = staticinvoke <androidx.ui.graphics.Color: float getAlpha-impl(long)>(l0);

        $f8 = $f7 * f0;

        l1 = staticinvoke <androidx.ui.graphics.Color: long copy-impl$default(long,float,float,float,float,int,java.lang.Object)>(l0, $f8, 0.0F, 0.0F, 0.0F, 14, null);

        $z9 = r0.<androidx.ui.material.ripple.RippleAnimation: boolean clipped>;

        if $z9 == 0 goto label3;

        f2 = 0.0F;

        f3 = 0.0F;

        $r18 = virtualinvoke $r1.<androidx.ui.graphics.drawscope.DrawScope: androidx.ui.geometry.Size getSize()>();

        f4 = virtualinvoke $r18.<androidx.ui.geometry.Size: float getWidth()>();

        $r19 = virtualinvoke $r1.<androidx.ui.graphics.drawscope.DrawScope: androidx.ui.geometry.Size getSize()>();

        f5 = virtualinvoke $r19.<androidx.ui.geometry.Size: float getHeight()>();

        r4 = <androidx.ui.graphics.ClipOp: androidx.ui.graphics.ClipOp intersect>;

        r6 = virtualinvoke $r1.<androidx.ui.graphics.drawscope.DrawScope: androidx.ui.graphics.Canvas getCanvas()>();

        z2 = 0;

        z3 = 0;

        r7 = r6;

        r8 = virtualinvoke $r1.<androidx.ui.graphics.drawscope.DrawScope: androidx.ui.geometry.Size getSize()>();

        interfaceinvoke r7.<androidx.ui.graphics.Canvas: void save()>();

        $r9 = virtualinvoke $r1.<androidx.ui.graphics.drawscope.DrawScope: androidx.ui.graphics.drawscope.DrawTransform getTransform()>();

        interfaceinvoke $r9.<androidx.ui.graphics.drawscope.DrawTransform: void clipRect(float,float,float,float,androidx.ui.graphics.ClipOp)>(f2, f3, f4, f5, r4);

        staticinvoke <androidx.ui.graphics.drawscope.DrawScope: void drawCircle-UNeD5NE$default(androidx.ui.graphics.drawscope.DrawScope,long,float,androidx.ui.geometry.Offset,float,androidx.ui.graphics.drawscope.DrawStyle,androidx.ui.graphics.ColorFilter,androidx.ui.graphics.BlendMode,int,java.lang.Object)>($r1, l1, f1, r2, 0.0F, null, null, null, 120, null);

        interfaceinvoke r7.<androidx.ui.graphics.Canvas: void restore()>();

        virtualinvoke $r1.<androidx.ui.graphics.drawscope.DrawScope: void setSize(androidx.ui.geometry.Size)>(r8);

        goto label4;

     label3:
        staticinvoke <androidx.ui.graphics.drawscope.DrawScope: void drawCircle-UNeD5NE$default(androidx.ui.graphics.drawscope.DrawScope,long,float,androidx.ui.geometry.Offset,float,androidx.ui.graphics.drawscope.DrawStyle,androidx.ui.graphics.ColorFilter,androidx.ui.graphics.BlendMode,int,java.lang.Object)>($r1, l1, f1, r2, 0.0F, null, null, null, 120, null);

     label4:
        return;
    }

    public static final long access$getAnimationPulse(androidx.ui.material.ripple.RippleAnimation)
    {
        androidx.ui.material.ripple.RippleAnimation $r0;
        long $l0;

        $r0 := @parameter0: androidx.ui.material.ripple.RippleAnimation;

        $l0 = specialinvoke $r0.<androidx.ui.material.ripple.RippleAnimation: long getAnimationPulse()>();

        return $l0;
    }

    public static final void access$setAnimationPulse(androidx.ui.material.ripple.RippleAnimation, long)
    {
        androidx.ui.material.ripple.RippleAnimation $r0;
        long l0;

        $r0 := @parameter0: androidx.ui.material.ripple.RippleAnimation;

        l0 := @parameter1: long;

        specialinvoke $r0.<androidx.ui.material.ripple.RippleAnimation: void setAnimationPulse(long)>(l0);

        return;
    }

    public static final void access$setTransitionState$p(androidx.ui.material.ripple.RippleAnimation, androidx.ui.material.ripple.RippleTransition$State)
    {
        androidx.ui.material.ripple.RippleAnimation r0;
        androidx.ui.material.ripple.RippleTransition$State r1;

        r0 := @parameter0: androidx.ui.material.ripple.RippleAnimation;

        r1 := @parameter1: androidx.ui.material.ripple.RippleTransition$State;

        r0.<androidx.ui.material.ripple.RippleAnimation: androidx.ui.material.ripple.RippleTransition$State transitionState> = r1;

        return;
    }

    public static final androidx.ui.material.ripple.RippleTransition$State access$getTransitionState$p(androidx.ui.material.ripple.RippleAnimation)
    {
        androidx.ui.material.ripple.RippleAnimation r0;
        androidx.ui.material.ripple.RippleTransition$State $r1;

        r0 := @parameter0: androidx.ui.material.ripple.RippleAnimation;

        $r1 = r0.<androidx.ui.material.ripple.RippleAnimation: androidx.ui.material.ripple.RippleTransition$State transitionState>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function1 access$getOnAnimationFinished$p(androidx.ui.material.ripple.RippleAnimation)
    {
        androidx.ui.material.ripple.RippleAnimation r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @parameter0: androidx.ui.material.ripple.RippleAnimation;

        $r1 = r0.<androidx.ui.material.ripple.RippleAnimation: kotlin.jvm.functions.Function1 onAnimationFinished>;

        return $r1;
    }

    public static final void <clinit>()
    {
        kotlin.reflect.KProperty[] r0;
        kotlin.jvm.internal.MutablePropertyReference1Impl $r1;
        kotlin.reflect.KClass $r2;
        kotlin.reflect.KDeclarationContainer $r3;
        kotlin.jvm.internal.MutablePropertyReference1 $r4;
        kotlin.reflect.KMutableProperty1 $r5;
        kotlin.reflect.KProperty $r6;

        r0 = newarray (kotlin.reflect.KProperty)[1];

        $r1 = new kotlin.jvm.internal.MutablePropertyReference1Impl;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/ui/material/ripple/RippleAnimation;");

        $r3 = (kotlin.reflect.KDeclarationContainer) $r2;

        specialinvoke $r1.<kotlin.jvm.internal.MutablePropertyReference1Impl: void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)>($r3, "animationPulse", "getAnimationPulse()J");

        $r4 = (kotlin.jvm.internal.MutablePropertyReference1) $r1;

        $r5 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1)>($r4);

        $r6 = (kotlin.reflect.KProperty) $r5;

        r0[0] = $r6;

        <androidx.ui.material.ripple.RippleAnimation: kotlin.reflect.KProperty[] $$delegatedProperties> = r0;

        return;
    }

androidx.ui.material.ripple.RippleAnimation$1
<androidx.ui.material.ripple.RippleAnimation$1: androidx.ui.material.ripple.RippleAnimation $this>
    void <init>(androidx.ui.material.ripple.RippleAnimation)
    {
        androidx.ui.material.ripple.RippleAnimation$1 r0;
        androidx.ui.material.ripple.RippleAnimation $r1;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation$1;

        $r1 := @parameter0: androidx.ui.material.ripple.RippleAnimation;

        r0.<androidx.ui.material.ripple.RippleAnimation$1: androidx.ui.material.ripple.RippleAnimation $this> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.ui.material.ripple.RippleAnimation$1 r0;
        androidx.ui.material.ripple.RippleAnimation r1;
        long l0, $l1;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation$1;

        r1 = r0.<androidx.ui.material.ripple.RippleAnimation$1: androidx.ui.material.ripple.RippleAnimation $this>;

        l0 = staticinvoke <androidx.ui.material.ripple.RippleAnimation: long access$getAnimationPulse(androidx.ui.material.ripple.RippleAnimation)>(r1);

        $l1 = l0 + 1L;

        staticinvoke <androidx.ui.material.ripple.RippleAnimation: void access$setAnimationPulse(androidx.ui.material.ripple.RippleAnimation,long)>(r1, $l1);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.ui.material.ripple.RippleAnimation$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation$1;

        virtualinvoke r0.<androidx.ui.material.ripple.RippleAnimation$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.ui.material.ripple.RippleAnimation$2
<androidx.ui.material.ripple.RippleAnimation$2: androidx.ui.material.ripple.RippleAnimation $this>
    void <init>(androidx.ui.material.ripple.RippleAnimation)
    {
        androidx.ui.material.ripple.RippleAnimation$2 r0;
        androidx.ui.material.ripple.RippleAnimation $r1;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation$2;

        $r1 := @parameter0: androidx.ui.material.ripple.RippleAnimation;

        r0.<androidx.ui.material.ripple.RippleAnimation$2: androidx.ui.material.ripple.RippleAnimation $this> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.ui.material.ripple.RippleTransition$State)
    {
        androidx.ui.material.ripple.RippleAnimation$2 r0;
        androidx.ui.material.ripple.RippleTransition$State r1, $r4, $r5;
        androidx.ui.material.ripple.RippleAnimation $r2, $r3, $r6, $r8;
        boolean $z0;
        kotlin.jvm.functions.Function1 $r7;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation$2;

        r1 := @parameter0: androidx.ui.material.ripple.RippleTransition$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "stage");

        $r2 = r0.<androidx.ui.material.ripple.RippleAnimation$2: androidx.ui.material.ripple.RippleAnimation $this>;

        staticinvoke <androidx.ui.material.ripple.RippleAnimation: void access$setTransitionState$p(androidx.ui.material.ripple.RippleAnimation,androidx.ui.material.ripple.RippleTransition$State)>($r2, r1);

        $r3 = r0.<androidx.ui.material.ripple.RippleAnimation$2: androidx.ui.material.ripple.RippleAnimation $this>;

        $r4 = staticinvoke <androidx.ui.material.ripple.RippleAnimation: androidx.ui.material.ripple.RippleTransition$State access$getTransitionState$p(androidx.ui.material.ripple.RippleAnimation)>($r3);

        $r5 = <androidx.ui.material.ripple.RippleTransition$State: androidx.ui.material.ripple.RippleTransition$State Finished>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z0 == 0 goto label1;

        $r6 = r0.<androidx.ui.material.ripple.RippleAnimation$2: androidx.ui.material.ripple.RippleAnimation $this>;

        $r7 = staticinvoke <androidx.ui.material.ripple.RippleAnimation: kotlin.jvm.functions.Function1 access$getOnAnimationFinished$p(androidx.ui.material.ripple.RippleAnimation)>($r6);

        $r8 = r0.<androidx.ui.material.ripple.RippleAnimation$2: androidx.ui.material.ripple.RippleAnimation $this>;

        interfaceinvoke $r7.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r8);

     label1:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.ui.material.ripple.RippleAnimation$2 r0;
        java.lang.Object r1;
        androidx.ui.material.ripple.RippleTransition$State $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.ui.material.ripple.RippleAnimation$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.ui.material.ripple.RippleTransition$State) r1;

        virtualinvoke r0.<androidx.ui.material.ripple.RippleAnimation$2: void invoke(androidx.ui.material.ripple.RippleTransition$State)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

