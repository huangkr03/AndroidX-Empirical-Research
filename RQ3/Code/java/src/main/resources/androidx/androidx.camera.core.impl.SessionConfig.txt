androidx.camera.core.impl.SessionConfig
<androidx.camera.core.impl.SessionConfig: java.util.List mOutputConfigs>
<androidx.camera.core.impl.SessionConfig: java.util.List mDeviceStateCallbacks>
<androidx.camera.core.impl.SessionConfig: java.util.List mSessionStateCallbacks>
<androidx.camera.core.impl.SessionConfig: java.util.List mSingleCameraCaptureCallbacks>
<androidx.camera.core.impl.SessionConfig: java.util.List mErrorListeners>
<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig mRepeatingCaptureConfig>
<androidx.camera.core.impl.SessionConfig: android.hardware.camera2.params.InputConfiguration mInputConfiguration>
    void <init>(java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, androidx.camera.core.impl.CaptureConfig, android.hardware.camera2.params.InputConfiguration)
    {
        androidx.camera.core.impl.SessionConfig r0;
        java.util.List r1, r2, r3, r4, r5, $r8, $r9, $r10, $r11;
        androidx.camera.core.impl.CaptureConfig r6;
        android.hardware.camera2.params.InputConfiguration r7;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: java.util.List;

        r6 := @parameter5: androidx.camera.core.impl.CaptureConfig;

        r7 := @parameter6: android.hardware.camera2.params.InputConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.impl.SessionConfig: java.util.List mOutputConfigs> = r1;

        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        r0.<androidx.camera.core.impl.SessionConfig: java.util.List mDeviceStateCallbacks> = $r8;

        $r9 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r3);

        r0.<androidx.camera.core.impl.SessionConfig: java.util.List mSessionStateCallbacks> = $r9;

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r4);

        r0.<androidx.camera.core.impl.SessionConfig: java.util.List mSingleCameraCaptureCallbacks> = $r10;

        $r11 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r5);

        r0.<androidx.camera.core.impl.SessionConfig: java.util.List mErrorListeners> = $r11;

        r0.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig mRepeatingCaptureConfig> = r6;

        r0.<androidx.camera.core.impl.SessionConfig: android.hardware.camera2.params.InputConfiguration mInputConfiguration> = r7;

        return;
    }

    public static androidx.camera.core.impl.SessionConfig defaultEmptySessionConfig()
    {
        androidx.camera.core.impl.SessionConfig $r0;
        java.util.ArrayList $r1, $r2, $r3, $r4, $r5;
        androidx.camera.core.impl.CaptureConfig$Builder $r6;
        androidx.camera.core.impl.CaptureConfig $r7;

        $r0 = new androidx.camera.core.impl.SessionConfig;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(0);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(0);

        $r6 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke $r6.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        $r7 = virtualinvoke $r6.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        specialinvoke $r0.<androidx.camera.core.impl.SessionConfig: void <init>(java.util.List,java.util.List,java.util.List,java.util.List,java.util.List,androidx.camera.core.impl.CaptureConfig,android.hardware.camera2.params.InputConfiguration)>($r1, $r2, $r3, $r4, $r5, $r7, null);

        return $r0;
    }

    public android.hardware.camera2.params.InputConfiguration getInputConfiguration()
    {
        androidx.camera.core.impl.SessionConfig r0;
        android.hardware.camera2.params.InputConfiguration $r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: android.hardware.camera2.params.InputConfiguration mInputConfiguration>;

        return $r1;
    }

    public java.util.List getSurfaces()
    {
        androidx.camera.core.impl.SessionConfig r0;
        java.util.ArrayList r1, $r6;
        java.util.Iterator r2, r4;
        androidx.camera.core.impl.SessionConfig$OutputConfig r3;
        androidx.camera.core.impl.DeferrableSurface r5, $r10;
        java.util.List $r7, $r8, $r11;
        boolean $z0, $z2;
        java.lang.Object $r9, $r12;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = r0.<androidx.camera.core.impl.SessionConfig: java.util.List mOutputConfigs>;

        r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.SessionConfig$OutputConfig) $r9;

        $r10 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$OutputConfig: androidx.camera.core.impl.DeferrableSurface getSurface()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$OutputConfig: java.util.List getSharedSurfaces()>();

        r4 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.camera.core.impl.DeferrableSurface) $r12;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label2;

     label3:
        goto label1;

     label4:
        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r8;
    }

    public java.util.List getOutputConfigs()
    {
        androidx.camera.core.impl.SessionConfig r0;
        java.util.List $r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: java.util.List mOutputConfigs>;

        return $r1;
    }

    public androidx.camera.core.impl.Config getImplementationOptions()
    {
        androidx.camera.core.impl.SessionConfig r0;
        androidx.camera.core.impl.CaptureConfig $r1;
        androidx.camera.core.impl.Config $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig mRepeatingCaptureConfig>;

        $r2 = virtualinvoke $r1.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        return $r2;
    }

    public int getTemplateType()
    {
        androidx.camera.core.impl.SessionConfig r0;
        androidx.camera.core.impl.CaptureConfig $r1;
        int $i0;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig mRepeatingCaptureConfig>;

        $i0 = virtualinvoke $r1.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        return $i0;
    }

    public java.util.List getDeviceStateCallbacks()
    {
        androidx.camera.core.impl.SessionConfig r0;
        java.util.List $r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: java.util.List mDeviceStateCallbacks>;

        return $r1;
    }

    public java.util.List getSessionStateCallbacks()
    {
        androidx.camera.core.impl.SessionConfig r0;
        java.util.List $r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: java.util.List mSessionStateCallbacks>;

        return $r1;
    }

    public java.util.List getRepeatingCameraCaptureCallbacks()
    {
        androidx.camera.core.impl.SessionConfig r0;
        androidx.camera.core.impl.CaptureConfig $r1;
        java.util.List $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig mRepeatingCaptureConfig>;

        $r2 = virtualinvoke $r1.<androidx.camera.core.impl.CaptureConfig: java.util.List getCameraCaptureCallbacks()>();

        return $r2;
    }

    public java.util.List getErrorListeners()
    {
        androidx.camera.core.impl.SessionConfig r0;
        java.util.List $r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: java.util.List mErrorListeners>;

        return $r1;
    }

    public java.util.List getSingleCameraCaptureCallbacks()
    {
        androidx.camera.core.impl.SessionConfig r0;
        java.util.List $r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: java.util.List mSingleCameraCaptureCallbacks>;

        return $r1;
    }

    public androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()
    {
        androidx.camera.core.impl.SessionConfig r0;
        androidx.camera.core.impl.CaptureConfig $r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig mRepeatingCaptureConfig>;

        return $r1;
    }

androidx.camera.core.impl.SessionConfig$BaseBuilder
<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.Set mOutputConfigs>
<androidx.camera.core.impl.SessionConfig$BaseBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>
<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.List mDeviceStateCallbacks>
<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.List mSessionStateCallbacks>
<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.List mErrorListeners>
<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.List mSingleCameraCaptureCallbacks>
<androidx.camera.core.impl.SessionConfig$BaseBuilder: android.hardware.camera2.params.InputConfiguration mInputConfiguration>
    void <init>()
    {
        androidx.camera.core.impl.SessionConfig$BaseBuilder r0;
        java.util.LinkedHashSet $r1;
        androidx.camera.core.impl.CaptureConfig$Builder $r2;
        java.util.ArrayList $r3, $r4, $r5, $r6;

        r0 := @this: androidx.camera.core.impl.SessionConfig$BaseBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        r0.<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.Set mOutputConfigs> = $r1;

        $r2 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke $r2.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        r0.<androidx.camera.core.impl.SessionConfig$BaseBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.List mDeviceStateCallbacks> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.List mSessionStateCallbacks> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.List mErrorListeners> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.core.impl.SessionConfig$BaseBuilder: java.util.List mSingleCameraCaptureCallbacks> = $r6;

        return;
    }

androidx.camera.core.impl.SessionConfig$Builder
    public void <init>()
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        specialinvoke r0.<androidx.camera.core.impl.SessionConfig$BaseBuilder: void <init>()>();

        return;
    }

    public static androidx.camera.core.impl.SessionConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)
    {
        androidx.camera.core.impl.UseCaseConfig r0;
        androidx.camera.core.impl.SessionConfig$OptionUnpacker r1;
        androidx.camera.core.impl.SessionConfig$Builder r2, $r3;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.String $r7, $r8, $r10;

        r0 := @parameter0: androidx.camera.core.impl.UseCaseConfig;

        r1 = interfaceinvoke r0.<androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.SessionConfig$OptionUnpacker getSessionOptionUnpacker(androidx.camera.core.impl.SessionConfig$OptionUnpacker)>(null);

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Implementation is missing option unpacker for ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r8 = interfaceinvoke r0.<androidx.camera.core.impl.UseCaseConfig: java.lang.String getTargetName(java.lang.String)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = new androidx.camera.core.impl.SessionConfig$Builder;

        specialinvoke $r3.<androidx.camera.core.impl.SessionConfig$Builder: void <init>()>();

        r2 = $r3;

        interfaceinvoke r1.<androidx.camera.core.impl.SessionConfig$OptionUnpacker: void unpack(androidx.camera.core.impl.UseCaseConfig,androidx.camera.core.impl.SessionConfig$Builder)>(r0, r2);

        return r2;
    }

    public androidx.camera.core.impl.SessionConfig$Builder setInputConfiguration(android.hardware.camera2.params.InputConfiguration)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        android.hardware.camera2.params.InputConfiguration r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: android.hardware.camera2.params.InputConfiguration;

        r0.<androidx.camera.core.impl.SessionConfig$Builder: android.hardware.camera2.params.InputConfiguration mInputConfiguration> = r1;

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder setTemplateType(int)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        int i0;
        androidx.camera.core.impl.CaptureConfig$Builder $r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r1.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>(i0);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addTag(java.lang.String, java.lang.Object)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        java.lang.String r1;
        java.lang.Object r2;
        androidx.camera.core.impl.CaptureConfig$Builder $r3;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r3.<androidx.camera.core.impl.CaptureConfig$Builder: void addTag(java.lang.String,java.lang.Object)>(r1, r2);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addDeviceStateCallback(android.hardware.camera2.CameraDevice$StateCallback)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        android.hardware.camera2.CameraDevice$StateCallback r1;
        java.util.List $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: android.hardware.camera2.CameraDevice$StateCallback;

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mDeviceStateCallbacks>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r3 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mDeviceStateCallbacks>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addAllDeviceStateCallbacks(java.util.Collection)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        android.hardware.camera2.CameraDevice$StateCallback r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.hardware.camera2.CameraDevice$StateCallback) $r4;

        virtualinvoke r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addDeviceStateCallback(android.hardware.camera2.CameraDevice$StateCallback)>(r3);

        goto label1;

     label2:
        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addSessionStateCallback(android.hardware.camera2.CameraCaptureSession$StateCallback)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        android.hardware.camera2.CameraCaptureSession$StateCallback r1;
        java.util.List $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession$StateCallback;

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSessionStateCallbacks>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r3 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSessionStateCallbacks>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addAllSessionStateCallbacks(java.util.List)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        java.util.List r1;
        java.util.Iterator r2;
        android.hardware.camera2.CameraCaptureSession$StateCallback r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.hardware.camera2.CameraCaptureSession$StateCallback) $r4;

        virtualinvoke r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addSessionStateCallback(android.hardware.camera2.CameraCaptureSession$StateCallback)>(r3);

        goto label1;

     label2:
        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addRepeatingCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.CameraCaptureCallback r1;
        androidx.camera.core.impl.CaptureConfig$Builder $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r2.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r1);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addAllRepeatingCameraCaptureCallbacks(java.util.Collection)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        java.util.Collection r1;
        androidx.camera.core.impl.CaptureConfig$Builder $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r2.<androidx.camera.core.impl.CaptureConfig$Builder: void addAllCameraCaptureCallbacks(java.util.Collection)>(r1);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.CameraCaptureCallback r1;
        androidx.camera.core.impl.CaptureConfig$Builder $r2;
        java.util.List $r3, $r4;
        boolean $z0;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r2.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r1);

        $r3 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSingleCameraCaptureCallbacks>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSingleCameraCaptureCallbacks>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addAllCameraCaptureCallbacks(java.util.Collection)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.CameraCaptureCallback r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        androidx.camera.core.impl.CaptureConfig$Builder $r5;
        java.util.List $r6, $r7;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CameraCaptureCallback) $r4;

        $r5 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r5.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r3);

        $r6 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSingleCameraCaptureCallbacks>;

        $z1 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

        $r7 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSingleCameraCaptureCallbacks>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        return r0;
    }

    public boolean removeCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.CameraCaptureCallback r1;
        boolean z0, z1, $z2;
        androidx.camera.core.impl.CaptureConfig$Builder $r2;
        java.util.List $r3;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        z0 = virtualinvoke $r2.<androidx.camera.core.impl.CaptureConfig$Builder: boolean removeCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r1);

        $r3 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSingleCameraCaptureCallbacks>;

        z1 = interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

        if z0 != 0 goto label1;

        if z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public java.util.List getSingleCameraCaptureCallbacks()
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        java.util.List $r1, $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSingleCameraCaptureCallbacks>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addErrorListener(androidx.camera.core.impl.SessionConfig$ErrorListener)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.SessionConfig$ErrorListener r1;
        java.util.List $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$ErrorListener;

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mErrorListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addSurface(androidx.camera.core.impl.DeferrableSurface)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.DeferrableSurface r1;
        androidx.camera.core.impl.SessionConfig$OutputConfig r2;
        androidx.camera.core.impl.SessionConfig$OutputConfig$Builder $r3;
        java.util.Set $r4;
        androidx.camera.core.impl.CaptureConfig$Builder $r5;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        $r3 = staticinvoke <androidx.camera.core.impl.SessionConfig$OutputConfig: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder builder(androidx.camera.core.impl.DeferrableSurface)>(r1);

        r2 = virtualinvoke $r3.<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig build()>();

        $r4 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.Set mOutputConfigs>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r5 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r5.<androidx.camera.core.impl.CaptureConfig$Builder: void addSurface(androidx.camera.core.impl.DeferrableSurface)>(r1);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addOutputConfig(androidx.camera.core.impl.SessionConfig$OutputConfig)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.SessionConfig$OutputConfig r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.DeferrableSurface r3, $r6;
        java.util.Set $r4;
        androidx.camera.core.impl.CaptureConfig$Builder $r5, $r9;
        java.util.List $r7;
        boolean $z1;
        java.lang.Object $r8;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$OutputConfig;

        $r4 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.Set mOutputConfigs>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r5 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        $r6 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$OutputConfig: androidx.camera.core.impl.DeferrableSurface getSurface()>();

        virtualinvoke $r5.<androidx.camera.core.impl.CaptureConfig$Builder: void addSurface(androidx.camera.core.impl.DeferrableSurface)>($r6);

        $r7 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$OutputConfig: java.util.List getSharedSurfaces()>();

        r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.DeferrableSurface) $r8;

        $r9 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r9.<androidx.camera.core.impl.CaptureConfig$Builder: void addSurface(androidx.camera.core.impl.DeferrableSurface)>(r3);

        goto label1;

     label2:
        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addNonRepeatingSurface(androidx.camera.core.impl.DeferrableSurface)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.DeferrableSurface r1;
        androidx.camera.core.impl.SessionConfig$OutputConfig r2;
        androidx.camera.core.impl.SessionConfig$OutputConfig$Builder $r3;
        java.util.Set $r4;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        $r3 = staticinvoke <androidx.camera.core.impl.SessionConfig$OutputConfig: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder builder(androidx.camera.core.impl.DeferrableSurface)>(r1);

        r2 = virtualinvoke $r3.<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig build()>();

        $r4 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.Set mOutputConfigs>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r2);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder removeSurface(androidx.camera.core.impl.DeferrableSurface)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.DeferrableSurface r1, $r8;
        java.util.Iterator r2;
        androidx.camera.core.impl.SessionConfig$OutputConfig r3, r9;
        java.util.Set $r4, $r6;
        boolean $z0, $z2;
        androidx.camera.core.impl.CaptureConfig$Builder $r5;
        java.lang.Object $r7;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        r9 = null;

        $r4 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.Set mOutputConfigs>;

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.SessionConfig$OutputConfig) $r7;

        $r8 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$OutputConfig: androidx.camera.core.impl.DeferrableSurface getSurface()>();

        $z2 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        r9 = r3;

        goto label3;

     label2:
        goto label1;

     label3:
        if r9 == null goto label4;

        $r6 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.Set mOutputConfigs>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r9);

     label4:
        $r5 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r5.<androidx.camera.core.impl.CaptureConfig$Builder: void removeSurface(androidx.camera.core.impl.DeferrableSurface)>(r1);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder clearSurfaces()
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        java.util.Set $r1;
        androidx.camera.core.impl.CaptureConfig$Builder $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.Set mOutputConfigs>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r2.<androidx.camera.core.impl.CaptureConfig$Builder: void clearSurfaces()>();

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder setImplementationOptions(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.Config r1;
        androidx.camera.core.impl.CaptureConfig$Builder $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.Config;

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r2.<androidx.camera.core.impl.CaptureConfig$Builder: void setImplementationOptions(androidx.camera.core.impl.Config)>(r1);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig$Builder addImplementationOptions(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.Config r1;
        androidx.camera.core.impl.CaptureConfig$Builder $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.Config;

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r2.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>(r1);

        return r0;
    }

    public androidx.camera.core.impl.SessionConfig build()
    {
        androidx.camera.core.impl.SessionConfig$Builder r0;
        androidx.camera.core.impl.SessionConfig $r1;
        java.util.ArrayList $r2;
        java.util.Set $r3;
        androidx.camera.core.impl.CaptureConfig$Builder $r4;
        java.util.List $r5, $r6, $r7, $r8;
        androidx.camera.core.impl.CaptureConfig $r9;
        android.hardware.camera2.params.InputConfiguration $r10;

        r0 := @this: androidx.camera.core.impl.SessionConfig$Builder;

        $r1 = new androidx.camera.core.impl.SessionConfig;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.Set mOutputConfigs>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r5 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mDeviceStateCallbacks>;

        $r6 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSessionStateCallbacks>;

        $r7 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mSingleCameraCaptureCallbacks>;

        $r8 = r0.<androidx.camera.core.impl.SessionConfig$Builder: java.util.List mErrorListeners>;

        $r4 = r0.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        $r9 = virtualinvoke $r4.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        $r10 = r0.<androidx.camera.core.impl.SessionConfig$Builder: android.hardware.camera2.params.InputConfiguration mInputConfiguration>;

        specialinvoke $r1.<androidx.camera.core.impl.SessionConfig: void <init>(java.util.List,java.util.List,java.util.List,java.util.List,java.util.List,androidx.camera.core.impl.CaptureConfig,android.hardware.camera2.params.InputConfiguration)>($r2, $r5, $r6, $r7, $r8, $r9, $r10);

        return $r1;
    }

androidx.camera.core.impl.SessionConfig$ErrorListener
<androidx.camera.core.impl.SessionConfig$ErrorListener: void onError(androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError)>
androidx.camera.core.impl.SessionConfig$OptionUnpacker
<androidx.camera.core.impl.SessionConfig$OptionUnpacker: void unpack(androidx.camera.core.impl.UseCaseConfig,androidx.camera.core.impl.SessionConfig$Builder)>
androidx.camera.core.impl.SessionConfig$OutputConfig$Builder
    public void <init>()
    {
        androidx.camera.core.impl.SessionConfig$OutputConfig$Builder r0;

        r0 := @this: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setSurface(androidx.camera.core.impl.DeferrableSurface)>
<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setSharedSurfaces(java.util.List)>
<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setPhysicalCameraId(java.lang.String)>
<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setSurfaceGroupId(int)>
<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig build()>
androidx.camera.core.impl.SessionConfig$OutputConfig
<androidx.camera.core.impl.SessionConfig$OutputConfig: int SURFACE_GROUP_ID_NONE>
    public void <init>()
    {
        androidx.camera.core.impl.SessionConfig$OutputConfig r0;

        r0 := @this: androidx.camera.core.impl.SessionConfig$OutputConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

<androidx.camera.core.impl.SessionConfig$OutputConfig: androidx.camera.core.impl.DeferrableSurface getSurface()>
<androidx.camera.core.impl.SessionConfig$OutputConfig: java.util.List getSharedSurfaces()>
<androidx.camera.core.impl.SessionConfig$OutputConfig: java.lang.String getPhysicalCameraId()>
<androidx.camera.core.impl.SessionConfig$OutputConfig: int getSurfaceGroupId()>
    public static androidx.camera.core.impl.SessionConfig$OutputConfig$Builder builder(androidx.camera.core.impl.DeferrableSurface)
    {
        androidx.camera.core.impl.DeferrableSurface r0;
        androidx.camera.core.impl.AutoValue_SessionConfig_OutputConfig$Builder $r1;
        androidx.camera.core.impl.SessionConfig$OutputConfig$Builder $r2, $r4, $r5, $r6;
        java.util.List $r3;

        r0 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        $r1 = new androidx.camera.core.impl.AutoValue_SessionConfig_OutputConfig$Builder;

        specialinvoke $r1.<androidx.camera.core.impl.AutoValue_SessionConfig_OutputConfig$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<androidx.camera.core.impl.AutoValue_SessionConfig_OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setSurface(androidx.camera.core.impl.DeferrableSurface)>(r0);

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = virtualinvoke $r2.<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setSharedSurfaces(java.util.List)>($r3);

        $r5 = virtualinvoke $r4.<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setPhysicalCameraId(java.lang.String)>(null);

        $r6 = virtualinvoke $r5.<androidx.camera.core.impl.SessionConfig$OutputConfig$Builder: androidx.camera.core.impl.SessionConfig$OutputConfig$Builder setSurfaceGroupId(int)>(-1);

        return $r6;
    }

androidx.camera.core.impl.SessionConfig$SessionError
<androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError SESSION_ERROR_SURFACE_NEEDS_RESET>
<androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError SESSION_ERROR_UNKNOWN>
<androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError[] $VALUES>
    public static androidx.camera.core.impl.SessionConfig$SessionError[] values()
    {
        androidx.camera.core.impl.SessionConfig$SessionError[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.core.impl.SessionConfig$SessionError[]) $r1;

        return $r2;
    }

    public static androidx.camera.core.impl.SessionConfig$SessionError valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.core.impl.SessionConfig$SessionError $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/core/impl/SessionConfig$SessionError;", r0);

        $r2 = (androidx.camera.core.impl.SessionConfig$SessionError) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.core.impl.SessionConfig$SessionError r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.core.impl.SessionConfig$SessionError;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.core.impl.SessionConfig$SessionError $r0, $r1, $r3, $r4;
        androidx.camera.core.impl.SessionConfig$SessionError[] $r2;

        $r0 = new androidx.camera.core.impl.SessionConfig$SessionError;

        specialinvoke $r0.<androidx.camera.core.impl.SessionConfig$SessionError: void <init>(java.lang.String,int)>("SESSION_ERROR_SURFACE_NEEDS_RESET", 0);

        <androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError SESSION_ERROR_SURFACE_NEEDS_RESET> = $r0;

        $r1 = new androidx.camera.core.impl.SessionConfig$SessionError;

        specialinvoke $r1.<androidx.camera.core.impl.SessionConfig$SessionError: void <init>(java.lang.String,int)>("SESSION_ERROR_UNKNOWN", 1);

        <androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError SESSION_ERROR_UNKNOWN> = $r1;

        $r2 = newarray (androidx.camera.core.impl.SessionConfig$SessionError)[2];

        $r3 = <androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError SESSION_ERROR_SURFACE_NEEDS_RESET>;

        $r2[0] = $r3;

        $r4 = <androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError SESSION_ERROR_UNKNOWN>;

        $r2[1] = $r4;

        <androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError[] $VALUES> = $r2;

        return;
    }

androidx.camera.core.impl.SessionConfig$ValidatingBuilder
<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List SUPPORTED_TEMPLATE_PRIORITY>
<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.lang.String TAG>
<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.internal.compat.workaround.SurfaceSorter mSurfaceSorter>
<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean mValid>
<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean mTemplateSet>
    public void <init>()
    {
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r0;
        androidx.camera.core.internal.compat.workaround.SurfaceSorter $r1;

        r0 := @this: androidx.camera.core.impl.SessionConfig$ValidatingBuilder;

        specialinvoke r0.<androidx.camera.core.impl.SessionConfig$BaseBuilder: void <init>()>();

        $r1 = new androidx.camera.core.internal.compat.workaround.SurfaceSorter;

        specialinvoke $r1.<androidx.camera.core.internal.compat.workaround.SurfaceSorter: void <init>()>();

        r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.internal.compat.workaround.SurfaceSorter mSurfaceSorter> = $r1;

        r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean mValid> = 1;

        r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean mTemplateSet> = 0;

        return;
    }

    public void addImplementationOption(androidx.camera.core.impl.Config$Option, java.lang.Object)
    {
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r0;
        androidx.camera.core.impl.Config$Option r1;
        java.lang.Object r2;
        androidx.camera.core.impl.CaptureConfig$Builder $r3;

        r0 := @this: androidx.camera.core.impl.SessionConfig$ValidatingBuilder;

        r1 := @parameter0: androidx.camera.core.impl.Config$Option;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r3.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>(r1, r2);

        return;
    }

    public void add(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r0;
        androidx.camera.core.impl.SessionConfig r1;
        androidx.camera.core.impl.CaptureConfig r2, $r5;
        androidx.camera.core.impl.TagBundle r3;
        java.lang.String r4;
        int $i0, $i1, $i2, $i3;
        androidx.camera.core.impl.CaptureConfig$Builder $r6, $r11, $r20, $r24, $r26, $r29, $r30;
        java.util.List $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r19, $r22, $r23;
        android.hardware.camera2.params.InputConfiguration $r17, $r28;
        java.util.Set $r18, $r21, $r25;
        boolean $z6;
        androidx.camera.core.impl.Config $r27;

        r0 := @this: androidx.camera.core.impl.SessionConfig$ValidatingBuilder;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        r2 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        $i0 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        if $i0 == -1 goto label1;

        r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean mTemplateSet> = 1;

        $r29 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        $i1 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        $r30 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        $i2 = virtualinvoke $r30.<androidx.camera.core.impl.CaptureConfig$Builder: int getTemplateType()>();

        $i3 = specialinvoke r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: int selectTemplateType(int,int)>($i1, $i2);

        virtualinvoke $r29.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>($i3);

     label1:
        $r5 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        r3 = virtualinvoke $r5.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.TagBundle getTagBundle()>();

        $r6 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r6.<androidx.camera.core.impl.CaptureConfig$Builder: void addAllTags(androidx.camera.core.impl.TagBundle)>(r3);

        $r7 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List mDeviceStateCallbacks>;

        $r8 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getDeviceStateCallbacks()>();

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        $r9 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List mSessionStateCallbacks>;

        $r10 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSessionStateCallbacks()>();

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        $r11 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        $r12 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getRepeatingCameraCaptureCallbacks()>();

        virtualinvoke $r11.<androidx.camera.core.impl.CaptureConfig$Builder: void addAllCameraCaptureCallbacks(java.util.Collection)>($r12);

        $r13 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List mSingleCameraCaptureCallbacks>;

        $r14 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSingleCameraCaptureCallbacks()>();

        interfaceinvoke $r13.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        $r15 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List mErrorListeners>;

        $r16 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getErrorListeners()>();

        interfaceinvoke $r15.<java.util.List: boolean addAll(java.util.Collection)>($r16);

        $r17 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>();

        if $r17 == null goto label2;

        $r28 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>();

        r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: android.hardware.camera2.params.InputConfiguration mInputConfiguration> = $r28;

     label2:
        $r18 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.Set mOutputConfigs>;

        $r19 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getOutputConfigs()>();

        interfaceinvoke $r18.<java.util.Set: boolean addAll(java.util.Collection)>($r19);

        $r20 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        $r21 = virtualinvoke $r20.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set getSurfaces()>();

        $r22 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: java.util.List getSurfaces()>();

        interfaceinvoke $r21.<java.util.Set: boolean addAll(java.util.Collection)>($r22);

        $r23 = specialinvoke r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List getSurfaces()>();

        $r24 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        $r25 = virtualinvoke $r24.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set getSurfaces()>();

        $z6 = interfaceinvoke $r23.<java.util.List: boolean containsAll(java.util.Collection)>($r25);

        if $z6 != 0 goto label3;

        r4 = "Invalid configuration due to capture request surfaces are not a subset of surfaces";

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ValidatingBuilder", r4);

        r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean mValid> = 0;

     label3:
        $r26 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        $r27 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        virtualinvoke $r26.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r27);

        return;
    }

    private java.util.List getSurfaces()
    {
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r0;
        java.util.ArrayList r1, $r6;
        java.util.Iterator r2, r4;
        androidx.camera.core.impl.SessionConfig$OutputConfig r3;
        androidx.camera.core.impl.DeferrableSurface r5, $r9;
        java.util.Set $r7;
        boolean $z0, $z2;
        java.lang.Object $r8, $r11;
        java.util.List $r10;

        r0 := @this: androidx.camera.core.impl.SessionConfig$ValidatingBuilder;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.Set mOutputConfigs>;

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.SessionConfig$OutputConfig) $r8;

        $r9 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$OutputConfig: androidx.camera.core.impl.DeferrableSurface getSurface()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$OutputConfig: java.util.List getSharedSurfaces()>();

        r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.camera.core.impl.DeferrableSurface) $r11;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label2;

     label3:
        goto label1;

     label4:
        return r1;
    }

    public void clearSurfaces()
    {
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r0;
        java.util.Set $r1;
        androidx.camera.core.impl.CaptureConfig$Builder $r2;

        r0 := @this: androidx.camera.core.impl.SessionConfig$ValidatingBuilder;

        $r1 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.Set mOutputConfigs>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        $r2 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        virtualinvoke $r2.<androidx.camera.core.impl.CaptureConfig$Builder: void clearSurfaces()>();

        return;
    }

    public boolean isValid()
    {
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r0;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.camera.core.impl.SessionConfig$ValidatingBuilder;

        $z0 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean mTemplateSet>;

        if $z0 == 0 goto label1;

        $z1 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean mValid>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public androidx.camera.core.impl.SessionConfig build()
    {
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r0;
        java.util.ArrayList r1, $r2;
        boolean $z0;
        java.util.Set $r3;
        androidx.camera.core.internal.compat.workaround.SurfaceSorter $r4;
        androidx.camera.core.impl.SessionConfig $r5;
        androidx.camera.core.impl.CaptureConfig$Builder $r6;
        java.util.List $r7, $r8, $r9, $r10;
        androidx.camera.core.impl.CaptureConfig $r11;
        android.hardware.camera2.params.InputConfiguration $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: androidx.camera.core.impl.SessionConfig$ValidatingBuilder;

        $z0 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean mValid>;

        if $z0 != 0 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported session configuration combination");

        throw $r13;

     label1:
        $r2 = new java.util.ArrayList;

        $r3 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.Set mOutputConfigs>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r1 = $r2;

        $r4 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.internal.compat.workaround.SurfaceSorter mSurfaceSorter>;

        virtualinvoke $r4.<androidx.camera.core.internal.compat.workaround.SurfaceSorter: void sort(java.util.List)>(r1);

        $r5 = new androidx.camera.core.impl.SessionConfig;

        $r7 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List mDeviceStateCallbacks>;

        $r8 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List mSessionStateCallbacks>;

        $r9 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List mSingleCameraCaptureCallbacks>;

        $r10 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List mErrorListeners>;

        $r6 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.CaptureConfig$Builder mCaptureConfigBuilder>;

        $r11 = virtualinvoke $r6.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        $r12 = r0.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: android.hardware.camera2.params.InputConfiguration mInputConfiguration>;

        specialinvoke $r5.<androidx.camera.core.impl.SessionConfig: void <init>(java.util.List,java.util.List,java.util.List,java.util.List,java.util.List,androidx.camera.core.impl.CaptureConfig,android.hardware.camera2.params.InputConfiguration)>(r1, $r7, $r8, $r9, $r10, $r11, $r12);

        return $r5;
    }

    private int selectTemplateType(int, int)
    {
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r0;
        int i0, i1, $i2, $i3, $i4;
        java.util.List $r1, $r3;
        java.lang.Integer $r2, $r4;

        r0 := @this: androidx.camera.core.impl.SessionConfig$ValidatingBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = <androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List SUPPORTED_TEMPLATE_PRIORITY>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $i2 = interfaceinvoke $r1.<java.util.List: int indexOf(java.lang.Object)>($r2);

        $r3 = <androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List SUPPORTED_TEMPLATE_PRIORITY>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $i3 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>($r4);

        if $i2 < $i3 goto label1;

        $i4 = i0;

        goto label2;

     label1:
        $i4 = i1;

     label2:
        return $i4;
    }

    static void <clinit>()
    {
        java.lang.Integer[] $r0;
        java.lang.Integer $r1, $r2, $r3;
        java.util.List $r4;

        $r0 = newarray (java.lang.Integer)[3];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r0[1] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r0[2] = $r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <androidx.camera.core.impl.SessionConfig$ValidatingBuilder: java.util.List SUPPORTED_TEMPLATE_PRIORITY> = $r4;

        return;
    }

