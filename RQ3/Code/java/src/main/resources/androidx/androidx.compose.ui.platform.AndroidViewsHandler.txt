androidx.compose.ui.platform.AndroidViewsHandler
<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap holderToLayoutNode>
<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap layoutNodeToHolder>
    public void <init>(android.content.Context)
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        android.content.Context r1;
        java.util.HashMap $r2, $r3;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context)>(r1);

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidViewsHandler: void setClipChildren(boolean)>(0);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap holderToLayoutNode> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap layoutNodeToHolder> = $r3;

        return;
    }

    public final java.util.HashMap getHolderToLayoutNode()
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        java.util.HashMap $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        $r1 = r0.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap holderToLayoutNode>;

        return $r1;
    }

    public final java.util.HashMap getLayoutNodeToHolder()
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        java.util.HashMap $r1;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        $r1 = r0.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap layoutNodeToHolder>;

        return $r1;
    }

    protected void onMeasure(int, int)
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Iterable $r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        androidx.compose.ui.viewinterop.AndroidViewHolder r4;
        java.util.HashMap $r5;
        java.util.Set $r6;
        boolean $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r7, $r9;
        java.lang.String $r8, $r10, $r11, $r12;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        if $i2 != 1073741824 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != 0 goto label3;

        $r11 = "Failed requirement.";

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label3:
        $i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i1);

        if $i3 != 1073741824 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        if $z3 != 0 goto label6;

        $r12 = "Failed requirement.";

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label6:
        $i4 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        $i5 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidViewsHandler: void setMeasuredDimension(int,int)>($i4, $i5);

        $r5 = r0.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap holderToLayoutNode>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "holderToLayoutNode.keys");

        $r1 = (java.lang.Iterable) $r6;

        r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.compose.ui.viewinterop.AndroidViewHolder) r3;

        virtualinvoke r4.<androidx.compose.ui.viewinterop.AndroidViewHolder: void remeasure()>();

        goto label7;

     label8:
        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        boolean z0, $z3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.lang.Iterable $r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        androidx.compose.ui.viewinterop.AndroidViewHolder r4;
        java.util.HashMap $r5;
        java.util.Set $r6;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r5 = r0.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap holderToLayoutNode>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "holderToLayoutNode.keys");

        $r1 = (java.lang.Iterable) $r6;

        r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.compose.ui.viewinterop.AndroidViewHolder) r3;

        $i4 = virtualinvoke r4.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getLeft()>();

        $i5 = virtualinvoke r4.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getTop()>();

        $i6 = virtualinvoke r4.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getRight()>();

        $i7 = virtualinvoke r4.<androidx.compose.ui.viewinterop.AndroidViewHolder: int getBottom()>();

        virtualinvoke r4.<androidx.compose.ui.viewinterop.AndroidViewHolder: void layout(int,int,int,int)>($i4, $i5, $i6, $i7);

        goto label1;

     label2:
        return;
    }

    public void onDescendantInvalidated(android.view.View, android.view.View)
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        android.view.View r1, r2;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "child");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "target");

        return;
    }

    public java.lang.Void invalidateChildInParent(int[], android.graphics.Rect)
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        int[] r1;
        android.graphics.Rect r2;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.graphics.Rect;

        return null;
    }

    public final void drawView(androidx.compose.ui.viewinterop.AndroidViewHolder, android.graphics.Canvas)
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        androidx.compose.ui.viewinterop.AndroidViewHolder r1;
        android.graphics.Canvas r2;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        r1 := @parameter0: androidx.compose.ui.viewinterop.AndroidViewHolder;

        r2 := @parameter1: android.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "canvas");

        virtualinvoke r1.<androidx.compose.ui.viewinterop.AndroidViewHolder: void draw(android.graphics.Canvas)>(r2);

        return;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        android.view.MotionEvent r1;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        r1 := @parameter0: android.view.MotionEvent;

        return 1;
    }

    public void requestLayout()
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        int i0, i1;
        android.view.View r1, $r3;
        androidx.compose.ui.node.LayoutNode r2;
        java.util.HashMap $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        $r3 = (android.view.View) r0;

        virtualinvoke r0.<androidx.compose.ui.platform.AndroidViewsHandler: void cleanupLayoutState(android.view.View)>($r3);

        i1 = 0;

        i0 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidViewsHandler: int getChildCount()>();

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidViewsHandler: android.view.View getChildAt(int)>(i1);

        $r4 = r0.<androidx.compose.ui.platform.AndroidViewsHandler: java.util.HashMap holderToLayoutNode>;

        $r5 = (java.util.Map) $r4;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (androidx.compose.ui.node.LayoutNode) $r6;

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutRequested()>();

        if $z0 == 0 goto label2;

        if r2 == null goto label2;

        staticinvoke <androidx.compose.ui.node.LayoutNode: void requestRemeasure$ui_release$default(androidx.compose.ui.node.LayoutNode,boolean,int,java.lang.Object)>(r2, 0, 1, null);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public boolean shouldDelayChildPressedState()
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        return 0;
    }

    public volatile android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect)
    {
        androidx.compose.ui.platform.AndroidViewsHandler r0;
        int[] r1;
        android.graphics.Rect r2;
        java.lang.Void $r3;
        android.view.ViewParent $r4;

        r0 := @this: androidx.compose.ui.platform.AndroidViewsHandler;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.graphics.Rect;

        $r3 = virtualinvoke r0.<androidx.compose.ui.platform.AndroidViewsHandler: java.lang.Void invalidateChildInParent(int[],android.graphics.Rect)>(r1, r2);

        $r4 = (android.view.ViewParent) $r3;

        return $r4;
    }

