androidx.camera.camera2.internal.Camera2RequestProcessor
<androidx.camera.camera2.internal.Camera2RequestProcessor: java.lang.String TAG>
<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.camera2.internal.CaptureSession mCaptureSession>
<androidx.camera.camera2.internal.Camera2RequestProcessor: java.util.List mProcessorSurfaces>
<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean mIsClosed>
<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.core.impl.SessionConfig mSessionConfig>
    public void <init>(androidx.camera.camera2.internal.CaptureSession, java.util.List)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        androidx.camera.camera2.internal.CaptureSession r1;
        java.util.List r2, $r11;
        androidx.camera.camera2.internal.CaptureSession$State $r3, $r4, $r7;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9;
        java.util.ArrayList $r10;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSession;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean mIsClosed> = 0;

        $r4 = r1.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r3 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENED>;

        if $r4 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CaptureSession state must be OPENED. Current state:");

        $r7 = r1.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r9);

        r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.camera2.internal.CaptureSession mCaptureSession> = r1;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        $r11 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r10);

        r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: java.util.List mProcessorSurfaces> = $r11;

        return;
    }

    public void close()
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean mIsClosed> = 1;

        return;
    }

    public void updateSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        androidx.camera.core.impl.SessionConfig r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.core.impl.SessionConfig mSessionConfig> = r1;

        return;
    }

    private boolean areRequestsValid(java.util.List)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        java.util.List r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.RequestProcessor$Request r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.RequestProcessor$Request) $r4;

        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean isRequestValid(androidx.camera.core.impl.RequestProcessor$Request)>(r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    private boolean isRequestValid(androidx.camera.core.impl.RequestProcessor$Request)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        androidx.camera.core.impl.RequestProcessor$Request r1;
        java.util.Iterator r2;
        java.lang.Integer r3;
        java.util.List $r4, $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        int $i0;
        androidx.camera.core.impl.DeferrableSurface $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r1 := @parameter0: androidx.camera.core.impl.RequestProcessor$Request;

        $r4 = interfaceinvoke r1.<androidx.camera.core.impl.RequestProcessor$Request: java.util.List getTargetOutputConfigIds()>();

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Camera2RequestProcessor", "Unable to submit the RequestProcessor.Request: empty targetOutputConfigIds");

        return 0;

     label1:
        $r5 = interfaceinvoke r1.<androidx.camera.core.impl.RequestProcessor$Request: java.util.List getTargetOutputConfigIds()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $r7 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.core.impl.DeferrableSurface findSurface(int)>($i0);

        if $r7 != null goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to submit the RequestProcessor.Request: targetOutputConfigId(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not a valid id");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Camera2RequestProcessor", $r12);

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }

    public int submit(androidx.camera.core.impl.RequestProcessor$Request, androidx.camera.core.impl.RequestProcessor$Callback)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        androidx.camera.core.impl.RequestProcessor$Request r1;
        androidx.camera.core.impl.RequestProcessor$Callback r2;
        androidx.camera.core.impl.RequestProcessor$Request[] $r3;
        java.util.List $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r1 := @parameter0: androidx.camera.core.impl.RequestProcessor$Request;

        r2 := @parameter1: androidx.camera.core.impl.RequestProcessor$Callback;

        $r3 = newarray (androidx.camera.core.impl.RequestProcessor$Request)[1];

        $r3[0] = r1;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $i0 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: int submit(java.util.List,androidx.camera.core.impl.RequestProcessor$Callback)>($r4, r2);

        return $i0;
    }

    public int submit(java.util.List, androidx.camera.core.impl.RequestProcessor$Callback)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        java.util.List r1, $r16;
        androidx.camera.core.impl.RequestProcessor$Callback r2;
        java.util.ArrayList r3, $r9;
        java.util.Iterator r4, r7;
        androidx.camera.core.impl.RequestProcessor$Request r5;
        androidx.camera.core.impl.CaptureConfig$Builder r6, $r12;
        java.lang.Integer r8;
        boolean $z0, $z1, $z2, $z3, z5;
        androidx.camera.camera2.internal.CaptureSession $r10;
        int $i0, $i1, $i2;
        java.lang.Object $r11, $r18;
        androidx.camera.core.impl.Config $r13;
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper $r14;
        androidx.camera.camera2.internal.CaptureCallbackContainer $r15;
        androidx.camera.core.impl.CaptureConfig $r17;
        androidx.camera.core.impl.DeferrableSurface $r19;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.camera.core.impl.RequestProcessor$Callback;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean mIsClosed>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean areRequestsValid(java.util.List)>(r1);

        if $z1 != 0 goto label2;

     label1:
        return -1;

     label2:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r3 = $r9;

        z5 = 1;

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.camera.core.impl.RequestProcessor$Request) $r11;

        $r12 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke $r12.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        r6 = $r12;

        $i1 = interfaceinvoke r5.<androidx.camera.core.impl.RequestProcessor$Request: int getTemplateId()>();

        virtualinvoke r6.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>($i1);

        $r13 = interfaceinvoke r5.<androidx.camera.core.impl.RequestProcessor$Request: androidx.camera.core.impl.Config getParameters()>();

        virtualinvoke r6.<androidx.camera.core.impl.CaptureConfig$Builder: void setImplementationOptions(androidx.camera.core.impl.Config)>($r13);

        $r14 = new androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        specialinvoke $r14.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: void <init>(androidx.camera.camera2.internal.Camera2RequestProcessor,androidx.camera.core.impl.RequestProcessor$Request,androidx.camera.core.impl.RequestProcessor$Callback,boolean)>(r0, r5, r2, z5);

        $r15 = staticinvoke <androidx.camera.camera2.internal.CaptureCallbackContainer: androidx.camera.camera2.internal.CaptureCallbackContainer create(android.hardware.camera2.CameraCaptureSession$CaptureCallback)>($r14);

        virtualinvoke r6.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r15);

        z5 = 0;

        $r16 = interfaceinvoke r5.<androidx.camera.core.impl.RequestProcessor$Request: java.util.List getTargetOutputConfigIds()>();

        r7 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r18 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Integer) $r18;

        $i2 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        $r19 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.core.impl.DeferrableSurface findSurface(int)>($i2);

        virtualinvoke r6.<androidx.camera.core.impl.CaptureConfig$Builder: void addSurface(androidx.camera.core.impl.DeferrableSurface)>($r19);

        goto label4;

     label5:
        $r17 = virtualinvoke r6.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        goto label3;

     label6:
        $r10 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.camera2.internal.CaptureSession mCaptureSession>;

        $i0 = virtualinvoke $r10.<androidx.camera.camera2.internal.CaptureSession: int issueBurstCaptureRequest(java.util.List)>(r3);

        return $i0;
    }

    public int setRepeating(androidx.camera.core.impl.RequestProcessor$Request, androidx.camera.core.impl.RequestProcessor$Callback)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        androidx.camera.core.impl.RequestProcessor$Request r1;
        androidx.camera.core.impl.RequestProcessor$Callback r2;
        androidx.camera.core.impl.SessionConfig$Builder r3, $r5;
        java.lang.String r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2;
        androidx.camera.core.impl.Config $r7;
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper $r9;
        androidx.camera.camera2.internal.CaptureCallbackContainer $r10;
        androidx.camera.core.impl.SessionConfig $r12, $r15, $r19, $r21;
        java.util.List $r13, $r20;
        androidx.camera.camera2.internal.CaptureSession $r14;
        java.lang.Object $r16, $r24, $r25, $r27;
        androidx.camera.core.impl.DeferrableSurface $r17;
        androidx.camera.core.impl.CaptureConfig $r22;
        java.util.Set $r23;
        java.util.Iterator r29, r32, r33;
        androidx.camera.core.impl.CameraCaptureCallback r30;
        androidx.camera.core.impl.TagBundle r31;
        java.lang.Integer r34;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r1 := @parameter0: androidx.camera.core.impl.RequestProcessor$Request;

        r2 := @parameter1: androidx.camera.core.impl.RequestProcessor$Callback;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean mIsClosed>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean isRequestValid(androidx.camera.core.impl.RequestProcessor$Request)>(r1);

        if $z1 != 0 goto label2;

     label1:
        return -1;

     label2:
        $r5 = new androidx.camera.core.impl.SessionConfig$Builder;

        specialinvoke $r5.<androidx.camera.core.impl.SessionConfig$Builder: void <init>()>();

        r3 = $r5;

        $i0 = interfaceinvoke r1.<androidx.camera.core.impl.RequestProcessor$Request: int getTemplateId()>();

        virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setTemplateType(int)>($i0);

        $r7 = interfaceinvoke r1.<androidx.camera.core.impl.RequestProcessor$Request: androidx.camera.core.impl.Config getParameters()>();

        virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setImplementationOptions(androidx.camera.core.impl.Config)>($r7);

        $r9 = new androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        specialinvoke $r9.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: void <init>(androidx.camera.camera2.internal.Camera2RequestProcessor,androidx.camera.core.impl.RequestProcessor$Request,androidx.camera.core.impl.RequestProcessor$Callback,boolean)>(r0, r1, r2, 1);

        $r10 = staticinvoke <androidx.camera.camera2.internal.CaptureCallbackContainer: androidx.camera.camera2.internal.CaptureCallbackContainer create(android.hardware.camera2.CameraCaptureSession$CaptureCallback)>($r9);

        virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r10);

        $r12 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        if $r12 == null goto label6;

        $r19 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        $r20 = virtualinvoke $r19.<androidx.camera.core.impl.SessionConfig: java.util.List getRepeatingCameraCaptureCallbacks()>();

        r29 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r27 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (androidx.camera.core.impl.CameraCaptureCallback) $r27;

        virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r30);

        goto label3;

     label4:
        $r21 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        $r22 = virtualinvoke $r21.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        r31 = virtualinvoke $r22.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.TagBundle getTagBundle()>();

        $r23 = virtualinvoke r31.<androidx.camera.core.impl.TagBundle: java.util.Set listKeys()>();

        r32 = interfaceinvoke $r23.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r24 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r24;

        $r25 = virtualinvoke r31.<androidx.camera.core.impl.TagBundle: java.lang.Object getTag(java.lang.String)>(r4);

        virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addTag(java.lang.String,java.lang.Object)>(r4, $r25);

        goto label5;

     label6:
        $r13 = interfaceinvoke r1.<androidx.camera.core.impl.RequestProcessor$Request: java.util.List getTargetOutputConfigIds()>();

        r33 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z4 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label8;

        $r16 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (java.lang.Integer) $r16;

        $i2 = virtualinvoke r34.<java.lang.Integer: int intValue()>();

        $r17 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.core.impl.DeferrableSurface findSurface(int)>($i2);

        virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addSurface(androidx.camera.core.impl.DeferrableSurface)>($r17);

        goto label7;

     label8:
        $r14 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.camera2.internal.CaptureSession mCaptureSession>;

        $r15 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        $i1 = virtualinvoke $r14.<androidx.camera.camera2.internal.CaptureSession: int issueRepeatingCaptureRequests(androidx.camera.core.impl.SessionConfig)>($r15);

        return $i1;
    }

    public void abortCaptures()
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        boolean $z0;
        androidx.camera.camera2.internal.CaptureSession $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean mIsClosed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.camera2.internal.CaptureSession mCaptureSession>;

        virtualinvoke $r1.<androidx.camera.camera2.internal.CaptureSession: void abortCaptures()>();

        return;
    }

    public void stopRepeating()
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        boolean $z0;
        androidx.camera.camera2.internal.CaptureSession $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: boolean mIsClosed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: androidx.camera.camera2.internal.CaptureSession mCaptureSession>;

        virtualinvoke $r1.<androidx.camera.camera2.internal.CaptureSession: void stopRepeating()>();

        return;
    }

    int findOutputConfigId(android.view.Surface)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        android.view.Surface r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.SessionProcessorSurface r3;
        java.lang.Throwable r4, $r9;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6, $r8;
        com.google.common.util.concurrent.ListenableFuture $r7;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r1 := @parameter0: android.view.Surface;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: java.util.List mProcessorSurfaces>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.SessionProcessorSurface) $r6;

     label2:
        $r7 = virtualinvoke r3.<androidx.camera.core.impl.SessionProcessorSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        $r8 = interfaceinvoke $r7.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        if $r8 != r1 goto label4;

        $i0 = virtualinvoke r3.<androidx.camera.core.impl.SessionProcessorSurface: int getOutputConfigId()>();

     label3:
        return $i0;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

     label6:
        goto label1;

     label7:
        return -1;

        catch java.lang.InterruptedException from label2 to label3 with label5;
        catch java.util.concurrent.ExecutionException from label2 to label3 with label5;
    }

    private androidx.camera.core.impl.DeferrableSurface findSurface(int)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor r0;
        int i0, $i1;
        java.util.Iterator r1;
        androidx.camera.core.impl.SessionProcessorSurface r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor: java.util.List mProcessorSurfaces>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.core.impl.SessionProcessorSurface) $r4;

        $i1 = virtualinvoke r2.<androidx.camera.core.impl.SessionProcessorSurface: int getOutputConfigId()>();

        if $i1 != i0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper
<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Callback mCallback>
<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Request mRequest>
<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: boolean mInvokeSequenceCallback>
<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.camera2.internal.Camera2RequestProcessor this$0>
    void <init>(androidx.camera.camera2.internal.Camera2RequestProcessor, androidx.camera.core.impl.RequestProcessor$Request, androidx.camera.core.impl.RequestProcessor$Callback, boolean)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper r0;
        androidx.camera.camera2.internal.Camera2RequestProcessor r1;
        androidx.camera.core.impl.RequestProcessor$Request r2;
        androidx.camera.core.impl.RequestProcessor$Callback r3;
        boolean z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2RequestProcessor;

        r2 := @parameter1: androidx.camera.core.impl.RequestProcessor$Request;

        r3 := @parameter2: androidx.camera.core.impl.RequestProcessor$Callback;

        z0 := @parameter3: boolean;

        r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.camera2.internal.Camera2RequestProcessor this$0> = r1;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Callback mCallback> = r3;

        r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Request mRequest> = r2;

        r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: boolean mInvokeSequenceCallback> = z0;

        return;
    }

    public void onCaptureStarted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, long, long)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        long l0, l1;
        androidx.camera.core.impl.RequestProcessor$Request $r3;
        androidx.camera.core.impl.RequestProcessor$Callback $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Callback mCallback>;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Request mRequest>;

        interfaceinvoke $r4.<androidx.camera.core.impl.RequestProcessor$Callback: void onCaptureStarted(androidx.camera.core.impl.RequestProcessor$Request,long,long)>($r3, l1, l0);

        return;
    }

    public void onCaptureProgressed(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureResult)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.CaptureResult r3;
        androidx.camera.camera2.internal.Camera2CameraCaptureResult $r4;
        androidx.camera.core.impl.RequestProcessor$Callback $r5;
        androidx.camera.core.impl.RequestProcessor$Request $r6;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.CaptureResult;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Callback mCallback>;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Request mRequest>;

        $r4 = new androidx.camera.camera2.internal.Camera2CameraCaptureResult;

        specialinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: void <init>(android.hardware.camera2.CaptureResult)>(r3);

        interfaceinvoke $r5.<androidx.camera.core.impl.RequestProcessor$Callback: void onCaptureProgressed(androidx.camera.core.impl.RequestProcessor$Request,androidx.camera.core.impl.CameraCaptureResult)>($r6, $r4);

        return;
    }

    public void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.TotalCaptureResult r3;
        androidx.camera.camera2.internal.Camera2CameraCaptureResult $r4;
        androidx.camera.core.impl.RequestProcessor$Callback $r5;
        androidx.camera.core.impl.RequestProcessor$Request $r6;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Callback mCallback>;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Request mRequest>;

        $r4 = new androidx.camera.camera2.internal.Camera2CameraCaptureResult;

        specialinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: void <init>(android.hardware.camera2.CaptureResult)>(r3);

        interfaceinvoke $r5.<androidx.camera.core.impl.RequestProcessor$Callback: void onCaptureCompleted(androidx.camera.core.impl.RequestProcessor$Request,androidx.camera.core.impl.CameraCaptureResult)>($r6, $r4);

        return;
    }

    public void onCaptureFailed(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureFailure)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.CaptureFailure r3;
        androidx.camera.camera2.internal.Camera2CameraCaptureFailure $r4;
        androidx.camera.core.impl.CameraCaptureFailure$Reason $r5;
        androidx.camera.core.impl.RequestProcessor$Callback $r6;
        androidx.camera.core.impl.RequestProcessor$Request $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.CaptureFailure;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Callback mCallback>;

        $r7 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Request mRequest>;

        $r4 = new androidx.camera.camera2.internal.Camera2CameraCaptureFailure;

        $r5 = <androidx.camera.core.impl.CameraCaptureFailure$Reason: androidx.camera.core.impl.CameraCaptureFailure$Reason ERROR>;

        specialinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraCaptureFailure: void <init>(androidx.camera.core.impl.CameraCaptureFailure$Reason,android.hardware.camera2.CaptureFailure)>($r5, r3);

        interfaceinvoke $r6.<androidx.camera.core.impl.RequestProcessor$Callback: void onCaptureFailed(androidx.camera.core.impl.RequestProcessor$Request,androidx.camera.core.impl.CameraCaptureFailure)>($r7, $r4);

        return;
    }

    public void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession, int, long)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper r0;
        android.hardware.camera2.CameraCaptureSession r1;
        int i0;
        long l1;
        boolean $z0;
        androidx.camera.core.impl.RequestProcessor$Callback $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: boolean mInvokeSequenceCallback>;

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Callback mCallback>;

        interfaceinvoke $r2.<androidx.camera.core.impl.RequestProcessor$Callback: void onCaptureSequenceCompleted(int,long)>(i0, l1);

     label1:
        return;
    }

    public void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession, int)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper r0;
        android.hardware.camera2.CameraCaptureSession r1;
        int i0;
        boolean $z0;
        androidx.camera.core.impl.RequestProcessor$Callback $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        i0 := @parameter1: int;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: boolean mInvokeSequenceCallback>;

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Callback mCallback>;

        interfaceinvoke $r2.<androidx.camera.core.impl.RequestProcessor$Callback: void onCaptureSequenceAborted(int)>(i0);

     label1:
        return;
    }

    public void onCaptureBufferLost(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.view.Surface, long)
    {
        androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.view.Surface r3;
        long l0;
        androidx.camera.camera2.internal.Camera2RequestProcessor $r4;
        androidx.camera.core.impl.RequestProcessor$Callback $r5;
        androidx.camera.core.impl.RequestProcessor$Request $r6;
        int $i1;

        r0 := @this: androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.view.Surface;

        l0 := @parameter3: long;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Callback mCallback>;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.core.impl.RequestProcessor$Request mRequest>;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2RequestProcessor$Camera2CallbackWrapper: androidx.camera.camera2.internal.Camera2RequestProcessor this$0>;

        $i1 = virtualinvoke $r4.<androidx.camera.camera2.internal.Camera2RequestProcessor: int findOutputConfigId(android.view.Surface)>(r3);

        interfaceinvoke $r5.<androidx.camera.core.impl.RequestProcessor$Callback: void onCaptureBufferLost(androidx.camera.core.impl.RequestProcessor$Request,long,int)>($r6, l0, $i1);

        return;
    }

