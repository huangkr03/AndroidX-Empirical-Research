androidx.credentials.CredentialProviderFrameworkImpl
<androidx.credentials.CredentialProviderFrameworkImpl: androidx.credentials.CredentialProviderFrameworkImpl$Companion Companion>
<androidx.credentials.CredentialProviderFrameworkImpl: android.credentials.CredentialManager credentialManager>
<androidx.credentials.CredentialProviderFrameworkImpl: java.lang.String TAG>
    public void <init>(android.content.Context)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.credentials.CredentialManager $r3;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("credential");

        $r3 = (android.credentials.CredentialManager) $r2;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl: android.credentials.CredentialManager credentialManager> = $r3;

        return;
    }

    public void onGetCredential(androidx.credentials.GetCredentialRequest, android.app.Activity, android.os.CancellationSignal, java.util.concurrent.Executor, androidx.credentials.CredentialManagerCallback)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        androidx.credentials.GetCredentialRequest r1;
        android.app.Activity r2;
        android.os.CancellationSignal r3;
        java.util.concurrent.Executor r4, $r14;
        androidx.credentials.CredentialManagerCallback r5;
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1 r6, $r9;
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1 $r7;
        kotlin.jvm.functions.Function0 $r8;
        boolean $z0;
        android.credentials.CredentialManager $r10;
        android.credentials.GetCredentialRequest $r11;
        java.util.concurrent.ExecutorService $r12;
        android.os.OutcomeReceiver $r13;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: androidx.credentials.GetCredentialRequest;

        r2 := @parameter1: android.app.Activity;

        r3 := @parameter2: android.os.CancellationSignal;

        r4 := @parameter3: java.util.concurrent.Executor;

        r5 := @parameter4: androidx.credentials.CredentialManagerCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "request");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "activity");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "executor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "callback");

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CredManProvService", "In CredentialProviderFrameworkImpl onGetCredential");

        $r7 = new androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1;

        specialinvoke $r7.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1: void <init>(androidx.credentials.CredentialManagerCallback)>(r5);

        $r8 = (kotlin.jvm.functions.Function0) $r7;

        $z0 = specialinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl: boolean isCredmanDisabled(kotlin.jvm.functions.Function0)>($r8);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r9 = new androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1;

        specialinvoke $r9.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: void <init>(androidx.credentials.CredentialManagerCallback,androidx.credentials.CredentialProviderFrameworkImpl)>(r5, r0);

        r6 = $r9;

        $r10 = r0.<androidx.credentials.CredentialProviderFrameworkImpl: android.credentials.CredentialManager credentialManager>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r10);

        $r11 = specialinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl: android.credentials.GetCredentialRequest convertGetRequestToFrameworkClass(androidx.credentials.GetCredentialRequest)>(r1);

        $r12 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        $r14 = (java.util.concurrent.Executor) $r12;

        $r13 = (android.os.OutcomeReceiver) r6;

        virtualinvoke $r10.<android.credentials.CredentialManager: void getCredential(android.credentials.GetCredentialRequest,android.app.Activity,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.OutcomeReceiver)>($r11, r2, r3, $r14, $r13);

        return;
    }

    private final boolean isCredmanDisabled(kotlin.jvm.functions.Function0)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        kotlin.jvm.functions.Function0 r1;
        android.credentials.CredentialManager $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r2 = r0.<androidx.credentials.CredentialProviderFrameworkImpl: android.credentials.CredentialManager credentialManager>;

        if $r2 != null goto label1;

        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return 1;

     label1:
        return 0;
    }

    public void onCreateCredential(androidx.credentials.CreateCredentialRequest, android.app.Activity, android.os.CancellationSignal, java.util.concurrent.Executor, androidx.credentials.CredentialManagerCallback)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        androidx.credentials.CreateCredentialRequest r1;
        android.app.Activity r2;
        android.os.CancellationSignal r3;
        java.util.concurrent.Executor r4, $r14;
        androidx.credentials.CredentialManagerCallback r5;
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1 r6, $r9;
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1 $r7;
        kotlin.jvm.functions.Function0 $r8;
        boolean $z0;
        android.credentials.CredentialManager $r10;
        android.credentials.CreateCredentialRequest $r11;
        java.util.concurrent.ExecutorService $r12;
        android.os.OutcomeReceiver $r13;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: androidx.credentials.CreateCredentialRequest;

        r2 := @parameter1: android.app.Activity;

        r3 := @parameter2: android.os.CancellationSignal;

        r4 := @parameter3: java.util.concurrent.Executor;

        r5 := @parameter4: androidx.credentials.CredentialManagerCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "request");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "activity");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "executor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "callback");

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CredManProvService", "In CredentialProviderFrameworkImpl onCreateCredential");

        $r7 = new androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1;

        specialinvoke $r7.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1: void <init>(androidx.credentials.CredentialManagerCallback)>(r5);

        $r8 = (kotlin.jvm.functions.Function0) $r7;

        $z0 = specialinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl: boolean isCredmanDisabled(kotlin.jvm.functions.Function0)>($r8);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r9 = new androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1;

        specialinvoke $r9.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: void <init>(androidx.credentials.CredentialManagerCallback,androidx.credentials.CreateCredentialRequest,androidx.credentials.CredentialProviderFrameworkImpl)>(r5, r1, r0);

        r6 = $r9;

        $r10 = r0.<androidx.credentials.CredentialProviderFrameworkImpl: android.credentials.CredentialManager credentialManager>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r10);

        $r11 = specialinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl: android.credentials.CreateCredentialRequest convertCreateRequestToFrameworkClass(androidx.credentials.CreateCredentialRequest,android.app.Activity)>(r1, r2);

        $r12 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        $r14 = (java.util.concurrent.Executor) $r12;

        $r13 = (android.os.OutcomeReceiver) r6;

        virtualinvoke $r10.<android.credentials.CredentialManager: void createCredential(android.credentials.CreateCredentialRequest,android.app.Activity,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.OutcomeReceiver)>($r11, r2, r3, $r14, $r13);

        return;
    }

    private final android.credentials.CreateCredentialRequest convertCreateRequestToFrameworkClass(androidx.credentials.CreateCredentialRequest, android.app.Activity)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        androidx.credentials.CreateCredentialRequest r1;
        android.app.Activity r2;
        android.credentials.CreateCredentialRequest$Builder r3, $r4, $r10, $r11, $r12;
        android.content.Context $r5;
        androidx.credentials.internal.FrameworkImplHelper$Companion $r6;
        android.os.Bundle $r7, $r8;
        java.lang.String $r9;
        boolean $z0;
        android.credentials.CreateCredentialRequest $r13;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: androidx.credentials.CreateCredentialRequest;

        r2 := @parameter1: android.app.Activity;

        $r4 = new android.credentials.CreateCredentialRequest$Builder;

        $r6 = <androidx.credentials.internal.FrameworkImplHelper: androidx.credentials.internal.FrameworkImplHelper$Companion Companion>;

        $r5 = (android.content.Context) r2;

        $r7 = virtualinvoke $r6.<androidx.credentials.internal.FrameworkImplHelper$Companion: android.os.Bundle getFinalCreateCredentialData(androidx.credentials.CreateCredentialRequest,android.content.Context)>(r1, $r5);

        $r8 = virtualinvoke r1.<androidx.credentials.CreateCredentialRequest: android.os.Bundle getCandidateQueryData()>();

        specialinvoke $r4.<android.credentials.CreateCredentialRequest$Builder: void <init>(android.os.Bundle,android.os.Bundle)>($r7, $r8);

        $r9 = virtualinvoke r1.<androidx.credentials.CreateCredentialRequest: java.lang.String getType()>();

        $r10 = virtualinvoke $r4.<android.credentials.CreateCredentialRequest$Builder: android.credentials.CreateCredentialRequest$Builder setType(java.lang.String)>($r9);

        $z0 = virtualinvoke r1.<androidx.credentials.CreateCredentialRequest: boolean isSystemProviderRequired()>();

        $r11 = virtualinvoke $r10.<android.credentials.CreateCredentialRequest$Builder: android.credentials.CreateCredentialRequest$Builder setIsSystemProviderRequired(boolean)>($z0);

        $r12 = virtualinvoke $r11.<android.credentials.CreateCredentialRequest$Builder: android.credentials.CreateCredentialRequest$Builder setAlwaysSendAppInfoToProvider(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "Builder(FrameworkImplHel\u2026ndAppInfoToProvider(true)");

        r3 = $r12;

        specialinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl: void setOriginForCreateRequest(androidx.credentials.CreateCredentialRequest,android.credentials.CreateCredentialRequest$Builder)>(r1, r3);

        $r13 = virtualinvoke r3.<android.credentials.CreateCredentialRequest$Builder: android.credentials.CreateCredentialRequest build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "createCredentialRequestBuilder.build()");

        return $r13;
    }

    private final void setOriginForCreateRequest(androidx.credentials.CreateCredentialRequest, android.credentials.CreateCredentialRequest$Builder)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        androidx.credentials.CreateCredentialRequest r1;
        android.credentials.CreateCredentialRequest$Builder r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: androidx.credentials.CreateCredentialRequest;

        r2 := @parameter1: android.credentials.CreateCredentialRequest$Builder;

        $r3 = virtualinvoke r1.<androidx.credentials.CreateCredentialRequest: java.lang.String getOrigin()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke r1.<androidx.credentials.CreateCredentialRequest: java.lang.String getOrigin()>();

        virtualinvoke r2.<android.credentials.CreateCredentialRequest$Builder: android.credentials.CreateCredentialRequest$Builder setOrigin(java.lang.String)>($r4);

     label1:
        return;
    }

    private final android.credentials.GetCredentialRequest convertGetRequestToFrameworkClass(androidx.credentials.GetCredentialRequest)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        androidx.credentials.GetCredentialRequest r1;
        android.credentials.GetCredentialRequest$Builder r2, $r7;
        java.lang.Iterable $r3;
        java.util.Iterator r4;
        java.lang.Object r5;
        androidx.credentials.CredentialOption r6;
        android.os.Bundle $r8, $r13, $r14;
        java.util.List $r9;
        boolean $z2, $z3;
        android.credentials.GetCredentialRequest $r10;
        android.credentials.CredentialOption $r11;
        java.lang.String $r12;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: androidx.credentials.GetCredentialRequest;

        $r7 = new android.credentials.GetCredentialRequest$Builder;

        $r8 = new android.os.Bundle;

        specialinvoke $r8.<android.os.Bundle: void <init>()>();

        specialinvoke $r7.<android.credentials.GetCredentialRequest$Builder: void <init>(android.os.Bundle)>($r8);

        r2 = $r7;

        $r9 = virtualinvoke r1.<androidx.credentials.GetCredentialRequest: java.util.List getCredentialOptions()>();

        $r3 = (java.lang.Iterable) $r9;

        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.credentials.CredentialOption) r5;

        $r11 = new android.credentials.CredentialOption;

        $r12 = virtualinvoke r6.<androidx.credentials.CredentialOption: java.lang.String getType()>();

        $r13 = virtualinvoke r6.<androidx.credentials.CredentialOption: android.os.Bundle getRequestData()>();

        $r14 = virtualinvoke r6.<androidx.credentials.CredentialOption: android.os.Bundle getCandidateQueryData()>();

        $z3 = virtualinvoke r6.<androidx.credentials.CredentialOption: boolean isSystemProviderRequired()>();

        specialinvoke $r11.<android.credentials.CredentialOption: void <init>(java.lang.String,android.os.Bundle,android.os.Bundle,boolean)>($r12, $r13, $r14, $z3);

        virtualinvoke r2.<android.credentials.GetCredentialRequest$Builder: android.credentials.GetCredentialRequest$Builder addCredentialOption(android.credentials.CredentialOption)>($r11);

        goto label1;

     label2:
        specialinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl: void setOriginForGetRequest(androidx.credentials.GetCredentialRequest,android.credentials.GetCredentialRequest$Builder)>(r1, r2);

        $r10 = virtualinvoke r2.<android.credentials.GetCredentialRequest$Builder: android.credentials.GetCredentialRequest build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "builder.build()");

        return $r10;
    }

    private final void setOriginForGetRequest(androidx.credentials.GetCredentialRequest, android.credentials.GetCredentialRequest$Builder)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        androidx.credentials.GetCredentialRequest r1;
        android.credentials.GetCredentialRequest$Builder r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: androidx.credentials.GetCredentialRequest;

        r2 := @parameter1: android.credentials.GetCredentialRequest$Builder;

        $r3 = virtualinvoke r1.<androidx.credentials.GetCredentialRequest: java.lang.String getOrigin()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke r1.<androidx.credentials.GetCredentialRequest: java.lang.String getOrigin()>();

        virtualinvoke r2.<android.credentials.GetCredentialRequest$Builder: android.credentials.GetCredentialRequest$Builder setOrigin(java.lang.String)>($r4);

     label1:
        return;
    }

    private final android.credentials.ClearCredentialStateRequest createFrameworkClearCredentialRequest()
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        android.credentials.ClearCredentialStateRequest $r1;
        android.os.Bundle $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        $r1 = new android.credentials.ClearCredentialStateRequest;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        specialinvoke $r1.<android.credentials.ClearCredentialStateRequest: void <init>(android.os.Bundle)>($r2);

        return $r1;
    }

    public final androidx.credentials.exceptions.GetCredentialException convertToJetpackGetException$credentials_release(android.credentials.GetCredentialException)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        android.credentials.GetCredentialException r1;
        java.lang.String r2, $r4, $r7, $r10, $r14;
        int $i0;
        boolean $z0, $z1, $z2;
        androidx.credentials.exceptions.NoCredentialException $r3;
        java.lang.CharSequence $r5, $r8, $r11, $r15;
        androidx.credentials.exceptions.GetCredentialCancellationException $r6;
        androidx.credentials.exceptions.GetCredentialInterruptedException $r9;
        androidx.credentials.exceptions.GetCredentialException $r12;
        androidx.credentials.exceptions.GetCredentialUnknownException $r13;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: android.credentials.GetCredentialException;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "error");

        r2 = virtualinvoke r1.<android.credentials.GetCredentialException: java.lang.String getType()>();

        $i0 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -45448328: goto label1;
            case 580557411: goto label3;
            case 627896683: goto label2;
            default: goto label7;
        };

     label1:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.credentials.GetCredentialException.TYPE_INTERRUPTED");

        if $z2 != 0 goto label6;

        goto label7;

     label2:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.credentials.GetCredentialException.TYPE_NO_CREDENTIAL");

        if $z0 != 0 goto label4;

        goto label7;

     label3:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.credentials.GetCredentialException.TYPE_USER_CANCELED");

        if $z1 != 0 goto label5;

        goto label7;

     label4:
        $r3 = new androidx.credentials.exceptions.NoCredentialException;

        $r4 = virtualinvoke r1.<android.credentials.GetCredentialException: java.lang.String getMessage()>();

        $r5 = (java.lang.CharSequence) $r4;

        specialinvoke $r3.<androidx.credentials.exceptions.NoCredentialException: void <init>(java.lang.CharSequence)>($r5);

        $r12 = (androidx.credentials.exceptions.GetCredentialException) $r3;

        goto label8;

     label5:
        $r6 = new androidx.credentials.exceptions.GetCredentialCancellationException;

        $r7 = virtualinvoke r1.<android.credentials.GetCredentialException: java.lang.String getMessage()>();

        $r8 = (java.lang.CharSequence) $r7;

        specialinvoke $r6.<androidx.credentials.exceptions.GetCredentialCancellationException: void <init>(java.lang.CharSequence)>($r8);

        $r12 = (androidx.credentials.exceptions.GetCredentialException) $r6;

        goto label8;

     label6:
        $r9 = new androidx.credentials.exceptions.GetCredentialInterruptedException;

        $r10 = virtualinvoke r1.<android.credentials.GetCredentialException: java.lang.String getMessage()>();

        $r11 = (java.lang.CharSequence) $r10;

        specialinvoke $r9.<androidx.credentials.exceptions.GetCredentialInterruptedException: void <init>(java.lang.CharSequence)>($r11);

        $r12 = (androidx.credentials.exceptions.GetCredentialException) $r9;

        goto label8;

     label7:
        $r13 = new androidx.credentials.exceptions.GetCredentialUnknownException;

        $r14 = virtualinvoke r1.<android.credentials.GetCredentialException: java.lang.String getMessage()>();

        $r15 = (java.lang.CharSequence) $r14;

        specialinvoke $r13.<androidx.credentials.exceptions.GetCredentialUnknownException: void <init>(java.lang.CharSequence)>($r15);

        $r12 = (androidx.credentials.exceptions.GetCredentialException) $r13;

     label8:
        return $r12;
    }

    public final androidx.credentials.exceptions.CreateCredentialException convertToJetpackCreateException$credentials_release(android.credentials.CreateCredentialException)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        android.credentials.CreateCredentialException r1;
        java.lang.String r2, $r4, $r7, $r10, $r14;
        int $i0;
        boolean $z0, $z1, $z2;
        androidx.credentials.exceptions.CreateCredentialNoCreateOptionException $r3;
        java.lang.CharSequence $r5, $r8, $r11, $r15;
        androidx.credentials.exceptions.CreateCredentialInterruptedException $r6;
        androidx.credentials.exceptions.CreateCredentialCancellationException $r9;
        androidx.credentials.exceptions.CreateCredentialException $r12;
        androidx.credentials.exceptions.CreateCredentialUnknownException $r13;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: android.credentials.CreateCredentialException;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "error");

        r2 = virtualinvoke r1.<android.credentials.CreateCredentialException: java.lang.String getType()>();

        $i0 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -2055374133: goto label2;
            case 2092588512: goto label3;
            case 2131915191: goto label1;
            default: goto label7;
        };

     label1:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.credentials.CreateCredentialException.TYPE_NO_CREATE_OPTIONS");

        if $z0 != 0 goto label4;

        goto label7;

     label2:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.credentials.CreateCredentialException.TYPE_USER_CANCELED");

        if $z2 != 0 goto label5;

        goto label7;

     label3:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.credentials.CreateCredentialException.TYPE_INTERRUPTED");

        if $z1 != 0 goto label6;

        goto label7;

     label4:
        $r3 = new androidx.credentials.exceptions.CreateCredentialNoCreateOptionException;

        $r4 = virtualinvoke r1.<android.credentials.CreateCredentialException: java.lang.String getMessage()>();

        $r5 = (java.lang.CharSequence) $r4;

        specialinvoke $r3.<androidx.credentials.exceptions.CreateCredentialNoCreateOptionException: void <init>(java.lang.CharSequence)>($r5);

        $r12 = (androidx.credentials.exceptions.CreateCredentialException) $r3;

        goto label8;

     label5:
        $r9 = new androidx.credentials.exceptions.CreateCredentialCancellationException;

        $r10 = virtualinvoke r1.<android.credentials.CreateCredentialException: java.lang.String getMessage()>();

        $r11 = (java.lang.CharSequence) $r10;

        specialinvoke $r9.<androidx.credentials.exceptions.CreateCredentialCancellationException: void <init>(java.lang.CharSequence)>($r11);

        $r12 = (androidx.credentials.exceptions.CreateCredentialException) $r9;

        goto label8;

     label6:
        $r6 = new androidx.credentials.exceptions.CreateCredentialInterruptedException;

        $r7 = virtualinvoke r1.<android.credentials.CreateCredentialException: java.lang.String getMessage()>();

        $r8 = (java.lang.CharSequence) $r7;

        specialinvoke $r6.<androidx.credentials.exceptions.CreateCredentialInterruptedException: void <init>(java.lang.CharSequence)>($r8);

        $r12 = (androidx.credentials.exceptions.CreateCredentialException) $r6;

        goto label8;

     label7:
        $r13 = new androidx.credentials.exceptions.CreateCredentialUnknownException;

        $r14 = virtualinvoke r1.<android.credentials.CreateCredentialException: java.lang.String getMessage()>();

        $r15 = (java.lang.CharSequence) $r14;

        specialinvoke $r13.<androidx.credentials.exceptions.CreateCredentialUnknownException: void <init>(java.lang.CharSequence)>($r15);

        $r12 = (androidx.credentials.exceptions.CreateCredentialException) $r13;

     label8:
        return $r12;
    }

    public final androidx.credentials.GetCredentialResponse convertGetResponseToJetpackClass$credentials_release(android.credentials.GetCredentialResponse)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        android.credentials.GetCredentialResponse r1;
        android.credentials.Credential r2, $r3;
        androidx.credentials.GetCredentialResponse $r4;
        androidx.credentials.Credential$Companion $r5;
        java.lang.String $r6;
        android.os.Bundle $r7;
        androidx.credentials.Credential $r8;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: android.credentials.GetCredentialResponse;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "response");

        $r3 = virtualinvoke r1.<android.credentials.GetCredentialResponse: android.credentials.Credential getCredential()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "response.credential");

        r2 = $r3;

        $r4 = new androidx.credentials.GetCredentialResponse;

        $r5 = <androidx.credentials.Credential: androidx.credentials.Credential$Companion Companion>;

        $r6 = virtualinvoke r2.<android.credentials.Credential: java.lang.String getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "credential.type");

        $r7 = virtualinvoke r2.<android.credentials.Credential: android.os.Bundle getData()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "credential.data");

        $r8 = virtualinvoke $r5.<androidx.credentials.Credential$Companion: androidx.credentials.Credential createFrom(java.lang.String,android.os.Bundle)>($r6, $r7);

        specialinvoke $r4.<androidx.credentials.GetCredentialResponse: void <init>(androidx.credentials.Credential)>($r8);

        return $r4;
    }

    public boolean isAvailableOnDevice()
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        return 1;
    }

    public void onClearCredential(androidx.credentials.ClearCredentialStateRequest, android.os.CancellationSignal, java.util.concurrent.Executor, androidx.credentials.CredentialManagerCallback)
    {
        androidx.credentials.CredentialProviderFrameworkImpl r0;
        androidx.credentials.ClearCredentialStateRequest r1;
        android.os.CancellationSignal r2;
        java.util.concurrent.Executor r3, $r13;
        androidx.credentials.CredentialManagerCallback r4;
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1 r5, $r8;
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1 $r6;
        kotlin.jvm.functions.Function0 $r7;
        boolean $z0;
        android.credentials.CredentialManager $r9;
        android.credentials.ClearCredentialStateRequest $r10;
        java.util.concurrent.ExecutorService $r11;
        android.os.OutcomeReceiver $r12;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl;

        r1 := @parameter0: androidx.credentials.ClearCredentialStateRequest;

        r2 := @parameter1: android.os.CancellationSignal;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: androidx.credentials.CredentialManagerCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "request");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "executor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "callback");

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CredManProvService", "In CredentialProviderFrameworkImpl onClearCredential");

        $r6 = new androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1;

        specialinvoke $r6.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1: void <init>(androidx.credentials.CredentialManagerCallback)>(r4);

        $r7 = (kotlin.jvm.functions.Function0) $r6;

        $z0 = specialinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl: boolean isCredmanDisabled(kotlin.jvm.functions.Function0)>($r7);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r8 = new androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1;

        specialinvoke $r8.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1: void <init>(androidx.credentials.CredentialManagerCallback)>(r4);

        r5 = $r8;

        $r9 = r0.<androidx.credentials.CredentialProviderFrameworkImpl: android.credentials.CredentialManager credentialManager>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r9);

        $r10 = specialinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl: android.credentials.ClearCredentialStateRequest createFrameworkClearCredentialRequest()>();

        $r11 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        $r13 = (java.util.concurrent.Executor) $r11;

        $r12 = (android.os.OutcomeReceiver) r5;

        virtualinvoke $r9.<android.credentials.CredentialManager: void clearCredentialState(android.credentials.ClearCredentialStateRequest,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.OutcomeReceiver)>($r10, r2, $r13, $r12);

        return;
    }

    static void <clinit>()
    {
        androidx.credentials.CredentialProviderFrameworkImpl$Companion $r0;

        $r0 = new androidx.credentials.CredentialProviderFrameworkImpl$Companion;

        specialinvoke $r0.<androidx.credentials.CredentialProviderFrameworkImpl$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.credentials.CredentialProviderFrameworkImpl: androidx.credentials.CredentialProviderFrameworkImpl$Companion Companion> = $r0;

        return;
    }

androidx.credentials.CredentialProviderFrameworkImpl$Companion
    private void <init>()
    {
        androidx.credentials.CredentialProviderFrameworkImpl$Companion r0;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$Companion: void <init>()>();

        return;
    }

androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1
<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1: androidx.credentials.CredentialManagerCallback $callback>
    void <init>(androidx.credentials.CredentialManagerCallback)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1 r0;
        androidx.credentials.CredentialManagerCallback $r1;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1;

        $r1 := @parameter0: androidx.credentials.CredentialManagerCallback;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1: androidx.credentials.CredentialManagerCallback $callback> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1 r0;
        androidx.credentials.exceptions.ClearCredentialUnsupportedException $r1;
        java.lang.CharSequence $r2;
        androidx.credentials.CredentialManagerCallback $r3;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1;

        $r3 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1: androidx.credentials.CredentialManagerCallback $callback>;

        $r1 = new androidx.credentials.exceptions.ClearCredentialUnsupportedException;

        $r2 = (java.lang.CharSequence) "Your device doesn\'t support credential manager";

        specialinvoke $r1.<androidx.credentials.exceptions.ClearCredentialUnsupportedException: void <init>(java.lang.CharSequence)>($r2);

        interfaceinvoke $r3.<androidx.credentials.CredentialManagerCallback: void onError(java.lang.Object)>($r1);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1;

        virtualinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1
<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback>
    void <init>(androidx.credentials.CredentialManagerCallback)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1 r0;
        androidx.credentials.CredentialManagerCallback $r1;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1;

        $r1 := @parameter0: androidx.credentials.CredentialManagerCallback;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onResult(java.lang.Void)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1 r0;
        java.lang.Void r1;
        androidx.credentials.CredentialManagerCallback $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1;

        r1 := @parameter0: java.lang.Void;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "response");

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CredManProvService", "Clear result returned from framework: ");

        $r2 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback>;

        interfaceinvoke $r2.<androidx.credentials.CredentialManagerCallback: void onResult(java.lang.Object)>(r1);

        return;
    }

    public void onError(android.credentials.ClearCredentialStateException)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1 r0;
        android.credentials.ClearCredentialStateException r1;
        androidx.credentials.exceptions.ClearCredentialUnknownException $r2;
        androidx.credentials.CredentialManagerCallback $r3;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1;

        r1 := @parameter0: android.credentials.ClearCredentialStateException;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "error");

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CredManProvService", "ClearCredentialStateException error returned from framework");

        $r3 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback>;

        $r2 = new androidx.credentials.exceptions.ClearCredentialUnknownException;

        specialinvoke $r2.<androidx.credentials.exceptions.ClearCredentialUnknownException: void <init>(java.lang.CharSequence,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        interfaceinvoke $r3.<androidx.credentials.CredentialManagerCallback: void onError(java.lang.Object)>($r2);

        return;
    }

    public volatile void onResult(java.lang.Object)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1: void onResult(java.lang.Void)>($r2);

        return;
    }

    public volatile void onError(java.lang.Throwable)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1 r0;
        java.lang.Throwable r1;
        android.credentials.ClearCredentialStateException $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = (android.credentials.ClearCredentialStateException) r1;

        virtualinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$onClearCredential$outcome$1: void onError(android.credentials.ClearCredentialStateException)>($r2);

        return;
    }

androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1
<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1: androidx.credentials.CredentialManagerCallback $callback>
    void <init>(androidx.credentials.CredentialManagerCallback)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1 r0;
        androidx.credentials.CredentialManagerCallback $r1;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1;

        $r1 := @parameter0: androidx.credentials.CredentialManagerCallback;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1: androidx.credentials.CredentialManagerCallback $callback> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1 r0;
        androidx.credentials.exceptions.CreateCredentialUnsupportedException $r1;
        java.lang.CharSequence $r2;
        androidx.credentials.CredentialManagerCallback $r3;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1;

        $r3 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1: androidx.credentials.CredentialManagerCallback $callback>;

        $r1 = new androidx.credentials.exceptions.CreateCredentialUnsupportedException;

        $r2 = (java.lang.CharSequence) "Your device doesn\'t support credential manager";

        specialinvoke $r1.<androidx.credentials.exceptions.CreateCredentialUnsupportedException: void <init>(java.lang.CharSequence)>($r2);

        interfaceinvoke $r3.<androidx.credentials.CredentialManagerCallback: void onError(java.lang.Object)>($r1);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1;

        virtualinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1
<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback>
<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CreateCredentialRequest $request>
<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CredentialProviderFrameworkImpl this$0>
    void <init>(androidx.credentials.CredentialManagerCallback, androidx.credentials.CreateCredentialRequest, androidx.credentials.CredentialProviderFrameworkImpl)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1 r0;
        androidx.credentials.CredentialManagerCallback $r1;
        androidx.credentials.CreateCredentialRequest $r2;
        androidx.credentials.CredentialProviderFrameworkImpl $r3;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1;

        $r1 := @parameter0: androidx.credentials.CredentialManagerCallback;

        $r2 := @parameter1: androidx.credentials.CreateCredentialRequest;

        $r3 := @parameter2: androidx.credentials.CredentialProviderFrameworkImpl;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback> = $r1;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CreateCredentialRequest $request> = $r2;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CredentialProviderFrameworkImpl this$0> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onResult(android.credentials.CreateCredentialResponse)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1 r0;
        android.credentials.CreateCredentialResponse r1;
        androidx.credentials.CreateCredentialRequest $r2;
        androidx.credentials.CredentialManagerCallback $r3;
        androidx.credentials.CreateCredentialResponse$Companion $r4;
        java.lang.String $r5;
        android.os.Bundle $r6;
        androidx.credentials.CreateCredentialResponse $r7;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1;

        r1 := @parameter0: android.credentials.CreateCredentialResponse;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "response");

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CredManProvService", "Create Result returned from framework: ");

        $r3 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback>;

        $r4 = <androidx.credentials.CreateCredentialResponse: androidx.credentials.CreateCredentialResponse$Companion Companion>;

        $r2 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CreateCredentialRequest $request>;

        $r5 = virtualinvoke $r2.<androidx.credentials.CreateCredentialRequest: java.lang.String getType()>();

        $r6 = virtualinvoke r1.<android.credentials.CreateCredentialResponse: android.os.Bundle getData()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "response.data");

        $r7 = virtualinvoke $r4.<androidx.credentials.CreateCredentialResponse$Companion: androidx.credentials.CreateCredentialResponse createFrom(java.lang.String,android.os.Bundle)>($r5, $r6);

        interfaceinvoke $r3.<androidx.credentials.CredentialManagerCallback: void onResult(java.lang.Object)>($r7);

        return;
    }

    public void onError(android.credentials.CreateCredentialException)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1 r0;
        android.credentials.CreateCredentialException r1;
        androidx.credentials.CredentialProviderFrameworkImpl $r2;
        androidx.credentials.CredentialManagerCallback $r3;
        androidx.credentials.exceptions.CreateCredentialException $r4;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1;

        r1 := @parameter0: android.credentials.CreateCredentialException;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "error");

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CredManProvService", "CreateCredentialResponse error returned from framework");

        $r3 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback>;

        $r2 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: androidx.credentials.CredentialProviderFrameworkImpl this$0>;

        $r4 = virtualinvoke $r2.<androidx.credentials.CredentialProviderFrameworkImpl: androidx.credentials.exceptions.CreateCredentialException convertToJetpackCreateException$credentials_release(android.credentials.CreateCredentialException)>(r1);

        interfaceinvoke $r3.<androidx.credentials.CredentialManagerCallback: void onError(java.lang.Object)>($r4);

        return;
    }

    public volatile void onResult(java.lang.Object)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1 r0;
        java.lang.Object r1;
        android.credentials.CreateCredentialResponse $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.credentials.CreateCredentialResponse) r1;

        virtualinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: void onResult(android.credentials.CreateCredentialResponse)>($r2);

        return;
    }

    public volatile void onError(java.lang.Throwable)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1 r0;
        java.lang.Throwable r1;
        android.credentials.CreateCredentialException $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = (android.credentials.CreateCredentialException) r1;

        virtualinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$onCreateCredential$outcome$1: void onError(android.credentials.CreateCredentialException)>($r2);

        return;
    }

androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1
<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1: androidx.credentials.CredentialManagerCallback $callback>
    void <init>(androidx.credentials.CredentialManagerCallback)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1 r0;
        androidx.credentials.CredentialManagerCallback $r1;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1;

        $r1 := @parameter0: androidx.credentials.CredentialManagerCallback;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1: androidx.credentials.CredentialManagerCallback $callback> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1 r0;
        androidx.credentials.exceptions.GetCredentialUnsupportedException $r1;
        java.lang.CharSequence $r2;
        androidx.credentials.CredentialManagerCallback $r3;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1;

        $r3 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1: androidx.credentials.CredentialManagerCallback $callback>;

        $r1 = new androidx.credentials.exceptions.GetCredentialUnsupportedException;

        $r2 = (java.lang.CharSequence) "Your device doesn\'t support credential manager";

        specialinvoke $r1.<androidx.credentials.exceptions.GetCredentialUnsupportedException: void <init>(java.lang.CharSequence)>($r2);

        interfaceinvoke $r3.<androidx.credentials.CredentialManagerCallback: void onError(java.lang.Object)>($r1);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1;

        virtualinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1
<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback>
<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: androidx.credentials.CredentialProviderFrameworkImpl this$0>
    void <init>(androidx.credentials.CredentialManagerCallback, androidx.credentials.CredentialProviderFrameworkImpl)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1 r0;
        androidx.credentials.CredentialManagerCallback $r1;
        androidx.credentials.CredentialProviderFrameworkImpl $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1;

        $r1 := @parameter0: androidx.credentials.CredentialManagerCallback;

        $r2 := @parameter1: androidx.credentials.CredentialProviderFrameworkImpl;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback> = $r1;

        r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: androidx.credentials.CredentialProviderFrameworkImpl this$0> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onResult(android.credentials.GetCredentialResponse)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1 r0;
        android.credentials.GetCredentialResponse r1;
        androidx.credentials.CredentialProviderFrameworkImpl $r2;
        androidx.credentials.CredentialManagerCallback $r3;
        androidx.credentials.GetCredentialResponse $r4;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1;

        r1 := @parameter0: android.credentials.GetCredentialResponse;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "response");

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CredManProvService", "GetCredentialResponse returned from framework");

        $r3 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback>;

        $r2 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: androidx.credentials.CredentialProviderFrameworkImpl this$0>;

        $r4 = virtualinvoke $r2.<androidx.credentials.CredentialProviderFrameworkImpl: androidx.credentials.GetCredentialResponse convertGetResponseToJetpackClass$credentials_release(android.credentials.GetCredentialResponse)>(r1);

        interfaceinvoke $r3.<androidx.credentials.CredentialManagerCallback: void onResult(java.lang.Object)>($r4);

        return;
    }

    public void onError(android.credentials.GetCredentialException)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1 r0;
        android.credentials.GetCredentialException r1;
        androidx.credentials.CredentialProviderFrameworkImpl $r2;
        androidx.credentials.CredentialManagerCallback $r3;
        androidx.credentials.exceptions.GetCredentialException $r4;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1;

        r1 := @parameter0: android.credentials.GetCredentialException;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "error");

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CredManProvService", "GetCredentialResponse error returned from framework");

        $r3 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: androidx.credentials.CredentialManagerCallback $callback>;

        $r2 = r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: androidx.credentials.CredentialProviderFrameworkImpl this$0>;

        $r4 = virtualinvoke $r2.<androidx.credentials.CredentialProviderFrameworkImpl: androidx.credentials.exceptions.GetCredentialException convertToJetpackGetException$credentials_release(android.credentials.GetCredentialException)>(r1);

        interfaceinvoke $r3.<androidx.credentials.CredentialManagerCallback: void onError(java.lang.Object)>($r4);

        return;
    }

    public volatile void onResult(java.lang.Object)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1 r0;
        java.lang.Object r1;
        android.credentials.GetCredentialResponse $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.credentials.GetCredentialResponse) r1;

        virtualinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: void onResult(android.credentials.GetCredentialResponse)>($r2);

        return;
    }

    public volatile void onError(java.lang.Throwable)
    {
        androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1 r0;
        java.lang.Throwable r1;
        android.credentials.GetCredentialException $r2;

        r0 := @this: androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = (android.credentials.GetCredentialException) r1;

        virtualinvoke r0.<androidx.credentials.CredentialProviderFrameworkImpl$onGetCredential$outcome$1: void onError(android.credentials.GetCredentialException)>($r2);

        return;
    }

