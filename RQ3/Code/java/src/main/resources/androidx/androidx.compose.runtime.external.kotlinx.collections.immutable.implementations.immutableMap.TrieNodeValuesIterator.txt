androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator
    public void <init>()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator r0;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator;

        specialinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeBaseIterator: void <init>()>();

        return;
    }

    public java.lang.Object next()
    {
        androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator: boolean hasNextKey()>();

        staticinvoke <androidx.compose.runtime.external.kotlinx.collections.immutable.internal.CommonFunctionsKt: void assert(boolean)>($z0);

        $i0 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator: int getIndex()>();

        $i1 = $i0 + 2;

        virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator: void setIndex(int)>($i1);

        $r1 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator: java.lang.Object[] getBuffer()>();

        $i2 = virtualinvoke r0.<androidx.compose.runtime.external.kotlinx.collections.immutable.implementations.immutableMap.TrieNodeValuesIterator: int getIndex()>();

        $i3 = $i2 - 1;

        $r2 = $r1[$i3];

        return $r2;
    }

