com.google.common.flogger.LogSiteStats
<com.google.common.flogger.LogSiteStats: com.google.common.flogger.LogSiteMap map>
<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicLong invocationCount>
<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicLong lastTimestampNanos>
<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicInteger skippedLogStatements>
    static void <clinit>()
    {
        com.google.common.flogger.LogSiteStats$1 $r0;

        $r0 = new com.google.common.flogger.LogSiteStats$1;

        specialinvoke $r0.<com.google.common.flogger.LogSiteStats$1: void <init>()>();

        <com.google.common.flogger.LogSiteStats: com.google.common.flogger.LogSiteMap map> = $r0;

        return;
    }

    void <init>()
    {
        com.google.common.flogger.LogSiteStats $r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        $r0 := @this: com.google.common.flogger.LogSiteStats;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        $r0.<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicLong invocationCount> = $r1;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        $r0.<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicLong lastTimestampNanos> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        $r0.<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicInteger skippedLogStatements> = $r2;

        return;
    }

    static com.google.common.flogger.LogSiteStats getStatsForKey(com.google.common.flogger.LogSiteKey, com.google.common.flogger.backend.Metadata)
    {
        com.google.common.flogger.backend.Metadata $r0;
        com.google.common.flogger.LogSiteMap $r1;
        java.lang.Object $r2;
        com.google.common.flogger.LogSiteKey $r3;
        com.google.common.flogger.LogSiteStats $r4;

        $r3 := @parameter0: com.google.common.flogger.LogSiteKey;

        $r0 := @parameter1: com.google.common.flogger.backend.Metadata;

        $r1 = <com.google.common.flogger.LogSiteStats: com.google.common.flogger.LogSiteMap map>;

        $r2 = virtualinvoke $r1.<com.google.common.flogger.LogSiteMap: java.lang.Object get(com.google.common.flogger.LogSiteKey,com.google.common.flogger.backend.Metadata)>($r3, $r0);

        $r4 = (com.google.common.flogger.LogSiteStats) $r2;

        return $r4;
    }

    boolean checkLastTimestamp(long, com.google.common.flogger.LogSiteStats$RateLimitPeriod)
    {
        com.google.common.flogger.LogSiteStats $r0;
        com.google.common.flogger.LogSiteStats$RateLimitPeriod $r1;
        long $l0, $l1, $l2;
        java.util.concurrent.atomic.AtomicLong $r2;
        byte $b3;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i4;

        $r0 := @this: com.google.common.flogger.LogSiteStats;

        $l0 := @parameter0: long;

        $r1 := @parameter1: com.google.common.flogger.LogSiteStats$RateLimitPeriod;

        $r2 = $r0.<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicLong lastTimestampNanos>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l2 = staticinvoke <com.google.common.flogger.LogSiteStats$RateLimitPeriod: long '-$$Nest$mtoNanos'(com.google.common.flogger.LogSiteStats$RateLimitPeriod)>($r1);

        $l2 = $l2 + $l1;

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label2;

        $b3 = $l0 cmp $l2;

        if $b3 >= 0 goto label1;

        $b3 = $l1 cmp 0L;

        if $b3 != 0 goto label2;

     label1:
        $r2 = $r0.<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicLong lastTimestampNanos>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l1, $l0);

        if $z0 == 0 goto label2;

        $r3 = $r0.<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicInteger skippedLogStatements>;

        $i4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(0);

        staticinvoke <com.google.common.flogger.LogSiteStats$RateLimitPeriod: void '-$$Nest$msetSkipCount'(com.google.common.flogger.LogSiteStats$RateLimitPeriod,int)>($r1, $i4);

        return 1;

     label2:
        $r3 = $r0.<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicInteger skippedLogStatements>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return 0;
    }

    boolean incrementAndCheckInvocationCount(int)
    {
        com.google.common.flogger.LogSiteStats $r0;
        long $l0, $l2;
        int $i1;
        java.util.concurrent.atomic.AtomicLong $r1;
        byte $b3;

        $r0 := @this: com.google.common.flogger.LogSiteStats;

        $i1 := @parameter0: int;

        $r1 = $r0.<com.google.common.flogger.LogSiteStats: java.util.concurrent.atomic.AtomicLong invocationCount>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $l2 = (long) $i1;

        $l0 = $l0 % $l2;

        $b3 = $l0 cmp 0L;

        if $b3 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

com.google.common.flogger.LogSiteStats$1
    void <init>()
    {
        com.google.common.flogger.LogSiteStats$1 $r0;

        $r0 := @this: com.google.common.flogger.LogSiteStats$1;

        specialinvoke $r0.<com.google.common.flogger.LogSiteMap: void <init>()>();

        return;
    }

    protected com.google.common.flogger.LogSiteStats initialValue()
    {
        com.google.common.flogger.LogSiteStats$1 $r0;
        com.google.common.flogger.LogSiteStats $r1;

        $r0 := @this: com.google.common.flogger.LogSiteStats$1;

        $r1 = new com.google.common.flogger.LogSiteStats;

        specialinvoke $r1.<com.google.common.flogger.LogSiteStats: void <init>()>();

        return $r1;
    }

    protected volatile java.lang.Object initialValue()
    {
        com.google.common.flogger.LogSiteStats$1 $r0;
        com.google.common.flogger.LogSiteStats $r1;

        $r0 := @this: com.google.common.flogger.LogSiteStats$1;

        $r1 = virtualinvoke $r0.<com.google.common.flogger.LogSiteStats$1: com.google.common.flogger.LogSiteStats initialValue()>();

        return $r1;
    }

com.google.common.flogger.LogSiteStats$RateLimitPeriod
    static volatile void '-$$Nest$msetSkipCount'(com.google.common.flogger.LogSiteStats$RateLimitPeriod, int)
    {
        com.google.common.flogger.LogSiteStats$RateLimitPeriod $r0;
        int $i0;

        $r0 := @parameter0: com.google.common.flogger.LogSiteStats$RateLimitPeriod;

        $i0 := @parameter1: int;

        specialinvoke $r0.<com.google.common.flogger.LogSiteStats$RateLimitPeriod: void setSkipCount(int)>($i0);

        return;
    }

    static volatile long '-$$Nest$mtoNanos'(com.google.common.flogger.LogSiteStats$RateLimitPeriod)
    {
        com.google.common.flogger.LogSiteStats$RateLimitPeriod $r0;
        long $l0;

        $r0 := @parameter0: com.google.common.flogger.LogSiteStats$RateLimitPeriod;

        $l0 = specialinvoke $r0.<com.google.common.flogger.LogSiteStats$RateLimitPeriod: long toNanos()>();

        return $l0;
    }

    private void setSkipCount(int)
    {
        com.google.common.flogger.LogSiteStats$RateLimitPeriod $r0;
        int $i0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.flogger.LogSiteStats$RateLimitPeriod;

        $i0 := @parameter0: int;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    private long toNanos()
    {
        com.google.common.flogger.LogSiteStats$RateLimitPeriod $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.flogger.LogSiteStats$RateLimitPeriod;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.flogger.LogSiteStats$RateLimitPeriod $r0;
        java.lang.Object $r1;
        java.lang.NullPointerException r2;

        $r0 := @this: com.google.common.flogger.LogSiteStats$RateLimitPeriod;

        $r1 := @parameter0: java.lang.Object;

        r2 = new java.lang.NullPointerException;

        specialinvoke r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r2;
    }

    public int hashCode()
    {
        com.google.common.flogger.LogSiteStats$RateLimitPeriod $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.flogger.LogSiteStats$RateLimitPeriod;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public java.lang.String toString()
    {
        com.google.common.flogger.LogSiteStats$RateLimitPeriod $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.flogger.LogSiteStats$RateLimitPeriod;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

