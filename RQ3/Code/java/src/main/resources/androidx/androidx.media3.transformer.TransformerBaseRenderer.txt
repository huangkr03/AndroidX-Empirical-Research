androidx.media3.transformer.TransformerBaseRenderer
<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.MuxerWrapper muxerWrapper>
<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.TransformerMediaClock mediaClock>
<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.TransformationRequest transformationRequest>
<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.Transformer$AsyncErrorListener asyncErrorListener>
<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.FallbackListener fallbackListener>
<androidx.media3.transformer.TransformerBaseRenderer: boolean isTransformationRunning>
<androidx.media3.transformer.TransformerBaseRenderer: long streamOffsetUs>
<androidx.media3.transformer.TransformerBaseRenderer: long streamStartPositionUs>
<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>
    public void <init>(int, androidx.media3.transformer.MuxerWrapper, androidx.media3.transformer.TransformerMediaClock, androidx.media3.transformer.TransformationRequest, androidx.media3.transformer.Transformer$AsyncErrorListener, androidx.media3.transformer.FallbackListener)
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        int i0;
        androidx.media3.transformer.MuxerWrapper r1;
        androidx.media3.transformer.TransformerMediaClock r2;
        androidx.media3.transformer.TransformationRequest r3;
        androidx.media3.transformer.Transformer$AsyncErrorListener r4;
        androidx.media3.transformer.FallbackListener r5;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.transformer.MuxerWrapper;

        r2 := @parameter2: androidx.media3.transformer.TransformerMediaClock;

        r3 := @parameter3: androidx.media3.transformer.TransformationRequest;

        r4 := @parameter4: androidx.media3.transformer.Transformer$AsyncErrorListener;

        r5 := @parameter5: androidx.media3.transformer.FallbackListener;

        specialinvoke r0.<androidx.media3.exoplayer.BaseRenderer: void <init>(int)>(i0);

        r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.MuxerWrapper muxerWrapper> = r1;

        r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.TransformerMediaClock mediaClock> = r2;

        r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.TransformationRequest transformationRequest> = r3;

        r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.Transformer$AsyncErrorListener asyncErrorListener> = r4;

        r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.FallbackListener fallbackListener> = r5;

        return;
    }

    public final int supportsFormat(androidx.media3.common.Format)
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        androidx.media3.common.Format r1;
        java.lang.String $r2;
        int $i0, $i1, $i2;
        byte $b3;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        $r2 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $i0 = staticinvoke <androidx.media3.common.MimeTypes: int getTrackType(java.lang.String)>($r2);

        $i1 = virtualinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: int getTrackType()>();

        if $i0 != $i1 goto label1;

        $b3 = 4;

        goto label2;

     label1:
        $b3 = 0;

     label2:
        $i2 = staticinvoke <androidx.media3.exoplayer.RendererCapabilities: int create(int)>($b3);

        return $i2;
    }

    public final androidx.media3.exoplayer.MediaClock getMediaClock()
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        androidx.media3.transformer.TransformerMediaClock $r1;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        $r1 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.TransformerMediaClock mediaClock>;

        return $r1;
    }

    public final boolean isReady()
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        boolean $z0;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        $z0 = virtualinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: boolean isSourceReady()>();

        return $z0;
    }

    public final boolean isEnded()
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        androidx.media3.transformer.SamplePipeline $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        $r1 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>;

        $z0 = interfaceinvoke $r2.<androidx.media3.transformer.SamplePipeline: boolean isEnded()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final void render(long, long)
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        long l0, l1;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.media3.transformer.SamplePipeline $r1;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $z0 = r0.<androidx.media3.transformer.TransformerBaseRenderer: boolean isTransformationRunning>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: boolean isEnded()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: boolean ensureConfigured()>();

        if $z2 != 0 goto label2;

     label1:
        return;

     label2:
        $r1 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>;

        $z4 = interfaceinvoke $r1.<androidx.media3.transformer.SamplePipeline: boolean processData()>();

        if $z4 != 0 goto label2;

        $z3 = specialinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: boolean feedPipelineFromInput()>();

        if $z3 == 0 goto label3;

        goto label2;

     label3:
        goto label4;

     label4:
        return;
    }

    protected final void onStreamChanged(androidx.media3.common.Format[], long, long)
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        androidx.media3.common.Format[] r1;
        long l0, l1;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        r1 := @parameter0: androidx.media3.common.Format[];

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r0.<androidx.media3.transformer.TransformerBaseRenderer: long streamOffsetUs> = l1;

        r0.<androidx.media3.transformer.TransformerBaseRenderer: long streamStartPositionUs> = l0;

        return;
    }

    protected final void onEnabled(boolean, boolean)
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        boolean z0, z1;
        androidx.media3.transformer.MuxerWrapper $r1;
        androidx.media3.transformer.FallbackListener $r2;
        androidx.media3.transformer.TransformerMediaClock $r3;
        int $i0;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.MuxerWrapper muxerWrapper>;

        virtualinvoke $r1.<androidx.media3.transformer.MuxerWrapper: void registerTrack()>();

        $r2 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.FallbackListener fallbackListener>;

        virtualinvoke $r2.<androidx.media3.transformer.FallbackListener: void registerTrack()>();

        $r3 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.TransformerMediaClock mediaClock>;

        $i0 = virtualinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: int getTrackType()>();

        virtualinvoke $r3.<androidx.media3.transformer.TransformerMediaClock: void updateTimeForTrackType(int,long)>($i0, 0L);

        return;
    }

    protected final void onStarted()
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        r0.<androidx.media3.transformer.TransformerBaseRenderer: boolean isTransformationRunning> = 1;

        return;
    }

    protected final void onStopped()
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        r0.<androidx.media3.transformer.TransformerBaseRenderer: boolean isTransformationRunning> = 0;

        return;
    }

    protected final void onReset()
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        androidx.media3.transformer.SamplePipeline $r1, $r2;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        $r1 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>;

        interfaceinvoke $r2.<androidx.media3.transformer.SamplePipeline: void release()>();

     label1:
        return;
    }

<androidx.media3.transformer.TransformerBaseRenderer: boolean ensureConfigured()>
    private boolean feedPipelineFromInput() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.TransformerBaseRenderer r0;
        androidx.media3.decoder.DecoderInputBuffer r1;
        int i0, $i1;
        androidx.media3.transformer.SamplePipeline $r2, $r5, $r6;
        androidx.media3.exoplayer.FormatHolder $r3;
        boolean $z0;
        androidx.media3.transformer.TransformerMediaClock $r4;
        long $l2;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.media3.transformer.TransformerBaseRenderer;

        $r2 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>;

        r1 = interfaceinvoke $r2.<androidx.media3.transformer.SamplePipeline: androidx.media3.decoder.DecoderInputBuffer dequeueInputBuffer()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.exoplayer.FormatHolder getFormatHolder()>();

        i0 = virtualinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: int readSource(androidx.media3.exoplayer.FormatHolder,androidx.media3.decoder.DecoderInputBuffer,int)>($r3, r1, 0);

        tableswitch(i0)
        {
            case -5: goto label4;
            case -4: goto label2;
            case -3: goto label5;
            default: goto label5;
        };

     label2:
        virtualinvoke r1.<androidx.media3.decoder.DecoderInputBuffer: void flip()>();

        $z0 = virtualinvoke r1.<androidx.media3.decoder.DecoderInputBuffer: boolean isEndOfStream()>();

        if $z0 == 0 goto label3;

        $r6 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>;

        interfaceinvoke $r6.<androidx.media3.transformer.SamplePipeline: void queueInputBuffer()>();

        return 0;

     label3:
        $r4 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.TransformerMediaClock mediaClock>;

        $i1 = virtualinvoke r0.<androidx.media3.transformer.TransformerBaseRenderer: int getTrackType()>();

        $l2 = r1.<androidx.media3.decoder.DecoderInputBuffer: long timeUs>;

        virtualinvoke $r4.<androidx.media3.transformer.TransformerMediaClock: void updateTimeForTrackType(int,long)>($i1, $l2);

        $r5 = r0.<androidx.media3.transformer.TransformerBaseRenderer: androidx.media3.transformer.SamplePipeline samplePipeline>;

        interfaceinvoke $r5.<androidx.media3.transformer.SamplePipeline: void queueInputBuffer()>();

        return 1;

     label4:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Format changes are not supported.");

        throw $r7;

     label5:
        return 0;
    }

