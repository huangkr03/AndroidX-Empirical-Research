androidx.compose.runtime.snapshots.NestedReadonlySnapshot
<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent>
<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: kotlin.jvm.functions.Function1 readObserver>
    public void <init>(int, androidx.compose.runtime.snapshots.SnapshotIdSet, kotlin.jvm.functions.Function1, androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0, r6, $r13;
        int i0;
        androidx.compose.runtime.snapshots.SnapshotIdSet r1;
        kotlin.jvm.functions.Function1 r2, r4, r5, $r11, $r14;
        androidx.compose.runtime.snapshots.Snapshot r3, $r7, $r8, $r9, $r10;
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot$readObserver$1$1$1 $r12;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.compose.runtime.snapshots.SnapshotIdSet;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        r3 := @parameter3: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "invalid");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "parent");

        specialinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void <init>(int,androidx.compose.runtime.snapshots.SnapshotIdSet,kotlin.jvm.internal.DefaultConstructorMarker)>(i0, r1, null);

        r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent> = r3;

        $r8 = r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent>;

        $r7 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        virtualinvoke $r8.<androidx.compose.runtime.snapshots.Snapshot: void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>($r7);

        $r13 = r0;

        if r2 == null goto label3;

        r4 = r2;

        r6 = r0;

        $r10 = r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent>;

        $r11 = virtualinvoke $r10.<androidx.compose.runtime.snapshots.Snapshot: kotlin.jvm.functions.Function1 getReadObserver$runtime_release()>();

        if $r11 == null goto label1;

        r5 = $r11;

        $r12 = new androidx.compose.runtime.snapshots.NestedReadonlySnapshot$readObserver$1$1$1;

        specialinvoke $r12.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot$readObserver$1$1$1: void <init>(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>(r2, r5);

        $r14 = (kotlin.jvm.functions.Function1) $r12;

        goto label2;

     label1:
        $r14 = r2;

     label2:
        $r13 = r6;

        goto label4;

     label3:
        $r9 = r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent>;

        $r14 = virtualinvoke $r9.<androidx.compose.runtime.snapshots.Snapshot: kotlin.jvm.functions.Function1 getReadObserver$runtime_release()>();

     label4:
        $r13.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: kotlin.jvm.functions.Function1 readObserver> = $r14;

        return;
    }

    public final androidx.compose.runtime.snapshots.Snapshot getParent()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot $r1;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent>;

        return $r1;
    }

    public boolean getReadOnly()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        return 1;
    }

    public androidx.compose.runtime.snapshots.Snapshot getRoot()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot $r1, $r2;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot getRoot()>();

        return $r2;
    }

    public androidx.compose.runtime.snapshots.NestedReadonlySnapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0, $r2;
        kotlin.jvm.functions.Function1 r1;
        int $i0;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r3;
        androidx.compose.runtime.snapshots.Snapshot $r4;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = new androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        $i0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: int getId()>();

        $r3 = virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        $r4 = r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent>;

        specialinvoke $r2.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: void <init>(int,androidx.compose.runtime.snapshots.SnapshotIdSet,kotlin.jvm.functions.Function1,androidx.compose.runtime.snapshots.Snapshot)>($i0, $r3, r1, $r4);

        return $r2;
    }

    public void notifyObjectsInitialized$runtime_release()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        return;
    }

    public boolean hasPendingChanges()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        return 0;
    }

    public kotlin.jvm.functions.Function1 getReadObserver$runtime_release()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: kotlin.jvm.functions.Function1 readObserver>;

        return $r1;
    }

    public void dispose()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        boolean $z0;
        int $i0, $i1;
        androidx.compose.runtime.snapshots.Snapshot $r1, $r2, $r3;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        $z0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: boolean getDisposed$runtime_release()>();

        if $z0 != 0 goto label2;

        $i0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: int getId()>();

        $r1 = r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent>;

        $i1 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.Snapshot: int getId()>();

        if $i0 == $i1 goto label1;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: void closeAndReleasePinning$runtime_release()>();

     label1:
        $r3 = r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.Snapshot parent>;

        $r2 = (androidx.compose.runtime.snapshots.Snapshot) r0;

        virtualinvoke $r3.<androidx.compose.runtime.snapshots.Snapshot: void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>($r2);

        specialinvoke r0.<androidx.compose.runtime.snapshots.Snapshot: void dispose()>();

     label2:
        return;
    }

    public java.util.HashSet getModified$runtime_release()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        return null;
    }

    public kotlin.jvm.functions.Function1 getWriteObserver$runtime_release()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        return null;
    }

    public java.lang.Void recordModified$runtime_release(androidx.compose.runtime.snapshots.StateObject)
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.StateObject r1;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.StateObject;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.lang.Void access$reportReadonlySnapshotWrite()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public java.lang.Void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "snapshot");

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateMapKt: java.lang.Void unsupported()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public java.lang.Void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "snapshot");

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateMapKt: java.lang.Void unsupported()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public volatile androidx.compose.runtime.snapshots.Snapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0, $r2;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.snapshots.Snapshot $r3;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: androidx.compose.runtime.snapshots.NestedReadonlySnapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)>(r1);

        $r3 = (androidx.compose.runtime.snapshots.Snapshot) $r2;

        return $r3;
    }

    public volatile java.util.Set getModified$runtime_release()
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        java.util.HashSet $r1;
        java.util.Set $r2;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        $r1 = virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: java.util.HashSet getModified$runtime_release()>();

        $r2 = (java.util.Set) $r1;

        return $r2;
    }

    public volatile void recordModified$runtime_release(androidx.compose.runtime.snapshots.StateObject)
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.StateObject r1;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.StateObject;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: java.lang.Void recordModified$runtime_release(androidx.compose.runtime.snapshots.StateObject)>(r1);

        return;
    }

    public volatile void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: java.lang.Void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>(r1);

        return;
    }

    public volatile void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.NestedReadonlySnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;

        r0 := @this: androidx.compose.runtime.snapshots.NestedReadonlySnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.NestedReadonlySnapshot: java.lang.Void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>(r1);

        return;
    }

