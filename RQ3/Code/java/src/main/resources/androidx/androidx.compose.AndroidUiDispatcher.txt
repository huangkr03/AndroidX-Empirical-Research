androidx.compose.AndroidUiDispatcher
<androidx.compose.AndroidUiDispatcher: androidx.compose.AndroidUiDispatcher$Companion Companion>
<androidx.compose.AndroidUiDispatcher: android.view.Choreographer choreographer>
<androidx.compose.AndroidUiDispatcher: android.os.Handler handler>
<androidx.compose.AndroidUiDispatcher: java.lang.Object lock>
<androidx.compose.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined>
<androidx.compose.AndroidUiDispatcher: java.util.List toRunOnFrame>
<androidx.compose.AndroidUiDispatcher: java.util.List spareToRunOnFrame>
<androidx.compose.AndroidUiDispatcher: boolean scheduledTrampolineDispatch>
<androidx.compose.AndroidUiDispatcher: boolean scheduledFrameDispatch>
<androidx.compose.AndroidUiDispatcher: androidx.compose.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback>
<androidx.compose.AndroidUiDispatcher: androidx.compose.CompositionFrameClock compositionFrameClock>
<androidx.compose.AndroidUiDispatcher: kotlin.Lazy Main$delegate>
<androidx.compose.AndroidUiDispatcher: androidx.compose.ThreadLocal currentThread>
    private void <init>(android.view.Choreographer, android.os.Handler)
    {
        androidx.compose.AndroidUiDispatcher r0, r11, r13;
        android.view.Choreographer r1, $r9;
        android.os.Handler r2;
        java.lang.Object $r3;
        kotlin.collections.ArrayDeque $r4;
        java.util.ArrayList $r5, $r6;
        androidx.compose.AndroidUiDispatcher$dispatchCallback$1 $r7;
        androidx.compose.AndroidUiCompositionFrameClock $r8;
        androidx.compose.CompositionFrameClock $r10;
        boolean z0, z1;
        java.util.List r12, r14;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

        r1 := @parameter0: android.view.Choreographer;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<kotlinx.coroutines.CoroutineDispatcher: void <init>()>();

        r0.<androidx.compose.AndroidUiDispatcher: android.view.Choreographer choreographer> = r1;

        r0.<androidx.compose.AndroidUiDispatcher: android.os.Handler handler> = r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.AndroidUiDispatcher: java.lang.Object lock> = $r3;

        $r4 = new kotlin.collections.ArrayDeque;

        specialinvoke $r4.<kotlin.collections.ArrayDeque: void <init>()>();

        r0.<androidx.compose.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined> = $r4;

        r11 = r0;

        z0 = 0;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r12 = (java.util.List) $r5;

        r11.<androidx.compose.AndroidUiDispatcher: java.util.List toRunOnFrame> = r12;

        r13 = r0;

        z1 = 0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r14 = (java.util.List) $r6;

        r13.<androidx.compose.AndroidUiDispatcher: java.util.List spareToRunOnFrame> = r14;

        $r7 = new androidx.compose.AndroidUiDispatcher$dispatchCallback$1;

        specialinvoke $r7.<androidx.compose.AndroidUiDispatcher$dispatchCallback$1: void <init>(androidx.compose.AndroidUiDispatcher)>(r0);

        r0.<androidx.compose.AndroidUiDispatcher: androidx.compose.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback> = $r7;

        $r8 = new androidx.compose.AndroidUiCompositionFrameClock;

        $r9 = virtualinvoke r0.<androidx.compose.AndroidUiDispatcher: android.view.Choreographer getChoreographer()>();

        specialinvoke $r8.<androidx.compose.AndroidUiCompositionFrameClock: void <init>(android.view.Choreographer)>($r9);

        $r10 = (androidx.compose.CompositionFrameClock) $r8;

        r0.<androidx.compose.AndroidUiDispatcher: androidx.compose.CompositionFrameClock compositionFrameClock> = $r10;

        return;
    }

    public final android.view.Choreographer getChoreographer()
    {
        androidx.compose.AndroidUiDispatcher r0;
        android.view.Choreographer $r1;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

        $r1 = r0.<androidx.compose.AndroidUiDispatcher: android.view.Choreographer choreographer>;

        return $r1;
    }

    private final java.lang.Runnable nextTask()
    {
        androidx.compose.AndroidUiDispatcher r0;
        java.lang.Object r1, $r4;
        boolean z1, z4;
        java.lang.Runnable r2;
        kotlin.collections.ArrayDeque $r3;
        java.lang.Throwable $r5, r6;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

        r1 = r0.<androidx.compose.AndroidUiDispatcher: java.lang.Object lock>;

        z1 = 0;

        z4 = 0;

        entermonitor r1;

     label1:
        $r3 = r0.<androidx.compose.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined>;

        $r4 = virtualinvoke $r3.<kotlin.collections.ArrayDeque: java.lang.Object removeFirstOrNull()>();

        r2 = (java.lang.Runnable) $r4;

     label2:
        exitmonitor r1;

        goto label5;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        exitmonitor r1;

        throw r6;

     label5:
        return r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void performTrampolineDispatch()
    {
        androidx.compose.AndroidUiDispatcher r0;
        java.lang.Object r1;
        boolean z1, z4, $z5, z6, $z7;
        kotlin.collections.ArrayDeque $r2;
        java.lang.Throwable $r3, r5;
        java.lang.Runnable r4;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

     label01:
        r4 = specialinvoke r0.<androidx.compose.AndroidUiDispatcher: java.lang.Runnable nextTask()>();

     label02:
        if r4 == null goto label03;

        interfaceinvoke r4.<java.lang.Runnable: void run()>();

        r4 = specialinvoke r0.<androidx.compose.AndroidUiDispatcher: java.lang.Runnable nextTask()>();

        goto label02;

     label03:
        r1 = r0.<androidx.compose.AndroidUiDispatcher: java.lang.Object lock>;

        z1 = 0;

        z6 = 0;

        entermonitor r1;

     label04:
        $r2 = r0.<androidx.compose.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined>;

        $z5 = virtualinvoke $r2.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z5 == 0 goto label05;

        r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledTrampolineDispatch> = 0;

        $z7 = 0;

        goto label06;

     label05:
        $z7 = 1;

     label06:
        z4 = $z7;

     label07:
        exitmonitor r1;

        goto label10;

     label08:
        $r3 := @caughtexception;

        r5 = $r3;

     label09:
        exitmonitor r1;

        throw r5;

     label10:
        if z4 != 0 goto label01;

        return;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private final void performFrameDispatch(long)
    {
        androidx.compose.AndroidUiDispatcher r0;
        long l0;
        java.util.List r1, r2, r3, $r4;
        boolean $z2, z4, z5;
        java.lang.Object $r5, r7;
        android.view.Choreographer$FrameCallback $r6;
        int i1, $i2, i3, i4;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

        l0 := @parameter0: long;

        r7 = r0.<androidx.compose.AndroidUiDispatcher: java.lang.Object lock>;

        z4 = 0;

        z5 = 0;

        entermonitor r7;

        $z2 = r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledFrameDispatch>;

        if $z2 != 0 goto label1;

        exitmonitor r7;

        return;

     label1:
        r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledFrameDispatch> = 0;

        r2 = r0.<androidx.compose.AndroidUiDispatcher: java.util.List toRunOnFrame>;

        $r4 = r0.<androidx.compose.AndroidUiDispatcher: java.util.List spareToRunOnFrame>;

        r0.<androidx.compose.AndroidUiDispatcher: java.util.List toRunOnFrame> = $r4;

        r0.<androidx.compose.AndroidUiDispatcher: java.util.List spareToRunOnFrame> = r2;

        r3 = r2;

        exitmonitor r7;

        goto label2;

     label2:
        r1 = r3;

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = 0;

        i3 = i1 + -1;

        if i1 == -2147483648 goto label4;

        if 0 > i3 goto label4;

     label3:
        i4 = $i2;

        $i2 = $i2 + 1;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        $r6 = (android.view.Choreographer$FrameCallback) $r5;

        interfaceinvoke $r6.<android.view.Choreographer$FrameCallback: void doFrame(long)>(l0);

        if $i2 <= i3 goto label3;

     label4:
        interfaceinvoke r1.<java.util.List: void clear()>();

        return;
    }

    public final void postFrameCallback$compose_runtime_release(android.view.Choreographer$FrameCallback)
    {
        androidx.compose.AndroidUiDispatcher r0;
        android.view.Choreographer$FrameCallback r1, $r7;
        java.lang.Object r2;
        boolean z1, $z5, z6;
        kotlin.Unit r3;
        java.util.List $r4;
        android.view.Choreographer $r5;
        androidx.compose.AndroidUiDispatcher$dispatchCallback$1 $r6;
        java.lang.Throwable $r8, r9;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

        r1 := @parameter0: android.view.Choreographer$FrameCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        r2 = r0.<androidx.compose.AndroidUiDispatcher: java.lang.Object lock>;

        z1 = 0;

        z6 = 0;

        entermonitor r2;

     label1:
        $r4 = r0.<androidx.compose.AndroidUiDispatcher: java.util.List toRunOnFrame>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $z5 = r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledFrameDispatch>;

        if $z5 != 0 goto label2;

        r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledFrameDispatch> = 1;

        $r5 = virtualinvoke r0.<androidx.compose.AndroidUiDispatcher: android.view.Choreographer getChoreographer()>();

        $r6 = r0.<androidx.compose.AndroidUiDispatcher: androidx.compose.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback>;

        $r7 = (android.view.Choreographer$FrameCallback) $r6;

        virtualinvoke $r5.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r7);

     label2:
        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r2;

        goto label6;

     label4:
        $r8 := @caughtexception;

        r9 = $r8;

     label5:
        exitmonitor r2;

        throw r9;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void removeFrameCallback$compose_runtime_release(android.view.Choreographer$FrameCallback)
    {
        androidx.compose.AndroidUiDispatcher r0;
        android.view.Choreographer$FrameCallback r1;
        java.lang.Object r2;
        boolean z1, z4, z5;
        java.util.List $r3;
        java.lang.Throwable $r4, r5;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

        r1 := @parameter0: android.view.Choreographer$FrameCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        r2 = r0.<androidx.compose.AndroidUiDispatcher: java.lang.Object lock>;

        z1 = 0;

        z5 = 0;

        entermonitor r2;

     label1:
        $r3 = r0.<androidx.compose.AndroidUiDispatcher: java.util.List toRunOnFrame>;

        z4 = interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

     label2:
        exitmonitor r2;

        goto label5;

     label3:
        $r4 := @caughtexception;

        r5 = $r4;

     label4:
        exitmonitor r2;

        throw r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final androidx.compose.CompositionFrameClock getCompositionFrameClock()
    {
        androidx.compose.AndroidUiDispatcher r0;
        androidx.compose.CompositionFrameClock $r1;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

        $r1 = r0.<androidx.compose.AndroidUiDispatcher: androidx.compose.CompositionFrameClock compositionFrameClock>;

        return $r1;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        androidx.compose.AndroidUiDispatcher r0;
        kotlin.coroutines.CoroutineContext r1;
        java.lang.Runnable r2, $r7;
        java.lang.Object r3;
        boolean z1, $z4, $z6, z7;
        kotlin.Unit r4;
        kotlin.collections.ArrayDeque $r5;
        androidx.compose.AndroidUiDispatcher$dispatchCallback$1 $r6, $r10;
        android.os.Handler $r8;
        android.view.Choreographer $r9;
        android.view.Choreographer$FrameCallback $r11;
        java.lang.Throwable $r12, r13;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        r2 := @parameter1: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        r3 = r0.<androidx.compose.AndroidUiDispatcher: java.lang.Object lock>;

        z1 = 0;

        z7 = 0;

        entermonitor r3;

     label1:
        $r5 = r0.<androidx.compose.AndroidUiDispatcher: kotlin.collections.ArrayDeque toRunTrampolined>;

        virtualinvoke $r5.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>(r2);

        $z4 = r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledTrampolineDispatch>;

        if $z4 != 0 goto label2;

        r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledTrampolineDispatch> = 1;

        $r8 = r0.<androidx.compose.AndroidUiDispatcher: android.os.Handler handler>;

        $r6 = r0.<androidx.compose.AndroidUiDispatcher: androidx.compose.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback>;

        $r7 = (java.lang.Runnable) $r6;

        virtualinvoke $r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        $z6 = r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledFrameDispatch>;

        if $z6 != 0 goto label2;

        r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledFrameDispatch> = 1;

        $r9 = virtualinvoke r0.<androidx.compose.AndroidUiDispatcher: android.view.Choreographer getChoreographer()>();

        $r10 = r0.<androidx.compose.AndroidUiDispatcher: androidx.compose.AndroidUiDispatcher$dispatchCallback$1 dispatchCallback>;

        $r11 = (android.view.Choreographer$FrameCallback) $r10;

        virtualinvoke $r9.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r11);

     label2:
        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r3;

        goto label6;

     label4:
        $r12 := @caughtexception;

        r13 = $r12;

     label5:
        exitmonitor r3;

        throw r13;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static final kotlin.Lazy access$getMain$delegate$cp$s937427018()
    {
        kotlin.Lazy $r0;

        $r0 = <androidx.compose.AndroidUiDispatcher: kotlin.Lazy Main$delegate>;

        return $r0;
    }

    public static final androidx.compose.ThreadLocal access$getCurrentThread$cp$s937427018()
    {
        androidx.compose.ThreadLocal $r0;

        $r0 = <androidx.compose.AndroidUiDispatcher: androidx.compose.ThreadLocal currentThread>;

        return $r0;
    }

    public static final void access$performTrampolineDispatch(androidx.compose.AndroidUiDispatcher)
    {
        androidx.compose.AndroidUiDispatcher $r0;

        $r0 := @parameter0: androidx.compose.AndroidUiDispatcher;

        specialinvoke $r0.<androidx.compose.AndroidUiDispatcher: void performTrampolineDispatch()>();

        return;
    }

    public static final java.lang.Object access$getLock$p(androidx.compose.AndroidUiDispatcher)
    {
        androidx.compose.AndroidUiDispatcher r0;
        java.lang.Object $r1;

        r0 := @parameter0: androidx.compose.AndroidUiDispatcher;

        $r1 = r0.<androidx.compose.AndroidUiDispatcher: java.lang.Object lock>;

        return $r1;
    }

    public static final android.os.Handler access$getHandler$p(androidx.compose.AndroidUiDispatcher)
    {
        androidx.compose.AndroidUiDispatcher r0;
        android.os.Handler $r1;

        r0 := @parameter0: androidx.compose.AndroidUiDispatcher;

        $r1 = r0.<androidx.compose.AndroidUiDispatcher: android.os.Handler handler>;

        return $r1;
    }

    public static final void access$performFrameDispatch(androidx.compose.AndroidUiDispatcher, long)
    {
        androidx.compose.AndroidUiDispatcher $r0;
        long l0;

        $r0 := @parameter0: androidx.compose.AndroidUiDispatcher;

        l0 := @parameter1: long;

        specialinvoke $r0.<androidx.compose.AndroidUiDispatcher: void performFrameDispatch(long)>(l0);

        return;
    }

    public static final java.util.List access$getToRunOnFrame$p(androidx.compose.AndroidUiDispatcher)
    {
        androidx.compose.AndroidUiDispatcher r0;
        java.util.List $r1;

        r0 := @parameter0: androidx.compose.AndroidUiDispatcher;

        $r1 = r0.<androidx.compose.AndroidUiDispatcher: java.util.List toRunOnFrame>;

        return $r1;
    }

    public static final void access$setScheduledFrameDispatch$p(androidx.compose.AndroidUiDispatcher, boolean)
    {
        androidx.compose.AndroidUiDispatcher r0;
        boolean z0;

        r0 := @parameter0: androidx.compose.AndroidUiDispatcher;

        z0 := @parameter1: boolean;

        r0.<androidx.compose.AndroidUiDispatcher: boolean scheduledFrameDispatch> = z0;

        return;
    }

    public void <init>(android.view.Choreographer, android.os.Handler, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.AndroidUiDispatcher r0;
        android.view.Choreographer r1;
        android.os.Handler r2;
        kotlin.jvm.internal.DefaultConstructorMarker r3;

        r0 := @this: androidx.compose.AndroidUiDispatcher;

        r1 := @parameter0: android.view.Choreographer;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.AndroidUiDispatcher: void <init>(android.view.Choreographer,android.os.Handler)>(r1, r2);

        return;
    }

    public static final void <clinit>()
    {
        androidx.compose.AndroidUiDispatcher$Companion $r0;
        androidx.compose.AndroidUiDispatcher$Companion$Main$2 $r1;
        kotlin.jvm.functions.Function0 $r2, $r6;
        kotlin.Lazy $r3;
        androidx.compose.ThreadLocal $r4;
        androidx.compose.AndroidUiDispatcher$Companion$currentThread$1 $r5;

        $r0 = new androidx.compose.AndroidUiDispatcher$Companion;

        specialinvoke $r0.<androidx.compose.AndroidUiDispatcher$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.AndroidUiDispatcher: androidx.compose.AndroidUiDispatcher$Companion Companion> = $r0;

        $r1 = new androidx.compose.AndroidUiDispatcher$Companion$Main$2;

        specialinvoke $r1.<androidx.compose.AndroidUiDispatcher$Companion$Main$2: void <init>()>();

        $r2 = (kotlin.jvm.functions.Function0) $r1;

        $r3 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r2);

        <androidx.compose.AndroidUiDispatcher: kotlin.Lazy Main$delegate> = $r3;

        $r4 = new androidx.compose.ThreadLocal;

        $r5 = new androidx.compose.AndroidUiDispatcher$Companion$currentThread$1;

        specialinvoke $r5.<androidx.compose.AndroidUiDispatcher$Companion$currentThread$1: void <init>()>();

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        specialinvoke $r4.<androidx.compose.ThreadLocal: void <init>(kotlin.jvm.functions.Function0)>($r6);

        <androidx.compose.AndroidUiDispatcher: androidx.compose.ThreadLocal currentThread> = $r4;

        return;
    }

androidx.compose.AndroidUiDispatcher$Companion$currentThread$1
    void <init>()
    {
        androidx.compose.AndroidUiDispatcher$Companion$currentThread$1 r0;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$currentThread$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.compose.AndroidUiDispatcher invoke()
    {
        androidx.compose.AndroidUiDispatcher$Companion$currentThread$1 r0;
        android.os.Looper r1, r2, r3, r13;
        android.os.Handler r4, r14;
        android.view.Choreographer r5, r11;
        androidx.compose.AndroidUiDispatcher $r7;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9, r12;
        java.lang.Throwable $r10;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$currentThread$1;

        r11 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r11, "getInstance()");

        r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r2 != null goto label1;

        r12 = "no Looper on this thread";

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        $r10 = (java.lang.Throwable) $r8;

        throw $r10;

     label1:
        r13 = r2;

        r3 = r13;

        r1 = r3;

        r14 = staticinvoke <androidx.core.os.HandlerCompat: android.os.Handler createAsync(android.os.Looper)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r14, "createAsync(Looper.myLooper() ?: error(\"no Looper on this thread\"))");

        r4 = r14;

        r5 = r11;

        $r7 = new androidx.compose.AndroidUiDispatcher;

        specialinvoke $r7.<androidx.compose.AndroidUiDispatcher: void <init>(android.view.Choreographer,android.os.Handler,kotlin.jvm.internal.DefaultConstructorMarker)>(r5, r4, null);

        return $r7;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.AndroidUiDispatcher$Companion$currentThread$1 r0;
        androidx.compose.AndroidUiDispatcher $r1;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$currentThread$1;

        $r1 = virtualinvoke r0.<androidx.compose.AndroidUiDispatcher$Companion$currentThread$1: androidx.compose.AndroidUiDispatcher invoke()>();

        return $r1;
    }

androidx.compose.AndroidUiDispatcher$Companion$Main$2$1
<androidx.compose.AndroidUiDispatcher$Companion$Main$2$1: int label>
<androidx.compose.AndroidUiDispatcher$Companion$Main$2$1: kotlinx.coroutines.CoroutineScope p$>
    public void <init>(kotlin.coroutines.Continuation)
    {
        androidx.compose.AndroidUiDispatcher$Companion$Main$2$1 r0;
        kotlin.coroutines.Continuation $r1;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$Main$2$1;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r1);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.AndroidUiDispatcher$Companion$Main$2$1 r0;
        java.lang.Object $r1;
        int $i0;
        android.view.Choreographer $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$Main$2$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.AndroidUiDispatcher$Companion$Main$2$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        return $r3;

     label2:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r4;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.AndroidUiDispatcher$Companion$Main$2$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        kotlinx.coroutines.CoroutineScope $r5;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$Main$2$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.AndroidUiDispatcher$Companion$Main$2$1;

        specialinvoke $r4.<androidx.compose.AndroidUiDispatcher$Companion$Main$2$1: void <init>(kotlin.coroutines.Continuation)>($r2);

        r3 = $r4;

        $r5 = (kotlinx.coroutines.CoroutineScope) r1;

        r3.<androidx.compose.AndroidUiDispatcher$Companion$Main$2$1: kotlinx.coroutines.CoroutineScope p$> = $r5;

        $r6 = (kotlin.coroutines.Continuation) r3;

        return $r6;
    }

    public final java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.AndroidUiDispatcher$Companion$Main$2$1 r0, $r6;
        java.lang.Object r1, r2, $r7;
        kotlin.coroutines.Continuation r3, $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$Main$2$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlin.coroutines.Continuation) r2;

        r3 = virtualinvoke r0.<androidx.compose.AndroidUiDispatcher$Companion$Main$2$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, $r4);

        $r6 = (androidx.compose.AndroidUiDispatcher$Companion$Main$2$1) r3;

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = virtualinvoke $r6.<androidx.compose.AndroidUiDispatcher$Companion$Main$2$1: java.lang.Object invokeSuspend(java.lang.Object)>($r5);

        return $r7;
    }

androidx.compose.AndroidUiDispatcher$Companion$Main$2
    void <init>()
    {
        androidx.compose.AndroidUiDispatcher$Companion$Main$2 r0;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$Main$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.compose.AndroidUiDispatcher invoke()
    {
        androidx.compose.AndroidUiDispatcher$Companion$Main$2 r0;
        android.os.Looper r1;
        androidx.compose.AndroidUiDispatcher $r2;
        boolean $z0;
        kotlinx.coroutines.Dispatchers $r3;
        kotlinx.coroutines.MainCoroutineDispatcher $r4;
        androidx.compose.AndroidUiDispatcher$Companion$Main$2$1 $r5;
        kotlin.coroutines.Continuation $r6;
        kotlin.coroutines.CoroutineContext $r7;
        kotlin.jvm.functions.Function2 $r8;
        java.lang.Object $r9;
        android.view.Choreographer $r10, r11;
        android.os.Handler r12;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$Main$2;

        $r2 = new androidx.compose.AndroidUiDispatcher;

        $z0 = staticinvoke <androidx.compose.ActualAndroidKt: boolean isMainThread()>();

        if $z0 == 0 goto label1;

        $r10 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        goto label2;

     label1:
        $r3 = <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.Dispatchers INSTANCE>;

        $r4 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>();

        $r7 = (kotlin.coroutines.CoroutineContext) $r4;

        $r5 = new androidx.compose.AndroidUiDispatcher$Companion$Main$2$1;

        $r6 = (kotlin.coroutines.Continuation) null;

        specialinvoke $r5.<androidx.compose.AndroidUiDispatcher$Companion$Main$2$1: void <init>(kotlin.coroutines.Continuation)>($r6);

        $r8 = (kotlin.jvm.functions.Function2) $r5;

        $r9 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object runBlocking(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>($r7, $r8);

        $r10 = (android.view.Choreographer) $r9;

     label2:
        r11 = $r10;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r11, "if (isMainThread()) Choreographer.getInstance()\n                else runBlocking(Dispatchers.Main) { Choreographer.getInstance() }");

        r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r1, "getMainLooper()");

        r12 = staticinvoke <androidx.core.os.HandlerCompat: android.os.Handler createAsync(android.os.Looper)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r12, "createAsync(Looper.getMainLooper())");

        specialinvoke $r2.<androidx.compose.AndroidUiDispatcher: void <init>(android.view.Choreographer,android.os.Handler,kotlin.jvm.internal.DefaultConstructorMarker)>(r11, r12, null);

        return $r2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.AndroidUiDispatcher$Companion$Main$2 r0;
        androidx.compose.AndroidUiDispatcher $r1;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion$Main$2;

        $r1 = virtualinvoke r0.<androidx.compose.AndroidUiDispatcher$Companion$Main$2: androidx.compose.AndroidUiDispatcher invoke()>();

        return $r1;
    }

androidx.compose.AndroidUiDispatcher$Companion
<androidx.compose.AndroidUiDispatcher$Companion: kotlin.reflect.KProperty[] $$delegatedProperties>
    private void <init>()
    {
        androidx.compose.AndroidUiDispatcher$Companion r0;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.compose.AndroidUiDispatcher getMain()
    {
        androidx.compose.AndroidUiDispatcher$Companion r0;
        kotlin.Lazy r1;
        kotlin.reflect.KProperty r2;
        boolean z0;
        kotlin.reflect.KProperty[] $r3;
        java.lang.Object $r4;
        androidx.compose.AndroidUiDispatcher $r5;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion;

        r1 = staticinvoke <androidx.compose.AndroidUiDispatcher: kotlin.Lazy access$getMain$delegate$cp$s937427018()>();

        $r3 = <androidx.compose.AndroidUiDispatcher$Companion: kotlin.reflect.KProperty[] $$delegatedProperties>;

        r2 = $r3[0];

        z0 = 0;

        $r4 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r5 = (androidx.compose.AndroidUiDispatcher) $r4;

        return $r5;
    }

    public final androidx.compose.AndroidUiDispatcher getCurrentThread()
    {
        androidx.compose.AndroidUiDispatcher$Companion r0;
        androidx.compose.ThreadLocal $r1;
        java.lang.Object $r2;
        androidx.compose.AndroidUiDispatcher $r3;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion;

        $r1 = staticinvoke <androidx.compose.AndroidUiDispatcher: androidx.compose.ThreadLocal access$getCurrentThread$cp$s937427018()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ThreadLocal: java.lang.Object get()>();

        $r3 = (androidx.compose.AndroidUiDispatcher) $r2;

        return $r3;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.AndroidUiDispatcher$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker r1;

        r0 := @this: androidx.compose.AndroidUiDispatcher$Companion;

        r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.AndroidUiDispatcher$Companion: void <init>()>();

        return;
    }

    public static final void <clinit>()
    {
        kotlin.reflect.KProperty[] r0;
        kotlin.jvm.internal.PropertyReference1Impl $r1;
        kotlin.reflect.KClass $r2;
        kotlin.reflect.KDeclarationContainer $r3;
        kotlin.jvm.internal.PropertyReference1 $r4;
        kotlin.reflect.KProperty1 $r5;
        kotlin.reflect.KProperty $r6;

        r0 = newarray (kotlin.reflect.KProperty)[1];

        $r1 = new kotlin.jvm.internal.PropertyReference1Impl;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/compose/AndroidUiDispatcher$Companion;");

        $r3 = (kotlin.reflect.KDeclarationContainer) $r2;

        specialinvoke $r1.<kotlin.jvm.internal.PropertyReference1Impl: void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)>($r3, "Main", "getMain()Landroidx/compose/AndroidUiDispatcher;");

        $r4 = (kotlin.jvm.internal.PropertyReference1) $r1;

        $r5 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)>($r4);

        $r6 = (kotlin.reflect.KProperty) $r5;

        r0[0] = $r6;

        <androidx.compose.AndroidUiDispatcher$Companion: kotlin.reflect.KProperty[] $$delegatedProperties> = r0;

        return;
    }

androidx.compose.AndroidUiDispatcher$dispatchCallback$1
<androidx.compose.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.AndroidUiDispatcher $this>
    void <init>(androidx.compose.AndroidUiDispatcher)
    {
        androidx.compose.AndroidUiDispatcher$dispatchCallback$1 r0;
        androidx.compose.AndroidUiDispatcher $r1;

        r0 := @this: androidx.compose.AndroidUiDispatcher$dispatchCallback$1;

        $r1 := @parameter0: androidx.compose.AndroidUiDispatcher;

        r0.<androidx.compose.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.AndroidUiDispatcher $this> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.compose.AndroidUiDispatcher$dispatchCallback$1 r0;
        java.lang.Object r1;
        androidx.compose.AndroidUiDispatcher r2, $r4, $r5;
        boolean z1, $z4, z5;
        kotlin.Unit r3;
        java.util.List $r6;
        android.view.Choreographer $r7;
        android.view.Choreographer$FrameCallback $r8;
        java.lang.Throwable $r9, r10;

        r0 := @this: androidx.compose.AndroidUiDispatcher$dispatchCallback$1;

        $r4 = r0.<androidx.compose.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.AndroidUiDispatcher $this>;

        staticinvoke <androidx.compose.AndroidUiDispatcher: void access$performTrampolineDispatch(androidx.compose.AndroidUiDispatcher)>($r4);

        $r5 = r0.<androidx.compose.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.AndroidUiDispatcher $this>;

        r1 = staticinvoke <androidx.compose.AndroidUiDispatcher: java.lang.Object access$getLock$p(androidx.compose.AndroidUiDispatcher)>($r5);

        r2 = r0.<androidx.compose.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.AndroidUiDispatcher $this>;

        z1 = 0;

        z5 = 0;

        entermonitor r1;

     label1:
        $r6 = staticinvoke <androidx.compose.AndroidUiDispatcher: java.util.List access$getToRunOnFrame$p(androidx.compose.AndroidUiDispatcher)>(r2);

        $z4 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label2;

        $r7 = virtualinvoke r2.<androidx.compose.AndroidUiDispatcher: android.view.Choreographer getChoreographer()>();

        $r8 = (android.view.Choreographer$FrameCallback) r0;

        virtualinvoke $r7.<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>($r8);

        staticinvoke <androidx.compose.AndroidUiDispatcher: void access$setScheduledFrameDispatch$p(androidx.compose.AndroidUiDispatcher,boolean)>(r2, 0);

     label2:
        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r1;

        goto label6;

     label4:
        $r9 := @caughtexception;

        r10 = $r9;

     label5:
        exitmonitor r1;

        throw r10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void doFrame(long)
    {
        androidx.compose.AndroidUiDispatcher$dispatchCallback$1 r0;
        long l0;
        androidx.compose.AndroidUiDispatcher $r1, $r4, $r5;
        android.os.Handler $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.compose.AndroidUiDispatcher$dispatchCallback$1;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.AndroidUiDispatcher $this>;

        $r2 = staticinvoke <androidx.compose.AndroidUiDispatcher: android.os.Handler access$getHandler$p(androidx.compose.AndroidUiDispatcher)>($r1);

        $r3 = (java.lang.Runnable) r0;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        $r4 = r0.<androidx.compose.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.AndroidUiDispatcher $this>;

        staticinvoke <androidx.compose.AndroidUiDispatcher: void access$performTrampolineDispatch(androidx.compose.AndroidUiDispatcher)>($r4);

        $r5 = r0.<androidx.compose.AndroidUiDispatcher$dispatchCallback$1: androidx.compose.AndroidUiDispatcher $this>;

        staticinvoke <androidx.compose.AndroidUiDispatcher: void access$performFrameDispatch(androidx.compose.AndroidUiDispatcher,long)>($r5, l0);

        return;
    }

