androidx.camera.video.internal.DebugUtils
<androidx.camera.video.internal.DebugUtils: java.lang.String TAG>
<androidx.camera.video.internal.DebugUtils: java.lang.String CODEC_CAPS_PREFIX>
<androidx.camera.video.internal.DebugUtils: java.lang.String VIDEO_CAPS_PREFIX>
<androidx.camera.video.internal.DebugUtils: java.lang.String AUDIO_CAPS_PREFIX>
<androidx.camera.video.internal.DebugUtils: java.lang.String ENCODER_CAPS_PREFIX>
    private void <init>()
    {
        androidx.camera.video.internal.DebugUtils r0;

        r0 := @this: androidx.camera.video.internal.DebugUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String readableUs(long)
    {
        long l0, $l1;
        java.util.concurrent.TimeUnit $r0;
        java.lang.String $r1;

        l0 := @parameter0: long;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;

        $l1 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $r1 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableMs(long)>($l1);

        return $r1;
    }

    public static java.lang.String readableMs(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String formatInterval(long)>(l0);

        return $r0;
    }

    public static java.lang.String readableBufferInfo(android.media.MediaCodec$BufferInfo)
    {
        android.media.MediaCodec$BufferInfo r0;
        java.lang.StringBuilder r1, $r3, $r4, $r5, $r7, $r8, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r30, $r31, $r32, $r33, $r35, $r36, $r40, $r42;
        java.util.ArrayList r2, $r28;
        java.lang.String $r6, $r9, $r15, $r21, $r26, $r34, $r37, $r39, $r41;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        long $l11, $l12;

        r0 := @parameter0: android.media.MediaCodec$BufferInfo;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dump BufferInfo: ");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\toffset: ");

        $i0 = r0.<android.media.MediaCodec$BufferInfo: int offset>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tsize: ");

        $i1 = r0.<android.media.MediaCodec$BufferInfo: int size>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tflag: ");

        $i2 = r0.<android.media.MediaCodec$BufferInfo: int flags>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        r2 = $r28;

        $i3 = r0.<android.media.MediaCodec$BufferInfo: int flags>;

        $i4 = $i3 & 4;

        if $i4 == 0 goto label1;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>("EOS");

     label1:
        $i5 = r0.<android.media.MediaCodec$BufferInfo: int flags>;

        $i6 = $i5 & 2;

        if $i6 == 0 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>("CODEC_CONFIG");

     label2:
        $i7 = r0.<android.media.MediaCodec$BufferInfo: int flags>;

        $i8 = $i7 & 1;

        if $i8 == 0 goto label3;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>("KEY_FRAME");

     label3:
        $i9 = r0.<android.media.MediaCodec$BufferInfo: int flags>;

        $i10 = $i9 & 8;

        if $i10 == 0 goto label4;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>("PARTIAL_FRAME");

     label4:
        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r40 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r41 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(" | ", r2);

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpresentationTime: ");

        $l11 = r0.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $l12 = r0.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r34 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableUs(long)>($l12);

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r39;
    }

    private static java.lang.String formatInterval(long)
    {
        long l0, l1, l2, l3, l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15;
        java.util.concurrent.TimeUnit $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.Object[] $r9;
        java.util.Locale $r10;
        java.lang.Long $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        l0 := @parameter0: long;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        l1 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toHours(long)>(l0);

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $l5 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l1);

        $l6 = l0 - $l5;

        l2 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMinutes(long)>($l6);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $l7 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>(l1);

        $l8 = l0 - $l7;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l9 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>(l2);

        $l10 = $l8 - $l9;

        l3 = virtualinvoke $r4.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l10);

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $l11 = virtualinvoke $r6.<java.util.concurrent.TimeUnit: long toMillis(long)>(l1);

        $l12 = l0 - $l11;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l13 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>(l2);

        $l14 = $l12 - $l13;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l15 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: long toMillis(long)>(l3);

        l4 = $l14 - $l15;

        $r10 = <java.util.Locale: java.util.Locale US>;

        $r9 = newarray (java.lang.Object)[4];

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r9[1] = $r12;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r9[2] = $r13;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r9[3] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r10, "%02d:%02d:%02d.%03d", $r9);

        return $r15;
    }

    public static java.lang.String dumpMediaCodecListForFormat(android.media.MediaCodecList, android.media.MediaFormat)
    {
        android.media.MediaCodecList r0;
        android.media.MediaFormat r1;
        java.lang.StringBuilder r2, $r5, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r23, $r24, $r26, $r27, $r28;
        java.lang.String r3, $r9, $r12, $r15, $r18, $r21, $r25, $r29, r33;
        int i0, i1;
        android.media.MediaCodecInfo r4;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r22, r32;
        android.media.MediaCodecInfo[] r30;
        android.media.MediaCodecInfo$CodecCapabilities r31;

        r0 := @parameter0: android.media.MediaCodecList;

        r1 := @parameter1: android.media.MediaFormat;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r2 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Start] Dump MediaCodecList for mediaFormat ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r2, $r9);

        r3 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("mime");

        r30 = virtualinvoke r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] getCodecInfos()>();

        i0 = lengthof r30;

        i1 = 0;

     label01:
        if i1 >= i0 goto label10;

        r4 = r30[i1];

        $z0 = virtualinvoke r4.<android.media.MediaCodecInfo: boolean isEncoder()>();

        if $z0 != 0 goto label02;

        goto label09;

     label02:
        if r3 == null goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z1);

        r31 = virtualinvoke r4.<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)>(r3);

        if r31 == null goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z2);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Start] [");

        $r12 = virtualinvoke r4.<android.media.MediaCodecInfo: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r2, $r15);

        staticinvoke <androidx.camera.video.internal.DebugUtils: void dumpCodecCapabilities(java.lang.StringBuilder,android.media.MediaCodecInfo$CodecCapabilities,android.media.MediaFormat)>(r2, r31, r1);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[End] [");

        $r18 = virtualinvoke r4.<android.media.MediaCodecInfo: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r2, $r21);

     label07:
        goto label09;

     label08:
        $r22 := @caughtexception;

        r32 = $r22;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r25 = virtualinvoke r4.<android.media.MediaCodecInfo: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not support mime ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r2, $r29);

     label09:
        i1 = i1 + 1;

        goto label01;

     label10:
        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r2, "[End] Dump MediaCodecList");

        r33 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void stringToLog(java.lang.String)>(r33);

        return r33;

        catch java.lang.IllegalArgumentException from label02 to label07 with label08;
    }

    public static java.lang.String dumpCodecCapabilities(java.lang.String, android.media.MediaCodec, android.media.MediaFormat)
    {
        java.lang.String r0, $r6, $r10, $r14;
        android.media.MediaCodec r1;
        android.media.MediaFormat r2;
        java.lang.StringBuilder r3, $r4, $r8, $r9, $r11, $r12, $r13;
        android.media.MediaCodecInfo $r5;
        java.lang.Throwable $r7, r16;
        android.media.MediaCodecInfo$CodecCapabilities r15;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.media.MediaCodec;

        r2 := @parameter2: android.media.MediaFormat;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r3 = $r4;

     label1:
        $r5 = virtualinvoke r1.<android.media.MediaCodec: android.media.MediaCodecInfo getCodecInfo()>();

        r15 = virtualinvoke $r5.<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)>(r0);

        if r15 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z0);

        staticinvoke <androidx.camera.video.internal.DebugUtils: void dumpCodecCapabilities(java.lang.StringBuilder,android.media.MediaCodecInfo$CodecCapabilities,android.media.MediaFormat)>(r3, r15, r2);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        r16 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r10 = virtualinvoke r1.<android.media.MediaCodec: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not support mime ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r3, $r14);

     label6:
        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

        catch java.lang.IllegalArgumentException from label1 to label4 with label5;
    }

    private static void dumpCodecCapabilities(java.lang.StringBuilder, android.media.MediaCodecInfo$CodecCapabilities, android.media.MediaFormat)
    {
        java.lang.StringBuilder r0, $r4, $r5, $r6, $r8, $r9, $r11, $r15, $r16, $r19, $r21, $r24, $r26, $r27, $r28, r33;
        android.media.MediaCodecInfo$CodecCapabilities r1;
        android.media.MediaFormat r2, $r10;
        int i0, i1;
        android.media.MediaCodecInfo$CodecProfileLevel r3;
        boolean $z0;
        java.lang.String $r7, $r12, $r18, $r20, $r23, $r29, $r30;
        android.media.MediaCodecInfo$CodecProfileLevel[] $r13, r35;
        int[] $r14, $r17;
        java.util.ArrayList $r22, r34;
        java.lang.Throwable $r31, r32;
        android.media.MediaCodecInfo$VideoCapabilities r36;
        android.media.MediaCodecInfo$AudioCapabilities r37;
        android.media.MediaCodecInfo$EncoderCapabilities r38;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: android.media.MediaCodecInfo$CodecCapabilities;

        r2 := @parameter2: android.media.MediaFormat;

     label01:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CodecCaps] isFormatSupported = ");

        $z0 = virtualinvoke r1.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFormatSupported(android.media.MediaFormat)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r7);

     label02:
        goto label04;

     label03:
        $r31 := @caughtexception;

        r32 = $r31;

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, "[CodecCaps] isFormatSupported=false");

     label04:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CodecCaps] getDefaultFormat = ");

        $r10 = virtualinvoke r1.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat getDefaultFormat()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r12);

        $r13 = r1.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

        if $r13 == null goto label07;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        r33 = $r21;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r34 = $r22;

        r35 = r1.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

        i0 = lengthof r35;

        i1 = 0;

     label05:
        if i1 >= i0 goto label06;

        r3 = r35[i1];

        $r30 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String toString(android.media.MediaCodecInfo$CodecProfileLevel)>(r3);

        interfaceinvoke r34.<java.util.List: boolean add(java.lang.Object)>($r30);

        i1 = i1 + 1;

        goto label05;

     label06:
        $r23 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", r34);

        $r24 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CodecCaps] profileLevels = ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r29);

     label07:
        $r14 = r1.<android.media.MediaCodecInfo$CodecCapabilities: int[] colorFormats>;

        if $r14 == null goto label08;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CodecCaps] colorFormats = ");

        $r17 = r1.<android.media.MediaCodecInfo$CodecCapabilities: int[] colorFormats>;

        $r18 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r20);

     label08:
        r36 = virtualinvoke r1.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()>();

        if r36 == null goto label09;

        staticinvoke <androidx.camera.video.internal.DebugUtils: void dumpVideoCapabilities(java.lang.StringBuilder,android.media.MediaCodecInfo$VideoCapabilities,android.media.MediaFormat)>(r0, r36, r2);

     label09:
        r37 = virtualinvoke r1.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities getAudioCapabilities()>();

        if r37 == null goto label10;

        staticinvoke <androidx.camera.video.internal.DebugUtils: void dumpAudioCapabilities(java.lang.StringBuilder,android.media.MediaCodecInfo$AudioCapabilities,android.media.MediaFormat)>(r0, r37, r2);

     label10:
        r38 = virtualinvoke r1.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities getEncoderCapabilities()>();

        if r38 == null goto label11;

        staticinvoke <androidx.camera.video.internal.DebugUtils: void dumpEncoderCapabilities(java.lang.StringBuilder,android.media.MediaCodecInfo$EncoderCapabilities,android.media.MediaFormat)>(r0, r38, r2);

     label11:
        return;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }

    private static void dumpVideoCapabilities(java.lang.StringBuilder, android.media.MediaCodecInfo$VideoCapabilities, android.media.MediaFormat)
    {
        java.lang.StringBuilder r0, $r4, $r5, $r7, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r38, $r40, $r42, $r43, $r44, $r45, $r47, $r49, $r50, $r51, $r52, $r54, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r65, $r66, $r67, $r70, $r71, $r72, $r79, $r80, $r82;
        android.media.MediaCodecInfo$VideoCapabilities r1;
        android.media.MediaFormat r2;
        java.lang.Throwable r3, $r64, $r69, $r74, $r75, r76, r77, r78;
        android.util.Range $r6, $r11, $r18, $r39, $r46, $r53, $r81;
        java.lang.String $r8, $r15, $r22, $r32, $r41, $r48, $r55, $r63, $r68, $r73, $r83;
        int $i0, $i1, i2, i3, i4;
        double $d0;
        boolean $z0, $z1, z2, $z3, $z4;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: android.media.MediaCodecInfo$VideoCapabilities;

        r2 := @parameter2: android.media.MediaFormat;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] getBitrateRange = ");

        $r6 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBitrateRange()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] getSupportedWidths = ");

        $r11 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedWidths()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", getWidthAlignment = ");

        $i0 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: int getWidthAlignment()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] getSupportedHeights = ");

        $r18 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedHeights()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", getHeightAlignment = ");

        $i1 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: int getHeightAlignment()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r22);

        z2 = 1;

     label01:
        i2 = virtualinvoke r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("width");

        i3 = virtualinvoke r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("height");

        if i2 <= 0 goto label02;

        if i3 <= 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z3);

     label04:
        goto label06;

     label05:
        $r74 := @caughtexception;

        r76 = $r74;

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, "[VideoCaps] mediaFormat does not contain valid width and height");

        i3 = 0;

        i2 = 0;

        z2 = 0;

     label06:
        if z2 == 0 goto label14;

     label07:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] getSupportedHeightsFor ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r46 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedHeightsFor(int)>(i2);

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r48);

     label08:
        goto label10;

     label09:
        $r69 := @caughtexception;

        r77 = $r69;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] could not getSupportedHeightsFor ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r73);

     label10:
        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] getSupportedWidthsFor ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r53 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedWidthsFor(int)>(i3);

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r55);

     label11:
        goto label13;

     label12:
        $r64 := @caughtexception;

        r78 = $r64;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] could not getSupportedWidthsFor ");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r68);

     label13:
        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] isSizeSupported for ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $z1 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: boolean isSizeSupported(int,int)>(i2, i3);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r63);

     label14:
        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] getSupportedFrameRates = ");

        $r81 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedFrameRates()>();

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r83);

     label15:
        i4 = virtualinvoke r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("frame-rate");

        if i4 <= 0 goto label16;

        $z4 = 1;

        goto label17;

     label16:
        $z4 = 0;

     label17:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z4);

     label18:
        goto label20;

     label19:
        $r75 := @caughtexception;

        r3 = $r75;

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, "[VideoCaps] mediaFormat does not contain frame rate");

        i4 = 0;

     label20:
        if z2 == 0 goto label21;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] getSupportedFrameRatesFor ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r39 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedFrameRatesFor(int,int)>(i2, i3);

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r41);

     label21:
        if z2 == 0 goto label22;

        if i4 <= 0 goto label22;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VideoCaps] areSizeAndRateSupported for ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $d0 = (double) i4;

        $z0 = virtualinvoke r1.<android.media.MediaCodecInfo$VideoCapabilities: boolean areSizeAndRateSupported(int,int,double)>(i2, i3, $d0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r32);

     label22:
        return;

        catch java.lang.NullPointerException from label01 to label04 with label05;
        catch java.lang.IllegalArgumentException from label01 to label04 with label05;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
        catch java.lang.NullPointerException from label15 to label18 with label19;
        catch java.lang.IllegalArgumentException from label15 to label18 with label19;
    }

    private static void dumpAudioCapabilities(java.lang.StringBuilder, android.media.MediaCodecInfo$AudioCapabilities, android.media.MediaFormat)
    {
        java.lang.StringBuilder r0, $r3, $r4, $r6, $r8, $r9, $r10, $r12, $r13, $r16, $r18, $r19, $r22, $r24, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r34, $r35, $r38;
        android.media.MediaCodecInfo$AudioCapabilities r1;
        android.media.MediaFormat r2;
        android.util.Range $r5;
        java.lang.String $r7, $r11, $r15, $r17, $r21, $r23, $r29, $r33, $r37, $r39;
        int $i0, $i1, $i2, i3;
        android.util.Range[] $r14, $r36;
        int[] $r20;
        boolean $z0;
        java.lang.Throwable $r40, r41;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: android.media.MediaCodecInfo$AudioCapabilities;

        r2 := @parameter2: android.media.MediaFormat;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[AudioCaps] getBitrateRange = ");

        $r5 = virtualinvoke r1.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range getBitrateRange()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[AudioCaps] getMaxInputChannelCount = ");

        $i0 = virtualinvoke r1.<android.media.MediaCodecInfo$AudioCapabilities: int getMaxInputChannelCount()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r11);

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 31 goto label1;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[AudioCaps] getMinInputChannelCount = ");

        $i2 = staticinvoke <androidx.camera.video.internal.compat.Api31Impl: int getMinInputChannelCount(android.media.MediaCodecInfo$AudioCapabilities)>(r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r33);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[AudioCaps] getInputChannelCountRanges = ");

        $r36 = staticinvoke <androidx.camera.video.internal.compat.Api31Impl: android.util.Range[] getInputChannelCountRanges(android.media.MediaCodecInfo$AudioCapabilities)>(r1);

        $r37 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r36);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r39);

     label1:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[AudioCaps] getSupportedSampleRateRanges = ");

        $r14 = virtualinvoke r1.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] getSupportedSampleRateRanges()>();

        $r15 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r17);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[AudioCaps] getSupportedSampleRates = ");

        $r20 = virtualinvoke r1.<android.media.MediaCodecInfo$AudioCapabilities: int[] getSupportedSampleRates()>();

        $r21 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r23);

     label2:
        i3 = virtualinvoke r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("sample-rate");

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[AudioCaps] isSampleRateSupported for ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $z0 = virtualinvoke r1.<android.media.MediaCodecInfo$AudioCapabilities: boolean isSampleRateSupported(int)>(i3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r29);

     label3:
        goto label5;

     label4:
        $r40 := @caughtexception;

        r41 = $r40;

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, "[AudioCaps] mediaFormat does not contain sample rate");

     label5:
        return;

        catch java.lang.NullPointerException from label2 to label3 with label4;
        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    private static void dumpEncoderCapabilities(java.lang.StringBuilder, android.media.MediaCodecInfo$EncoderCapabilities, android.media.MediaFormat)
    {
        java.lang.StringBuilder r0, $r4, $r5, $r7, $r9, $r10, $r11, $r13, $r14, $r16;
        android.media.MediaCodecInfo$EncoderCapabilities r1;
        android.media.MediaFormat r2;
        int i0, $i1;
        java.lang.Throwable r3, $r18;
        android.util.Range $r6, $r15;
        java.lang.String $r8, $r12, $r17;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: android.media.MediaCodecInfo$EncoderCapabilities;

        r2 := @parameter2: android.media.MediaFormat;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[EncoderCaps] getComplexityRange = ");

        $r6 = virtualinvoke r1.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range getComplexityRange()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r8);

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 28 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[EncoderCaps] getQualityRange = ");

        $r15 = staticinvoke <androidx.camera.video.internal.compat.Api28Impl: android.util.Range getQualityRange(android.media.MediaCodecInfo$EncoderCapabilities)>(r1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r17);

     label1:
        i0 = virtualinvoke r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("bitrate-mode");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[EncoderCaps] isBitrateModeSupported = ");

        $z0 = virtualinvoke r1.<android.media.MediaCodecInfo$EncoderCapabilities: boolean isBitrateModeSupported(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, $r12);

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

        r3 = $r18;

        staticinvoke <androidx.camera.video.internal.DebugUtils: void logToString(java.lang.StringBuilder,java.lang.String)>(r0, "[EncoderCaps] mediaFormat does not contain bitrate mode");

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private static void logToString(java.lang.StringBuilder, java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        return;
    }

    private static void stringToLog(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.util.Scanner r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <androidx.camera.core.Logger: boolean isInfoEnabled(java.lang.String)>("DebugUtils");

        if $z0 == 0 goto label2;

        $r2 = new java.util.Scanner;

        specialinvoke $r2.<java.util.Scanner: void <init>(java.lang.String)>(r0);

        r1 = $r2;

     label1:
        $z1 = virtualinvoke r1.<java.util.Scanner: boolean hasNextLine()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r1.<java.util.Scanner: java.lang.String nextLine()>();

        staticinvoke <androidx.camera.core.Logger: void i(java.lang.String,java.lang.String)>("DebugUtils", $r3);

        goto label1;

     label2:
        return;
    }

    private static java.lang.String toString(android.media.MediaCodecInfo$CodecProfileLevel)
    {
        android.media.MediaCodecInfo$CodecProfileLevel r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Integer $r2, $r3;
        java.lang.String $r4;

        r0 := @parameter0: android.media.MediaCodecInfo$CodecProfileLevel;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = newarray (java.lang.Object)[2];

        $i0 = r0.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i1 = r0.<android.media.MediaCodecInfo$CodecProfileLevel: int profile>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("{level=%d, profile=%d}", $r1);

        return $r4;
    }

