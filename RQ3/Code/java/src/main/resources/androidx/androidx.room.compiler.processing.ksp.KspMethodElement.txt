androidx.room.compiler.processing.ksp.KspMethodElement
<androidx.room.compiler.processing.ksp.KspMethodElement: androidx.room.compiler.processing.ksp.KspMethodElement$Companion Companion>
<androidx.room.compiler.processing.ksp.KspMethodElement: kotlin.Lazy jvmName$delegate>
<androidx.room.compiler.processing.ksp.KspMethodElement: kotlin.Lazy parameters$delegate>
<androidx.room.compiler.processing.ksp.KspMethodElement: kotlin.Lazy executableType$delegate>
    private void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, com.google.devtools.ksp.symbol.KSFunctionDeclaration)
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        com.google.devtools.ksp.symbol.KSFunctionDeclaration r2;
        androidx.room.compiler.processing.ksp.KspMethodElement$jvmName$2 $r3;
        kotlin.jvm.functions.Function0 $r4, $r7, $r10;
        kotlin.Lazy $r5, $r8, $r11;
        androidx.room.compiler.processing.ksp.KspMethodElement$parameters$2 $r6;
        androidx.room.compiler.processing.ksp.KspMethodElement$executableType$2 $r9;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSFunctionDeclaration;

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspExecutableElement: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSFunctionDeclaration)>(r1, r2);

        $r3 = new androidx.room.compiler.processing.ksp.KspMethodElement$jvmName$2;

        specialinvoke $r3.<androidx.room.compiler.processing.ksp.KspMethodElement$jvmName$2: void <init>(androidx.room.compiler.processing.ksp.KspMethodElement,com.google.devtools.ksp.symbol.KSFunctionDeclaration,androidx.room.compiler.processing.ksp.KspProcessingEnv)>(r0, r2, r1);

        $r4 = (kotlin.jvm.functions.Function0) $r3;

        $r5 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r4);

        r0.<androidx.room.compiler.processing.ksp.KspMethodElement: kotlin.Lazy jvmName$delegate> = $r5;

        $r6 = new androidx.room.compiler.processing.ksp.KspMethodElement$parameters$2;

        specialinvoke $r6.<androidx.room.compiler.processing.ksp.KspMethodElement$parameters$2: void <init>(com.google.devtools.ksp.symbol.KSFunctionDeclaration,androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspMethodElement)>(r2, r1, r0);

        $r7 = (kotlin.jvm.functions.Function0) $r6;

        $r8 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r7);

        r0.<androidx.room.compiler.processing.ksp.KspMethodElement: kotlin.Lazy parameters$delegate> = $r8;

        $r9 = new androidx.room.compiler.processing.ksp.KspMethodElement$executableType$2;

        specialinvoke $r9.<androidx.room.compiler.processing.ksp.KspMethodElement$executableType$2: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspMethodElement)>(r1, r0);

        $r10 = (kotlin.jvm.functions.Function0) $r9;

        $r11 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r10);

        r0.<androidx.room.compiler.processing.ksp.KspMethodElement: kotlin.Lazy executableType$delegate> = $r11;

        return;
    }

    public java.lang.String getName()
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        com.google.devtools.ksp.symbol.KSFunctionDeclaration $r1;
        com.google.devtools.ksp.symbol.KSName $r2;
        java.lang.String $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: com.google.devtools.ksp.symbol.KSFunctionDeclaration getDeclaration()>();

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.symbol.KSFunctionDeclaration: com.google.devtools.ksp.symbol.KSName getSimpleName()>();

        $r3 = interfaceinvoke $r2.<com.google.devtools.ksp.symbol.KSName: java.lang.String asString()>();

        return $r3;
    }

    public java.lang.String getJvmName()
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspMethodElement: kotlin.Lazy jvmName$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public static void getJvmName$annotations()
    {
        return;
    }

    public java.util.List getParameters()
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspMethodElement: kotlin.Lazy parameters$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    public androidx.room.compiler.processing.XMethodType getExecutableType()
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.room.compiler.processing.XMethodType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspMethodElement: kotlin.Lazy executableType$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.processing.XMethodType) $r2;

        return $r3;
    }

    public boolean isJavaDefault()
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        com.google.devtools.ksp.symbol.KSFunctionDeclaration $r1, $r4;
        java.util.Set $r2;
        com.google.devtools.ksp.symbol.Modifier $r3;
        boolean $z0, $z1, $z2;
        com.google.devtools.ksp.symbol.KSAnnotated $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: com.google.devtools.ksp.symbol.KSFunctionDeclaration getDeclaration()>();

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.symbol.KSFunctionDeclaration: java.util.Set getModifiers()>();

        $r3 = <com.google.devtools.ksp.symbol.Modifier: com.google.devtools.ksp.symbol.Modifier JAVA_DEFAULT>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: com.google.devtools.ksp.symbol.KSFunctionDeclaration getDeclaration()>();

        $r5 = (com.google.devtools.ksp.symbol.KSAnnotated) $r4;

        $z1 = staticinvoke <androidx.room.compiler.processing.ksp.KSAnnotatedExtKt: boolean hasJvmDefaultAnnotation(com.google.devtools.ksp.symbol.KSAnnotated)>($r5);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public androidx.room.compiler.processing.XMethodType asMemberOf(androidx.room.compiler.processing.XType)
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        androidx.room.compiler.processing.XType r1;
        java.lang.String r2, $r9;
        boolean $z0;
        androidx.room.compiler.processing.ksp.KspMethodType$Companion $r3;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r4;
        androidx.room.compiler.processing.ksp.KspType $r5;
        androidx.room.compiler.processing.ksp.KspMethodType $r6;
        androidx.room.compiler.processing.XMethodType $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        r1 := @parameter0: androidx.room.compiler.processing.XType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $z0 = r1 instanceof androidx.room.compiler.processing.ksp.KspType;

        if $z0 != 0 goto label1;

        r2 = "Check failed.";

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label1:
        $r3 = <androidx.room.compiler.processing.ksp.KspMethodType: androidx.room.compiler.processing.ksp.KspMethodType$Companion Companion>;

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv$room_compiler_processing()>();

        $r5 = (androidx.room.compiler.processing.ksp.KspType) r1;

        $r6 = virtualinvoke $r3.<androidx.room.compiler.processing.ksp.KspMethodType$Companion: androidx.room.compiler.processing.ksp.KspMethodType create(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspMethodElement,androidx.room.compiler.processing.ksp.KspType)>($r4, r0, $r5);

        $r7 = (androidx.room.compiler.processing.XMethodType) $r6;

        return $r7;
    }

    public boolean hasKotlinDefaultImpl()
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        com.google.devtools.ksp.symbol.KSDeclaration r1;
        com.google.devtools.ksp.symbol.KSFunctionDeclaration $r2, $r6;
        boolean $z0, $z1, $z2, $z3;
        com.google.devtools.ksp.symbol.KSClassDeclaration $r3;
        com.google.devtools.ksp.symbol.ClassKind $r4, $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: com.google.devtools.ksp.symbol.KSFunctionDeclaration getDeclaration()>();

        r1 = interfaceinvoke $r2.<com.google.devtools.ksp.symbol.KSFunctionDeclaration: com.google.devtools.ksp.symbol.KSDeclaration getParentDeclaration()>();

        $z0 = r1 instanceof com.google.devtools.ksp.symbol.KSClassDeclaration;

        if $z0 == 0 goto label1;

        $r3 = (com.google.devtools.ksp.symbol.KSClassDeclaration) r1;

        $r4 = interfaceinvoke $r3.<com.google.devtools.ksp.symbol.KSClassDeclaration: com.google.devtools.ksp.symbol.ClassKind getClassKind()>();

        $r5 = <com.google.devtools.ksp.symbol.ClassKind: com.google.devtools.ksp.symbol.ClassKind INTERFACE>;

        if $r4 != $r5 goto label1;

        $r6 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: com.google.devtools.ksp.symbol.KSFunctionDeclaration getDeclaration()>();

        $z1 = interfaceinvoke $r6.<com.google.devtools.ksp.symbol.KSFunctionDeclaration: boolean isAbstract()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: boolean isPrivate()>();

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public boolean isExtensionFunction()
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        com.google.devtools.ksp.symbol.KSFunctionDeclaration $r1;
        com.google.devtools.ksp.symbol.KSTypeReference $r2;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: com.google.devtools.ksp.symbol.KSFunctionDeclaration getDeclaration()>();

        $r2 = interfaceinvoke $r1.<com.google.devtools.ksp.symbol.KSFunctionDeclaration: com.google.devtools.ksp.symbol.KSTypeReference getExtensionReceiver()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean overrides(androidx.room.compiler.processing.XMethodElement, androidx.room.compiler.processing.XTypeElement)
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        androidx.room.compiler.processing.XMethodElement r1, $r5;
        androidx.room.compiler.processing.XTypeElement r2;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r3;
        com.google.devtools.ksp.processing.Resolver $r4;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        r1 := @parameter0: androidx.room.compiler.processing.XMethodElement;

        r2 := @parameter1: androidx.room.compiler.processing.XTypeElement;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "owner");

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv$room_compiler_processing()>();

        $r4 = virtualinvoke $r3.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r5 = (androidx.room.compiler.processing.XMethodElement) r0;

        $z0 = staticinvoke <androidx.room.compiler.processing.ksp.ResolverExtKt: boolean overrides(com.google.devtools.ksp.processing.Resolver,androidx.room.compiler.processing.XMethodElement,androidx.room.compiler.processing.XMethodElement)>($r4, $r5, r1);

        return $z0;
    }

    public volatile androidx.room.compiler.processing.XExecutableType getExecutableType()
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        androidx.room.compiler.processing.XMethodType $r1;
        androidx.room.compiler.processing.XExecutableType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: androidx.room.compiler.processing.XMethodType getExecutableType()>();

        $r2 = (androidx.room.compiler.processing.XExecutableType) $r1;

        return $r2;
    }

    public volatile androidx.room.compiler.processing.XExecutableType asMemberOf(androidx.room.compiler.processing.XType)
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        androidx.room.compiler.processing.XType r1;
        androidx.room.compiler.processing.XMethodType $r2;
        androidx.room.compiler.processing.XExecutableType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        r1 := @parameter0: androidx.room.compiler.processing.XType;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: androidx.room.compiler.processing.XMethodType asMemberOf(androidx.room.compiler.processing.XType)>(r1);

        $r3 = (androidx.room.compiler.processing.XExecutableType) $r2;

        return $r3;
    }

    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, com.google.devtools.ksp.symbol.KSFunctionDeclaration, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.processing.ksp.KspMethodElement r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        com.google.devtools.ksp.symbol.KSFunctionDeclaration r2;
        kotlin.jvm.internal.DefaultConstructorMarker $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodElement;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSFunctionDeclaration;

        $r3 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodElement: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSFunctionDeclaration)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.ksp.KspMethodElement$Companion $r0;

        $r0 = new androidx.room.compiler.processing.ksp.KspMethodElement$Companion;

        specialinvoke $r0.<androidx.room.compiler.processing.ksp.KspMethodElement$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.compiler.processing.ksp.KspMethodElement: androidx.room.compiler.processing.ksp.KspMethodElement$Companion Companion> = $r0;

        return;
    }

