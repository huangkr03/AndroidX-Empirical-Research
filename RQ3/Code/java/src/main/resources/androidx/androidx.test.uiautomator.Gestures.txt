androidx.test.uiautomator.Gestures
<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.Gestures sInstance>
<androidx.test.uiautomator.Gestures: int INNER>
<androidx.test.uiautomator.Gestures: int OUTER>
<androidx.test.uiautomator.Gestures: int INNER_MARGIN>
<androidx.test.uiautomator.Gestures: android.view.ViewConfiguration mViewConfig>
    private void <init>(android.view.ViewConfiguration)
    {
        androidx.test.uiautomator.Gestures r0;
        android.view.ViewConfiguration r1;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.view.ViewConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.uiautomator.Gestures: android.view.ViewConfiguration mViewConfig> = r1;

        return;
    }

    public static androidx.test.uiautomator.Gestures getInstance(androidx.test.uiautomator.UiDevice)
    {
        androidx.test.uiautomator.UiDevice r0;
        android.content.Context r1;
        androidx.test.uiautomator.Gestures $r2, $r3, $r5;
        android.app.Instrumentation $r4;
        android.view.ViewConfiguration $r6;

        r0 := @parameter0: androidx.test.uiautomator.UiDevice;

        $r2 = <androidx.test.uiautomator.Gestures: androidx.test.uiautomator.Gestures sInstance>;

        if $r2 != null goto label1;

        $r4 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.app.Instrumentation getInstrumentation()>();

        r1 = virtualinvoke $r4.<android.app.Instrumentation: android.content.Context getContext()>();

        $r5 = new androidx.test.uiautomator.Gestures;

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        specialinvoke $r5.<androidx.test.uiautomator.Gestures: void <init>(android.view.ViewConfiguration)>($r6);

        <androidx.test.uiautomator.Gestures: androidx.test.uiautomator.Gestures sInstance> = $r5;

     label1:
        $r3 = <androidx.test.uiautomator.Gestures: androidx.test.uiautomator.Gestures sInstance>;

        return $r3;
    }

    public androidx.test.uiautomator.PointerGesture click(android.graphics.Point)
    {
        androidx.test.uiautomator.Gestures r0;
        android.graphics.Point r1;
        androidx.test.uiautomator.PointerGesture $r2;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.graphics.Point;

        $r2 = virtualinvoke r0.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture click(android.graphics.Point,long)>(r1, 0L);

        return $r2;
    }

    public androidx.test.uiautomator.PointerGesture click(android.graphics.Point, long)
    {
        androidx.test.uiautomator.Gestures r0;
        android.graphics.Point r1;
        long l0;
        androidx.test.uiautomator.PointerGesture $r2, $r3;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.graphics.Point;

        l0 := @parameter1: long;

        $r2 = new androidx.test.uiautomator.PointerGesture;

        specialinvoke $r2.<androidx.test.uiautomator.PointerGesture: void <init>(android.graphics.Point)>(r1);

        $r3 = virtualinvoke $r2.<androidx.test.uiautomator.PointerGesture: androidx.test.uiautomator.PointerGesture pause(long)>(l0);

        return $r3;
    }

    public androidx.test.uiautomator.PointerGesture longClick(android.graphics.Point)
    {
        androidx.test.uiautomator.Gestures r0;
        android.graphics.Point r1;
        int $i0;
        long $l1;
        androidx.test.uiautomator.PointerGesture $r3;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.graphics.Point;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l1 = (long) $i0;

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture click(android.graphics.Point,long)>(r1, $l1);

        return $r3;
    }

    public androidx.test.uiautomator.PointerGesture swipe(android.graphics.Point, android.graphics.Point, int)
    {
        androidx.test.uiautomator.Gestures r0;
        android.graphics.Point r1, r2;
        int i0;
        androidx.test.uiautomator.PointerGesture $r3, $r4;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.graphics.Point;

        r2 := @parameter1: android.graphics.Point;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture click(android.graphics.Point)>(r1);

        $r4 = virtualinvoke $r3.<androidx.test.uiautomator.PointerGesture: androidx.test.uiautomator.PointerGesture move(android.graphics.Point,int)>(r2, i0);

        return $r4;
    }

    public androidx.test.uiautomator.PointerGesture swipeRect(android.graphics.Rect, androidx.test.uiautomator.Direction, float, int)
    {
        androidx.test.uiautomator.Gestures r0;
        android.graphics.Rect r1;
        androidx.test.uiautomator.Direction r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        int[] $r3;
        android.graphics.Point r13, r14, r16, r17, r18, r19, r20, r21, r22, r23;
        androidx.test.uiautomator.PointerGesture $r15;
        java.lang.RuntimeException r24;
        java.lang.Throwable r25;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: androidx.test.uiautomator.Direction;

        f0 := @parameter2: float;

        i0 := @parameter3: int;

        $r3 = <androidx.test.uiautomator.Gestures$1: int[] $SwitchMap$android$support$test$uiautomator$Direction>;

        $i1 = virtualinvoke r2.<androidx.test.uiautomator.Direction: int ordinal()>();

        $i2 = $r3[$i1];

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        r16 = new android.graphics.Point;

        $i24 = r1.<android.graphics.Rect: int right>;

        $i25 = virtualinvoke r1.<android.graphics.Rect: int centerY()>();

        specialinvoke r16.<android.graphics.Point: void <init>(int,int)>($i24, $i25);

        r13 = r16;

        r17 = new android.graphics.Point;

        $i26 = r1.<android.graphics.Rect: int right>;

        $i27 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f7 = (float) $i27;

        $f8 = $f7 * f0;

        $i28 = (int) $f8;

        $i29 = $i26 - $i28;

        $i30 = virtualinvoke r1.<android.graphics.Rect: int centerY()>();

        specialinvoke r17.<android.graphics.Point: void <init>(int,int)>($i29, $i30);

        r14 = r17;

        goto label6;

     label2:
        r18 = new android.graphics.Point;

        $i17 = r1.<android.graphics.Rect: int left>;

        $i18 = virtualinvoke r1.<android.graphics.Rect: int centerY()>();

        specialinvoke r18.<android.graphics.Point: void <init>(int,int)>($i17, $i18);

        r13 = r18;

        r19 = new android.graphics.Point;

        $i19 = r1.<android.graphics.Rect: int left>;

        $i20 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f5 = (float) $i20;

        $f6 = $f5 * f0;

        $i21 = (int) $f6;

        $i22 = $i19 + $i21;

        $i23 = virtualinvoke r1.<android.graphics.Rect: int centerY()>();

        specialinvoke r19.<android.graphics.Point: void <init>(int,int)>($i22, $i23);

        r14 = r19;

        goto label6;

     label3:
        r20 = new android.graphics.Point;

        $i10 = virtualinvoke r1.<android.graphics.Rect: int centerX()>();

        $i11 = r1.<android.graphics.Rect: int bottom>;

        specialinvoke r20.<android.graphics.Point: void <init>(int,int)>($i10, $i11);

        r13 = r20;

        r21 = new android.graphics.Point;

        $i12 = virtualinvoke r1.<android.graphics.Rect: int centerX()>();

        $i13 = r1.<android.graphics.Rect: int bottom>;

        $i14 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f3 = (float) $i14;

        $f4 = $f3 * f0;

        $i15 = (int) $f4;

        $i16 = $i13 - $i15;

        specialinvoke r21.<android.graphics.Point: void <init>(int,int)>($i12, $i16);

        r14 = r21;

        goto label6;

     label4:
        r22 = new android.graphics.Point;

        $i3 = virtualinvoke r1.<android.graphics.Rect: int centerX()>();

        $i4 = r1.<android.graphics.Rect: int top>;

        specialinvoke r22.<android.graphics.Point: void <init>(int,int)>($i3, $i4);

        r13 = r22;

        r23 = new android.graphics.Point;

        $i5 = virtualinvoke r1.<android.graphics.Rect: int centerX()>();

        $i6 = r1.<android.graphics.Rect: int top>;

        $i7 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f1 = (float) $i7;

        $f2 = $f1 * f0;

        $i8 = (int) $f2;

        $i9 = $i6 + $i8;

        specialinvoke r23.<android.graphics.Point: void <init>(int,int)>($i5, $i9);

        r14 = r23;

        goto label6;

     label5:
        r24 = new java.lang.RuntimeException;

        specialinvoke r24.<java.lang.RuntimeException: void <init>()>();

        r25 = (java.lang.Throwable) r24;

        throw r25;

     label6:
        $r15 = virtualinvoke r0.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture swipe(android.graphics.Point,android.graphics.Point,int)>(r13, r14, i0);

        return $r15;
    }

    public androidx.test.uiautomator.PointerGesture drag(android.graphics.Point, android.graphics.Point, int)
    {
        androidx.test.uiautomator.Gestures r0;
        android.graphics.Point r1, r2;
        int i0;
        androidx.test.uiautomator.PointerGesture $r3, $r4;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.graphics.Point;

        r2 := @parameter1: android.graphics.Point;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture longClick(android.graphics.Point)>(r1);

        $r4 = virtualinvoke $r3.<androidx.test.uiautomator.PointerGesture: androidx.test.uiautomator.PointerGesture move(android.graphics.Point,int)>(r2, i0);

        return $r4;
    }

    public androidx.test.uiautomator.PointerGesture[] pinchClose(android.graphics.Rect, float, int)
    {
        androidx.test.uiautomator.Gestures r0;
        android.graphics.Rect r1;
        float f0;
        int i0;
        android.graphics.Point[] r2, r3;
        androidx.test.uiautomator.PointerGesture[] $r4;
        android.graphics.Point $r5, $r6, $r9, $r10;
        androidx.test.uiautomator.PointerGesture $r7, $r8, $r11, $r12;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.graphics.Rect;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        r2 = newarray (android.graphics.Point)[2];

        r3 = newarray (android.graphics.Point)[2];

        specialinvoke r0.<androidx.test.uiautomator.Gestures: void calcPinchCoordinates(android.graphics.Rect,float,android.graphics.Point[],android.graphics.Point[])>(r1, f0, r2, r3);

        $r4 = newarray (androidx.test.uiautomator.PointerGesture)[2];

        $r6 = r2[1];

        $r5 = r2[0];

        $r7 = virtualinvoke r0.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture swipe(android.graphics.Point,android.graphics.Point,int)>($r6, $r5, i0);

        $r8 = virtualinvoke $r7.<androidx.test.uiautomator.PointerGesture: androidx.test.uiautomator.PointerGesture pause(long)>(250L);

        $r4[0] = $r8;

        $r10 = r3[1];

        $r9 = r3[0];

        $r11 = virtualinvoke r0.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture swipe(android.graphics.Point,android.graphics.Point,int)>($r10, $r9, i0);

        $r12 = virtualinvoke $r11.<androidx.test.uiautomator.PointerGesture: androidx.test.uiautomator.PointerGesture pause(long)>(250L);

        $r4[1] = $r12;

        return $r4;
    }

    public androidx.test.uiautomator.PointerGesture[] pinchOpen(android.graphics.Rect, float, int)
    {
        androidx.test.uiautomator.Gestures r0;
        android.graphics.Rect r1;
        float f0;
        int i0;
        android.graphics.Point[] r2, r3;
        androidx.test.uiautomator.PointerGesture[] $r4;
        android.graphics.Point $r5, $r6, $r8, $r9;
        androidx.test.uiautomator.PointerGesture $r7, $r10;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.graphics.Rect;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        r2 = newarray (android.graphics.Point)[2];

        r3 = newarray (android.graphics.Point)[2];

        specialinvoke r0.<androidx.test.uiautomator.Gestures: void calcPinchCoordinates(android.graphics.Rect,float,android.graphics.Point[],android.graphics.Point[])>(r1, f0, r2, r3);

        $r4 = newarray (androidx.test.uiautomator.PointerGesture)[2];

        $r6 = r2[0];

        $r5 = r2[1];

        $r7 = virtualinvoke r0.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture swipe(android.graphics.Point,android.graphics.Point,int)>($r6, $r5, i0);

        $r4[0] = $r7;

        $r9 = r3[0];

        $r8 = r3[1];

        $r10 = virtualinvoke r0.<androidx.test.uiautomator.Gestures: androidx.test.uiautomator.PointerGesture swipe(android.graphics.Point,android.graphics.Point,int)>($r9, $r8, i0);

        $r4[1] = $r10;

        return $r4;
    }

    private void calcPinchCoordinates(android.graphics.Rect, float, android.graphics.Point[], android.graphics.Point[])
    {
        androidx.test.uiautomator.Gestures r0;
        android.graphics.Rect r1;
        float f0, $f1, $f2, $f3, $f4;
        android.graphics.Point[] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.graphics.Point $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: androidx.test.uiautomator.Gestures;

        r1 := @parameter0: android.graphics.Rect;

        f0 := @parameter1: float;

        r2 := @parameter2: android.graphics.Point[];

        r3 := @parameter3: android.graphics.Point[];

        $i2 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i3 = $i2 - 10;

        $i4 = $i3 / 2;

        $f1 = (float) $i4;

        $f2 = $f1 * f0;

        i0 = (int) $f2;

        $i5 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $i6 = $i5 - 10;

        $i7 = $i6 / 2;

        $f3 = (float) $i7;

        $f4 = $f3 * f0;

        i1 = (int) $f4;

        $r4 = new android.graphics.Point;

        $i8 = r1.<android.graphics.Rect: int left>;

        $i11 = $i8 + 5;

        $i9 = r1.<android.graphics.Rect: int bottom>;

        $i10 = $i9 - 5;

        specialinvoke $r4.<android.graphics.Point: void <init>(int,int)>($i11, $i10);

        r2[1] = $r4;

        $r5 = new android.graphics.Point;

        $i12 = r1.<android.graphics.Rect: int right>;

        $i15 = $i12 - 5;

        $i13 = r1.<android.graphics.Rect: int top>;

        $i14 = $i13 + 5;

        specialinvoke $r5.<android.graphics.Point: void <init>(int,int)>($i15, $i14);

        r3[1] = $r5;

        $r6 = new android.graphics.Point;

        $r7 = r2[1];

        specialinvoke $r6.<android.graphics.Point: void <init>(android.graphics.Point)>($r7);

        r2[0] = $r6;

        $r8 = r2[0];

        $i16 = neg i1;

        virtualinvoke $r8.<android.graphics.Point: void offset(int,int)>(i0, $i16);

        $r9 = new android.graphics.Point;

        $r10 = r3[1];

        specialinvoke $r9.<android.graphics.Point: void <init>(android.graphics.Point)>($r10);

        r3[0] = $r9;

        $r11 = r3[0];

        $i17 = neg i0;

        virtualinvoke $r11.<android.graphics.Point: void offset(int,int)>($i17, i1);

        return;
    }

androidx.test.uiautomator.Gestures$1
<androidx.test.uiautomator.Gestures$1: int[] $SwitchMap$android$support$test$uiautomator$Direction>
    static void <clinit>()
    {
        androidx.test.uiautomator.Direction[] $r0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r1, $r3, $r5, $r7, $r9;
        androidx.test.uiautomator.Direction $r2, $r4, $r6, $r8;
        java.lang.Throwable $r10, $r11, $r12, $r13, r14, r15, r16, r17;

        $r0 = staticinvoke <androidx.test.uiautomator.Direction: androidx.test.uiautomator.Direction[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.test.uiautomator.Gestures$1: int[] $SwitchMap$android$support$test$uiautomator$Direction> = $r1;

     label01:
        $r3 = <androidx.test.uiautomator.Gestures$1: int[] $SwitchMap$android$support$test$uiautomator$Direction>;

        $r2 = <androidx.test.uiautomator.Direction: androidx.test.uiautomator.Direction LEFT>;

        $i1 = virtualinvoke $r2.<androidx.test.uiautomator.Direction: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        r14 = $r10;

     label04:
        $r5 = <androidx.test.uiautomator.Gestures$1: int[] $SwitchMap$android$support$test$uiautomator$Direction>;

        $r4 = <androidx.test.uiautomator.Direction: androidx.test.uiautomator.Direction RIGHT>;

        $i2 = virtualinvoke $r4.<androidx.test.uiautomator.Direction: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

        r15 = $r13;

     label07:
        $r7 = <androidx.test.uiautomator.Gestures$1: int[] $SwitchMap$android$support$test$uiautomator$Direction>;

        $r6 = <androidx.test.uiautomator.Direction: androidx.test.uiautomator.Direction UP>;

        $i3 = virtualinvoke $r6.<androidx.test.uiautomator.Direction: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        r16 = $r12;

     label10:
        $r9 = <androidx.test.uiautomator.Gestures$1: int[] $SwitchMap$android$support$test$uiautomator$Direction>;

        $r8 = <androidx.test.uiautomator.Direction: androidx.test.uiautomator.Direction DOWN>;

        $i4 = virtualinvoke $r8.<androidx.test.uiautomator.Direction: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

        r17 = $r11;

     label13:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
    }

