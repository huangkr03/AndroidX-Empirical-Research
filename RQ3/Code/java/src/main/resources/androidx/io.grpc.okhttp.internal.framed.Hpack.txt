io.grpc.okhttp.internal.framed.Hpack
<io.grpc.okhttp.internal.framed.Hpack: java.util.Map NAME_TO_FIRST_INDEX>
<io.grpc.okhttp.internal.framed.Hpack: okio.ByteString PSEUDO_PREFIX>
<io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] STATIC_HEADER_TABLE>
    static volatile java.util.Map '-$$Nest$sfgetNAME_TO_FIRST_INDEX'()
    {
        java.util.Map r0;

        r0 = <io.grpc.okhttp.internal.framed.Hpack: java.util.Map NAME_TO_FIRST_INDEX>;

        return r0;
    }

    static volatile okio.ByteString '-$$Nest$sfgetPSEUDO_PREFIX'()
    {
        okio.ByteString r0;

        r0 = <io.grpc.okhttp.internal.framed.Hpack: okio.ByteString PSEUDO_PREFIX>;

        return r0;
    }

    static volatile io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()
    {
        io.grpc.okhttp.internal.framed.Header[] r0;

        r0 = <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] STATIC_HEADER_TABLE>;

        return r0;
    }

    static volatile okio.ByteString '-$$Nest$smcheckLowercase'(okio.ByteString)
    {
        okio.ByteString $r0;

        $r0 := @parameter0: okio.ByteString;

        $r0 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: okio.ByteString checkLowercase(okio.ByteString)>($r0);

        return $r0;
    }

    static void <clinit>()
    {
        okio.ByteString $r0;
        io.grpc.okhttp.internal.framed.Header[] $r1;
        io.grpc.okhttp.internal.framed.Header $r2;
        java.util.Map $r3;

        $r0 = staticinvoke <okio.ByteString: okio.ByteString encodeUtf8(java.lang.String)>(":");

        <io.grpc.okhttp.internal.framed.Hpack: okio.ByteString PSEUDO_PREFIX> = $r0;

        $r1 = newarray (io.grpc.okhttp.internal.framed.Header)[61];

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString TARGET_AUTHORITY>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "");

        $r1[0] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString TARGET_METHOD>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "GET");

        $r1[1] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString TARGET_METHOD>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "POST");

        $r1[2] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString TARGET_PATH>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "/");

        $r1[3] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString TARGET_PATH>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "/index.html");

        $r1[4] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString TARGET_SCHEME>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "http");

        $r1[5] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString TARGET_SCHEME>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "https");

        $r1[6] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString RESPONSE_STATUS>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "200");

        $r1[7] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString RESPONSE_STATUS>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "204");

        $r1[8] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString RESPONSE_STATUS>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "206");

        $r1[9] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString RESPONSE_STATUS>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "304");

        $r1[10] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString RESPONSE_STATUS>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "400");

        $r1[11] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString RESPONSE_STATUS>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "404");

        $r1[12] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        $r0 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString RESPONSE_STATUS>;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,java.lang.String)>($r0, "500");

        $r1[13] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("accept-charset", "");

        $r1[14] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("accept-encoding", "gzip, deflate");

        $r1[15] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("accept-language", "");

        $r1[16] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("accept-ranges", "");

        $r1[17] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("accept", "");

        $r1[18] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("access-control-allow-origin", "");

        $r1[19] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("age", "");

        $r1[20] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("allow", "");

        $r1[21] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("authorization", "");

        $r1[22] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("cache-control", "");

        $r1[23] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("content-disposition", "");

        $r1[24] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("content-encoding", "");

        $r1[25] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("content-language", "");

        $r1[26] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("content-length", "");

        $r1[27] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("content-location", "");

        $r1[28] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("content-range", "");

        $r1[29] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("content-type", "");

        $r1[30] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("cookie", "");

        $r1[31] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("date", "");

        $r1[32] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("etag", "");

        $r1[33] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("expect", "");

        $r1[34] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("expires", "");

        $r1[35] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("from", "");

        $r1[36] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("host", "");

        $r1[37] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("if-match", "");

        $r1[38] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("if-modified-since", "");

        $r1[39] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("if-none-match", "");

        $r1[40] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("if-range", "");

        $r1[41] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("if-unmodified-since", "");

        $r1[42] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("last-modified", "");

        $r1[43] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("link", "");

        $r1[44] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("location", "");

        $r1[45] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("max-forwards", "");

        $r1[46] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("proxy-authenticate", "");

        $r1[47] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("proxy-authorization", "");

        $r1[48] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("range", "");

        $r1[49] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("referer", "");

        $r1[50] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("refresh", "");

        $r1[51] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("retry-after", "");

        $r1[52] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("server", "");

        $r1[53] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("set-cookie", "");

        $r1[54] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("strict-transport-security", "");

        $r1[55] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("transfer-encoding", "");

        $r1[56] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("user-agent", "");

        $r1[57] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("vary", "");

        $r1[58] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("via", "");

        $r1[59] = $r2;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(java.lang.String,java.lang.String)>("www-authenticate", "");

        $r1[60] = $r2;

        <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] STATIC_HEADER_TABLE> = $r1;

        $r3 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: java.util.Map nameToFirstIndex()>();

        <io.grpc.okhttp.internal.framed.Hpack: java.util.Map NAME_TO_FIRST_INDEX> = $r3;

        return;
    }

    private static okio.ByteString checkLowercase(okio.ByteString) throws java.io.IOException
    {
        okio.ByteString $r0;
        int $i0, $i1;
        byte $b2;
        java.lang.String $r1;
        java.lang.StringBuilder $r2, r3;
        java.io.IOException r4;
        java.lang.Throwable r5;

        $r0 := @parameter0: okio.ByteString;

        $i0 = virtualinvoke $r0.<okio.ByteString: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $b2 = virtualinvoke $r0.<okio.ByteString: byte getByte(int)>($i1);

        if $b2 < 65 goto label3;

        if $b2 <= 90 goto label2;

        goto label3;

     label2:
        r4 = new java.io.IOException;

        $r1 = virtualinvoke $r0.<okio.ByteString: java.lang.String utf8()>();

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROTOCOL_ERROR response malformed: mixed case name: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<java.io.IOException: void <init>(java.lang.String)>($r1);

        r5 = (java.lang.Throwable) r4;

        throw r5;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        return $r0;
    }

    private static java.util.Map nameToFirstIndex()
    {
        java.util.LinkedHashMap $r0, r6;
        io.grpc.okhttp.internal.framed.Header[] $r1;
        int $i0, $i1;
        io.grpc.okhttp.internal.framed.Header $r2;
        okio.ByteString $r3;
        boolean $z0;
        java.lang.Integer $r4;
        java.util.Map $r5;

        r6 = new java.util.LinkedHashMap;

        $r0 = r6;

        $r1 = <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] STATIC_HEADER_TABLE>;

        $i0 = lengthof $r1;

        specialinvoke r6.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $r1 = <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] STATIC_HEADER_TABLE>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r2 = $r1[$i0];

        $r3 = $r2.<io.grpc.okhttp.internal.framed.Header: okio.ByteString name>;

        $r5 = (java.util.Map) $r0;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r2 = $r1[$i0];

        $r3 = $r2.<io.grpc.okhttp.internal.framed.Header: okio.ByteString name>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = (java.util.Map) $r0;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r5 = (java.util.Map) $r0;

        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r5);

        return $r5;
    }

io.grpc.okhttp.internal.framed.Hpack$Reader
<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>
<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableByteCount>
<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableHeaderCount>
<io.grpc.okhttp.internal.framed.Hpack$Reader: java.util.List headerList>
<io.grpc.okhttp.internal.framed.Hpack$Reader: int headerTableSizeSetting>
<io.grpc.okhttp.internal.framed.Hpack$Reader: int maxDynamicTableByteCount>
<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex>
<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.BufferedSource source>
    void <init>(int, int, okio.Source)
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        int $i0, $i1, $i2;
        okio.Source $r1;
        okio.BufferedSource $r2;
        io.grpc.okhttp.internal.framed.Header[] $r3;
        java.util.ArrayList r4;
        java.util.List r5;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $r1 := @parameter2: okio.Source;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r5 = (java.util.List) r4;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: java.util.List headerList> = r5;

        $r3 = newarray (io.grpc.okhttp.internal.framed.Header)[8];

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable> = $r3;

        $i2 = lengthof $r3;

        $i2 = $i2 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex> = $i2;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableHeaderCount> = 0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableByteCount> = 0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int headerTableSizeSetting> = $i1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int maxDynamicTableByteCount> = $i0;

        $r2 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>($r1);

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.BufferedSource source> = $r2;

        return;
    }

    void <init>(int, okio.Source)
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        int $i0;
        okio.Source $r1;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        $r1 := @parameter1: okio.Source;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void <init>(int,int,okio.Source)>($i0, $i0, $r1);

        return;
    }

    private void adjustDynamicTableByteCount()
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        int $i0, $i1;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int maxDynamicTableByteCount>;

        $i1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableByteCount>;

        if $i0 >= $i1 goto label2;

        if $i0 != 0 goto label1;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void clearDynamicTable()>();

        return;

     label1:
        $i0 = $i1 - $i0;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int evictToRecoverBytes(int)>($i0);

     label2:
        return;
    }

    private void clearDynamicTable()
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        io.grpc.okhttp.internal.framed.Header[] $r1;
        int $i0;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex> = $i0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableHeaderCount> = 0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableByteCount> = 0;

        return;
    }

    private int dynamicTableIndex(int)
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        int $i0, $i1;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        $i1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex>;

        $i1 = $i1 + 1;

        $i0 = $i1 + $i0;

        return $i0;
    }

    private int evictToRecoverBytes(int)
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        int $i0, $i1, $i2, $i3, $i4;
        io.grpc.okhttp.internal.framed.Header[] $r1;
        io.grpc.okhttp.internal.framed.Header $r2;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        $i1 = 0;

        if $i0 <= 0 goto label3;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label1:
        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex>;

        if $i2 < $i3 goto label2;

        if $i0 <= 0 goto label2;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $r2 = $r1[$i2];

        $i3 = $r2.<io.grpc.okhttp.internal.framed.Header: int hpackSize>;

        $i0 = $i0 - $i3;

        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableByteCount>;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $r2 = $r1[$i2];

        $i4 = $r2.<io.grpc.okhttp.internal.framed.Header: int hpackSize>;

        $i3 = $i3 - $i4;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableByteCount> = $i3;

        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableHeaderCount>;

        $i3 = $i3 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableHeaderCount> = $i3;

        $i1 = $i1 + 1;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i0 = $i3 + 1;

        $i2 = $i3 + 1;

        $i2 = $i2 + $i1;

        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableHeaderCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r1, $i2, $i3);

        $i0 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex>;

        $i0 = $i0 + $i1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex> = $i0;

        return $i1;

     label3:
        return 0;
    }

    private okio.ByteString getName(int) throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        int $i0, $i1, $i2;
        boolean $z0;
        io.grpc.okhttp.internal.framed.Header[] $r1;
        io.grpc.okhttp.internal.framed.Header $r2;
        java.lang.StringBuilder $r3, r6;
        java.lang.String $r4;
        okio.ByteString r5;
        java.io.IOException r7;
        java.lang.Throwable r8;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: boolean isStaticHeader(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()>();

        $r2 = $r1[$i0];

        r5 = $r2.<io.grpc.okhttp.internal.framed.Header: okio.ByteString name>;

        return r5;

     label1:
        $r1 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()>();

        $i1 = lengthof $r1;

        $i1 = $i0 - $i1;

        $i1 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableIndex(int)>($i1);

        if $i1 < 0 goto label2;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label2;

        $r2 = $r1[$i1];

        r5 = $r2.<io.grpc.okhttp.internal.framed.Header: okio.ByteString name>;

        return r5;

     label2:
        r7 = new java.io.IOException;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header index too large ");

        $i0 = $i0 + 1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r7.<java.io.IOException: void <init>(java.lang.String)>($r4);

        r8 = (java.lang.Throwable) r7;

        throw r8;
    }

    private void insertIntoDynamicTable(int, io.grpc.okhttp.internal.framed.Header)
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        io.grpc.okhttp.internal.framed.Header $r1, $r4;
        int $i0, $i1, $i2, $i3;
        java.util.List $r2;
        io.grpc.okhttp.internal.framed.Header[] $r3, $r5;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        $r1 := @parameter1: io.grpc.okhttp.internal.framed.Header;

        $r2 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: java.util.List headerList>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        $i1 = $r1.<io.grpc.okhttp.internal.framed.Header: int hpackSize>;

        if $i0 == -1 goto label1;

        $r3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i2 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableIndex(int)>($i0);

        $r4 = $r3[$i2];

        $i2 = $r4.<io.grpc.okhttp.internal.framed.Header: int hpackSize>;

        $i1 = $i1 - $i2;

     label1:
        $i2 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int maxDynamicTableByteCount>;

        if $i1 <= $i2 goto label2;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void clearDynamicTable()>();

        return;

     label2:
        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableByteCount>;

        $i3 = $i3 + $i1;

        $i2 = $i3 - $i2;

        $i2 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int evictToRecoverBytes(int)>($i2);

        if $i0 != -1 goto label4;

        $i0 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableHeaderCount>;

        $i0 = $i0 + 1;

        $r5 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i2 = lengthof $r5;

        if $i0 <= $i2 goto label3;

        $i0 = lengthof $r5;

        $i0 = $i0 + $i0;

        $r3 = newarray (io.grpc.okhttp.internal.framed.Header)[$i0];

        $i2 = lengthof $r5;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r3, $i2, $i0);

        $r5 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i0 = lengthof $r5;

        $i0 = $i0 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex> = $i0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable> = $r3;

     label3:
        $i0 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex>;

        $i2 = $i0 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int nextDynamicTableIndex> = $i2;

        $r3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $r3[$i0] = $r1;

        $i0 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableHeaderCount>;

        $i0 = $i0 + 1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableHeaderCount> = $i0;

        goto label5;

     label4:
        $i3 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableIndex(int)>($i0);

        $r3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i2 = $i3 + $i2;

        $i0 = $i0 + $i2;

        $r3[$i0] = $r1;

     label5:
        $i0 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableByteCount>;

        $i0 = $i0 + $i1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableByteCount> = $i0;

        return;
    }

    private boolean isStaticHeader(int)
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        io.grpc.okhttp.internal.framed.Header[] $r1;
        int $i0, $i1;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r1 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()>();

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        if $i0 > $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private int readByte() throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        byte $b0;
        okio.BufferedSource $r1;
        short $s1;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.BufferedSource source>;

        $b0 = interfaceinvoke $r1.<okio.BufferedSource: byte readByte()>();

        $s1 = $b0 & 255;

        return $s1;
    }

    private void readIndexedHeader(int) throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        int $i0, $i1, $i2;
        boolean $z0;
        io.grpc.okhttp.internal.framed.Header[] $r1;
        io.grpc.okhttp.internal.framed.Header $r2;
        java.util.List $r3;
        java.lang.StringBuilder $r4, r6;
        java.lang.String $r5;
        java.io.IOException r7;
        java.lang.Throwable r8;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: boolean isStaticHeader(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()>();

        $r2 = $r1[$i0];

        $r3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: java.util.List headerList>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;

     label1:
        $r1 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()>();

        $i1 = lengthof $r1;

        $i1 = $i0 - $i1;

        $i1 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int dynamicTableIndex(int)>($i1);

        if $i1 < 0 goto label2;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

        if $i1 > $i2 goto label2;

        $r3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: java.util.List headerList>;

        $r2 = $r1[$i1];

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;

     label2:
        r7 = new java.io.IOException;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header index too large ");

        $i0 = $i0 + 1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r7.<java.io.IOException: void <init>(java.lang.String)>($r5);

        goto label3;

     label3:
        r8 = (java.lang.Throwable) r7;

        throw r8;
    }

    private void readLiteralHeaderWithIncrementalIndexingIndexedName(int) throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        io.grpc.okhttp.internal.framed.Header $r1;
        int $i0;
        okio.ByteString $r2, $r3;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        $r2 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.ByteString getName(int)>($i0);

        $r3 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.ByteString readByteString()>();

        $r1 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r1.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,okio.ByteString)>($r2, $r3);

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void insertIntoDynamicTable(int,io.grpc.okhttp.internal.framed.Header)>(-1, $r1);

        return;
    }

    private void readLiteralHeaderWithIncrementalIndexingNewName() throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        io.grpc.okhttp.internal.framed.Header $r1;
        okio.ByteString $r2, $r3;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $r2 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.ByteString readByteString()>();

        $r2 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: okio.ByteString '-$$Nest$smcheckLowercase'(okio.ByteString)>($r2);

        $r3 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.ByteString readByteString()>();

        $r1 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r1.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,okio.ByteString)>($r2, $r3);

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void insertIntoDynamicTable(int,io.grpc.okhttp.internal.framed.Header)>(-1, $r1);

        return;
    }

    private void readLiteralHeaderWithoutIndexingIndexedName(int) throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        java.util.List $r1;
        io.grpc.okhttp.internal.framed.Header $r2;
        int $i0;
        okio.ByteString $r3, $r4;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        $r3 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.ByteString getName(int)>($i0);

        $r4 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.ByteString readByteString()>();

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: java.util.List headerList>;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,okio.ByteString)>($r3, $r4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void readLiteralHeaderWithoutIndexingNewName() throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        java.util.List $r1;
        io.grpc.okhttp.internal.framed.Header $r2;
        okio.ByteString $r3, $r4;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $r3 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.ByteString readByteString()>();

        $r3 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: okio.ByteString '-$$Nest$smcheckLowercase'(okio.ByteString)>($r3);

        $r4 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.ByteString readByteString()>();

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: java.util.List headerList>;

        $r2 = new io.grpc.okhttp.internal.framed.Header;

        specialinvoke $r2.<io.grpc.okhttp.internal.framed.Header: void <init>(okio.ByteString,okio.ByteString)>($r3, $r4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public java.util.List getAndResetHeaderList()
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        java.util.List $r1;
        java.util.ArrayList r2;
        java.util.Collection r3;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        r2 = new java.util.ArrayList;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: java.util.List headerList>;

        r3 = (java.util.Collection) $r1;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: java.util.List headerList>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r1 = (java.util.List) r2;

        return $r1;
    }

    void headerTableSizeSetting(int)
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        int $i0;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i0 := @parameter0: int;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int headerTableSizeSetting> = $i0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int maxDynamicTableByteCount> = $i0;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void adjustDynamicTableByteCount()>();

        return;
    }

    okio.ByteString readByteString() throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        long $l0;
        int $i1, $i2;
        boolean $z0;
        io.grpc.okhttp.internal.framed.Huffman $r1;
        okio.BufferedSource $r2;
        byte[] $r3;
        okio.ByteString $r4;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i1 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int readByte()>();

        $i2 = $i1 & 128;

        if $i2 != 128 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i1 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int readInt(int,int)>($i1, 127);

        if $z0 == 0 goto label3;

        $r1 = staticinvoke <io.grpc.okhttp.internal.framed.Huffman: io.grpc.okhttp.internal.framed.Huffman get()>();

        $r2 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.BufferedSource source>;

        $l0 = (long) $i1;

        $r3 = interfaceinvoke $r2.<okio.BufferedSource: byte[] readByteArray(long)>($l0);

        $r3 = virtualinvoke $r1.<io.grpc.okhttp.internal.framed.Huffman: byte[] decode(byte[])>($r3);

        $r4 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>($r3);

        return $r4;

     label3:
        $r2 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.BufferedSource source>;

        $l0 = (long) $i1;

        $r4 = interfaceinvoke $r2.<okio.BufferedSource: okio.ByteString readByteString(long)>($l0);

        return $r4;
    }

    void readHeaders() throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        okio.BufferedSource $r1;
        boolean $z0;
        byte $b0;
        short $s1, $s2;
        int $i3, $i4;
        java.lang.StringBuilder $r2, r4;
        java.lang.String $r3;
        java.io.IOException r5;
        java.lang.Throwable r6;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

     label01:
        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.BufferedSource source>;

        $z0 = interfaceinvoke $r1.<okio.BufferedSource: boolean exhausted()>();

        if $z0 != 0 goto label10;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: okio.BufferedSource source>;

        $b0 = interfaceinvoke $r1.<okio.BufferedSource: byte readByte()>();

        $s1 = $b0 & 255;

        if $s1 == 128 goto label09;

        $s2 = $s1 & 128;

        if $s2 != 128 goto label02;

        $i3 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int readInt(int,int)>($s1, 127);

        $i3 = $i3 + -1;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void readIndexedHeader(int)>($i3);

        goto label01;

     label02:
        if $s1 != 64 goto label03;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void readLiteralHeaderWithIncrementalIndexingNewName()>();

        goto label01;

     label03:
        $s2 = $s1 & 64;

        if $s2 != 64 goto label04;

        $i3 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int readInt(int,int)>($s1, 63);

        $i3 = $i3 + -1;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void readLiteralHeaderWithIncrementalIndexingIndexedName(int)>($i3);

        goto label01;

     label04:
        $s2 = $s1 & 32;

        if $s2 != 32 goto label06;

        $i3 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int readInt(int,int)>($s1, 31);

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int maxDynamicTableByteCount> = $i3;

        if $i3 < 0 goto label05;

        $i4 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int headerTableSizeSetting>;

        if $i3 > $i4 goto label05;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void adjustDynamicTableByteCount()>();

        goto label01;

     label05:
        r5 = new java.io.IOException;

        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int maxDynamicTableByteCount>;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid dynamic table size update ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<java.io.IOException: void <init>(java.lang.String)>($r3);

        r6 = (java.lang.Throwable) r5;

        throw r6;

     label06:
        if $s1 == 16 goto label08;

        if $s1 != 0 goto label07;

        goto label08;

     label07:
        $i3 = virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int readInt(int,int)>($s1, 15);

        $i3 = $i3 + -1;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void readLiteralHeaderWithoutIndexingIndexedName(int)>($i3);

        goto label01;

     label08:
        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: void readLiteralHeaderWithoutIndexingNewName()>();

        goto label01;

     label09:
        r5 = new java.io.IOException;

        specialinvoke r5.<java.io.IOException: void <init>(java.lang.String)>("index == 0");

        r6 = (java.lang.Throwable) r5;

        throw r6;

     label10:
        return;
    }

    int readInt(int, int) throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Reader $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Reader;

        $i2 := @parameter0: int;

        $i3 := @parameter1: int;

        $i2 = $i2 & $i3;

        if $i2 >= $i3 goto label1;

        return $i2;

     label1:
        $i2 = 0;

     label2:
        $i1 = specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Reader: int readByte()>();

        $i0 = $i1 & 128;

        if $i0 == 0 goto label3;

        $i0 = $i1 & 127;

        $i0 = $i0 << $i2;

        $i3 = $i3 + $i0;

        $i2 = $i2 + 7;

        goto label2;

     label3:
        $i2 = $i1 << $i2;

        $i2 = $i3 + $i2;

        return $i2;
    }

io.grpc.okhttp.internal.framed.Hpack$Writer
<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>
<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableByteCount>
<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableHeaderCount>
<io.grpc.okhttp.internal.framed.Hpack$Writer: boolean emitDynamicTableSizeUpdate>
<io.grpc.okhttp.internal.framed.Hpack$Writer: int headerTableSizeSetting>
<io.grpc.okhttp.internal.framed.Hpack$Writer: int maxDynamicTableByteCount>
<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex>
<io.grpc.okhttp.internal.framed.Hpack$Writer: okio.Buffer out>
<io.grpc.okhttp.internal.framed.Hpack$Writer: int smallestHeaderTableSizeSetting>
<io.grpc.okhttp.internal.framed.Hpack$Writer: boolean useCompression>
    void <init>(int, boolean, okio.Buffer)
    {
        io.grpc.okhttp.internal.framed.Hpack$Writer $r0;
        int $i0, $i1;
        boolean $z0;
        okio.Buffer $r1;
        io.grpc.okhttp.internal.framed.Header[] $r2;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Writer;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: okio.Buffer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int smallestHeaderTableSizeSetting> = 2147483647;

        $r2 = newarray (io.grpc.okhttp.internal.framed.Header)[8];

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable> = $r2;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex> = $i1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int headerTableSizeSetting> = $i0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int maxDynamicTableByteCount> = $i0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: boolean useCompression> = $z0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: okio.Buffer out> = $r1;

        return;
    }

    void <init>(okio.Buffer)
    {
        io.grpc.okhttp.internal.framed.Hpack$Writer $r0;
        okio.Buffer $r1;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Writer;

        $r1 := @parameter0: okio.Buffer;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void <init>(int,boolean,okio.Buffer)>(4096, 0, $r1);

        return;
    }

    private void clearDynamicTable()
    {
        io.grpc.okhttp.internal.framed.Hpack$Writer $r0;
        io.grpc.okhttp.internal.framed.Header[] $r1;
        int $i0;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Writer;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex> = $i0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableHeaderCount> = 0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableByteCount> = 0;

        return;
    }

    private int evictToRecoverBytes(int)
    {
        io.grpc.okhttp.internal.framed.Hpack$Writer $r0;
        int $i0, $i1, $i2, $i3, $i4;
        io.grpc.okhttp.internal.framed.Header[] $r1;
        io.grpc.okhttp.internal.framed.Header $r2;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Writer;

        $i0 := @parameter0: int;

        $i1 = 0;

        if $i0 <= 0 goto label3;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label1:
        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex>;

        if $i2 < $i3 goto label2;

        if $i0 <= 0 goto label2;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $r2 = $r1[$i2];

        $i3 = $r2.<io.grpc.okhttp.internal.framed.Header: int hpackSize>;

        $i0 = $i0 - $i3;

        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableByteCount>;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $r2 = $r1[$i2];

        $i4 = $r2.<io.grpc.okhttp.internal.framed.Header: int hpackSize>;

        $i3 = $i3 - $i4;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableByteCount> = $i3;

        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableHeaderCount>;

        $i3 = $i3 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableHeaderCount> = $i3;

        $i1 = $i1 + 1;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i0 = $i3 + 1;

        $i2 = $i3 + 1;

        $i2 = $i2 + $i1;

        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableHeaderCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r1, $i2, $i3);

        $i0 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex>;

        $i0 = $i0 + $i1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex> = $i0;

        return $i1;

     label3:
        return 0;
    }

    private void insertIntoDynamicTable(io.grpc.okhttp.internal.framed.Header)
    {
        io.grpc.okhttp.internal.framed.Hpack$Writer $r0;
        int $i0, $i1, $i2;
        io.grpc.okhttp.internal.framed.Header $r1;
        io.grpc.okhttp.internal.framed.Header[] $r2, $r3;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Writer;

        $r1 := @parameter0: io.grpc.okhttp.internal.framed.Header;

        $i0 = $r1.<io.grpc.okhttp.internal.framed.Header: int hpackSize>;

        $i1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int maxDynamicTableByteCount>;

        if $i0 <= $i1 goto label1;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void clearDynamicTable()>();

        return;

     label1:
        $i2 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableByteCount>;

        $i2 = $i2 + $i0;

        $i1 = $i2 - $i1;

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int evictToRecoverBytes(int)>($i1);

        $i1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableHeaderCount>;

        $i1 = $i1 + 1;

        $r2 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i2 = lengthof $r2;

        if $i1 <= $i2 goto label2;

        $i1 = lengthof $r2;

        $i1 = $i1 + $i1;

        $r3 = newarray (io.grpc.okhttp.internal.framed.Header)[$i1];

        $i2 = lengthof $r2;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, $i2, $i1);

        $r2 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex> = $i1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable> = $r3;

     label2:
        $i1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex>;

        $i2 = $i1 + -1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex> = $i2;

        $r3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $r3[$i1] = $r1;

        $i1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableHeaderCount>;

        $i1 = $i1 + 1;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableHeaderCount> = $i1;

        $i1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableByteCount>;

        $i0 = $i1 + $i0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int dynamicTableByteCount> = $i0;

        return;
    }

    void writeByteString(okio.ByteString) throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Writer $r0;
        okio.ByteString $r1;
        boolean $z0;
        io.grpc.okhttp.internal.framed.Huffman $r2;
        byte[] $r3;
        int $i0, $i1;
        okio.Buffer $r4;
        java.io.OutputStream $r5;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Writer;

        $r1 := @parameter0: okio.ByteString;

        $z0 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: boolean useCompression>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <io.grpc.okhttp.internal.framed.Huffman: io.grpc.okhttp.internal.framed.Huffman get()>();

        $r3 = virtualinvoke $r1.<okio.ByteString: byte[] toByteArray()>();

        $i0 = virtualinvoke $r2.<io.grpc.okhttp.internal.framed.Huffman: int encodedLength(byte[])>($r3);

        $i1 = virtualinvoke $r1.<okio.ByteString: int size()>();

        if $i0 >= $i1 goto label1;

        $r4 = new okio.Buffer;

        specialinvoke $r4.<okio.Buffer: void <init>()>();

        $r2 = staticinvoke <io.grpc.okhttp.internal.framed.Huffman: io.grpc.okhttp.internal.framed.Huffman get()>();

        $r3 = virtualinvoke $r1.<okio.ByteString: byte[] toByteArray()>();

        $r5 = virtualinvoke $r4.<okio.Buffer: java.io.OutputStream outputStream()>();

        virtualinvoke $r2.<io.grpc.okhttp.internal.framed.Huffman: void encode(byte[],java.io.OutputStream)>($r3, $r5);

        $r1 = virtualinvoke $r4.<okio.Buffer: okio.ByteString readByteString()>();

        $i0 = virtualinvoke $r1.<okio.ByteString: int size()>();

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeInt(int,int,int)>($i0, 127, 128);

        $r4 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: okio.Buffer out>;

        virtualinvoke $r4.<okio.Buffer: okio.Buffer write(okio.ByteString)>($r1);

        return;

     label1:
        $i0 = virtualinvoke $r1.<okio.ByteString: int size()>();

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeInt(int,int,int)>($i0, 127, 0);

        $r4 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: okio.Buffer out>;

        virtualinvoke $r4.<okio.Buffer: okio.Buffer write(okio.ByteString)>($r1);

        return;
    }

    void writeHeaders(java.util.List) throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Writer $r0;
        java.util.List $r1;
        okio.ByteString $r2, $r5, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.lang.Object $r3;
        io.grpc.okhttp.internal.framed.Header $r4, $r9;
        java.util.Map $r6;
        java.lang.Integer $r7;
        io.grpc.okhttp.internal.framed.Header[] $r8;
        okio.Buffer $r11;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Writer;

        $r1 := @parameter0: java.util.List;

        $z0 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: boolean emitDynamicTableSizeUpdate>;

        if $z0 == 0 goto label02;

        $i1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int smallestHeaderTableSizeSetting>;

        $i2 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int maxDynamicTableByteCount>;

        if $i1 >= $i2 goto label01;

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeInt(int,int,int)>($i1, 31, 32);

     label01:
        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: boolean emitDynamicTableSizeUpdate> = 0;

        $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int smallestHeaderTableSizeSetting> = 2147483647;

        $i1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int maxDynamicTableByteCount>;

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeInt(int,int,int)>($i1, 31, 32);

     label02:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = 0;

     label03:
        if $i2 >= $i1 goto label15;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r4 = (io.grpc.okhttp.internal.framed.Header) $r3;

        $r2 = $r4.<io.grpc.okhttp.internal.framed.Header: okio.ByteString name>;

        $r5 = virtualinvoke $r2.<okio.ByteString: okio.ByteString toAsciiLowercase()>();

        $r2 = $r4.<io.grpc.okhttp.internal.framed.Header: okio.ByteString value>;

        $r6 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: java.util.Map '-$$Nest$sfgetNAME_TO_FIRST_INDEX'()>();

        $r3 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r3;

        if $r7 == null goto label06;

        $i3 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i3 = $i3 + 1;

        if $i3 < 2 goto label05;

        if $i3 > 7 goto label05;

        $r8 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()>();

        $i4 = $i3 + -1;

        $r9 = $r8[$i4];

        $r10 = $r9.<io.grpc.okhttp.internal.framed.Header: okio.ByteString value>;

        $z0 = virtualinvoke $r10.<okio.ByteString: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label04;

        $i4 = $i3;

        goto label07;

     label04:
        $r8 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()>();

        $r9 = $r8[$i3];

        $r10 = $r9.<io.grpc.okhttp.internal.framed.Header: okio.ByteString value>;

        $z0 = virtualinvoke $r10.<okio.ByteString: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label05;

        $i4 = $i3;

        $i3 = $i3 + 1;

        goto label07;

     label05:
        $i4 = $i3;

        $i3 = -1;

        goto label07;

     label06:
        $i3 = -1;

        $i4 = -1;

     label07:
        if $i3 != -1 goto label10;

        $i5 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex>;

     label08:
        $i5 = $i5 + 1;

        $r8 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $i0 = lengthof $r8;

        if $i5 >= $i0 goto label10;

        $r9 = $r8[$i5];

        $r10 = $r9.<io.grpc.okhttp.internal.framed.Header: okio.ByteString name>;

        $z0 = virtualinvoke $r10.<okio.ByteString: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label08;

        $r8 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: io.grpc.okhttp.internal.framed.Header[] dynamicTable>;

        $r9 = $r8[$i5];

        $r10 = $r9.<io.grpc.okhttp.internal.framed.Header: okio.ByteString value>;

        $z0 = virtualinvoke $r10.<okio.ByteString: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label09;

        $i3 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex>;

        $i3 = $i5 - $i3;

        $r8 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()>();

        $i5 = lengthof $r8;

        $i3 = $i5 + $i3;

        goto label10;

     label09:
        if $i4 != -1 goto label08;

        $i4 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: int nextDynamicTableIndex>;

        $i4 = $i5 - $i4;

        $r8 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: io.grpc.okhttp.internal.framed.Header[] '-$$Nest$sfgetSTATIC_HEADER_TABLE'()>();

        $i0 = lengthof $r8;

        $i4 = $i4 + $i0;

        goto label08;

     label10:
        if $i3 == -1 goto label11;

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeInt(int,int,int)>($i3, 127, 128);

        goto label14;

     label11:
        if $i4 != -1 goto label12;

        $r11 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: okio.Buffer out>;

        virtualinvoke $r11.<okio.Buffer: okio.Buffer writeByte(int)>(64);

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeByteString(okio.ByteString)>($r5);

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeByteString(okio.ByteString)>($r2);

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void insertIntoDynamicTable(io.grpc.okhttp.internal.framed.Header)>($r4);

        goto label14;

     label12:
        $r10 = staticinvoke <io.grpc.okhttp.internal.framed.Hpack: okio.ByteString '-$$Nest$sfgetPSEUDO_PREFIX'()>();

        $z0 = virtualinvoke $r5.<okio.ByteString: boolean startsWith(okio.ByteString)>($r10);

        if $z0 == 0 goto label13;

        $r10 = <io.grpc.okhttp.internal.framed.Header: okio.ByteString TARGET_AUTHORITY>;

        $z0 = virtualinvoke $r10.<okio.ByteString: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label13;

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeInt(int,int,int)>($i4, 15, 0);

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeByteString(okio.ByteString)>($r2);

        goto label14;

     label13:
        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeInt(int,int,int)>($i4, 63, 64);

        virtualinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void writeByteString(okio.ByteString)>($r2);

        specialinvoke $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: void insertIntoDynamicTable(io.grpc.okhttp.internal.framed.Header)>($r4);

     label14:
        $i2 = $i2 + 1;

        goto label03;

     label15:
        return;
    }

    void writeInt(int, int, int) throws java.io.IOException
    {
        io.grpc.okhttp.internal.framed.Hpack$Writer $r0;
        int $i0, $i1, $i2;
        okio.Buffer $r1;

        $r0 := @this: io.grpc.okhttp.internal.framed.Hpack$Writer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i0 >= $i1 goto label1;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: okio.Buffer out>;

        $i0 = $i0 | $i2;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($i0);

        return;

     label1:
        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: okio.Buffer out>;

        $i2 = $i2 | $i1;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($i2);

        $i0 = $i0 - $i1;

     label2:
        if $i0 < 128 goto label3;

        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: okio.Buffer out>;

        $i1 = $i0 & 127;

        $i1 = 128 | $i1;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($i1);

        $i0 = $i0 >>> 7;

        goto label2;

     label3:
        $r1 = $r0.<io.grpc.okhttp.internal.framed.Hpack$Writer: okio.Buffer out>;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($i0);

        return;
    }

