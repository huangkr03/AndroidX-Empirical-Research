kotlin.ResultKt
    public static final java.lang.Object createFailure(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        kotlin.Result$Failure $r1;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "exception");

        $r1 = new kotlin.Result$Failure;

        specialinvoke $r1.<kotlin.Result$Failure: void <init>(java.lang.Throwable)>($r0);

        return $r1;
    }

    private static final java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0, $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "onSuccess");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "onFailure");

        $r3 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r2);

        if $r3 != null goto label1;

        $r2 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return $r2;

     label1:
        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        return $r2;
    }

    private static final java.lang.Object getOrDefault(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        return $r0;
    }

    private static final java.lang.Object getOrElse(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "onFailure");

        $r2 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r1);

        if $r2 != null goto label1;

        return $r1;

     label1:
        $r1 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return $r1;
    }

    private static final java.lang.Object getOrThrow(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r0);

        return $r0;
    }

    private static final java.lang.Object map(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r1;
        boolean $z0;
        kotlin.Result$Companion $r2;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "transform");

        $z0 = staticinvoke <kotlin.Result: boolean isSuccess-impl(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r1 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        return $r1;

     label1:
        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        return $r1;
    }

    private static final java.lang.Object mapCatching(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function1 $r1;
        boolean $z0;
        kotlin.Result$Companion $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $z0 = staticinvoke <kotlin.Result: boolean isSuccess-impl(java.lang.Object)>($r0);

        if $z0 == 0 goto label4;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

     label1:
        $r0 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

     label2:
        $r0 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r0);

        return $r0;

     label3:
        $r3 := @caughtexception;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r0 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r3);

        $r0 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r0);

        return $r0;

     label4:
        $r0 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r0);

        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static final java.lang.Object onFailure(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r0);

        if $r2 == null goto label1;

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

     label1:
        return $r0;
    }

    private static final java.lang.Object onSuccess(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function1 $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $z0 = staticinvoke <kotlin.Result: boolean isSuccess-impl(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

     label1:
        return $r0;
    }

    private static final java.lang.Object recover(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        kotlin.Result$Companion $r3;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "transform");

        $r2 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r1);

        if $r2 != null goto label1;

        return $r1;

     label1:
        $r3 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r1 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        return $r1;
    }

    private static final java.lang.Object recoverCatching(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Throwable $r2;
        kotlin.Result$Companion $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r0);

        if $r2 == null goto label4;

        $r3 = <kotlin.Result: kotlin.Result$Companion Companion>;

     label1:
        $r0 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

     label2:
        $r0 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r0);

        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r0 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r2);

        $r0 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r0);

     label4:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static final java.lang.Object runCatching(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.Result$Companion $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

     label1:
        $r0 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

     label2:
        $r0 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r0);

        return $r0;

     label3:
        $r3 := @caughtexception;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r0 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r3);

        $r0 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r0);

        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static final java.lang.Object runCatching(kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;
        kotlin.Result$Companion $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "block");

        $r1 = <kotlin.Result: kotlin.Result$Companion Companion>;

     label1:
        $r2 = interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        $r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r2);

        return $r2;

     label3:
        $r3 := @caughtexception;

        $r1 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r2 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r3);

        $r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r2);

        return $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static final void throwOnFailure(java.lang.Object)
    {
        boolean $z0;
        java.lang.Object $r0;
        kotlin.Result$Failure $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof kotlin.Result$Failure;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = (kotlin.Result$Failure) $r0;

        $r2 = $r1.<kotlin.Result$Failure: java.lang.Throwable exception>;

        throw $r2;
    }

