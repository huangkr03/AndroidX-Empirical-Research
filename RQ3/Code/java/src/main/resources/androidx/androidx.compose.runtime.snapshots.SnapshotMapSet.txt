androidx.compose.runtime.snapshots.SnapshotMapSet
<androidx.compose.runtime.snapshots.SnapshotMapSet: androidx.compose.runtime.snapshots.SnapshotStateMap map>
    public void <init>(androidx.compose.runtime.snapshots.SnapshotStateMap)
    {
        androidx.compose.runtime.snapshots.SnapshotMapSet r0;
        androidx.compose.runtime.snapshots.SnapshotStateMap r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotMapSet;

        r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateMap;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "map");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.snapshots.SnapshotMapSet: androidx.compose.runtime.snapshots.SnapshotStateMap map> = r1;

        return;
    }

    public final androidx.compose.runtime.snapshots.SnapshotStateMap getMap()
    {
        androidx.compose.runtime.snapshots.SnapshotMapSet r0;
        androidx.compose.runtime.snapshots.SnapshotStateMap $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotMapSet;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotMapSet: androidx.compose.runtime.snapshots.SnapshotStateMap map>;

        return $r1;
    }

    public int getSize()
    {
        androidx.compose.runtime.snapshots.SnapshotMapSet r0;
        androidx.compose.runtime.snapshots.SnapshotStateMap $r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotMapSet;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotMapSet: androidx.compose.runtime.snapshots.SnapshotStateMap map>;

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.SnapshotStateMap: int size()>();

        return $i0;
    }

    public void clear()
    {
        androidx.compose.runtime.snapshots.SnapshotMapSet r0;
        androidx.compose.runtime.snapshots.SnapshotStateMap $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotMapSet;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotMapSet: androidx.compose.runtime.snapshots.SnapshotStateMap map>;

        virtualinvoke $r1.<androidx.compose.runtime.snapshots.SnapshotStateMap: void clear()>();

        return;
    }

    public boolean isEmpty()
    {
        androidx.compose.runtime.snapshots.SnapshotMapSet r0;
        androidx.compose.runtime.snapshots.SnapshotStateMap $r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotMapSet;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotMapSet: androidx.compose.runtime.snapshots.SnapshotStateMap map>;

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.SnapshotStateMap: boolean isEmpty()>();

        return $z0;
    }

    public final volatile int size()
    {
        androidx.compose.runtime.snapshots.SnapshotMapSet r0;
        int $i0;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotMapSet;

        $i0 = virtualinvoke r0.<androidx.compose.runtime.snapshots.SnapshotMapSet: int getSize()>();

        return $i0;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        androidx.compose.runtime.snapshots.SnapshotMapSet r0;
        java.lang.Object[] r1, $r3;
        java.util.Collection $r2;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotMapSet;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "array");

        $r2 = (java.util.Collection) r0;

        $r3 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r2, r1);

        return $r3;
    }

    public java.lang.Object[] toArray()
    {
        androidx.compose.runtime.snapshots.SnapshotMapSet r0;
        java.util.Collection $r1;
        java.lang.Object[] $r2;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotMapSet;

        $r1 = (java.util.Collection) r0;

        $r2 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>($r1);

        return $r2;
    }

