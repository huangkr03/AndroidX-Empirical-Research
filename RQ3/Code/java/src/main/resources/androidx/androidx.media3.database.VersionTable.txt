androidx.media3.database.VersionTable
<androidx.media3.database.VersionTable: int VERSION_UNSET>
<androidx.media3.database.VersionTable: int FEATURE_OFFLINE>
<androidx.media3.database.VersionTable: int FEATURE_CACHE_CONTENT_METADATA>
<androidx.media3.database.VersionTable: int FEATURE_CACHE_FILE_METADATA>
<androidx.media3.database.VersionTable: int FEATURE_EXTERNAL>
<androidx.media3.database.VersionTable: java.lang.String TABLE_NAME>
<androidx.media3.database.VersionTable: java.lang.String COLUMN_FEATURE>
<androidx.media3.database.VersionTable: java.lang.String COLUMN_INSTANCE_UID>
<androidx.media3.database.VersionTable: java.lang.String COLUMN_VERSION>
<androidx.media3.database.VersionTable: java.lang.String WHERE_FEATURE_AND_INSTANCE_UID_EQUALS>
<androidx.media3.database.VersionTable: java.lang.String PRIMARY_KEY>
<androidx.media3.database.VersionTable: java.lang.String SQL_CREATE_TABLE_IF_NOT_EXISTS>
    private void <init>()
    {
        androidx.media3.database.VersionTable r0;

        r0 := @this: androidx.media3.database.VersionTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setVersion(android.database.sqlite.SQLiteDatabase, int, java.lang.String, int) throws androidx.media3.database.DatabaseIOException
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, i1;
        java.lang.String r1;
        java.lang.Integer $r3, $r4;
        java.lang.Throwable $r5, r8, r11;
        android.content.ContentValues r7, r9;
        androidx.media3.database.DatabaseIOException r10;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE IF NOT EXISTS ExoPlayerVersions (feature INTEGER NOT NULL,instance_uid TEXT NOT NULL,version INTEGER NOT NULL,PRIMARY KEY (feature, instance_uid))");

        r9 = new android.content.ContentValues;

        specialinvoke r9.<android.content.ContentValues: void <init>()>();

        r7 = r9;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("feature", $r3);

        virtualinvoke r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("instance_uid", r1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("version", $r4);

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>("ExoPlayerVersions", null, r7);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r8 = $r5;

        r10 = new androidx.media3.database.DatabaseIOException;

        specialinvoke r10.<androidx.media3.database.DatabaseIOException: void <init>(android.database.SQLException)>(r8);

        r11 = (java.lang.Throwable) r10;

        throw r11;

     label4:
        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    public static void removeVersion(android.database.sqlite.SQLiteDatabase, int, java.lang.String) throws androidx.media3.database.DatabaseIOException
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4, r7;
        boolean $z0;
        java.lang.String[] $r3;
        androidx.media3.database.DatabaseIOException r6;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

     label1:
        $z0 = staticinvoke <androidx.media3.common.util.Util: boolean tableExists(android.database.sqlite.SQLiteDatabase,java.lang.String)>(r0, "ExoPlayerVersions");

        if $z0 != 0 goto label3;

     label2:
        return;

     label3:
        $r3 = staticinvoke <androidx.media3.database.VersionTable: java.lang.String[] featureAndInstanceUidArguments(int,java.lang.String)>(i0, r1);

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("ExoPlayerVersions", "feature = ? AND instance_uid = ?", $r3);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        r6 = new androidx.media3.database.DatabaseIOException;

        specialinvoke r6.<androidx.media3.database.DatabaseIOException: void <init>(android.database.SQLException)>(r2);

        r7 = (java.lang.Throwable) r6;

        throw r7;

     label6:
        return;

        catch android.database.SQLException from label1 to label2 with label5;
        catch android.database.SQLException from label3 to label4 with label5;
    }

    public static int getVersion(android.database.sqlite.SQLiteDatabase, int, java.lang.String) throws androidx.media3.database.DatabaseIOException
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, $i1, i3;
        java.lang.String r1;
        java.lang.Throwable r2, $r5, $r6, $r7, r10, r11, r13;
        boolean $z0;
        java.lang.String[] $r3, $r4;
        android.database.Cursor r9;
        byte b2;
        androidx.media3.database.DatabaseIOException r12;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

     label01:
        $z0 = staticinvoke <androidx.media3.common.util.Util: boolean tableExists(android.database.sqlite.SQLiteDatabase,java.lang.String)>(r0, "ExoPlayerVersions");

        if $z0 != 0 goto label03;

     label02:
        return -1;

     label03:
        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "version";

        $r4 = staticinvoke <androidx.media3.database.VersionTable: java.lang.String[] featureAndInstanceUidArguments(int,java.lang.String)>(i0, r1);

        r9 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("ExoPlayerVersions", $r3, "feature = ? AND instance_uid = ?", $r4, null, null, null);

     label04:
        $i1 = interfaceinvoke r9.<android.database.Cursor: int getCount()>();

        if $i1 != 0 goto label07;

        b2 = -1;

     label05:
        if r9 == null goto label06;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label06:
        return b2;

     label07:
        interfaceinvoke r9.<android.database.Cursor: boolean moveToNext()>();

        i3 = interfaceinvoke r9.<android.database.Cursor: int getInt(int)>(0);

     label08:
        if r9 == null goto label09;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label09:
        return i3;

     label10:
        $r6 := @caughtexception;

        r10 = $r6;

        if r9 == null goto label14;

     label11:
        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label12:
        goto label14;

     label13:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r2);

     label14:
        throw r10;

     label15:
        $r7 := @caughtexception;

        r11 = $r7;

        r12 = new androidx.media3.database.DatabaseIOException;

        specialinvoke r12.<androidx.media3.database.DatabaseIOException: void <init>(android.database.SQLException)>(r11);

        r13 = (java.lang.Throwable) r12;

        throw r13;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch android.database.SQLException from label01 to label02 with label15;
        catch android.database.SQLException from label03 to label06 with label15;
        catch android.database.SQLException from label07 to label09 with label15;
        catch android.database.SQLException from label10 to label15 with label15;
    }

    private static java.lang.String[] featureAndInstanceUidArguments(int, java.lang.String)
    {
        int i0;
        java.lang.String r0, $r2;
        java.lang.String[] $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $r1 = newarray (java.lang.String)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r1[0] = $r2;

        $r1[1] = r0;

        return $r1;
    }

    static void <clinit>()
    {
        staticinvoke <androidx.media3.common.MediaLibraryInfo: void registerModule(java.lang.String)>("media3.database");

        return;
    }

