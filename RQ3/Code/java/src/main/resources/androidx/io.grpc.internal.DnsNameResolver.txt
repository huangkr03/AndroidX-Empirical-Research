io.grpc.internal.DnsNameResolver
<io.grpc.internal.DnsNameResolver: boolean $assertionsDisabled>
<io.grpc.internal.DnsNameResolver: java.lang.String JNDI_LOCALHOST_PROPERTY>
<io.grpc.internal.DnsNameResolver: java.lang.String JNDI_PROPERTY>
<io.grpc.internal.DnsNameResolver: java.lang.String JNDI_TXT_PROPERTY>
<io.grpc.internal.DnsNameResolver: java.util.Set SERVICE_CONFIG_CHOICE_KEYS>
<io.grpc.internal.DnsNameResolver: boolean enableJndi>
<io.grpc.internal.DnsNameResolver: boolean enableJndiLocalhost>
<io.grpc.internal.DnsNameResolver: boolean enableTxt>
<io.grpc.internal.DnsNameResolver: java.lang.String localHostname>
<io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>
<io.grpc.internal.DnsNameResolver: io.grpc.internal.DnsNameResolver$ResourceResolverFactory resourceResolverFactory>
<io.grpc.internal.DnsNameResolver: io.grpc.internal.DnsNameResolver$AddressResolver addressResolver>
<io.grpc.internal.DnsNameResolver: java.lang.String authority>
<io.grpc.internal.DnsNameResolver: long cacheTtlNanos>
<io.grpc.internal.DnsNameResolver: java.util.concurrent.Executor executor>
<io.grpc.internal.DnsNameResolver: io.grpc.internal.SharedResourceHolder$Resource executorResource>
<io.grpc.internal.DnsNameResolver: java.lang.String host>
<io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$Listener2 listener>
<io.grpc.internal.DnsNameResolver: int port>
<io.grpc.internal.DnsNameResolver: io.grpc.ProxyDetector proxyDetector>
<io.grpc.internal.DnsNameResolver: java.util.Random random>
<io.grpc.internal.DnsNameResolver: boolean resolved>
<io.grpc.internal.DnsNameResolver: boolean resolving>
<io.grpc.internal.DnsNameResolver: java.util.concurrent.atomic.AtomicReference resourceResolver>
<io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$ServiceConfigParser serviceConfigParser>
<io.grpc.internal.DnsNameResolver: boolean shutdown>
<io.grpc.internal.DnsNameResolver: com.google.common.base.Stopwatch stopwatch>
<io.grpc.internal.DnsNameResolver: io.grpc.SynchronizationContext syncContext>
<io.grpc.internal.DnsNameResolver: boolean usingExecutorResource>
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r6, $r7;
        java.util.logging.Logger $r2;
        java.lang.String[] $r3;
        java.util.List $r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.ClassLoader $r8;
        io.grpc.internal.DnsNameResolver$ResourceResolverFactory $r9;
        java.util.HashSet r10;
        java.util.Collection r11;

        <io.grpc.internal.DnsNameResolver: boolean $assertionsDisabled> = 1;

        $r0 = class "Lio/grpc/internal/DnsNameResolver;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger> = $r2;

        r10 = new java.util.HashSet;

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "clientLanguage";

        $r3[1] = "percentage";

        $r3[2] = "clientHostname";

        $r3[3] = "serviceConfig";

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        r11 = (java.util.Collection) $r4;

        specialinvoke r10.<java.util.HashSet: void <init>(java.util.Collection)>(r11);

        $r5 = (java.util.Set) r10;

        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r5);

        <io.grpc.internal.DnsNameResolver: java.util.Set SERVICE_CONFIG_CHOICE_KEYS> = $r5;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("io.grpc.internal.DnsNameResolverProvider.enable_jndi", "true");

        <io.grpc.internal.DnsNameResolver: java.lang.String JNDI_PROPERTY> = $r1;

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("io.grpc.internal.DnsNameResolverProvider.enable_jndi_localhost", "false");

        <io.grpc.internal.DnsNameResolver: java.lang.String JNDI_LOCALHOST_PROPERTY> = $r6;

        $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("io.grpc.internal.DnsNameResolverProvider.enable_service_config", "false");

        <io.grpc.internal.DnsNameResolver: java.lang.String JNDI_TXT_PROPERTY> = $r7;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r1);

        <io.grpc.internal.DnsNameResolver: boolean enableJndi> = $z0;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r6);

        <io.grpc.internal.DnsNameResolver: boolean enableJndiLocalhost> = $z0;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r7);

        <io.grpc.internal.DnsNameResolver: boolean enableTxt> = $z0;

        $r8 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r9 = staticinvoke <io.grpc.internal.DnsNameResolver: io.grpc.internal.DnsNameResolver$ResourceResolverFactory getResourceResolverFactory(java.lang.ClassLoader)>($r8);

        <io.grpc.internal.DnsNameResolver: io.grpc.internal.DnsNameResolver$ResourceResolverFactory resourceResolverFactory> = $r9;

        return;
    }

    protected void <init>(java.lang.String, java.lang.String, io.grpc.NameResolver$Args, io.grpc.internal.SharedResourceHolder$Resource, com.google.common.base.Stopwatch, boolean)
    {
        io.grpc.internal.DnsNameResolver $r0;
        io.grpc.NameResolver$Args $r1;
        com.google.common.base.Stopwatch $r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;
        io.grpc.internal.SharedResourceHolder$Resource $r5;
        java.util.Random $r6;
        io.grpc.internal.DnsNameResolver$JdkAddressResolver $r7;
        java.util.concurrent.atomic.AtomicReference $r8;
        java.lang.StringBuilder $r9;
        java.lang.Object $r10;
        java.net.URI $r11;
        int $i0;
        io.grpc.ProxyDetector $r12;
        long $l1;
        io.grpc.SynchronizationContext $r13;
        java.util.concurrent.Executor $r14;
        io.grpc.NameResolver$ServiceConfigParser $r15;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $r3 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r1 := @parameter2: io.grpc.NameResolver$Args;

        $r5 := @parameter3: io.grpc.internal.SharedResourceHolder$Resource;

        $r2 := @parameter4: com.google.common.base.Stopwatch;

        $z0 := @parameter5: boolean;

        specialinvoke $r0.<io.grpc.NameResolver: void <init>()>();

        $r6 = new java.util.Random;

        specialinvoke $r6.<java.util.Random: void <init>()>();

        $r0.<io.grpc.internal.DnsNameResolver: java.util.Random random> = $r6;

        $r7 = <io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver INSTANCE>;

        $r0.<io.grpc.internal.DnsNameResolver: io.grpc.internal.DnsNameResolver$AddressResolver addressResolver> = $r7;

        $r8 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        $r0.<io.grpc.internal.DnsNameResolver: java.util.concurrent.atomic.AtomicReference resourceResolver> = $r8;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "args");

        $r0.<io.grpc.internal.DnsNameResolver: io.grpc.internal.SharedResourceHolder$Resource executorResource> = $r5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("//");

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "name");

        $r3 = (java.lang.String) $r10;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r3);

        $r3 = virtualinvoke $r11.<java.net.URI: java.lang.String getHost()>();

        $z1 = 1;

        if $r3 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z2, "Invalid DNS name: %s", $r4);

        $r3 = virtualinvoke $r11.<java.net.URI: java.lang.String getAuthority()>();

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r3, "nameUri (%s) doesn\'t have an authority", $r11);

        $r3 = (java.lang.String) $r10;

        $r0.<io.grpc.internal.DnsNameResolver: java.lang.String authority> = $r3;

        $r3 = virtualinvoke $r11.<java.net.URI: java.lang.String getHost()>();

        $r0.<io.grpc.internal.DnsNameResolver: java.lang.String host> = $r3;

        $i0 = virtualinvoke $r11.<java.net.URI: int getPort()>();

        if $i0 != -1 goto label3;

        $i0 = virtualinvoke $r1.<io.grpc.NameResolver$Args: int getDefaultPort()>();

        $r0.<io.grpc.internal.DnsNameResolver: int port> = $i0;

        goto label4;

     label3:
        $i0 = virtualinvoke $r11.<java.net.URI: int getPort()>();

        $r0.<io.grpc.internal.DnsNameResolver: int port> = $i0;

     label4:
        $r12 = virtualinvoke $r1.<io.grpc.NameResolver$Args: io.grpc.ProxyDetector getProxyDetector()>();

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r12, "proxyDetector");

        $r12 = (io.grpc.ProxyDetector) $r10;

        $r0.<io.grpc.internal.DnsNameResolver: io.grpc.ProxyDetector proxyDetector> = $r12;

        $l1 = staticinvoke <io.grpc.internal.DnsNameResolver: long getNetworkAddressCacheTtlNanos(boolean)>($z0);

        $r0.<io.grpc.internal.DnsNameResolver: long cacheTtlNanos> = $l1;

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "stopwatch");

        $r2 = (com.google.common.base.Stopwatch) $r10;

        $r0.<io.grpc.internal.DnsNameResolver: com.google.common.base.Stopwatch stopwatch> = $r2;

        $r13 = virtualinvoke $r1.<io.grpc.NameResolver$Args: io.grpc.SynchronizationContext getSynchronizationContext()>();

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r13, "syncContext");

        $r13 = (io.grpc.SynchronizationContext) $r10;

        $r0.<io.grpc.internal.DnsNameResolver: io.grpc.SynchronizationContext syncContext> = $r13;

        $r14 = virtualinvoke $r1.<io.grpc.NameResolver$Args: java.util.concurrent.Executor getOffloadExecutor()>();

        $r0.<io.grpc.internal.DnsNameResolver: java.util.concurrent.Executor executor> = $r14;

        if $r14 != null goto label5;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        $r0.<io.grpc.internal.DnsNameResolver: boolean usingExecutorResource> = $z1;

        $r15 = virtualinvoke $r1.<io.grpc.NameResolver$Args: io.grpc.NameResolver$ServiceConfigParser getServiceConfigParser()>();

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r15, "serviceConfigParser");

        $r15 = (io.grpc.NameResolver$ServiceConfigParser) $r10;

        $r0.<io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$ServiceConfigParser serviceConfigParser> = $r15;

        return;
    }

    static io.grpc.SynchronizationContext access$1000(io.grpc.internal.DnsNameResolver)
    {
        io.grpc.internal.DnsNameResolver $r0;
        io.grpc.SynchronizationContext r1;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver;

        r1 = $r0.<io.grpc.internal.DnsNameResolver: io.grpc.SynchronizationContext syncContext>;

        return r1;
    }

    static java.util.logging.Logger access$400()
    {
        java.util.logging.Logger r0;

        r0 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        return r0;
    }

    static java.lang.String access$500(io.grpc.internal.DnsNameResolver)
    {
        io.grpc.internal.DnsNameResolver $r0;
        java.lang.String r1;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver;

        r1 = $r0.<io.grpc.internal.DnsNameResolver: java.lang.String host>;

        return r1;
    }

    static io.grpc.EquivalentAddressGroup access$600(io.grpc.internal.DnsNameResolver) throws java.io.IOException
    {
        io.grpc.EquivalentAddressGroup $r0;
        io.grpc.internal.DnsNameResolver $r1;

        $r1 := @parameter0: io.grpc.internal.DnsNameResolver;

        $r0 = specialinvoke $r1.<io.grpc.internal.DnsNameResolver: io.grpc.EquivalentAddressGroup detectProxy()>();

        return $r0;
    }

    static long access$700(io.grpc.internal.DnsNameResolver)
    {
        io.grpc.internal.DnsNameResolver $r0;
        long l0;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver;

        l0 = $r0.<io.grpc.internal.DnsNameResolver: long cacheTtlNanos>;

        return l0;
    }

    static com.google.common.base.Stopwatch access$800(io.grpc.internal.DnsNameResolver)
    {
        io.grpc.internal.DnsNameResolver $r0;
        com.google.common.base.Stopwatch r1;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver;

        r1 = $r0.<io.grpc.internal.DnsNameResolver: com.google.common.base.Stopwatch stopwatch>;

        return r1;
    }

    static boolean access$902(io.grpc.internal.DnsNameResolver, boolean)
    {
        io.grpc.internal.DnsNameResolver $r0;
        boolean $z0;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver;

        $z0 := @parameter1: boolean;

        $r0.<io.grpc.internal.DnsNameResolver: boolean resolving> = $z0;

        return $z0;
    }

    private boolean cacheRefreshRequired()
    {
        io.grpc.internal.DnsNameResolver $r0;
        java.util.concurrent.TimeUnit $r1;
        long $l0, $l2;
        boolean $z0;
        byte $b1;
        com.google.common.base.Stopwatch $r2;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $z0 = $r0.<io.grpc.internal.DnsNameResolver: boolean resolved>;

        if $z0 == 0 goto label2;

        $l0 = $r0.<io.grpc.internal.DnsNameResolver: long cacheTtlNanos>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $r2 = $r0.<io.grpc.internal.DnsNameResolver: com.google.common.base.Stopwatch stopwatch>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = virtualinvoke $r2.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r1);

        $l2 = $r0.<io.grpc.internal.DnsNameResolver: long cacheTtlNanos>;

        $b1 = $l0 cmp $l2;

        if $b1 <= 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        return $z0;
    }

    private io.grpc.EquivalentAddressGroup detectProxy() throws java.io.IOException
    {
        io.grpc.internal.DnsNameResolver $r0;
        java.lang.String $r1;
        int $i0;
        java.net.InetSocketAddress $r2;
        io.grpc.ProxyDetector $r3;
        io.grpc.ProxiedSocketAddress $r4;
        io.grpc.EquivalentAddressGroup $r5;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $r1 = $r0.<io.grpc.internal.DnsNameResolver: java.lang.String host>;

        $i0 = $r0.<io.grpc.internal.DnsNameResolver: int port>;

        $r2 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>($r1, $i0);

        $r3 = $r0.<io.grpc.internal.DnsNameResolver: io.grpc.ProxyDetector proxyDetector>;

        $r4 = interfaceinvoke $r3.<io.grpc.ProxyDetector: io.grpc.ProxiedSocketAddress proxyFor(java.net.SocketAddress)>($r2);

        if $r4 == null goto label1;

        $r5 = new io.grpc.EquivalentAddressGroup;

        specialinvoke $r5.<io.grpc.EquivalentAddressGroup: void <init>(java.net.SocketAddress)>($r4);

        return $r5;

     label1:
        return null;
    }

    private static final java.util.List getClientLanguagesFromChoice(java.util.Map)
    {
        java.util.List $r0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 = staticinvoke <io.grpc.internal.JsonUtil: java.util.List getListOfStrings(java.util.Map,java.lang.String)>($r1, "clientLanguage");

        return $r0;
    }

    private static final java.util.List getHostnamesFromChoice(java.util.Map)
    {
        java.util.List $r0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 = staticinvoke <io.grpc.internal.JsonUtil: java.util.List getListOfStrings(java.util.Map,java.lang.String)>($r1, "clientHostname");

        return $r0;
    }

    private static java.lang.String getLocalHostname()
    {
        java.lang.String $r0;
        java.net.InetAddress $r1;
        java.lang.Throwable $r2;
        java.lang.RuntimeException r3;

        $r0 = <io.grpc.internal.DnsNameResolver: java.lang.String localHostname>;

        if $r0 != null goto label4;

        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

     label1:
        $r0 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostName()>();

     label2:
        <io.grpc.internal.DnsNameResolver: java.lang.String localHostname> = $r0;

        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = new java.lang.RuntimeException;

        specialinvoke r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        $r2 = (java.lang.Throwable) r3;

        throw $r2;

     label4:
        $r0 = <io.grpc.internal.DnsNameResolver: java.lang.String localHostname>;

        return $r0;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    private static long getNetworkAddressCacheTtlNanos(boolean)
    {
        boolean $z0;
        java.lang.String $r0;
        long $l0;
        byte $b1;
        java.util.concurrent.TimeUnit $r1;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        return 0L;

     label1:
        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("networkaddress.cache.ttl");

        $l0 = 30L;

        if $r0 == null goto label2;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

        goto label2;

     label2:
        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label3;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label3:
        return $l0;
    }

    private static final java.lang.Double getPercentageFromChoice(java.util.Map)
    {
        java.lang.Double $r0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r0 = staticinvoke <io.grpc.internal.JsonUtil: java.lang.Double getNumberAsDouble(java.util.Map,java.lang.String)>($r1, "percentage");

        return $r0;
    }

    static io.grpc.internal.DnsNameResolver$ResourceResolverFactory getResourceResolverFactory(java.lang.ClassLoader)
    {
        java.lang.ClassLoader $r0;
        java.lang.Class $r1;
        java.lang.Class[] $r2;
        java.lang.reflect.Constructor $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        io.grpc.internal.DnsNameResolver$ResourceResolverFactory $r6;
        java.lang.Throwable $r7, $r10, $r11, $r12;
        java.util.logging.Logger $r8;
        java.util.logging.Level $r9;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("io.grpc.internal.JndiResourceResolverFactory", 1, $r0);

     label01:
        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lio/grpc/internal/DnsNameResolver$ResourceResolverFactory;");

     label02:
        $r2 = newarray (java.lang.Class)[0];

     label03:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

     label04:
        $r4 = newarray (java.lang.Object)[0];

     label05:
        $r5 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label06:
        $r6 = (io.grpc.internal.DnsNameResolver$ResourceResolverFactory) $r5;

        $r7 = interfaceinvoke $r6.<io.grpc.internal.DnsNameResolver$ResourceResolverFactory: java.lang.Throwable unavailabilityCause()>();

        if $r7 == null goto label07;

        $r8 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r7 = interfaceinvoke $r6.<io.grpc.internal.DnsNameResolver$ResourceResolverFactory: java.lang.Throwable unavailabilityCause()>();

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "io.grpc.internal.DnsNameResolver", "getResourceResolverFactory", "JndiResourceResolverFactory not available, skipping.", $r7);

        return null;

     label07:
        return $r6;

     label08:
        $r7 := @caughtexception;

        $r8 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "io.grpc.internal.DnsNameResolver", "getResourceResolverFactory", "Can\'t construct JndiResourceResolverFactory, skipping.", $r7);

        return null;

     label09:
        $r10 := @caughtexception;

        $r8 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "io.grpc.internal.DnsNameResolver", "getResourceResolverFactory", "Can\'t find JndiResourceResolverFactory ctor, skipping.", $r10);

        return null;

     label10:
        $r11 := @caughtexception;

        $r8 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "io.grpc.internal.DnsNameResolver", "getResourceResolverFactory", "Unable to cast JndiResourceResolverFactory, skipping.", $r11);

        return null;

     label11:
        $r12 := @caughtexception;

        $r8 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "io.grpc.internal.DnsNameResolver", "getResourceResolverFactory", "Unable to find JndiResourceResolverFactory, skipping.", $r12);

        return null;

        catch java.lang.ClassNotFoundException from label01 to label02 with label11;
        catch java.lang.ClassCastException from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label05 to label06 with label08;
    }

    static java.util.Map maybeChooseServiceConfig(java.util.Map, java.util.Random, java.lang.String)
    {
        java.util.Map $r0, $r11;
        java.util.Random $r1;
        java.lang.String $r2, $r8, $r9;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry $r6;
        java.util.List $r7;
        java.lang.Double $r10;
        int $i0, $i1;
        java.lang.Object[] $r12;
        com.google.common.base.VerifyException r13;
        java.lang.Throwable r14;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Random;

        $r2 := @parameter2: java.lang.String;

        $r3 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r3 = <io.grpc.internal.DnsNameResolver: java.util.Set SERVICE_CONFIG_CHOICE_KEYS>;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        staticinvoke <com.google.common.base.Verify: void verify(boolean,java.lang.String,java.lang.Object)>($z0, "Bad key: %s", $r6);

        goto label01;

     label02:
        $r7 = staticinvoke <io.grpc.internal.DnsNameResolver: java.util.List getClientLanguagesFromChoice(java.util.Map)>($r0);

        if $r7 == null goto label06;

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label06;

        $r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r5;

        $r9 = "java";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z0 == 0 goto label03;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        if $z0 != 0 goto label06;

        return null;

     label06:
        $r10 = staticinvoke <io.grpc.internal.DnsNameResolver: java.lang.Double getPercentageFromChoice(java.util.Map)>($r0);

        if $r10 == null goto label09;

        $i0 = virtualinvoke $r10.<java.lang.Double: int intValue()>();

        if $i0 < 0 goto label07;

        if $i0 > 100 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        staticinvoke <com.google.common.base.Verify: void verify(boolean,java.lang.String,java.lang.Object)>($z0, "Bad percentage: %s", $r10);

        $i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(100);

        if $i1 < $i0 goto label09;

        return null;

     label09:
        $r7 = staticinvoke <io.grpc.internal.DnsNameResolver: java.util.List getHostnamesFromChoice(java.util.Map)>($r0);

        if $r7 == null goto label13;

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label13;

        $r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r5;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label10;

        $z0 = 1;

        goto label12;

     label11:
        $z0 = 0;

     label12:
        if $z0 != 0 goto label13;

        return null;

     label13:
        $r11 = staticinvoke <io.grpc.internal.JsonUtil: java.util.Map getObject(java.util.Map,java.lang.String)>($r0, "serviceConfig");

        if $r11 == null goto label14;

        return $r11;

     label14:
        r13 = new com.google.common.base.VerifyException;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = $r0;

        $r12[1] = "serviceConfig";

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("key \'%s\' missing in \'%s\'", $r12);

        specialinvoke r13.<com.google.common.base.VerifyException: void <init>(java.lang.String)>($r2);

        goto label15;

     label15:
        r14 = (java.lang.Throwable) r13;

        throw r14;
    }

    static io.grpc.NameResolver$ConfigOrError parseServiceConfig(java.util.List, java.util.Random, java.lang.String)
    {
        java.util.List $r0;
        java.util.Random $r1;
        java.lang.String $r2;
        java.util.Iterator $r3;
        java.util.Map $r4, $r6;
        boolean $z0;
        java.lang.Object $r5;
        io.grpc.NameResolver$ConfigOrError $r7;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.Random;

        $r2 := @parameter2: java.lang.String;

        $r0 = staticinvoke <io.grpc.internal.DnsNameResolver: java.util.List parseTxtResults(java.util.List)>($r0);

        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $r4 = null;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map) $r5;

        $r6 = staticinvoke <io.grpc.internal.DnsNameResolver: java.util.Map maybeChooseServiceConfig(java.util.Map,java.util.Random,java.lang.String)>($r4, $r1, $r2);

        $r4 = $r6;

        if $r6 == null goto label1;

        goto label2;

     label2:
        if $r4 != null goto label3;

        return null;

     label3:
        $r7 = staticinvoke <io.grpc.NameResolver$ConfigOrError: io.grpc.NameResolver$ConfigOrError fromConfig(java.lang.Object)>($r4);

        return $r7;
    }

    static java.util.List parseTxtResults(java.util.List) throws java.io.IOException
    {
        java.util.logging.Logger $r0;
        java.util.logging.Level $r1;
        java.lang.Object[] $r2;
        java.util.List $r3, r13;
        java.util.ArrayList $r4, r10;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String $r7, $r8;
        int $i0;
        java.lang.StringBuilder $r9, r11;
        java.lang.ClassCastException r12;
        java.util.Collection r14;

        $r3 := @parameter0: java.util.List;

        r10 = new java.util.ArrayList;

        $r4 = r10;

        specialinvoke r10.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        $r8 = "grpc_config=";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("grpc_config=");

        if $z0 != 0 goto label2;

        $r0 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r7;

        virtualinvoke $r0.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>($r1, "io.grpc.internal.DnsNameResolver", "parseTxtResults", "Ignoring non service config {0}", $r2);

        goto label1;

     label2:
        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>($i0);

        $r6 = staticinvoke <io.grpc.internal.JsonParser: java.lang.Object parse(java.lang.String)>($r7);

        $z0 = $r6 instanceof java.util.List;

        if $z0 == 0 goto label3;

        $r3 = (java.util.List) $r6;

        $r3 = staticinvoke <io.grpc.internal.JsonUtil: java.util.List checkObjectList(java.util.List)>($r3);

        r13 = (java.util.List) $r4;

        r14 = (java.util.Collection) $r3;

        interfaceinvoke r13.<java.util.List: boolean addAll(java.util.Collection)>(r14);

        goto label1;

     label3:
        r12 = new java.lang.ClassCastException;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrong type ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.lang.ClassCastException: void <init>(java.lang.String)>($r7);

        throw r12;

     label4:
        $r3 = (java.util.List) $r4;

        return $r3;
    }

    private void resolve()
    {
        io.grpc.internal.DnsNameResolver $r0;
        io.grpc.internal.DnsNameResolver$Resolve $r1;
        io.grpc.NameResolver$Listener2 $r2;
        boolean $z0;
        java.util.concurrent.Executor $r3;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $z0 = $r0.<io.grpc.internal.DnsNameResolver: boolean resolving>;

        if $z0 != 0 goto label2;

        $z0 = $r0.<io.grpc.internal.DnsNameResolver: boolean shutdown>;

        if $z0 != 0 goto label2;

        $z0 = specialinvoke $r0.<io.grpc.internal.DnsNameResolver: boolean cacheRefreshRequired()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0.<io.grpc.internal.DnsNameResolver: boolean resolving> = 1;

        $r3 = $r0.<io.grpc.internal.DnsNameResolver: java.util.concurrent.Executor executor>;

        $r1 = new io.grpc.internal.DnsNameResolver$Resolve;

        $r2 = $r0.<io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$Listener2 listener>;

        specialinvoke $r1.<io.grpc.internal.DnsNameResolver$Resolve: void <init>(io.grpc.internal.DnsNameResolver,io.grpc.NameResolver$Listener2)>($r0, $r2);

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

     label2:
        return;
    }

    private java.util.List resolveAddresses()
    {
        io.grpc.internal.DnsNameResolver $r0;
        io.grpc.internal.DnsNameResolver$AddressResolver $r1;
        java.lang.String $r2;
        java.util.List $r3;
        java.util.ArrayList $r4, r13;
        int $i0;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.net.InetAddress $r7;
        java.lang.Throwable $r8, $r9, $r10;
        java.util.logging.Logger $r11;
        java.util.logging.Level $r12;
        java.net.InetSocketAddress r14;
        io.grpc.EquivalentAddressGroup r15;
        java.lang.RuntimeException r16;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $r1 = $r0.<io.grpc.internal.DnsNameResolver: io.grpc.internal.DnsNameResolver$AddressResolver addressResolver>;

        $r2 = $r0.<io.grpc.internal.DnsNameResolver: java.lang.String host>;

     label01:
        $r3 = interfaceinvoke $r1.<io.grpc.internal.DnsNameResolver$AddressResolver: java.util.List resolveAddress(java.lang.String)>($r2);

     label02:
        r13 = new java.util.ArrayList;

        $r4 = r13;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke r13.<java.util.ArrayList: void <init>(int)>($i0);

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.net.InetAddress) $r6;

        r15 = new io.grpc.EquivalentAddressGroup;

        r14 = new java.net.InetSocketAddress;

        $i0 = $r0.<io.grpc.internal.DnsNameResolver: int port>;

        specialinvoke r14.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r7, $i0);

        specialinvoke r15.<io.grpc.EquivalentAddressGroup: void <init>(java.net.SocketAddress)>(r14);

        $r3 = (java.util.List) $r4;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r15);

        goto label03;

     label04:
        $r3 = (java.util.List) $r4;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r3;

     label05:
        $r8 := @caughtexception;

        $r9 = null;

        goto label11;

     label06:
        $r9 := @caughtexception;

        staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>($r9);

        r16 = new java.lang.RuntimeException;

     label07:
        specialinvoke r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

     label08:
        $r8 = (java.lang.Throwable) r16;

     label09:
        throw $r8;

     label10:
        $r10 := @caughtexception;

        $r8 = $r10;

     label11:
        if $r9 == null goto label12;

        $r11 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        $r12 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r11.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "io.grpc.internal.DnsNameResolver", "resolveAddresses", "Address resolution failure", $r9);

     label12:
        goto label13;

     label13:
        throw $r8;

        catch java.lang.Exception from label01 to label02 with label06;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    private io.grpc.NameResolver$ConfigOrError resolveServiceConfig()
    {
        io.grpc.internal.DnsNameResolver $r0;
        java.util.List $r1, $r5;
        io.grpc.internal.DnsNameResolver$ResourceResolver $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.Throwable $r6;
        java.util.logging.Logger $r7;
        java.util.logging.Level $r8;
        boolean $z0;
        java.util.Random $r9;
        io.grpc.NameResolver$ConfigOrError $r10;
        io.grpc.Status $r11;
        java.lang.Object $r12;
        java.util.Map $r13;
        io.grpc.NameResolver$ServiceConfigParser $r14;
        java.lang.Object[] $r15;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r2 = virtualinvoke $r0.<io.grpc.internal.DnsNameResolver: io.grpc.internal.DnsNameResolver$ResourceResolver getResourceResolver()>();

        if $r2 == null goto label07;

        $r3 = new java.lang.StringBuilder;

     label01:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_grpc_config.");

     label02:
        $r4 = $r0.<io.grpc.internal.DnsNameResolver: java.lang.String host>;

     label03:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = interfaceinvoke $r2.<io.grpc.internal.DnsNameResolver$ResourceResolver: java.util.List resolveTxt(java.lang.String)>($r4);

     label04:
        $r1 = $r5;

     label05:
        goto label07;

     label06:
        $r6 := @caughtexception;

        $r7 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r7.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "io.grpc.internal.DnsNameResolver", "resolveServiceConfig", "ServiceConfig resolution failure", $r6);

        goto label05;

     label07:
        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label09;

        $r9 = $r0.<io.grpc.internal.DnsNameResolver: java.util.Random random>;

        $r4 = staticinvoke <io.grpc.internal.DnsNameResolver: java.lang.String getLocalHostname()>();

        $r10 = staticinvoke <io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$ConfigOrError parseServiceConfig(java.util.List,java.util.Random,java.lang.String)>($r1, $r9, $r4);

        if $r10 == null goto label10;

        $r11 = virtualinvoke $r10.<io.grpc.NameResolver$ConfigOrError: io.grpc.Status getError()>();

        if $r11 == null goto label08;

        $r11 = virtualinvoke $r10.<io.grpc.NameResolver$ConfigOrError: io.grpc.Status getError()>();

        $r10 = staticinvoke <io.grpc.NameResolver$ConfigOrError: io.grpc.NameResolver$ConfigOrError fromError(io.grpc.Status)>($r11);

        return $r10;

     label08:
        $r12 = virtualinvoke $r10.<io.grpc.NameResolver$ConfigOrError: java.lang.Object getConfig()>();

        $r13 = (java.util.Map) $r12;

        $r14 = $r0.<io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$ServiceConfigParser serviceConfigParser>;

        $r10 = virtualinvoke $r14.<io.grpc.NameResolver$ServiceConfigParser: io.grpc.NameResolver$ConfigOrError parseServiceConfig(java.util.Map)>($r13);

        return $r10;

     label09:
        $r7 = <io.grpc.internal.DnsNameResolver: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r15 = newarray (java.lang.Object)[1];

        $r4 = $r0.<io.grpc.internal.DnsNameResolver: java.lang.String host>;

        $r15[0] = $r4;

        virtualinvoke $r7.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>($r8, "io.grpc.internal.DnsNameResolver", "resolveServiceConfig", "No TXT records found for {0}", $r15);

     label10:
        return null;

        catch java.lang.Exception from label01 to label02 with label06;
        catch java.lang.Exception from label03 to label04 with label06;
    }

    protected static boolean shouldUseJndi(boolean, boolean, java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        char $c2;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r0 := @parameter2: java.lang.String;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = "localhost";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 == 0 goto label2;

        return $z1;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        if $z0 == 0 goto label3;

        return 0;

     label3:
        $i0 = 0;

        $z0 = 1;

     label4:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label8;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 == 46 goto label7;

        if $c2 < 48 goto label5;

        if $c2 > 57 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        $z0 = $z0 & $z1;

     label7:
        $i0 = $i0 + 1;

        goto label4;

     label8:
        $z0 = 1 ^ $z0;

        return $z0;
    }

    protected io.grpc.internal.DnsNameResolver$InternalResolutionResult doResolve(boolean)
    {
        io.grpc.internal.DnsNameResolver $r0;
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r1;
        boolean $z0;
        java.util.List $r2;
        java.lang.Throwable $r3;
        io.grpc.Status $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        io.grpc.NameResolver$ConfigOrError $r7;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $z0 := @parameter0: boolean;

        $r1 = new io.grpc.internal.DnsNameResolver$InternalResolutionResult;

        specialinvoke $r1.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: void <init>(io.grpc.internal.DnsNameResolver$1)>(null);

     label1:
        $r2 = specialinvoke $r0.<io.grpc.internal.DnsNameResolver: java.util.List resolveAddresses()>();

     label2:
        staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: java.util.List access$102(io.grpc.internal.DnsNameResolver$InternalResolutionResult,java.util.List)>($r1, $r2);

        goto label4;

     label3:
        $r3 := @caughtexception;

        if $z0 != 0 goto label4;

        $r4 = <io.grpc.Status: io.grpc.Status UNAVAILABLE>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to resolve host ");

        $r6 = $r0.<io.grpc.internal.DnsNameResolver: java.lang.String host>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>($r6);

        $r4 = virtualinvoke $r4.<io.grpc.Status: io.grpc.Status withCause(java.lang.Throwable)>($r3);

        staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status access$202(io.grpc.internal.DnsNameResolver$InternalResolutionResult,io.grpc.Status)>($r1, $r4);

        return $r1;

     label4:
        $z0 = <io.grpc.internal.DnsNameResolver: boolean enableTxt>;

        if $z0 == 0 goto label5;

        $r7 = specialinvoke $r0.<io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$ConfigOrError resolveServiceConfig()>();

        staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.NameResolver$ConfigOrError access$302(io.grpc.internal.DnsNameResolver$InternalResolutionResult,io.grpc.NameResolver$ConfigOrError)>($r1, $r7);

     label5:
        return $r1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected io.grpc.internal.DnsNameResolver$ResourceResolver getResourceResolver()
    {
        io.grpc.internal.DnsNameResolver $r0;
        java.lang.String $r1;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        io.grpc.internal.DnsNameResolver$ResourceResolver $r4;
        io.grpc.internal.DnsNameResolver$ResourceResolverFactory $r5;
        java.lang.Throwable $r6;
        java.lang.AssertionError $r7;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $z0 = <io.grpc.internal.DnsNameResolver: boolean enableJndi>;

        $z1 = <io.grpc.internal.DnsNameResolver: boolean enableJndiLocalhost>;

        $r1 = $r0.<io.grpc.internal.DnsNameResolver: java.lang.String host>;

        $z0 = staticinvoke <io.grpc.internal.DnsNameResolver: boolean shouldUseJndi(boolean,boolean,java.lang.String)>($z0, $z1, $r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = $r0.<io.grpc.internal.DnsNameResolver: java.util.concurrent.atomic.AtomicReference resourceResolver>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (io.grpc.internal.DnsNameResolver$ResourceResolver) $r3;

        if $r4 != null goto label4;

        $r5 = <io.grpc.internal.DnsNameResolver: io.grpc.internal.DnsNameResolver$ResourceResolverFactory resourceResolverFactory>;

        if $r5 == null goto label4;

        $z0 = <io.grpc.internal.DnsNameResolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r6 = interfaceinvoke $r5.<io.grpc.internal.DnsNameResolver$ResourceResolverFactory: java.lang.Throwable unavailabilityCause()>();

        if $r6 != null goto label2;

        goto label3;

     label2:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        $r4 = interfaceinvoke $r5.<io.grpc.internal.DnsNameResolver$ResourceResolverFactory: io.grpc.internal.DnsNameResolver$ResourceResolver newResourceResolver()>();

     label4:
        return $r4;
    }

    public java.lang.String getServiceAuthority()
    {
        io.grpc.internal.DnsNameResolver $r0;
        java.lang.String r1;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        r1 = $r0.<io.grpc.internal.DnsNameResolver: java.lang.String authority>;

        return r1;
    }

    public void refresh()
    {
        io.grpc.internal.DnsNameResolver $r0;
        io.grpc.NameResolver$Listener2 $r1;
        boolean $z0;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $r1 = $r0.<io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$Listener2 listener>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "not started");

        specialinvoke $r0.<io.grpc.internal.DnsNameResolver: void resolve()>();

        return;
    }

    public void shutdown()
    {
        io.grpc.internal.DnsNameResolver $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.util.concurrent.Executor $r2;
        io.grpc.internal.SharedResourceHolder$Resource $r3;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $z0 = $r0.<io.grpc.internal.DnsNameResolver: boolean shutdown>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0.<io.grpc.internal.DnsNameResolver: boolean shutdown> = 1;

        $r2 = $r0.<io.grpc.internal.DnsNameResolver: java.util.concurrent.Executor executor>;

        if $r2 == null goto label2;

        $z0 = $r0.<io.grpc.internal.DnsNameResolver: boolean usingExecutorResource>;

        if $z0 == 0 goto label2;

        $r3 = $r0.<io.grpc.internal.DnsNameResolver: io.grpc.internal.SharedResourceHolder$Resource executorResource>;

        $r1 = staticinvoke <io.grpc.internal.SharedResourceHolder: java.lang.Object release(io.grpc.internal.SharedResourceHolder$Resource,java.lang.Object)>($r3, $r2);

        $r2 = (java.util.concurrent.Executor) $r1;

        $r0.<io.grpc.internal.DnsNameResolver: java.util.concurrent.Executor executor> = $r2;

     label2:
        return;
    }

    public void start(io.grpc.NameResolver$Listener2)
    {
        io.grpc.internal.DnsNameResolver $r0;
        io.grpc.NameResolver$Listener2 $r1, $r2;
        boolean $z0;
        io.grpc.internal.SharedResourceHolder$Resource $r3;
        java.lang.Object $r4;
        java.util.concurrent.Executor $r5;

        $r0 := @this: io.grpc.internal.DnsNameResolver;

        $r1 := @parameter0: io.grpc.NameResolver$Listener2;

        $r2 = $r0.<io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$Listener2 listener>;

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "already started");

        $z0 = $r0.<io.grpc.internal.DnsNameResolver: boolean usingExecutorResource>;

        if $z0 == 0 goto label3;

        $r3 = $r0.<io.grpc.internal.DnsNameResolver: io.grpc.internal.SharedResourceHolder$Resource executorResource>;

        $r4 = staticinvoke <io.grpc.internal.SharedResourceHolder: java.lang.Object get(io.grpc.internal.SharedResourceHolder$Resource)>($r3);

        $r5 = (java.util.concurrent.Executor) $r4;

        $r0.<io.grpc.internal.DnsNameResolver: java.util.concurrent.Executor executor> = $r5;

     label3:
        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "listener");

        $r1 = (io.grpc.NameResolver$Listener2) $r4;

        $r0.<io.grpc.internal.DnsNameResolver: io.grpc.NameResolver$Listener2 listener> = $r1;

        specialinvoke $r0.<io.grpc.internal.DnsNameResolver: void resolve()>();

        return;
    }

io.grpc.internal.DnsNameResolver$1
io.grpc.internal.DnsNameResolver$AddressResolver
<io.grpc.internal.DnsNameResolver$AddressResolver: java.util.List resolveAddress(java.lang.String)>
io.grpc.internal.DnsNameResolver$InternalResolutionResult
<io.grpc.internal.DnsNameResolver$InternalResolutionResult: java.util.List addresses>
<io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Attributes attributes>
<io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.NameResolver$ConfigOrError config>
<io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status error>
    private void <init>()
    {
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r0;

        $r0 := @this: io.grpc.internal.DnsNameResolver$InternalResolutionResult;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(io.grpc.internal.DnsNameResolver$1)
    {
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r0;
        io.grpc.internal.DnsNameResolver$1 $r1;

        $r0 := @this: io.grpc.internal.DnsNameResolver$InternalResolutionResult;

        $r1 := @parameter0: io.grpc.internal.DnsNameResolver$1;

        specialinvoke $r0.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: void <init>()>();

        return;
    }

    static java.util.List access$100(io.grpc.internal.DnsNameResolver$InternalResolutionResult)
    {
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r0;
        java.util.List r1;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver$InternalResolutionResult;

        r1 = $r0.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: java.util.List addresses>;

        return r1;
    }

    static java.util.List access$102(io.grpc.internal.DnsNameResolver$InternalResolutionResult, java.util.List)
    {
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r0;
        java.util.List $r1;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver$InternalResolutionResult;

        $r1 := @parameter1: java.util.List;

        $r0.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: java.util.List addresses> = $r1;

        return $r1;
    }

    static io.grpc.Status access$200(io.grpc.internal.DnsNameResolver$InternalResolutionResult)
    {
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r0;
        io.grpc.Status r1;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver$InternalResolutionResult;

        r1 = $r0.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status error>;

        return r1;
    }

    static io.grpc.Status access$202(io.grpc.internal.DnsNameResolver$InternalResolutionResult, io.grpc.Status)
    {
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r0;
        io.grpc.Status $r1;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver$InternalResolutionResult;

        $r1 := @parameter1: io.grpc.Status;

        $r0.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status error> = $r1;

        return $r1;
    }

    static io.grpc.NameResolver$ConfigOrError access$300(io.grpc.internal.DnsNameResolver$InternalResolutionResult)
    {
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r0;
        io.grpc.NameResolver$ConfigOrError r1;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver$InternalResolutionResult;

        r1 = $r0.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.NameResolver$ConfigOrError config>;

        return r1;
    }

    static io.grpc.NameResolver$ConfigOrError access$302(io.grpc.internal.DnsNameResolver$InternalResolutionResult, io.grpc.NameResolver$ConfigOrError)
    {
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r0;
        io.grpc.NameResolver$ConfigOrError $r1;

        $r0 := @parameter0: io.grpc.internal.DnsNameResolver$InternalResolutionResult;

        $r1 := @parameter1: io.grpc.NameResolver$ConfigOrError;

        $r0.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.NameResolver$ConfigOrError config> = $r1;

        return $r1;
    }

io.grpc.internal.DnsNameResolver$JdkAddressResolver
<io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver[] $VALUES>
<io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver INSTANCE>
    private static io.grpc.internal.DnsNameResolver$JdkAddressResolver[] $values()
    {
        io.grpc.internal.DnsNameResolver$JdkAddressResolver $r0;
        io.grpc.internal.DnsNameResolver$JdkAddressResolver[] $r1;

        $r1 = newarray (io.grpc.internal.DnsNameResolver$JdkAddressResolver)[1];

        $r0 = <io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver INSTANCE>;

        $r1[0] = $r0;

        return $r1;
    }

    static void <clinit>()
    {
        io.grpc.internal.DnsNameResolver$JdkAddressResolver[] $r0;
        io.grpc.internal.DnsNameResolver$JdkAddressResolver $r1;

        $r1 = new io.grpc.internal.DnsNameResolver$JdkAddressResolver;

        specialinvoke $r1.<io.grpc.internal.DnsNameResolver$JdkAddressResolver: void <init>(java.lang.String,int)>("INSTANCE", 0);

        <io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver INSTANCE> = $r1;

        $r0 = staticinvoke <io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver[] $values()>();

        <io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        io.grpc.internal.DnsNameResolver$JdkAddressResolver $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: io.grpc.internal.DnsNameResolver$JdkAddressResolver;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static io.grpc.internal.DnsNameResolver$JdkAddressResolver[] values()
    {
        java.lang.Object $r0;
        io.grpc.internal.DnsNameResolver$JdkAddressResolver[] $r1;

        $r1 = <io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (io.grpc.internal.DnsNameResolver$JdkAddressResolver[]) $r0;

        return $r1;
    }

    public java.util.List resolveAddress(java.lang.String) throws java.net.UnknownHostException
    {
        io.grpc.internal.DnsNameResolver$JdkAddressResolver $r0;
        java.lang.String $r1;
        java.net.InetAddress[] $r2;
        java.util.List $r3;

        $r0 := @this: io.grpc.internal.DnsNameResolver$JdkAddressResolver;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1);

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r3;
    }

io.grpc.internal.DnsNameResolver$Resolve$1
<io.grpc.internal.DnsNameResolver$Resolve$1: io.grpc.internal.DnsNameResolver$Resolve this$1>
<io.grpc.internal.DnsNameResolver$Resolve$1: boolean val$succeed>
    void <init>(io.grpc.internal.DnsNameResolver$Resolve, boolean)
    {
        io.grpc.internal.DnsNameResolver$Resolve$1 $r0;
        io.grpc.internal.DnsNameResolver$Resolve $r1;
        boolean $z0;

        $r0 := @this: io.grpc.internal.DnsNameResolver$Resolve$1;

        $r1 := @parameter0: io.grpc.internal.DnsNameResolver$Resolve;

        $z0 := @parameter1: boolean;

        $r0.<io.grpc.internal.DnsNameResolver$Resolve$1: io.grpc.internal.DnsNameResolver$Resolve this$1> = $r1;

        $r0.<io.grpc.internal.DnsNameResolver$Resolve$1: boolean val$succeed> = $z0;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        io.grpc.internal.DnsNameResolver$Resolve$1 $r0;
        byte $b0;
        boolean $z0;
        io.grpc.internal.DnsNameResolver$Resolve $r1;
        io.grpc.internal.DnsNameResolver $r2;
        long $l1;
        com.google.common.base.Stopwatch $r3;

        $r0 := @this: io.grpc.internal.DnsNameResolver$Resolve$1;

        $z0 = $r0.<io.grpc.internal.DnsNameResolver$Resolve$1: boolean val$succeed>;

        if $z0 == 0 goto label1;

        $r1 = $r0.<io.grpc.internal.DnsNameResolver$Resolve$1: io.grpc.internal.DnsNameResolver$Resolve this$1>;

        $r2 = $r1.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $r2.<io.grpc.internal.DnsNameResolver: boolean resolved> = 1;

        $r1 = $r0.<io.grpc.internal.DnsNameResolver$Resolve$1: io.grpc.internal.DnsNameResolver$Resolve this$1>;

        $r2 = $r1.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $l1 = staticinvoke <io.grpc.internal.DnsNameResolver: long access$700(io.grpc.internal.DnsNameResolver)>($r2);

        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label1;

        $r1 = $r0.<io.grpc.internal.DnsNameResolver$Resolve$1: io.grpc.internal.DnsNameResolver$Resolve this$1>;

        $r2 = $r1.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $r3 = staticinvoke <io.grpc.internal.DnsNameResolver: com.google.common.base.Stopwatch access$800(io.grpc.internal.DnsNameResolver)>($r2);

        $r3 = virtualinvoke $r3.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch reset()>();

        virtualinvoke $r3.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch start()>();

     label1:
        $r1 = $r0.<io.grpc.internal.DnsNameResolver$Resolve$1: io.grpc.internal.DnsNameResolver$Resolve this$1>;

        $r2 = $r1.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        staticinvoke <io.grpc.internal.DnsNameResolver: boolean access$902(io.grpc.internal.DnsNameResolver,boolean)>($r2, 0);

        return;
    }

io.grpc.internal.DnsNameResolver$Resolve
<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.NameResolver$Listener2 savedListener>
<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>
    void <init>(io.grpc.internal.DnsNameResolver, io.grpc.NameResolver$Listener2)
    {
        io.grpc.internal.DnsNameResolver$Resolve $r0;
        io.grpc.NameResolver$Listener2 $r1;
        java.lang.Object $r2;
        io.grpc.internal.DnsNameResolver $r3;

        $r0 := @this: io.grpc.internal.DnsNameResolver$Resolve;

        $r3 := @parameter0: io.grpc.internal.DnsNameResolver;

        $r1 := @parameter1: io.grpc.NameResolver$Listener2;

        $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0> = $r3;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "savedListener");

        $r1 = (io.grpc.NameResolver$Listener2) $r2;

        $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.NameResolver$Listener2 savedListener> = $r1;

        return;
    }

    public void run()
    {
        io.grpc.internal.DnsNameResolver$Resolve $r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        io.grpc.internal.DnsNameResolver $r4;
        java.lang.String $r5;
        io.grpc.internal.DnsNameResolver$InternalResolutionResult $r6, $r10;
        io.grpc.EquivalentAddressGroup $r7;
        io.grpc.NameResolver$ResolutionResult$Builder $r8;
        java.util.List $r9;
        io.grpc.Status $r11;
        io.grpc.NameResolver$Listener2 $r12;
        io.grpc.SynchronizationContext $r13;
        io.grpc.internal.DnsNameResolver$Resolve$1 $r14;
        io.grpc.NameResolver$ConfigOrError $r15;
        io.grpc.Attributes $r16;
        io.grpc.NameResolver$ResolutionResult $r17;
        java.lang.Throwable $r18, $r19;

        $r0 := @this: io.grpc.internal.DnsNameResolver$Resolve;

        $r1 = staticinvoke <io.grpc.internal.DnsNameResolver: java.util.logging.Logger access$400()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        if $z0 == 0 goto label01;

        $r1 = staticinvoke <io.grpc.internal.DnsNameResolver: java.util.logging.Logger access$400()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting DNS resolution of ");

        $r4 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $r5 = staticinvoke <io.grpc.internal.DnsNameResolver: java.lang.String access$500(io.grpc.internal.DnsNameResolver)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r2, "io.grpc.internal.DnsNameResolver$Resolve", "run", $r5);

     label01:
        $r6 = null;

        $z0 = 1;

        $r4 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $r7 = staticinvoke <io.grpc.internal.DnsNameResolver: io.grpc.EquivalentAddressGroup access$600(io.grpc.internal.DnsNameResolver)>($r4);

        $r8 = staticinvoke <io.grpc.NameResolver$ResolutionResult: io.grpc.NameResolver$ResolutionResult$Builder newBuilder()>();

        if $r7 == null goto label08;

        $r1 = staticinvoke <io.grpc.internal.DnsNameResolver: java.util.logging.Logger access$400()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level FINER>;

     label02:
        $z1 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

     label03:
        if $z1 == 0 goto label05;

        $r1 = staticinvoke <io.grpc.internal.DnsNameResolver: java.util.logging.Logger access$400()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r3 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using proxy address ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r2, "io.grpc.internal.DnsNameResolver$Resolve", "run", $r5);

     label05:
        $r9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7);

     label06:
        virtualinvoke $r8.<io.grpc.NameResolver$ResolutionResult$Builder: io.grpc.NameResolver$ResolutionResult$Builder setAddresses(java.util.List)>($r9);

     label07:
        goto label22;

     label08:
        $r4 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

     label09:
        $r10 = virtualinvoke $r4.<io.grpc.internal.DnsNameResolver: io.grpc.internal.DnsNameResolver$InternalResolutionResult doResolve(boolean)>(0);

     label10:
        $r6 = $r10;

        $r11 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status access$200(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r10);

        if $r11 == null goto label15;

        $r12 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.NameResolver$Listener2 savedListener>;

        $r11 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status access$200(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r10);

     label11:
        virtualinvoke $r12.<io.grpc.NameResolver$Listener2: void onError(io.grpc.Status)>($r11);

     label12:
        if $r10 == null goto label13;

        $r11 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status access$200(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r10);

        if $r11 != null goto label13;

        goto label14;

     label13:
        $z0 = 0;

     label14:
        $r4 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $r13 = staticinvoke <io.grpc.internal.DnsNameResolver: io.grpc.SynchronizationContext access$1000(io.grpc.internal.DnsNameResolver)>($r4);

        $r14 = new io.grpc.internal.DnsNameResolver$Resolve$1;

        specialinvoke $r14.<io.grpc.internal.DnsNameResolver$Resolve$1: void <init>(io.grpc.internal.DnsNameResolver$Resolve,boolean)>($r0, $z0);

        virtualinvoke $r13.<io.grpc.SynchronizationContext: void execute(java.lang.Runnable)>($r14);

        return;

     label15:
        $r9 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: java.util.List access$100(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r10);

        if $r9 == null goto label17;

        $r9 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: java.util.List access$100(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r10);

     label16:
        virtualinvoke $r8.<io.grpc.NameResolver$ResolutionResult$Builder: io.grpc.NameResolver$ResolutionResult$Builder setAddresses(java.util.List)>($r9);

     label17:
        $r15 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.NameResolver$ConfigOrError access$300(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r10);

        if $r15 == null goto label19;

        $r15 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.NameResolver$ConfigOrError access$300(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r10);

     label18:
        virtualinvoke $r8.<io.grpc.NameResolver$ResolutionResult$Builder: io.grpc.NameResolver$ResolutionResult$Builder setServiceConfig(io.grpc.NameResolver$ConfigOrError)>($r15);

     label19:
        $r16 = $r10.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Attributes attributes>;

        if $r16 == null goto label07;

        $r16 = $r10.<io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Attributes attributes>;

     label20:
        virtualinvoke $r8.<io.grpc.NameResolver$ResolutionResult$Builder: io.grpc.NameResolver$ResolutionResult$Builder setAttributes(io.grpc.Attributes)>($r16);

     label21:
        goto label07;

     label22:
        $r12 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.NameResolver$Listener2 savedListener>;

     label23:
        $r17 = virtualinvoke $r8.<io.grpc.NameResolver$ResolutionResult$Builder: io.grpc.NameResolver$ResolutionResult build()>();

        virtualinvoke $r12.<io.grpc.NameResolver$Listener2: void onResult(io.grpc.NameResolver$ResolutionResult)>($r17);

     label24:
        if $r6 == null goto label25;

        $r11 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status access$200(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r6);

        if $r11 != null goto label25;

        goto label26;

     label25:
        $z0 = 0;

     label26:
        $r4 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $r13 = staticinvoke <io.grpc.internal.DnsNameResolver: io.grpc.SynchronizationContext access$1000(io.grpc.internal.DnsNameResolver)>($r4);

        $r14 = new io.grpc.internal.DnsNameResolver$Resolve$1;

        specialinvoke $r14.<io.grpc.internal.DnsNameResolver$Resolve$1: void <init>(io.grpc.internal.DnsNameResolver$Resolve,boolean)>($r0, $z0);

     label27:
        virtualinvoke $r13.<io.grpc.SynchronizationContext: void execute(java.lang.Runnable)>($r14);

        return;

     label28:
        $r18 := @caughtexception;

        goto label36;

     label29:
        $r19 := @caughtexception;

        $r12 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.NameResolver$Listener2 savedListener>;

        $r11 = <io.grpc.Status: io.grpc.Status UNAVAILABLE>;

        $r3 = new java.lang.StringBuilder;

     label30:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to resolve host ");

     label31:
        $r4 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $r5 = staticinvoke <io.grpc.internal.DnsNameResolver: java.lang.String access$500(io.grpc.internal.DnsNameResolver)>($r4);

     label32:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r11.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>($r5);

        $r11 = virtualinvoke $r11.<io.grpc.Status: io.grpc.Status withCause(java.lang.Throwable)>($r19);

        virtualinvoke $r12.<io.grpc.NameResolver$Listener2: void onError(io.grpc.Status)>($r11);

     label33:
        if $r6 == null goto label34;

        $r11 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status access$200(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r6);

        if $r11 != null goto label34;

        goto label35;

     label34:
        $z0 = 0;

     label35:
        $r4 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $r13 = staticinvoke <io.grpc.internal.DnsNameResolver: io.grpc.SynchronizationContext access$1000(io.grpc.internal.DnsNameResolver)>($r4);

        $r14 = new io.grpc.internal.DnsNameResolver$Resolve$1;

        specialinvoke $r14.<io.grpc.internal.DnsNameResolver$Resolve$1: void <init>(io.grpc.internal.DnsNameResolver$Resolve,boolean)>($r0, $z0);

        goto label27;

     label36:
        if $r6 == null goto label37;

        $r11 = staticinvoke <io.grpc.internal.DnsNameResolver$InternalResolutionResult: io.grpc.Status access$200(io.grpc.internal.DnsNameResolver$InternalResolutionResult)>($r6);

        if $r11 != null goto label37;

        goto label38;

     label37:
        $z0 = 0;

     label38:
        $r4 = $r0.<io.grpc.internal.DnsNameResolver$Resolve: io.grpc.internal.DnsNameResolver this$0>;

        $r13 = staticinvoke <io.grpc.internal.DnsNameResolver: io.grpc.SynchronizationContext access$1000(io.grpc.internal.DnsNameResolver)>($r4);

        $r14 = new io.grpc.internal.DnsNameResolver$Resolve$1;

        specialinvoke $r14.<io.grpc.internal.DnsNameResolver$Resolve$1: void <init>(io.grpc.internal.DnsNameResolver$Resolve,boolean)>($r0, $z0);

        virtualinvoke $r13.<io.grpc.SynchronizationContext: void execute(java.lang.Runnable)>($r14);

        goto label39;

     label39:
        throw $r18;

        catch java.io.IOException from label02 to label03 with label29;
        catch java.io.IOException from label04 to label05 with label29;
        catch java.io.IOException from label06 to label07 with label29;
        catch java.io.IOException from label09 to label10 with label29;
        catch java.io.IOException from label11 to label12 with label29;
        catch java.lang.Throwable from label02 to label03 with label28;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch java.io.IOException from label16 to label17 with label29;
        catch java.io.IOException from label18 to label19 with label29;
        catch java.io.IOException from label20 to label21 with label29;
        catch java.io.IOException from label23 to label24 with label29;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.lang.Throwable from label23 to label24 with label28;
        catch java.lang.Throwable from label30 to label31 with label28;
        catch java.lang.Throwable from label32 to label33 with label28;
    }

io.grpc.internal.DnsNameResolver$ResourceResolver
<io.grpc.internal.DnsNameResolver$ResourceResolver: java.util.List resolveTxt(java.lang.String)>
io.grpc.internal.DnsNameResolver$ResourceResolverFactory
<io.grpc.internal.DnsNameResolver$ResourceResolverFactory: io.grpc.internal.DnsNameResolver$ResourceResolver newResourceResolver()>
<io.grpc.internal.DnsNameResolver$ResourceResolverFactory: java.lang.Throwable unavailabilityCause()>
