okio.AsyncTimeout
<okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion>
<okio.AsyncTimeout: long IDLE_TIMEOUT_MILLIS>
<okio.AsyncTimeout: long IDLE_TIMEOUT_NANOS>
<okio.AsyncTimeout: okio.AsyncTimeout head>
<okio.AsyncTimeout: boolean inQueue>
<okio.AsyncTimeout: okio.AsyncTimeout next>
<okio.AsyncTimeout: long timeoutAt>
    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        okio.AsyncTimeout$Companion $r1;
        long $l0;

        $r1 = new okio.AsyncTimeout$Companion;

        specialinvoke $r1.<okio.AsyncTimeout$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion> = $r1;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(60L);

        <okio.AsyncTimeout: long IDLE_TIMEOUT_MILLIS> = $l0;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        <okio.AsyncTimeout: long IDLE_TIMEOUT_NANOS> = $l0;

        return;
    }

    public void <init>()
    {
        okio.AsyncTimeout $r0;

        $r0 := @this: okio.AsyncTimeout;

        specialinvoke $r0.<okio.Timeout: void <init>()>();

        return;
    }

    public static final okio.AsyncTimeout access$getHead$cp()
    {
        okio.AsyncTimeout r0;

        r0 = <okio.AsyncTimeout: okio.AsyncTimeout head>;

        return r0;
    }

    public static final long access$getIDLE_TIMEOUT_MILLIS$cp()
    {
        long l0;

        l0 = <okio.AsyncTimeout: long IDLE_TIMEOUT_MILLIS>;

        return l0;
    }

    public static final long access$getIDLE_TIMEOUT_NANOS$cp()
    {
        long l0;

        l0 = <okio.AsyncTimeout: long IDLE_TIMEOUT_NANOS>;

        return l0;
    }

    public static final boolean access$getInQueue$p(okio.AsyncTimeout)
    {
        okio.AsyncTimeout $r0;
        boolean z0;

        $r0 := @parameter0: okio.AsyncTimeout;

        z0 = $r0.<okio.AsyncTimeout: boolean inQueue>;

        return z0;
    }

    public static final okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)
    {
        okio.AsyncTimeout $r0;

        $r0 := @parameter0: okio.AsyncTimeout;

        $r0 = $r0.<okio.AsyncTimeout: okio.AsyncTimeout next>;

        return $r0;
    }

    public static final long access$remainingNanos(okio.AsyncTimeout, long)
    {
        long $l0;
        okio.AsyncTimeout $r0;

        $r0 := @parameter0: okio.AsyncTimeout;

        $l0 := @parameter1: long;

        $l0 = specialinvoke $r0.<okio.AsyncTimeout: long remainingNanos(long)>($l0);

        return $l0;
    }

    public static final void access$setHead$cp(okio.AsyncTimeout)
    {
        okio.AsyncTimeout $r0;

        $r0 := @parameter0: okio.AsyncTimeout;

        <okio.AsyncTimeout: okio.AsyncTimeout head> = $r0;

        return;
    }

    public static final void access$setInQueue$p(okio.AsyncTimeout, boolean)
    {
        okio.AsyncTimeout $r0;
        boolean $z0;

        $r0 := @parameter0: okio.AsyncTimeout;

        $z0 := @parameter1: boolean;

        $r0.<okio.AsyncTimeout: boolean inQueue> = $z0;

        return;
    }

    public static final void access$setNext$p(okio.AsyncTimeout, okio.AsyncTimeout)
    {
        okio.AsyncTimeout $r0, $r1;

        $r0 := @parameter0: okio.AsyncTimeout;

        $r1 := @parameter1: okio.AsyncTimeout;

        $r0.<okio.AsyncTimeout: okio.AsyncTimeout next> = $r1;

        return;
    }

    public static final void access$setTimeoutAt$p(okio.AsyncTimeout, long)
    {
        okio.AsyncTimeout $r0;
        long $l0;

        $r0 := @parameter0: okio.AsyncTimeout;

        $l0 := @parameter1: long;

        $r0.<okio.AsyncTimeout: long timeoutAt> = $l0;

        return;
    }

    private final long remainingNanos(long)
    {
        okio.AsyncTimeout $r0;
        long $l0, $l1;

        $r0 := @this: okio.AsyncTimeout;

        $l0 := @parameter0: long;

        $l1 = $r0.<okio.AsyncTimeout: long timeoutAt>;

        $l0 = $l1 - $l0;

        return $l0;
    }

    public final java.io.IOException access$newTimeoutException(java.io.IOException)
    {
        okio.AsyncTimeout $r0;
        java.io.IOException $r1;

        $r0 := @this: okio.AsyncTimeout;

        $r1 := @parameter0: java.io.IOException;

        $r1 = virtualinvoke $r0.<okio.AsyncTimeout: java.io.IOException newTimeoutException(java.io.IOException)>($r1);

        return $r1;
    }

    public final void enter()
    {
        okio.AsyncTimeout $r0;
        byte $b0;
        long $l1;
        boolean $z0;
        okio.AsyncTimeout$Companion $r1;

        $r0 := @this: okio.AsyncTimeout;

        $l1 = virtualinvoke $r0.<okio.AsyncTimeout: long timeoutNanos()>();

        $z0 = virtualinvoke $r0.<okio.AsyncTimeout: boolean hasDeadline()>();

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label1;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion>;

        staticinvoke <okio.AsyncTimeout$Companion: void access$scheduleTimeout(okio.AsyncTimeout$Companion,okio.AsyncTimeout,long,boolean)>($r1, $r0, $l1, $z0);

        return;
    }

    public final boolean exit()
    {
        okio.AsyncTimeout $r0;
        boolean $z0;
        okio.AsyncTimeout$Companion $r1;

        $r0 := @this: okio.AsyncTimeout;

        $r1 = <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion>;

        $z0 = staticinvoke <okio.AsyncTimeout$Companion: boolean access$cancelScheduledTimeout(okio.AsyncTimeout$Companion,okio.AsyncTimeout)>($r1, $r0);

        return $z0;
    }

    protected java.io.IOException newTimeoutException(java.io.IOException)
    {
        okio.AsyncTimeout $r0;
        java.io.IOException $r1;
        java.io.InterruptedIOException $r2, r3;
        java.lang.Throwable r4;

        $r0 := @this: okio.AsyncTimeout;

        $r1 := @parameter0: java.io.IOException;

        r3 = new java.io.InterruptedIOException;

        $r2 = r3;

        specialinvoke r3.<java.io.InterruptedIOException: void <init>(java.lang.String)>("timeout");

        if $r1 == null goto label1;

        r4 = (java.lang.Throwable) $r1;

        virtualinvoke $r2.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>(r4);

     label1:
        return $r2;
    }

    public final okio.Sink sink(okio.Sink)
    {
        okio.AsyncTimeout $r0;
        okio.Sink $r1;
        okio.AsyncTimeout$sink$1 $r2;

        $r0 := @this: okio.AsyncTimeout;

        $r1 := @parameter0: okio.Sink;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink");

        $r2 = new okio.AsyncTimeout$sink$1;

        specialinvoke $r2.<okio.AsyncTimeout$sink$1: void <init>(okio.AsyncTimeout,okio.Sink)>($r0, $r1);

        return $r2;
    }

    public final okio.Source source(okio.Source)
    {
        okio.AsyncTimeout $r0;
        okio.Source $r1;
        okio.AsyncTimeout$source$1 $r2;

        $r0 := @this: okio.AsyncTimeout;

        $r1 := @parameter0: okio.Source;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $r2 = new okio.AsyncTimeout$source$1;

        specialinvoke $r2.<okio.AsyncTimeout$source$1: void <init>(okio.AsyncTimeout,okio.Source)>($r0, $r1);

        return $r2;
    }

    protected void timedOut()
    {
        okio.AsyncTimeout $r0;

        $r0 := @this: okio.AsyncTimeout;

        return;
    }

