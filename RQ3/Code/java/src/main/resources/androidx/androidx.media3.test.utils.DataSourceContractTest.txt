androidx.media3.test.utils.DataSourceContractTest
<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>
    public void <init>()
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        androidx.media3.test.utils.AdditionalFailureInfo $r1;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new androidx.media3.test.utils.AdditionalFailureInfo;

        specialinvoke $r1.<androidx.media3.test.utils.AdditionalFailureInfo: void <init>()>();

        r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo> = $r1;

        return;
    }

<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>
    protected androidx.media3.datasource.DataSource getTransferListenerDataSource()
    {
        androidx.media3.test.utils.DataSourceContractTest r0;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        return null;
    }

    protected boolean unboundedReadsAreIndefinite()
    {
        androidx.media3.test.utils.DataSourceContractTest r0;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        return 0;
    }

<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>
<androidx.media3.test.utils.DataSourceContractTest: android.net.Uri getNotFoundUri()>
    public void unboundedDataSpec_readUntilEnd() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        androidx.media3.datasource.DataSource r3;
        long l0;
        byte[] r4, $r12, $r16, $r18, $r20;
        java.lang.Throwable r5, $r19;
        boolean $z0, $z1, $z2;
        androidx.media3.test.utils.AdditionalFailureInfo $r6, $r13;
        java.lang.String $r7;
        java.lang.Object $r8;
        androidx.media3.datasource.DataSpec $r9;
        android.net.Uri $r10;
        byte $b1;
        com.google.common.truth.PrimitiveByteArraySubject $r11;
        java.lang.Long $r14;
        com.google.common.truth.LongSubject $r15;
        int $i2, $i3, i4, $i5;
        java.lang.Integer $r17;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Must provide at least one test resource.");

        i4 = 0;

     label03:
        $i5 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i4 >= $i5 goto label12;

        $r6 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r7 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i4);

        virtualinvoke $r6.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r7);

        $r8 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i4);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r8;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

     label04:
        $r9 = new androidx.media3.datasource.DataSpec;

        $r10 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        specialinvoke $r9.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r10);

        l0 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r9);

        $z1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: boolean unboundedReadsAreIndefinite()>();

        if $z1 == 0 goto label05;

        $r18 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i3 = lengthof $r18;

        $r20 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readExactly(androidx.media3.datasource.DataSource,int)>(r3, $i3);

        goto label06;

     label05:
        $r20 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readToEnd(androidx.media3.datasource.DataSource)>(r3);

     label06:
        r4 = $r20;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label07;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r15 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r14);

        $r16 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i2 = lengthof $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r15.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r17);

     label07:
        $r11 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r4);

        $r12 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        virtualinvoke $r11.<com.google.common.truth.PrimitiveByteArraySubject: void isEqualTo(java.lang.Object)>($r12);

     label08:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label11;

     label09:
        $r19 := @caughtexception;

        r5 = $r19;

     label10:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r5;

     label11:
        $r13 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r13.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i4 = i4 + 1;

        goto label03;

     label12:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void dataSpecWithPosition_readUntilEnd() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        androidx.media3.datasource.DataSource r3;
        long l0;
        byte[] r4, r5, $r15, $r16, $r21, $r23, $r25;
        java.lang.Throwable r6, $r24;
        boolean $z0, $z1, $z2;
        androidx.media3.test.utils.AdditionalFailureInfo $r7, $r18;
        java.lang.String $r8;
        java.lang.Object $r9;
        androidx.media3.datasource.DataSpec$Builder $r10, $r12, $r13;
        android.net.Uri $r11;
        androidx.media3.datasource.DataSpec $r14;
        byte $b1;
        int $i2, $i3, $i4, $i5, $i6, i7, $i8;
        com.google.common.truth.PrimitiveByteArraySubject $r17;
        java.lang.Long $r19;
        com.google.common.truth.LongSubject $r20;
        java.lang.Integer $r22;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Must provide at least one test resource.");

        i7 = 0;

     label03:
        $i8 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i7 >= $i8 goto label12;

        $r7 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r8 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i7);

        virtualinvoke $r7.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r8);

        $r9 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i7);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r9;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

     label04:
        $r10 = new androidx.media3.datasource.DataSpec$Builder;

        specialinvoke $r10.<androidx.media3.datasource.DataSpec$Builder: void <init>()>();

        $r11 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        $r12 = virtualinvoke $r10.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setUri(android.net.Uri)>($r11);

        $r13 = virtualinvoke $r12.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setPosition(long)>(3L);

        $r14 = virtualinvoke $r13.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec build()>();

        l0 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r14);

        $z1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: boolean unboundedReadsAreIndefinite()>();

        if $z1 == 0 goto label05;

        $r23 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i5 = lengthof $r23;

        $i6 = $i5 - 3;

        $r25 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readExactly(androidx.media3.datasource.DataSource,int)>(r3, $i6);

        goto label06;

     label05:
        $r25 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readToEnd(androidx.media3.datasource.DataSource)>(r3);

     label06:
        r4 = $r25;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label07;

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r20 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r19);

        $r21 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i3 = lengthof $r21;

        $i4 = $i3 - 3;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r20.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r22);

     label07:
        $r15 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $r16 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i2 = lengthof $r16;

        r5 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r15, 3, $i2);

        $r17 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r4);

        virtualinvoke $r17.<com.google.common.truth.PrimitiveByteArraySubject: void isEqualTo(java.lang.Object)>(r5);

     label08:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label11;

     label09:
        $r24 := @caughtexception;

        r6 = $r24;

     label10:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r6;

     label11:
        $r18 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r18.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i7 = i7 + 1;

        goto label03;

     label12:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void dataSpecWithLength_readExpectedRange() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        androidx.media3.datasource.DataSource r3;
        long l0;
        byte[] r4, r5, $r18;
        java.lang.Throwable r6, $r21;
        boolean $z0, $z1;
        androidx.media3.test.utils.AdditionalFailureInfo $r7, $r20;
        java.lang.String $r8;
        java.lang.Object $r9;
        androidx.media3.datasource.DataSpec$Builder $r10, $r12, $r13;
        android.net.Uri $r11;
        androidx.media3.datasource.DataSpec $r14;
        java.lang.Long $r15;
        com.google.common.truth.LongSubject $r16;
        java.lang.Integer $r17;
        com.google.common.truth.PrimitiveByteArraySubject $r19;
        int i1, $i2;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, "Must provide at least one test resource.");

        i1 = 0;

     label3:
        $i2 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i1 >= $i2 goto label9;

        $r7 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r8 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i1);

        virtualinvoke $r7.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r8);

        $r9 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i1);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r9;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

     label4:
        $r10 = new androidx.media3.datasource.DataSpec$Builder;

        specialinvoke $r10.<androidx.media3.datasource.DataSpec$Builder: void <init>()>();

        $r11 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        $r12 = virtualinvoke $r10.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setUri(android.net.Uri)>($r11);

        $r13 = virtualinvoke $r12.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setLength(long)>(4L);

        $r14 = virtualinvoke $r13.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec build()>();

        l0 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r14);

        r4 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readToEnd(androidx.media3.datasource.DataSource)>(r3);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r16 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r15);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        virtualinvoke $r16.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r17);

        $r18 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        r5 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r18, 4);

        $r19 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r4);

        virtualinvoke $r19.<com.google.common.truth.PrimitiveByteArraySubject: void isEqualTo(java.lang.Object)>(r5);

     label5:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label8;

     label6:
        $r21 := @caughtexception;

        r6 = $r21;

     label7:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r6;

     label8:
        $r20 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r20.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i1 = i1 + 1;

        goto label3;

     label9:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void dataSpecWithPositionAndLength_readExpectedRange() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        androidx.media3.datasource.DataSource r3;
        long l0;
        byte[] r4, r5, $r19;
        java.lang.Throwable r6, $r22;
        boolean $z0, $z1;
        androidx.media3.test.utils.AdditionalFailureInfo $r7, $r21;
        java.lang.String $r8;
        java.lang.Object $r9;
        androidx.media3.datasource.DataSpec$Builder $r10, $r12, $r13, $r14;
        android.net.Uri $r11;
        androidx.media3.datasource.DataSpec $r15;
        java.lang.Long $r16;
        com.google.common.truth.LongSubject $r17;
        java.lang.Integer $r18;
        com.google.common.truth.PrimitiveByteArraySubject $r20;
        int i1, $i2;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, "Must provide at least one test resource.");

        i1 = 0;

     label3:
        $i2 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i1 >= $i2 goto label9;

        $r7 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r8 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i1);

        virtualinvoke $r7.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r8);

        $r9 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i1);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r9;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

     label4:
        $r10 = new androidx.media3.datasource.DataSpec$Builder;

        specialinvoke $r10.<androidx.media3.datasource.DataSpec$Builder: void <init>()>();

        $r11 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        $r12 = virtualinvoke $r10.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setUri(android.net.Uri)>($r11);

        $r13 = virtualinvoke $r12.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setPosition(long)>(2L);

        $r14 = virtualinvoke $r13.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setLength(long)>(2L);

        $r15 = virtualinvoke $r14.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec build()>();

        l0 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r15);

        r4 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readToEnd(androidx.media3.datasource.DataSource)>(r3);

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r17 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r16);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r17.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r18);

        $r19 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        r5 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r19, 2, 4);

        $r20 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r4);

        virtualinvoke $r20.<com.google.common.truth.PrimitiveByteArraySubject: void isEqualTo(java.lang.Object)>(r5);

     label5:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label8;

     label6:
        $r22 := @caughtexception;

        r6 = $r22;

     label7:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r6;

     label8:
        $r21 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r21.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i1 = i1 + 1;

        goto label3;

     label9:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void dataSpecWithPositionAtEnd_readsZeroBytes() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        int i0, i4, $i5;
        androidx.media3.datasource.DataSource r3;
        androidx.media3.datasource.DataSpec r4;
        long l1, $l2;
        byte[] r5, $r10, $r21;
        java.lang.Throwable r6, $r20;
        boolean $z0, $z1, $z2;
        androidx.media3.test.utils.AdditionalFailureInfo $r7, $r16;
        java.lang.String $r8;
        java.lang.Object $r9;
        androidx.media3.datasource.DataSpec$Builder $r11, $r13, $r14;
        android.net.Uri $r12;
        byte $b3;
        com.google.common.truth.PrimitiveByteArraySubject $r15;
        java.lang.Long $r17;
        com.google.common.truth.LongSubject $r18;
        java.lang.Integer $r19;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Must provide at least one test resource.");

        i4 = 0;

     label03:
        $i5 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i4 >= $i5 goto label12;

        $r7 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r8 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i4);

        virtualinvoke $r7.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r8);

        $r9 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i4);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r9;

        $r10 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        i0 = lengthof $r10;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

        $r11 = new androidx.media3.datasource.DataSpec$Builder;

        specialinvoke $r11.<androidx.media3.datasource.DataSpec$Builder: void <init>()>();

        $r12 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        $r13 = virtualinvoke $r11.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setUri(android.net.Uri)>($r12);

        $l2 = (long) i0;

        $r14 = virtualinvoke $r13.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setPosition(long)>($l2);

        r4 = virtualinvoke $r14.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec build()>();

     label04:
        l1 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>(r4);

        $z1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: boolean unboundedReadsAreIndefinite()>();

        if $z1 == 0 goto label05;

        $r21 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        goto label06;

     label05:
        $r21 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readToEnd(androidx.media3.datasource.DataSource)>(r3);

     label06:
        r5 = $r21;

        $b3 = l1 cmp -1L;

        if $b3 == 0 goto label07;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r18 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r17);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r18.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r19);

     label07:
        $r15 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r5);

        virtualinvoke $r15.<com.google.common.truth.PrimitiveByteArraySubject: void isEmpty()>();

     label08:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label11;

     label09:
        $r20 := @caughtexception;

        r6 = $r20;

     label10:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r6;

     label11:
        $r16 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r16.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i4 = i4 + 1;

        goto label03;

     label12:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void dataSpecWithPositionAtEndAndLength_readsZeroBytes() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        int i0, i3, $i4;
        androidx.media3.datasource.DataSource r3;
        androidx.media3.datasource.DataSpec r4;
        long l1, $l2;
        byte[] r5, $r10, $r22;
        java.lang.Throwable r6, $r21;
        boolean $z0, $z1, $z2;
        androidx.media3.test.utils.AdditionalFailureInfo $r7, $r20;
        java.lang.String $r8;
        java.lang.Object $r9;
        androidx.media3.datasource.DataSpec$Builder $r11, $r13, $r14, $r15;
        android.net.Uri $r12;
        java.lang.Long $r16;
        com.google.common.truth.LongSubject $r17;
        java.lang.Integer $r18;
        com.google.common.truth.PrimitiveByteArraySubject $r19;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Must provide at least one test resource.");

        i3 = 0;

     label03:
        $i4 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i3 >= $i4 goto label11;

        $r7 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r8 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i3);

        virtualinvoke $r7.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r8);

        $r9 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i3);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r9;

        $r10 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        i0 = lengthof $r10;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

        $r11 = new androidx.media3.datasource.DataSpec$Builder;

        specialinvoke $r11.<androidx.media3.datasource.DataSpec$Builder: void <init>()>();

        $r12 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        $r13 = virtualinvoke $r11.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setUri(android.net.Uri)>($r12);

        $l2 = (long) i0;

        $r14 = virtualinvoke $r13.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setPosition(long)>($l2);

        $r15 = virtualinvoke $r14.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setLength(long)>(1L);

        r4 = virtualinvoke $r15.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec build()>();

     label04:
        l1 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>(r4);

        $z1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: boolean unboundedReadsAreIndefinite()>();

        if $z1 == 0 goto label05;

        $r22 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        goto label06;

     label05:
        $r22 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readToEnd(androidx.media3.datasource.DataSource)>(r3);

     label06:
        r5 = $r22;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r17 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r16);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r17.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r18);

        $r19 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r5);

        virtualinvoke $r19.<com.google.common.truth.PrimitiveByteArraySubject: void isEmpty()>();

     label07:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label10;

     label08:
        $r21 := @caughtexception;

        r6 = $r21;

     label09:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r6;

     label10:
        $r20 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r20.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i3 = i3 + 1;

        goto label03;

     label11:
        return;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void dataSpecWithPositionOutOfRange_throwsPositionOutOfRangeException() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        int i0, $i1, i3, $i4;
        androidx.media3.datasource.DataSource r3;
        androidx.media3.datasource.DataSpec r4;
        java.io.IOException r5;
        java.lang.Throwable r6, $r16, $r20;
        boolean $z0, $z1, $z2;
        androidx.media3.test.utils.AdditionalFailureInfo $r7, $r19;
        java.lang.String $r8;
        java.lang.Object $r9;
        byte[] $r10;
        androidx.media3.datasource.DataSpec$Builder $r11, $r13, $r14;
        android.net.Uri $r12;
        long $l2;
        org.junit.function.ThrowingRunnable $r15;
        java.lang.Boolean $r17;
        com.google.common.truth.BooleanSubject $r18;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Must provide at least one test resource.");

        i3 = 0;

     label3:
        $i4 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i3 >= $i4 goto label9;

        $r7 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r8 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i3);

        virtualinvoke $r7.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r8);

        $r9 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i3);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r9;

        $r10 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        i0 = lengthof $r10;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

        $r11 = new androidx.media3.datasource.DataSpec$Builder;

        specialinvoke $r11.<androidx.media3.datasource.DataSpec$Builder: void <init>()>();

        $r12 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        $r13 = virtualinvoke $r11.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setUri(android.net.Uri)>($r12);

        $i1 = i0 + 1;

        $l2 = (long) $i1;

        $r14 = virtualinvoke $r13.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setPosition(long)>($l2);

        r4 = virtualinvoke $r14.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec build()>();

     label4:
        $r15 = dynamicinvoke "run" <org.junit.function.ThrowingRunnable (androidx.media3.datasource.DataSource,androidx.media3.datasource.DataSpec)>(r3, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.DataSourceContractTest: void lambda$dataSpecWithPositionOutOfRange_throwsPositionOutOfRangeException$0(androidx.media3.datasource.DataSource,androidx.media3.datasource.DataSpec)>, methodtype: void __METHODTYPE__());

        $r16 = staticinvoke <org.junit.Assert: java.lang.Throwable assertThrows(java.lang.Class,org.junit.function.ThrowingRunnable)>(class "Ljava/io/IOException;", $r15);

        r5 = (java.io.IOException) $r16;

        $z1 = staticinvoke <androidx.media3.datasource.DataSourceException: boolean isCausedByPositionOutOfRange(java.io.IOException)>(r5);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r18 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r17);

        virtualinvoke $r18.<com.google.common.truth.BooleanSubject: void isTrue()>();

     label5:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label8;

     label6:
        $r20 := @caughtexception;

        r6 = $r20;

     label7:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r6;

     label8:
        $r19 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r19.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i3 = i3 + 1;

        goto label3;

     label9:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void dataSpecWithEndPositionOutOfRange_readsToEnd() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        int i0, $i2, $i4, i5, $i6;
        androidx.media3.datasource.DataSource r3;
        androidx.media3.datasource.DataSpec r4;
        long l1, $l3;
        byte[] r5, r6, $r11, $r20;
        java.lang.Throwable r7, $r23;
        boolean $z0, $z1;
        androidx.media3.test.utils.AdditionalFailureInfo $r8, $r22;
        java.lang.String $r9;
        java.lang.Object $r10;
        androidx.media3.datasource.DataSpec$Builder $r12, $r14, $r15, $r16;
        android.net.Uri $r13;
        java.lang.Long $r17;
        com.google.common.truth.LongSubject $r18;
        java.lang.Integer $r19;
        com.google.common.truth.PrimitiveByteArraySubject $r21;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, "Must provide at least one test resource.");

        i5 = 0;

     label3:
        $i6 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i5 >= $i6 goto label9;

        $r8 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r9 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i5);

        virtualinvoke $r8.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r9);

        $r10 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i5);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r10;

        $r11 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        i0 = lengthof $r11;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

        $r12 = new androidx.media3.datasource.DataSpec$Builder;

        specialinvoke $r12.<androidx.media3.datasource.DataSpec$Builder: void <init>()>();

        $r13 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        $r14 = virtualinvoke $r12.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setUri(android.net.Uri)>($r13);

        $i2 = i0 - 1;

        $l3 = (long) $i2;

        $r15 = virtualinvoke $r14.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setPosition(long)>($l3);

        $r16 = virtualinvoke $r15.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setLength(long)>(2L);

        r4 = virtualinvoke $r16.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec build()>();

     label4:
        l1 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>(r4);

        r5 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readExactly(androidx.media3.datasource.DataSource,int)>(r3, 1);

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r18 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r17);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r18.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r19);

        $r20 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i4 = i0 - 1;

        r6 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r20, $i4, i0);

        $r21 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r5);

        virtualinvoke $r21.<com.google.common.truth.PrimitiveByteArraySubject: void isEqualTo(java.lang.Object)>(r6);

     label5:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label8;

     label6:
        $r23 := @caughtexception;

        r7 = $r23;

     label7:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r7;

     label8:
        $r22 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r22.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i5 = i5 + 1;

        goto label3;

     label9:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void unboundedDataSpecWithGzipFlag_readUntilEnd() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        androidx.media3.datasource.DataSource r3;
        long l0;
        byte[] r4, $r15, $r19, $r21, $r23;
        java.lang.Throwable r5, $r22;
        boolean $z0, $z1, $z2;
        androidx.media3.test.utils.AdditionalFailureInfo $r6, $r16;
        java.lang.String $r7;
        java.lang.Object $r8;
        androidx.media3.datasource.DataSpec$Builder $r9, $r11, $r12;
        android.net.Uri $r10;
        androidx.media3.datasource.DataSpec $r13;
        byte $b1;
        com.google.common.truth.PrimitiveByteArraySubject $r14;
        java.lang.Long $r17;
        com.google.common.truth.LongSubject $r18;
        int $i2, $i3, i4, $i5;
        java.lang.Integer $r20;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Must provide at least one test resource.");

        i4 = 0;

     label03:
        $i5 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i4 >= $i5 goto label12;

        $r6 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r7 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i4);

        virtualinvoke $r6.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r7);

        $r8 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i4);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r8;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

     label04:
        $r9 = new androidx.media3.datasource.DataSpec$Builder;

        specialinvoke $r9.<androidx.media3.datasource.DataSpec$Builder: void <init>()>();

        $r10 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        $r11 = virtualinvoke $r9.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setUri(android.net.Uri)>($r10);

        $r12 = virtualinvoke $r11.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setFlags(int)>(1);

        $r13 = virtualinvoke $r12.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec build()>();

        l0 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r13);

        $z1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: boolean unboundedReadsAreIndefinite()>();

        if $z1 == 0 goto label05;

        $r21 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i3 = lengthof $r21;

        $r23 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readExactly(androidx.media3.datasource.DataSource,int)>(r3, $i3);

        goto label06;

     label05:
        $r23 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readToEnd(androidx.media3.datasource.DataSource)>(r3);

     label06:
        r4 = $r23;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label07;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r18 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r17);

        $r19 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i2 = lengthof $r19;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r18.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r20);

     label07:
        $r14 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r4);

        $r15 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        virtualinvoke $r14.<com.google.common.truth.PrimitiveByteArraySubject: void isEqualTo(java.lang.Object)>($r15);

     label08:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label11;

     label09:
        $r22 := @caughtexception;

        r5 = $r22;

     label10:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r5;

     label11:
        $r16 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r16.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i4 = i4 + 1;

        goto label03;

     label12:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void resourceNotFound() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        androidx.media3.datasource.DataSource r1;
        org.junit.function.ThrowingRunnable $r2;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

        $r2 = dynamicinvoke "run" <org.junit.function.ThrowingRunnable (androidx.media3.test.utils.DataSourceContractTest,androidx.media3.datasource.DataSource)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.DataSourceContractTest: void lambda$resourceNotFound$1(androidx.media3.datasource.DataSource)>, methodtype: void __METHODTYPE__());

        staticinvoke <org.junit.Assert: java.lang.Throwable assertThrows(java.lang.Class,org.junit.function.ThrowingRunnable)>(class "Ljava/io/IOException;", $r2);

        interfaceinvoke r1.<androidx.media3.datasource.DataSource: void close()>();

        return;
    }

    public void transferListenerCallbacks() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.datasource.DataSource r2, $r22, r51;
        androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener r3, $r20, $r31, $r40, $r48, r53;
        org.mockito.InOrder r4;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r5;
        androidx.media3.datasource.DataSpec r6, $r24, $r33, $r42, $r50, r52;
        org.mockito.ArgumentCaptor r7, r8;
        java.lang.Throwable r9, $r46;
        boolean $z0, $z1, $z2, $z3, z4;
        androidx.media3.test.utils.AdditionalFailureInfo $r10, $r43;
        java.lang.String $r11;
        java.lang.Object $r13, $r15, $r19, $r21, $r23, $r25, $r27, $r28, $r30, $r32, $r39, $r41, $r47, $r49;
        java.lang.Object[] $r14;
        android.net.Uri $r17;
        androidx.media3.datasource.DataSpec$Builder $r18, r54;
        java.lang.Boolean $r26, $r29;
        int $i1, $i2, $i3, i4, $i5;
        java.lang.Integer $r35, $r38;
        com.google.common.truth.IntegerSubject $r36;
        byte[] $r37, $r44;
        java.lang.Comparable r55;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z3, "Must provide at least one test resource.");

        i4 = 0;

     label03:
        $i5 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i4 >= $i5 goto label12;

        $r10 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r11 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i4);

        virtualinvoke $r10.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r11);

        r2 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

        r53 = new androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener;

        specialinvoke r53.<androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener: void <init>()>();

        $r13 = staticinvoke <org.mockito.Mockito: java.lang.Object spy(java.lang.Object)>(r53);

        r3 = (androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener) $r13;

        interfaceinvoke r2.<androidx.media3.datasource.DataSource: void addTransferListener(androidx.media3.datasource.TransferListener)>(r3);

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r3;

        r4 = staticinvoke <org.mockito.Mockito: org.mockito.InOrder inOrder(java.lang.Object[])>($r14);

        r51 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource getTransferListenerDataSource()>();

        if r51 != null goto label04;

        r51 = r2;

     label04:
        r52 = null;

        z4 = 0;

        $r15 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i4);

        r5 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r15;

        r54 = new androidx.media3.datasource.DataSpec$Builder;

        specialinvoke r54.<androidx.media3.datasource.DataSpec$Builder: void <init>()>();

        $r17 = virtualinvoke r5.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        $r18 = virtualinvoke r54.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec$Builder setUri(android.net.Uri)>($r17);

        r6 = virtualinvoke $r18.<androidx.media3.datasource.DataSpec$Builder: androidx.media3.datasource.DataSpec build()>();

     label05:
        interfaceinvoke r2.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>(r6);

        r7 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Landroidx/media3/datasource/DataSpec;");

        r8 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(class "Ljava/lang/Boolean;");

        $r19 = interfaceinvoke r4.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(r3);

        $r20 = (androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener) $r19;

        $r21 = staticinvoke <org.mockito.ArgumentMatchers: java.lang.Object eq(java.lang.Object)>(r51);

        $r22 = (androidx.media3.datasource.DataSource) $r21;

        $r23 = virtualinvoke r7.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r24 = (androidx.media3.datasource.DataSpec) $r23;

        $r25 = virtualinvoke r8.<org.mockito.ArgumentCaptor: java.lang.Object capture()>();

        $r26 = (java.lang.Boolean) $r25;

        $z1 = virtualinvoke $r26.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r20.<androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener: void onTransferInitializing(androidx.media3.datasource.DataSource,androidx.media3.datasource.DataSpec,boolean)>($r22, $r24, $z1);

        $r27 = virtualinvoke r7.<org.mockito.ArgumentCaptor: java.lang.Object getValue()>();

        r52 = (androidx.media3.datasource.DataSpec) $r27;

        $r28 = virtualinvoke r8.<org.mockito.ArgumentCaptor: java.lang.Object getValue()>();

        $r29 = (java.lang.Boolean) $r28;

        z4 = virtualinvoke $r29.<java.lang.Boolean: boolean booleanValue()>();

        $r30 = interfaceinvoke r4.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(r3);

        $r31 = (androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener) $r30;

        $r32 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>(r52);

        $r33 = (androidx.media3.datasource.DataSpec) $r32;

        virtualinvoke $r31.<androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener: void onTransferStart(androidx.media3.datasource.DataSource,androidx.media3.datasource.DataSpec,boolean)>(r51, $r33, z4);

        interfaceinvoke r4.<org.mockito.InOrder: void verifyNoMoreInteractions()>();

        $z2 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: boolean unboundedReadsAreIndefinite()>();

        if $z2 == 0 goto label06;

        $r44 = virtualinvoke r5.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i3 = lengthof $r44;

        staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readExactly(androidx.media3.datasource.DataSource,int)>(r2, $i3);

        goto label07;

     label06:
        staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readToEnd(androidx.media3.datasource.DataSource)>(r2);

     label07:
        $i1 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener: int access$000(androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener)>(r3);

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r36 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r35);

        $r37 = virtualinvoke r5.<androidx.media3.test.utils.DataSourceContractTest$TestResource: byte[] getExpectedBytes()>();

        $i2 = lengthof $r37;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        r55 = (java.lang.Comparable) $r38;

        virtualinvoke $r36.<com.google.common.truth.IntegerSubject: void isAtLeast(java.lang.Comparable)>(r55);

     label08:
        interfaceinvoke r2.<androidx.media3.datasource.DataSource: void close()>();

        $r39 = interfaceinvoke r4.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(r3);

        $r40 = (androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener) $r39;

        $r41 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>(r52);

        $r42 = (androidx.media3.datasource.DataSpec) $r41;

        virtualinvoke $r40.<androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener: void onTransferEnd(androidx.media3.datasource.DataSource,androidx.media3.datasource.DataSpec,boolean)>(r51, $r42, z4);

        interfaceinvoke r4.<org.mockito.InOrder: void verifyNoMoreInteractions()>();

        goto label11;

     label09:
        $r46 := @caughtexception;

        r9 = $r46;

     label10:
        interfaceinvoke r2.<androidx.media3.datasource.DataSource: void close()>();

        $r47 = interfaceinvoke r4.<org.mockito.InOrder: java.lang.Object verify(java.lang.Object)>(r3);

        $r48 = (androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener) $r47;

        $r49 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>(r52);

        $r50 = (androidx.media3.datasource.DataSpec) $r49;

        virtualinvoke $r48.<androidx.media3.test.utils.DataSourceContractTest$FakeTransferListener: void onTransferEnd(androidx.media3.datasource.DataSource,androidx.media3.datasource.DataSpec,boolean)>(r51, $r50, z4);

        interfaceinvoke r4.<org.mockito.InOrder: void verifyNoMoreInteractions()>();

        throw r9;

     label11:
        $r43 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r43.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i4 = i4 + 1;

        goto label03;

     label12:
        return;

        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void resourceNotFound_transferListenerCallbacks() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        androidx.media3.datasource.DataSource r1, $r9, r14;
        androidx.media3.datasource.TransferListener r2, $r7;
        java.lang.Object $r3, $r6, $r8, $r10;
        org.junit.function.ThrowingRunnable $r4;
        androidx.media3.datasource.DataSpec $r11;
        boolean $z0;
        java.lang.Object[] $r12, $r13;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

        $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Landroidx/media3/datasource/TransferListener;");

        r2 = (androidx.media3.datasource.TransferListener) $r3;

        interfaceinvoke r1.<androidx.media3.datasource.DataSource: void addTransferListener(androidx.media3.datasource.TransferListener)>(r2);

        r14 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource getTransferListenerDataSource()>();

        if r14 != null goto label1;

        r14 = r1;

     label1:
        $r4 = dynamicinvoke "run" <org.junit.function.ThrowingRunnable (androidx.media3.test.utils.DataSourceContractTest,androidx.media3.datasource.DataSource)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.DataSourceContractTest: void lambda$resourceNotFound_transferListenerCallbacks$2(androidx.media3.datasource.DataSource)>, methodtype: void __METHODTYPE__());

        staticinvoke <org.junit.Assert: java.lang.Throwable assertThrows(java.lang.Class,org.junit.function.ThrowingRunnable)>(class "Ljava/io/IOException;", $r4);

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r2);

        $r7 = (androidx.media3.datasource.TransferListener) $r6;

        $r8 = staticinvoke <org.mockito.ArgumentMatchers: java.lang.Object eq(java.lang.Object)>(r14);

        $r9 = (androidx.media3.datasource.DataSource) $r8;

        $r10 = staticinvoke <org.mockito.ArgumentMatchers: java.lang.Object any()>();

        $r11 = (androidx.media3.datasource.DataSpec) $r10;

        $z0 = staticinvoke <org.mockito.ArgumentMatchers: boolean anyBoolean()>();

        interfaceinvoke $r7.<androidx.media3.datasource.TransferListener: void onTransferInitializing(androidx.media3.datasource.DataSource,androidx.media3.datasource.DataSpec,boolean)>($r9, $r11, $z0);

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r2;

        staticinvoke <org.mockito.Mockito: void verifyNoMoreInteractions(java.lang.Object[])>($r12);

        interfaceinvoke r1.<androidx.media3.datasource.DataSource: void close()>();

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r2;

        staticinvoke <org.mockito.Mockito: void verifyNoMoreInteractions(java.lang.Object[])>($r13);

        return;
    }

    public void getUri_returnsNonNullValueOnlyWhileOpen() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        androidx.media3.datasource.DataSource r3;
        java.lang.Throwable r4, $r17;
        boolean $z0, $z1;
        androidx.media3.test.utils.AdditionalFailureInfo $r5, $r16;
        java.lang.String $r6;
        java.lang.Object $r7;
        android.net.Uri $r8, $r11, $r12, $r14;
        com.google.common.truth.ComparableSubject $r9, $r13, $r15;
        int i1, $i2;
        androidx.media3.datasource.DataSpec r18;
        java.lang.Comparable r19, r20, r21;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, "Must provide at least one test resource.");

        i1 = 0;

     label3:
        $i2 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i1 >= $i2 goto label9;

        $r5 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r6 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i1);

        virtualinvoke $r5.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r6);

        $r7 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i1);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r7;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

     label4:
        $r8 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: android.net.Uri getUri()>();

        r19 = (java.lang.Comparable) $r8;

        $r9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ComparableSubject assertThat(java.lang.Comparable)>(r19);

        virtualinvoke $r9.<com.google.common.truth.ComparableSubject: void isNull()>();

        r18 = new androidx.media3.datasource.DataSpec;

        $r11 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        specialinvoke r18.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r11);

        interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>(r18);

        $r12 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: android.net.Uri getUri()>();

        r20 = (java.lang.Comparable) $r12;

        $r13 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ComparableSubject assertThat(java.lang.Comparable)>(r20);

        virtualinvoke $r13.<com.google.common.truth.ComparableSubject: void isNotNull()>();

     label5:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label8;

     label6:
        $r17 := @caughtexception;

        r4 = $r17;

     label7:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r4;

     label8:
        $r14 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: android.net.Uri getUri()>();

        r21 = (java.lang.Comparable) $r14;

        $r15 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ComparableSubject assertThat(java.lang.Comparable)>(r21);

        virtualinvoke $r15.<com.google.common.truth.ComparableSubject: void isNull()>();

        $r16 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r16.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i1 = i1 + 1;

        goto label3;

     label9:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void getUri_resourceNotFound_returnsNullIfNotOpened() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        androidx.media3.datasource.DataSource r1;
        android.net.Uri $r2, $r6;
        com.google.common.truth.ComparableSubject $r3, $r7;
        org.junit.function.ThrowingRunnable $r4;
        java.lang.Comparable r8, r9;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

        $r2 = interfaceinvoke r1.<androidx.media3.datasource.DataSource: android.net.Uri getUri()>();

        r8 = (java.lang.Comparable) $r2;

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ComparableSubject assertThat(java.lang.Comparable)>(r8);

        virtualinvoke $r3.<com.google.common.truth.ComparableSubject: void isNull()>();

        $r4 = dynamicinvoke "run" <org.junit.function.ThrowingRunnable (androidx.media3.test.utils.DataSourceContractTest,androidx.media3.datasource.DataSource)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.DataSourceContractTest: void lambda$getUri_resourceNotFound_returnsNullIfNotOpened$3(androidx.media3.datasource.DataSource)>, methodtype: void __METHODTYPE__());

        staticinvoke <org.junit.Assert: java.lang.Throwable assertThrows(java.lang.Class,org.junit.function.ThrowingRunnable)>(class "Ljava/io/IOException;", $r4);

        interfaceinvoke r1.<androidx.media3.datasource.DataSource: void close()>();

        $r6 = interfaceinvoke r1.<androidx.media3.datasource.DataSource: android.net.Uri getUri()>();

        r9 = (java.lang.Comparable) $r6;

        $r7 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ComparableSubject assertThat(java.lang.Comparable)>(r9);

        virtualinvoke $r7.<com.google.common.truth.ComparableSubject: void isNull()>();

        return;
    }

    public void getResponseHeaders_noNullKeysOrValues() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        androidx.media3.datasource.DataSource r3;
        java.util.Map r4;
        java.util.Iterator r5;
        java.util.List r6;
        java.lang.Throwable r7, $r20;
        boolean $z0, $z1, $z2;
        androidx.media3.test.utils.AdditionalFailureInfo $r8, $r17;
        java.lang.String $r9;
        java.lang.Object $r10, $r18;
        androidx.media3.datasource.DataSpec $r11;
        android.net.Uri $r12;
        com.google.common.truth.MapSubject $r13;
        java.util.Collection $r14, $r16;
        com.google.common.truth.IterableSubject $r15, $r19;
        int i1, $i2;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Must provide at least one test resource.");

        i1 = 0;

     label03:
        $i2 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i1 >= $i2 goto label10;

        $r8 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r9 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i1);

        virtualinvoke $r8.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r9);

        $r10 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i1);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r10;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

     label04:
        $r11 = new androidx.media3.datasource.DataSpec;

        $r12 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        specialinvoke $r11.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r12);

        interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r11);

        r4 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: java.util.Map getResponseHeaders()>();

        $r13 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.MapSubject assertThat(java.util.Map)>(r4);

        virtualinvoke $r13.<com.google.common.truth.MapSubject: void doesNotContainKey(java.lang.Object)>(null);

        $r14 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>();

        $r15 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r14);

        virtualinvoke $r15.<com.google.common.truth.IterableSubject: void doesNotContain(java.lang.Object)>(null);

        $r16 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>();

        r5 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r18 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.List) $r18;

        $r19 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(r6);

        virtualinvoke $r19.<com.google.common.truth.IterableSubject: void doesNotContain(java.lang.Object)>(null);

        goto label05;

     label06:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label09;

     label07:
        $r20 := @caughtexception;

        r7 = $r20;

     label08:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r7;

     label09:
        $r17 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r17.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i1 = i1 + 1;

        goto label03;

     label10:
        return;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public void getResponseHeaders_caseInsensitive() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        androidx.media3.datasource.DataSource r3;
        java.util.Map r4;
        java.util.Iterator r5;
        java.lang.String r6, r7, $r10;
        java.lang.Throwable r8, $r23;
        boolean $z0, $z1, $z2;
        androidx.media3.test.utils.AdditionalFailureInfo $r9, $r15;
        java.lang.Object $r11, $r16, $r19, $r22;
        androidx.media3.datasource.DataSpec $r12;
        android.net.Uri $r13;
        java.util.Set $r14;
        java.lang.Object[] $r17;
        com.google.common.truth.StandardSubjectBuilder $r18;
        java.lang.Iterable $r20;
        com.google.common.truth.IterableSubject $r21;
        int i1, $i2;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Must provide at least one test resource.");

        i1 = 0;

     label03:
        $i2 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i1 >= $i2 goto label10;

        $r9 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r10 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i1);

        virtualinvoke $r9.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r10);

        $r11 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i1);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r11;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

     label04:
        $r12 = new androidx.media3.datasource.DataSpec;

        $r13 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        specialinvoke $r12.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r13);

        interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r12);

        r4 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: java.util.Map getResponseHeaders()>();

        $r14 = interfaceinvoke r4.<java.util.Map: java.util.Set keySet()>();

        r5 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r16 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r16;

        r7 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String invertAsciiCaseOfEveryOtherCharacter(java.lang.String)>(r6);

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r6;

        $r17[1] = r7;

        $r18 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StandardSubjectBuilder assertWithMessage(java.lang.String,java.lang.Object[])>("key=\'%s\', caseFlippedKey=\'%s\'", $r17);

        $r19 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $r20 = (java.lang.Iterable) $r19;

        $r21 = virtualinvoke $r18.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IterableSubject that(java.lang.Iterable)>($r20);

        $r22 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        virtualinvoke $r21.<com.google.common.truth.IterableSubject: void isEqualTo(java.lang.Object)>($r22);

        goto label05;

     label06:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label09;

     label07:
        $r23 := @caughtexception;

        r8 = $r23;

     label08:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r8;

     label09:
        $r15 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r15.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i1 = i1 + 1;

        goto label03;

     label10:
        return;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public void getResponseHeaders_isEmptyWhileNotOpen() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        com.google.common.collect.ImmutableList r1;
        androidx.media3.test.utils.DataSourceContractTest$TestResource r2;
        androidx.media3.datasource.DataSource r3;
        java.lang.Throwable r4, $r15;
        boolean $z0, $z1;
        androidx.media3.test.utils.AdditionalFailureInfo $r5, $r14;
        java.lang.String $r6;
        java.lang.Object $r7;
        java.util.Map $r8, $r12;
        com.google.common.truth.MapSubject $r9, $r13;
        androidx.media3.datasource.DataSpec $r10;
        android.net.Uri $r11;
        int i1, $i2;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: com.google.common.collect.ImmutableList getTestResources()>();

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, "Must provide at least one test resource.");

        i1 = 0;

     label3:
        $i2 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if i1 >= $i2 goto label9;

        $r5 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        $r6 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: java.lang.String getFailureLabel(java.util.List,int)>(r1, i1);

        virtualinvoke $r5.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>($r6);

        $r7 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i1);

        r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r7;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

     label4:
        $r8 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: java.util.Map getResponseHeaders()>();

        $r9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.MapSubject assertThat(java.util.Map)>($r8);

        virtualinvoke $r9.<com.google.common.truth.MapSubject: void isEmpty()>();

        $r10 = new androidx.media3.datasource.DataSpec;

        $r11 = virtualinvoke r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: android.net.Uri getUri()>();

        specialinvoke $r10.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r11);

        interfaceinvoke r3.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r10);

     label5:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        goto label8;

     label6:
        $r15 := @caughtexception;

        r4 = $r15;

     label7:
        interfaceinvoke r3.<androidx.media3.datasource.DataSource: void close()>();

        throw r4;

     label8:
        $r12 = interfaceinvoke r3.<androidx.media3.datasource.DataSource: java.util.Map getResponseHeaders()>();

        $r13 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.MapSubject assertThat(java.util.Map)>($r12);

        virtualinvoke $r13.<com.google.common.truth.MapSubject: void isEmpty()>();

        $r14 = r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.test.utils.AdditionalFailureInfo additionalFailureInfo>;

        virtualinvoke $r14.<androidx.media3.test.utils.AdditionalFailureInfo: void setInfo(java.lang.String)>(null);

        i1 = i1 + 1;

        goto label3;

     label9:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void getResponseHeaders_resourceNotFound_isEmptyWhileNotOpen() throws java.lang.Exception
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        androidx.media3.datasource.DataSource r1;
        java.util.Map $r2, $r6;
        com.google.common.truth.MapSubject $r3, $r7;
        org.junit.function.ThrowingRunnable $r4;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: androidx.media3.datasource.DataSource createDataSource()>();

        $r2 = interfaceinvoke r1.<androidx.media3.datasource.DataSource: java.util.Map getResponseHeaders()>();

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.MapSubject assertThat(java.util.Map)>($r2);

        virtualinvoke $r3.<com.google.common.truth.MapSubject: void isEmpty()>();

        $r4 = dynamicinvoke "run" <org.junit.function.ThrowingRunnable (androidx.media3.test.utils.DataSourceContractTest,androidx.media3.datasource.DataSource)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.media3.test.utils.DataSourceContractTest: void lambda$getResponseHeaders_resourceNotFound_isEmptyWhileNotOpen$4(androidx.media3.datasource.DataSource)>, methodtype: void __METHODTYPE__());

        staticinvoke <org.junit.Assert: java.lang.Throwable assertThrows(java.lang.Class,org.junit.function.ThrowingRunnable)>(class "Ljava/io/IOException;", $r4);

        interfaceinvoke r1.<androidx.media3.datasource.DataSource: void close()>();

        $r6 = interfaceinvoke r1.<androidx.media3.datasource.DataSource: java.util.Map getResponseHeaders()>();

        $r7 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.MapSubject assertThat(java.util.Map)>($r6);

        virtualinvoke $r7.<com.google.common.truth.MapSubject: void isEmpty()>();

        return;
    }

    private static java.lang.String getFailureLabel(java.util.List, int)
    {
        java.util.List r0;
        int i0, $i1;
        java.lang.Object $r1, $r9;
        androidx.media3.test.utils.DataSourceContractTest$TestResource $r2, $r10;
        java.lang.String $r3, $r6, $r11, $r13;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.StringBuilder $r7, $r8, $r12;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 != 1 goto label1;

        return "";

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r2 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r1;

        $r3 = virtualinvoke $r2.<androidx.media3.test.utils.DataSourceContractTest$TestResource: java.lang.String getName()>();

        if $r3 == null goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resource name: ");

        $r9 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r10 = (androidx.media3.test.utils.DataSourceContractTest$TestResource) $r9;

        $r11 = virtualinvoke $r10.<androidx.media3.test.utils.DataSourceContractTest$TestResource: java.lang.String getName()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("resource[%s]", $r4);

        return $r6;
    }

    private static java.lang.String invertAsciiCaseOfEveryOtherCharacter(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1, i3;
        char $c2, $c4;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label4;

        $i1 = i3 % 2;

        if $i1 != 0 goto label2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $c4 = staticinvoke <androidx.media3.test.utils.DataSourceContractTest: char invertAsciiCase(char)>($c2);

        goto label3;

     label2:
        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        i3 = i3 + 1;

        goto label1;

     label4:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static char invertAsciiCase(char)
    {
        char c0, $c1, $c2;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isUpperCase(char)>(c0);

        if $z0 == 0 goto label1;

        $c2 = staticinvoke <com.google.common.base.Ascii: char toLowerCase(char)>(c0);

        return $c2;

     label1:
        $z1 = staticinvoke <com.google.common.base.Ascii: boolean isLowerCase(char)>(c0);

        if $z1 == 0 goto label2;

        $c1 = staticinvoke <com.google.common.base.Ascii: char toUpperCase(char)>(c0);

        return $c1;

     label2:
        return c0;
    }

    private void lambda$getResponseHeaders_resourceNotFound_isEmptyWhileNotOpen$4(androidx.media3.datasource.DataSource) throws java.lang.Throwable
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        androidx.media3.datasource.DataSource r1;
        androidx.media3.datasource.DataSpec $r2;
        android.net.Uri $r3;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 := @parameter0: androidx.media3.datasource.DataSource;

        $r2 = new androidx.media3.datasource.DataSpec;

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: android.net.Uri getNotFoundUri()>();

        specialinvoke $r2.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r3);

        interfaceinvoke r1.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r2);

        return;
    }

    private void lambda$getUri_resourceNotFound_returnsNullIfNotOpened$3(androidx.media3.datasource.DataSource) throws java.lang.Throwable
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        androidx.media3.datasource.DataSource r1;
        androidx.media3.datasource.DataSpec $r2;
        android.net.Uri $r3;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 := @parameter0: androidx.media3.datasource.DataSource;

        $r2 = new androidx.media3.datasource.DataSpec;

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: android.net.Uri getNotFoundUri()>();

        specialinvoke $r2.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r3);

        interfaceinvoke r1.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r2);

        return;
    }

    private void lambda$resourceNotFound_transferListenerCallbacks$2(androidx.media3.datasource.DataSource) throws java.lang.Throwable
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        androidx.media3.datasource.DataSource r1;
        androidx.media3.datasource.DataSpec $r2;
        android.net.Uri $r3;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 := @parameter0: androidx.media3.datasource.DataSource;

        $r2 = new androidx.media3.datasource.DataSpec;

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: android.net.Uri getNotFoundUri()>();

        specialinvoke $r2.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r3);

        interfaceinvoke r1.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r2);

        return;
    }

    private void lambda$resourceNotFound$1(androidx.media3.datasource.DataSource) throws java.lang.Throwable
    {
        androidx.media3.test.utils.DataSourceContractTest r0;
        androidx.media3.datasource.DataSource r1;
        androidx.media3.datasource.DataSpec $r2;
        android.net.Uri $r3;

        r0 := @this: androidx.media3.test.utils.DataSourceContractTest;

        r1 := @parameter0: androidx.media3.datasource.DataSource;

        $r2 = new androidx.media3.datasource.DataSpec;

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.DataSourceContractTest: android.net.Uri getNotFoundUri()>();

        specialinvoke $r2.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri)>($r3);

        interfaceinvoke r1.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>($r2);

        return;
    }

    private static void lambda$dataSpecWithPositionOutOfRange_throwsPositionOutOfRangeException$0(androidx.media3.datasource.DataSource, androidx.media3.datasource.DataSpec) throws java.lang.Throwable
    {
        androidx.media3.datasource.DataSource r0;
        androidx.media3.datasource.DataSpec r1;

        r0 := @parameter0: androidx.media3.datasource.DataSource;

        r1 := @parameter1: androidx.media3.datasource.DataSpec;

        interfaceinvoke r0.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>(r1);

        return;
    }

