androidx.compose.ui.test.InputDispatcher
<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.InputDispatcher$Companion Companion>
<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.TestContext testContext>
<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.node.RootForTest root>
<androidx.compose.ui.test.InputDispatcher: long currentTime>
<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>
<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>
<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>
<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.RotaryInputState rotaryInputState>
<androidx.compose.ui.test.InputDispatcher: long eventPeriodMillis>
<androidx.compose.ui.test.InputDispatcher: long InitialRepeatDelay>
<androidx.compose.ui.test.InputDispatcher: long SubsequentRepeatDelay>
    public void <init>(androidx.compose.ui.test.TestContext, androidx.compose.ui.node.RootForTest)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.TestContext r1, $r4, $r9;
        androidx.compose.ui.node.RootForTest r2, $r8;
        int i0;
        androidx.compose.ui.test.InputDispatcherState r3;
        long $l1;
        androidx.compose.ui.test.MouseInputState $r5, $r14;
        androidx.compose.ui.test.KeyInputState $r6, $r15;
        androidx.compose.ui.test.RotaryInputState $r7;
        java.util.Map $r10;
        java.lang.Integer $r11;
        java.lang.Object $r12;
        androidx.compose.ui.test.PartialGesture $r13;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        r1 := @parameter0: androidx.compose.ui.test.TestContext;

        r2 := @parameter1: androidx.compose.ui.node.RootForTest;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "testContext");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "root");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.TestContext testContext> = r1;

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.node.RootForTest root> = r2;

        $r4 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.TestContext testContext>;

        $l1 = specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: long getCurrentTime(androidx.compose.ui.test.TestContext)>($r4);

        r0.<androidx.compose.ui.test.InputDispatcher: long currentTime> = $l1;

        $r5 = new androidx.compose.ui.test.MouseInputState;

        specialinvoke $r5.<androidx.compose.ui.test.MouseInputState: void <init>()>();

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState> = $r5;

        $r6 = new androidx.compose.ui.test.KeyInputState;

        specialinvoke $r6.<androidx.compose.ui.test.KeyInputState: void <init>()>();

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState> = $r6;

        $r7 = new androidx.compose.ui.test.RotaryInputState;

        specialinvoke $r7.<androidx.compose.ui.test.RotaryInputState: void <init>()>();

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.RotaryInputState rotaryInputState> = $r7;

        $r8 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.node.RootForTest root>;

        i0 = staticinvoke <androidx.compose.ui.test.Expect_jvmKt: int identityHashCode(java.lang.Object)>($r8);

        $r9 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.TestContext testContext>;

        $r10 = virtualinvoke $r9.<androidx.compose.ui.test.TestContext: java.util.Map getStates$ui_test_release()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11);

        r3 = (androidx.compose.ui.test.InputDispatcherState) $r12;

        if r3 == null goto label1;

        $r13 = virtualinvoke r3.<androidx.compose.ui.test.InputDispatcherState: androidx.compose.ui.test.PartialGesture getPartialGesture()>();

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture> = $r13;

        $r14 = virtualinvoke r3.<androidx.compose.ui.test.InputDispatcherState: androidx.compose.ui.test.MouseInputState getMouseInputState()>();

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState> = $r14;

        $r15 = virtualinvoke r3.<androidx.compose.ui.test.InputDispatcherState: androidx.compose.ui.test.KeyInputState getKeyInputState()>();

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState> = $r15;

     label1:
        return;
    }

    protected final long getCurrentTime()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long $l0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $l0 = r0.<androidx.compose.ui.test.InputDispatcher: long currentTime>;

        return $l0;
    }

    protected final void setCurrentTime(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        r0.<androidx.compose.ui.test.InputDispatcher: long currentTime> = l0;

        return;
    }

    protected final androidx.compose.ui.test.PartialGesture getPartialGesture()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.PartialGesture $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        return $r1;
    }

    protected final void setPartialGesture(androidx.compose.ui.test.PartialGesture)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.PartialGesture r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        r1 := @parameter0: androidx.compose.ui.test.PartialGesture;

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture> = r1;

        return;
    }

    protected final androidx.compose.ui.test.MouseInputState getMouseInputState()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.MouseInputState $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        return $r1;
    }

    protected final void setMouseInputState(androidx.compose.ui.test.MouseInputState)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.MouseInputState r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        r1 := @parameter0: androidx.compose.ui.test.MouseInputState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState> = r1;

        return;
    }

    protected final androidx.compose.ui.test.KeyInputState getKeyInputState()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.KeyInputState $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        return $r1;
    }

    protected final void setKeyInputState(androidx.compose.ui.test.KeyInputState)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.KeyInputState r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        r1 := @parameter0: androidx.compose.ui.test.KeyInputState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState> = r1;

        return;
    }

    protected final androidx.compose.ui.test.RotaryInputState getRotaryInputState()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.RotaryInputState $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.RotaryInputState rotaryInputState>;

        return $r1;
    }

    protected final void setRotaryInputState(androidx.compose.ui.test.RotaryInputState)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.RotaryInputState r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        r1 := @parameter0: androidx.compose.ui.test.RotaryInputState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.RotaryInputState rotaryInputState> = r1;

        return;
    }

    public final boolean isTouchInProgress()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.PartialGesture $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isCapsLockOn()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.KeyInputState $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: boolean getCapsLockOn()>();

        return $z0;
    }

    public final boolean isNumLockOn()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.KeyInputState $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: boolean getNumLockOn()>();

        return $z0;
    }

    public final boolean isScrollLockOn()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.KeyInputState $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: boolean getScrollLockOn()>();

        return $z0;
    }

    protected void saveState(androidx.compose.ui.node.RootForTest)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.node.RootForTest r1;
        int i0;
        java.lang.Integer r2;
        androidx.compose.ui.test.TestContext $r3;
        java.util.Map $r4;
        androidx.compose.ui.test.InputDispatcherState $r5;
        androidx.compose.ui.test.KeyInputState $r6;
        androidx.compose.ui.test.MouseInputState $r7;
        androidx.compose.ui.test.PartialGesture $r8;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        r1 := @parameter0: androidx.compose.ui.node.RootForTest;

        if r1 == null goto label1;

        i0 = staticinvoke <androidx.compose.ui.test.Expect_jvmKt: int identityHashCode(java.lang.Object)>(r1);

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.TestContext testContext>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.test.TestContext: java.util.Map getStates$ui_test_release()>();

        $r5 = new androidx.compose.ui.test.InputDispatcherState;

        $r8 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        $r7 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $r6 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        specialinvoke $r5.<androidx.compose.ui.test.InputDispatcherState: void <init>(androidx.compose.ui.test.PartialGesture,androidx.compose.ui.test.MouseInputState,androidx.compose.ui.test.KeyInputState)>($r8, $r7, $r6);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

     label1:
        return;
    }

    private final long getCurrentTime(androidx.compose.ui.test.TestContext)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.TestContext $r1;
        androidx.compose.ui.test.TestOwner $r2;
        androidx.compose.ui.test.MainTestClock $r3;
        long $l0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 := @parameter0: androidx.compose.ui.test.TestContext;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.test.TestContext: androidx.compose.ui.test.TestOwner getTestOwner$ui_test_release()>();

        $r3 = interfaceinvoke $r2.<androidx.compose.ui.test.TestOwner: androidx.compose.ui.test.MainTestClock getMainClock()>();

        $l0 = interfaceinvoke $r3.<androidx.compose.ui.test.MainTestClock: long getCurrentTime()>();

        return $l0;
    }

    private static void getCurrentTime$annotations(androidx.compose.ui.test.TestContext)
    {
        androidx.compose.ui.test.TestContext r0;

        r0 := @parameter0: androidx.compose.ui.test.TestContext;

        return;
    }

    private final androidx.compose.ui.geometry.Rect getBounds(androidx.compose.ui.node.RootForTest)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.node.RootForTest $r1;
        androidx.compose.ui.semantics.SemanticsOwner $r2;
        androidx.compose.ui.semantics.SemanticsNode $r3;
        androidx.compose.ui.geometry.Rect $r4;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 := @parameter0: androidx.compose.ui.node.RootForTest;

        $r2 = interfaceinvoke $r1.<androidx.compose.ui.node.RootForTest: androidx.compose.ui.semantics.SemanticsOwner getSemanticsOwner()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsOwner: androidx.compose.ui.semantics.SemanticsNode getRootSemanticsNode()>();

        $r4 = virtualinvoke $r3.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        return $r4;
    }

    protected final boolean isWithinRootBounds-k-4lQ0M(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0;
        androidx.compose.ui.node.RootForTest $r1;
        androidx.compose.ui.geometry.Rect $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.node.RootForTest root>;

        $r2 = specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.geometry.Rect getBounds(androidx.compose.ui.node.RootForTest)>($r1);

        $z0 = virtualinvoke $r2.<androidx.compose.ui.geometry.Rect: boolean contains-k-4lQ0M(long)>(l0);

        return $z0;
    }

    public final void advanceEventTime(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0, l1, $l3;
        byte $b2;
        androidx.compose.ui.test.KeyInputState $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duration of a delay can only be positive, not ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label3:
        $l3 = r0.<androidx.compose.ui.test.InputDispatcher: long currentTime>;

        l1 = $l3 + l0;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void sendRepeatKeysIfNeeded(androidx.compose.ui.test.KeyInputState,long)>($r1, l1);

        r0.<androidx.compose.ui.test.InputDispatcher: long currentTime> = l1;

        return;
    }

    public static void advanceEventTime$default(androidx.compose.ui.test.InputDispatcher, long, int, java.lang.Object)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;
        long l2;

        r0 := @parameter0: androidx.compose.ui.test.InputDispatcher;

        l2 := @parameter1: long;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        if r1 == null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: advanceEventTime");

        throw $r2;

     label1:
        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        l2 = <androidx.compose.ui.test.InputDispatcher: long eventPeriodMillis>;

     label2:
        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void advanceEventTime(long)>(l2);

        return;
    }

    public final androidx.compose.ui.geometry.Offset getCurrentTouchPosition-x-9fifI(int)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        int i0;
        androidx.compose.ui.test.PartialGesture $r1;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        androidx.compose.ui.geometry.Offset $r5;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.test.PartialGesture: java.util.Map getLastPositions()>();

        if $r2 == null goto label1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (androidx.compose.ui.geometry.Offset) $r4;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public final long getCurrentMousePosition-F1C5BW0()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.MouseInputState $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $l0 = virtualinvoke $r1.<androidx.compose.ui.test.MouseInputState: long getLastPosition-F1C5BW0()>();

        return $l0;
    }

    public final boolean isKeyDown-YVgTNJs(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0;
        androidx.compose.ui.test.KeyInputState $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: boolean isKeyDown-YVgTNJs(long)>(l0);

        return $z0;
    }

    public final void enqueueTouchDown-Uv8p0NA(int, long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        int i0;
        long l1, $l2;
        androidx.compose.ui.geometry.Offset r1;
        androidx.compose.ui.test.MouseInputState $r2, $r3, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r4, $r14;
        androidx.compose.ui.test.PartialGesture $r6, r16;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13, $r17;
        java.lang.Integer $r15, $r19;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r16 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if r16 == null goto label1;

        $r14 = virtualinvoke r16.<androidx.compose.ui.test.PartialGesture: java.util.Map getLastPositions()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>($r15);

        if $z2 != 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        if $z3 != 0 goto label4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot send DOWN event, a gesture is already in progress for pointer ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label4:
        $r2 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $z0 = virtualinvoke $r2.<androidx.compose.ui.test.MouseInputState: boolean getHasAnyButtonPressed()>();

        if $z0 == 0 goto label5;

        $r8 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueCancel(androidx.compose.ui.test.MouseInputState)>($r8);

        goto label6;

     label5:
        $r3 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $z1 = virtualinvoke $r3.<androidx.compose.ui.test.MouseInputState: boolean isEntered()>();

        if $z1 == 0 goto label6;

        $r7 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void exitHover(androidx.compose.ui.test.MouseInputState)>($r7);

     label6:
        if r16 == null goto label7;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void flushPointerUpdates(androidx.compose.ui.test.PartialGesture)>(r16);

        goto label7;

     label7:
        if r16 != null goto label8;

        $r6 = new androidx.compose.ui.test.PartialGesture;

        $l2 = r0.<androidx.compose.ui.test.InputDispatcher: long currentTime>;

        specialinvoke $r6.<androidx.compose.ui.test.PartialGesture: void <init>(long,long,int,kotlin.jvm.internal.DefaultConstructorMarker)>($l2, l1, i0, null);

        r16 = $r6;

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture> = r16;

        goto label9;

     label8:
        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r1 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>(l1);

        $r4 = virtualinvoke r16.<androidx.compose.ui.test.PartialGesture: java.util.Map getLastPositions()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r1);

     label9:
        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueDown(androidx.compose.ui.test.PartialGesture,int)>(r16, i0);

        return;
    }

    public final void enqueueTouchMove()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.PartialGesture r1, $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r2 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if $r2 != null goto label1;

        $r5 = "Cannot send MOVE event, no gesture is in progress";

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        r1 = $r2;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueMove(androidx.compose.ui.test.PartialGesture)>(r1);

        virtualinvoke r1.<androidx.compose.ui.test.PartialGesture: void setHasPointerUpdates(boolean)>(0);

        return;
    }

    public final void enqueueTouchMoves(java.util.List, java.util.List)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        java.util.List r1, r2;
        androidx.compose.ui.test.PartialGesture r3, $r4;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6, $r7;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "relativeHistoricalTimes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "historicalCoordinates");

        $r4 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if $r4 != null goto label1;

        $r7 = "Cannot send MOVE event, no gesture is in progress";

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        r3 = $r4;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueMoves(androidx.compose.ui.test.PartialGesture,java.util.List,java.util.List)>(r3, r1, r2);

        virtualinvoke r3.<androidx.compose.ui.test.PartialGesture: void setHasPointerUpdates(boolean)>(0);

        return;
    }

    public final void updateTouchPointer-Uv8p0NA(int, long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        int i0;
        long l1;
        androidx.compose.ui.test.PartialGesture r1;
        androidx.compose.ui.geometry.Offset r2;
        java.util.Map $r3, $r5;
        java.lang.Integer $r4, $r17;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.String $r12, $r14, $r15, $r16;
        java.lang.IllegalStateException $r13;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r15 = "Cannot move pointers, no gesture is in progress";

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label3:
        $r3 = virtualinvoke r1.<androidx.compose.ui.test.PartialGesture: java.util.Map getLastPositions()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot move pointer ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", it is not active in the current gesture");

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label4:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r2 = staticinvoke <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset box-impl(long)>(l1);

        $r5 = virtualinvoke r1.<androidx.compose.ui.test.PartialGesture: java.util.Map getLastPositions()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r2);

        virtualinvoke r1.<androidx.compose.ui.test.PartialGesture: void setHasPointerUpdates(boolean)>(1);

        return;
    }

    public final void enqueueTouchUp(int)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        int i0;
        androidx.compose.ui.test.PartialGesture r1;
        java.util.Map $r2, $r4, $r7;
        java.lang.Integer $r3, $r5;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13, $r15, $r16, $r17;
        java.lang.IllegalStateException $r14;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        i0 := @parameter0: int;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if r1 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 != 0 goto label3;

        $r16 = "Cannot send UP event, no gesture is in progress";

        $r14 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label3:
        $r2 = virtualinvoke r1.<androidx.compose.ui.test.PartialGesture: java.util.Map getLastPositions()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot send UP event for pointer ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", it is not active in the current gesture");

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label4:
        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueUp(androidx.compose.ui.test.PartialGesture,int)>(r1, i0);

        $r4 = virtualinvoke r1.<androidx.compose.ui.test.PartialGesture: java.util.Map getLastPositions()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        $r7 = virtualinvoke r1.<androidx.compose.ui.test.PartialGesture: java.util.Map getLastPositions()>();

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture> = null;

     label5:
        return;
    }

    public final void enqueueTouchCancel()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.PartialGesture r1, $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r2 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if $r2 != null goto label1;

        $r5 = "Cannot send CANCEL event, no gesture is in progress";

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        r1 = $r2;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueCancel(androidx.compose.ui.test.PartialGesture)>(r1);

        r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture> = null;

        return;
    }

    private final void flushPointerUpdates(androidx.compose.ui.test.PartialGesture)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.PartialGesture $r1;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 := @parameter0: androidx.compose.ui.test.PartialGesture;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.test.PartialGesture: boolean getHasPointerUpdates()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueTouchMove()>();

     label1:
        return;
    }

    public final void enqueueMousePress(int)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        int i0;
        androidx.compose.ui.test.MouseInputState r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7;
        long $l1, $l2, $l3;
        androidx.compose.ui.test.PartialGesture $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r10, $r13, $r14, $r15, $r16;
        java.lang.String $r5, $r12, $r18, $r19, $r20;
        androidx.compose.ui.node.RootForTest $r8;
        androidx.compose.ui.geometry.Rect $r9;
        java.lang.IllegalStateException $r11, $r17;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        i0 := @parameter0: int;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $z0 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean isButtonPressed(int)>(i0);

        if $z0 != 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        if $z5 != 0 goto label03;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot send mouse button down event, button ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already pressed");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label03:
        $l1 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: long getCurrentMousePosition-F1C5BW0()>();

        $z1 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: boolean isWithinRootBounds-k-4lQ0M(long)>($l1);

        if $z1 != 0 goto label04;

        $z4 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean getHasAnyButtonPressed()>();

        if $z4 == 0 goto label05;

     label04:
        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        if $z7 != 0 goto label07;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot start a mouse gesture outside the Compose root bounds, mouse position is ");

        $l3 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: long getCurrentMousePosition-F1C5BW0()>();

        $r5 = staticinvoke <androidx.compose.ui.geometry.Offset: java.lang.String toString-impl(long)>($l3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and bounds are ");

        $r8 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.node.RootForTest root>;

        $r9 = specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.geometry.Rect getBounds(androidx.compose.ui.node.RootForTest)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r20 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label07:
        $r2 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if $r2 == null goto label08;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueTouchCancel()>();

     label08:
        $z2 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean getHasNoButtonsPressed()>();

        if $z2 == 0 goto label09;

        $l2 = r0.<androidx.compose.ui.test.InputDispatcher: long currentTime>;

        virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: void setDownTime(long)>($l2);

     label09:
        virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: void setButtonBit(int)>(i0);

        $z3 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean isEntered()>();

        if $z3 == 0 goto label10;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void exitHover(androidx.compose.ui.test.MouseInputState)>(r1);

     label10:
        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueuePress(androidx.compose.ui.test.MouseInputState,int)>(r1, i0);

        return;
    }

    public final void enqueueMouseMove-k-4lQ0M(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0;
        androidx.compose.ui.test.MouseInputState r1;
        boolean z0, $z1, $z2, $z3;
        androidx.compose.ui.test.PartialGesture $r2;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $r2 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if $r2 == null goto label1;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueTouchCancel()>();

     label1:
        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void updateMousePosition-k-4lQ0M(long)>(l0);

        z0 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: boolean isWithinRootBounds-k-4lQ0M(long)>(l0);

        if z0 == 0 goto label2;

        $z2 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean isEntered()>();

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean getHasNoButtonsPressed()>();

        if $z3 == 0 goto label2;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enterHover(androidx.compose.ui.test.MouseInputState)>(r1);

        goto label3;

     label2:
        if z0 != 0 goto label3;

        $z1 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean isEntered()>();

        if $z1 == 0 goto label3;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void exitHover(androidx.compose.ui.test.MouseInputState)>(r1);

     label3:
        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueMove(androidx.compose.ui.test.MouseInputState)>(r1);

        return;
    }

    public final void updateMousePosition-k-4lQ0M(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0;
        androidx.compose.ui.test.MouseInputState $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        virtualinvoke $r1.<androidx.compose.ui.test.MouseInputState: void setLastPosition-k-4lQ0M(long)>(l0);

        return;
    }

    public final void enqueueMouseRelease(int)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        int i0;
        androidx.compose.ui.test.MouseInputState r1;
        boolean $z0, $z1, $z2, $z4;
        androidx.compose.ui.test.PartialGesture $r2;
        long $l1;
        java.lang.IllegalStateException $r3, $r9;
        java.lang.String $r4, $r10, $r11, $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        i0 := @parameter0: int;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $z0 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean isButtonPressed(int)>(i0);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot send mouse button up event, button ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not pressed");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label1:
        $r2 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.PartialGesture partialGesture>;

        if $r2 != null goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        if $z4 != 0 goto label4;

        $r12 = "Touch gesture can\'t be in progress, mouse buttons are down";

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: void unsetButtonBit(int)>(i0);

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueRelease(androidx.compose.ui.test.MouseInputState,int)>(r1, i0);

        $z1 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean getHasNoButtonsPressed()>();

        if $z1 == 0 goto label5;

        $l1 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: long getCurrentMousePosition-F1C5BW0()>();

        $z2 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: boolean isWithinRootBounds-k-4lQ0M(long)>($l1);

        if $z2 == 0 goto label5;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enterHover(androidx.compose.ui.test.MouseInputState)>(r1);

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueMove(androidx.compose.ui.test.MouseInputState)>(r1);

     label5:
        return;
    }

    public final void enqueueMouseEnter-k-4lQ0M(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0;
        androidx.compose.ui.test.MouseInputState r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r8, $r10, $r12, $r13, $r14, $r15;
        java.lang.IllegalStateException $r7, $r9, $r11;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $z0 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean isEntered()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 != 0 goto label3;

        $r13 = "Cannot send mouse hover enter event, mouse is already hovering";

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label3:
        $z1 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean getHasNoButtonsPressed()>();

        if $z1 != 0 goto label4;

        $r14 = "Cannot send mouse hover enter event, mouse buttons are down";

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label4:
        $z2 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: boolean isWithinRootBounds-k-4lQ0M(long)>(l0);

        if $z2 != 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot send mouse hover enter event, ");

        $r4 = staticinvoke <androidx.compose.ui.geometry.Offset: java.lang.String toString-impl(long)>(l0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of bounds");

        $r15 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label5:
        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void updateMousePosition-k-4lQ0M(long)>(l0);

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enterHover(androidx.compose.ui.test.MouseInputState)>(r1);

        return;
    }

    public final void enqueueMouseExit-k-4lQ0M(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0;
        androidx.compose.ui.test.MouseInputState r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $z0 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean isEntered()>();

        if $z0 != 0 goto label1;

        $r4 = "Cannot send mouse hover exit event, mouse is not hovering";

        $r2 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void updateMousePosition-k-4lQ0M(long)>(l0);

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void exitHover(androidx.compose.ui.test.MouseInputState)>(r1);

        return;
    }

    public final void enqueueMouseCancel()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.MouseInputState r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $z0 = virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: boolean getHasAnyButtonPressed()>();

        if $z0 != 0 goto label1;

        $r4 = "Cannot send mouse cancel event, no mouse buttons are pressed";

        $r2 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        virtualinvoke r1.<androidx.compose.ui.test.MouseInputState: void clearButtonState()>();

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueCancel(androidx.compose.ui.test.MouseInputState)>(r1);

        return;
    }

    public final void enqueueMouseScroll-I7Dg0i0(float, int)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        float f0;
        int i0;
        androidx.compose.ui.test.MouseInputState r1;
        long $l1, $l2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.MouseInputState mouseInputState>;

        $l1 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: long getCurrentMousePosition-F1C5BW0()>();

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueMouseMove-k-4lQ0M(long)>($l1);

        $l2 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: long getCurrentMousePosition-F1C5BW0()>();

        $z0 = virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: boolean isWithinRootBounds-k-4lQ0M(long)>($l2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueScroll-0Rp_h_E(androidx.compose.ui.test.MouseInputState,float,int)>(r1, f0, i0);

     label1:
        return;
    }

    public final void enqueueKeyDown-YVgTNJs(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0, $l1;
        androidx.compose.ui.test.KeyInputState r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r8, $r9;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        $z0 = virtualinvoke r1.<androidx.compose.ui.test.KeyInputState: boolean isKeyDown-YVgTNJs(long)>(l0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot send key down event, Key(");

        $r4 = staticinvoke <androidx.compose.ui.input.key.Key: java.lang.String toString-impl(long)>(l0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is already pressed down.");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label3:
        $l1 = r0.<androidx.compose.ui.test.InputDispatcher: long currentTime>;

        virtualinvoke r1.<androidx.compose.ui.test.KeyInputState: void setDownTime(long)>($l1);

        virtualinvoke r1.<androidx.compose.ui.test.KeyInputState: void setKeyDown-YVgTNJs(long)>(l0);

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueDown-kpSHnEs(androidx.compose.ui.test.KeyInputState,long)>(r1, l0);

        return;
    }

    public final void enqueueKeyUp-YVgTNJs(long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        long l0;
        androidx.compose.ui.test.KeyInputState r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r8, $r9;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        l0 := @parameter0: long;

        r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        $z0 = virtualinvoke r1.<androidx.compose.ui.test.KeyInputState: boolean isKeyDown-YVgTNJs(long)>(l0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot send key up event, Key(");

        $r4 = staticinvoke <androidx.compose.ui.input.key.Key: java.lang.String toString-impl(long)>(l0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not pressed down.");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        virtualinvoke r1.<androidx.compose.ui.test.KeyInputState: void setKeyUp-YVgTNJs(long)>(l0);

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueUp-kpSHnEs(androidx.compose.ui.test.KeyInputState,long)>(r1, l0);

        return;
    }

    public final void enqueueRotaryScrollHorizontally(float)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        float f0;
        androidx.compose.ui.test.RotaryInputState $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.RotaryInputState rotaryInputState>;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueRotaryScrollHorizontally(androidx.compose.ui.test.RotaryInputState,float)>($r1, f0);

        return;
    }

    public final void enqueueRotaryScrollVertically(float)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        float f0;
        androidx.compose.ui.test.RotaryInputState $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.RotaryInputState rotaryInputState>;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueRotaryScrollHorizontally(androidx.compose.ui.test.RotaryInputState,float)>($r1, f0);

        return;
    }

    private final void enterHover(androidx.compose.ui.test.MouseInputState)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.MouseInputState $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 := @parameter0: androidx.compose.ui.test.MouseInputState;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueEnter(androidx.compose.ui.test.MouseInputState)>($r1);

        virtualinvoke $r1.<androidx.compose.ui.test.MouseInputState: void setEntered(boolean)>(1);

        return;
    }

    private final void exitHover(androidx.compose.ui.test.MouseInputState)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.MouseInputState $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 := @parameter0: androidx.compose.ui.test.MouseInputState;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueExit(androidx.compose.ui.test.MouseInputState)>($r1);

        virtualinvoke $r1.<androidx.compose.ui.test.MouseInputState: void setEntered(boolean)>(0);

        return;
    }

    private final void sendRepeatKeysIfNeeded(androidx.compose.ui.test.KeyInputState, long)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.KeyInputState $r1;
        long l0, $l3, $l4, $l6, $l7, $l9, $l10, $l11, $l14, $l15, $l16, $l18, $l19, $l20;
        int i1, i2, $i12, $i13, $i17, $i21;
        androidx.compose.ui.input.key.Key $r2;
        byte $b5, $b8;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, $r5;
        boolean $z1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 := @parameter0: androidx.compose.ui.test.KeyInputState;

        l0 := @parameter1: long;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: androidx.compose.ui.input.key.Key getRepeatKey-DUgKLGk()>();

        if $r2 == null goto label1;

        $l3 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: long getDownTime()>();

        $l4 = l0 - $l3;

        $b5 = $l4 cmp 500L;

        if $b5 >= 0 goto label2;

     label1:
        return;

     label2:
        $l6 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: long getLastRepeatTime()>();

        $l7 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: long getDownTime()>();

        $b8 = $l6 cmp $l7;

        if $b8 > 0 goto label6;

        $i17 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: int getRepeatCount()>();

        if $i17 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z1 != 0 goto label5;

        $r5 = "repeatCount should be reset to 0 when downTime updates";

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label5:
        virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: void setRepeatCount(int)>(1);

        $l18 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: long getDownTime()>();

        $l19 = $l18 + 500L;

        virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: void setLastRepeatTime(long)>($l19);

        $l20 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: long getLastRepeatTime()>();

        r0.<androidx.compose.ui.test.InputDispatcher: long currentTime> = $l20;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueRepeat(androidx.compose.ui.test.KeyInputState)>($r1);

     label6:
        $l9 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: long getLastRepeatTime()>();

        $l10 = l0 - $l9;

        $l11 = $l10 / 50L;

        i1 = (int) $l11;

        $i21 = 0;

     label7:
        if $i21 >= i1 goto label8;

        i2 = $i21;

        $i12 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: int getRepeatCount()>();

        $i13 = $i12 + 1;

        virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: void setRepeatCount(int)>($i13);

        $l14 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: long getLastRepeatTime()>();

        $l15 = $l14 + 50L;

        virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: void setLastRepeatTime(long)>($l15);

        $l16 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: long getLastRepeatTime()>();

        r0.<androidx.compose.ui.test.InputDispatcher: long currentTime> = $l16;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueRepeat(androidx.compose.ui.test.KeyInputState)>($r1);

        $i21 = $i21 + 1;

        goto label7;

     label8:
        return;
    }

    private final void enqueueRepeat(androidx.compose.ui.test.KeyInputState)
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.test.KeyInputState $r1, $r3;
        long l0;
        androidx.compose.ui.input.key.Key $r2;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5, $r6;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 := @parameter0: androidx.compose.ui.test.KeyInputState;

        $r2 = virtualinvoke $r1.<androidx.compose.ui.test.KeyInputState: androidx.compose.ui.input.key.Key getRepeatKey-DUgKLGk()>();

        if $r2 != null goto label1;

        $r6 = "A repeat key event cannot be sent if the repeat key is null.";

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        l0 = virtualinvoke $r2.<androidx.compose.ui.input.key.Key: long unbox-impl()>();

        $r3 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.KeyInputState keyInputState>;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void enqueueDown-kpSHnEs(androidx.compose.ui.test.KeyInputState,long)>($r3, l0);

        return;
    }

<androidx.compose.ui.test.InputDispatcher: void flush()>
<androidx.compose.ui.test.InputDispatcher: void enqueueDown(androidx.compose.ui.test.PartialGesture,int)>
<androidx.compose.ui.test.InputDispatcher: void enqueueMove(androidx.compose.ui.test.PartialGesture)>
<androidx.compose.ui.test.InputDispatcher: void enqueueMoves(androidx.compose.ui.test.PartialGesture,java.util.List,java.util.List)>
<androidx.compose.ui.test.InputDispatcher: void enqueueUp(androidx.compose.ui.test.PartialGesture,int)>
<androidx.compose.ui.test.InputDispatcher: void enqueueCancel(androidx.compose.ui.test.PartialGesture)>
<androidx.compose.ui.test.InputDispatcher: void enqueuePress(androidx.compose.ui.test.MouseInputState,int)>
<androidx.compose.ui.test.InputDispatcher: void enqueueMove(androidx.compose.ui.test.MouseInputState)>
<androidx.compose.ui.test.InputDispatcher: void enqueueRelease(androidx.compose.ui.test.MouseInputState,int)>
<androidx.compose.ui.test.InputDispatcher: void enqueueEnter(androidx.compose.ui.test.MouseInputState)>
<androidx.compose.ui.test.InputDispatcher: void enqueueExit(androidx.compose.ui.test.MouseInputState)>
<androidx.compose.ui.test.InputDispatcher: void enqueueCancel(androidx.compose.ui.test.MouseInputState)>
<androidx.compose.ui.test.InputDispatcher: void enqueueDown-kpSHnEs(androidx.compose.ui.test.KeyInputState,long)>
<androidx.compose.ui.test.InputDispatcher: void enqueueUp-kpSHnEs(androidx.compose.ui.test.KeyInputState,long)>
<androidx.compose.ui.test.InputDispatcher: void enqueueScroll-0Rp_h_E(androidx.compose.ui.test.MouseInputState,float,int)>
<androidx.compose.ui.test.InputDispatcher: void enqueueRotaryScrollHorizontally(androidx.compose.ui.test.RotaryInputState,float)>
<androidx.compose.ui.test.InputDispatcher: void enqueueRotaryScrollVertically(androidx.compose.ui.test.RotaryInputState,float)>
    public final void dispose()
    {
        androidx.compose.ui.test.InputDispatcher r0;
        androidx.compose.ui.node.RootForTest $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        $r1 = r0.<androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.node.RootForTest root>;

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void saveState(androidx.compose.ui.node.RootForTest)>($r1);

        virtualinvoke r0.<androidx.compose.ui.test.InputDispatcher: void onDispose()>();

        return;
    }

    protected void onDispose()
    {
        androidx.compose.ui.test.InputDispatcher r0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher;

        return;
    }

    public static final long access$getEventPeriodMillis$cp()
    {
        long $l0;

        $l0 = <androidx.compose.ui.test.InputDispatcher: long eventPeriodMillis>;

        return $l0;
    }

    public static final void access$setEventPeriodMillis$cp(long)
    {
        long l0;

        l0 := @parameter0: long;

        <androidx.compose.ui.test.InputDispatcher: long eventPeriodMillis> = l0;

        return;
    }

    static void <clinit>()
    {
        androidx.compose.ui.test.InputDispatcher$Companion $r0;

        $r0 = new androidx.compose.ui.test.InputDispatcher$Companion;

        specialinvoke $r0.<androidx.compose.ui.test.InputDispatcher$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.test.InputDispatcher: androidx.compose.ui.test.InputDispatcher$Companion Companion> = $r0;

        <androidx.compose.ui.test.InputDispatcher: long eventPeriodMillis> = 16L;

        return;
    }

androidx.compose.ui.test.InputDispatcher$Companion
    private void <init>()
    {
        androidx.compose.ui.test.InputDispatcher$Companion r0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final long getEventPeriodMillis()
    {
        androidx.compose.ui.test.InputDispatcher$Companion r0;
        long $l0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher$Companion;

        $l0 = staticinvoke <androidx.compose.ui.test.InputDispatcher: long access$getEventPeriodMillis$cp()>();

        return $l0;
    }

    public final void setEventPeriodMillis$ui_test_release(long)
    {
        androidx.compose.ui.test.InputDispatcher$Companion r0;
        long l0;

        r0 := @this: androidx.compose.ui.test.InputDispatcher$Companion;

        l0 := @parameter0: long;

        staticinvoke <androidx.compose.ui.test.InputDispatcher: void access$setEventPeriodMillis$cp(long)>(l0);

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.test.InputDispatcher$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.test.InputDispatcher$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.test.InputDispatcher$Companion: void <init>()>();

        return;
    }

