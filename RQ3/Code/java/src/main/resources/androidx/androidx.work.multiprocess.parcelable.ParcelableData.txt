androidx.work.multiprocess.parcelable.ParcelableData
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_NULL>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_BOOLEAN>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_BYTE>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_INTEGER>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_LONG>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_FLOAT>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_DOUBLE>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_STRING>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_BOOLEAN_ARRAY>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_BYTE_ARRAY>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_INTEGER_ARRAY>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_LONG_ARRAY>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_FLOAT_ARRAY>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_DOUBLE_ARRAY>
<androidx.work.multiprocess.parcelable.ParcelableData: byte TYPE_STRING_ARRAY>
<androidx.work.multiprocess.parcelable.ParcelableData: androidx.work.Data mData>
<androidx.work.multiprocess.parcelable.ParcelableData: android.os.Parcelable$Creator CREATOR>
    public void <init>(androidx.work.Data)
    {
        androidx.work.multiprocess.parcelable.ParcelableData r0;
        androidx.work.Data r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData;

        r1 := @parameter0: androidx.work.Data;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableData: androidx.work.Data mData> = r1;

        return;
    }

    protected void <init>(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableData r0;
        android.os.Parcel r1;
        java.util.HashMap r2, $r3;
        int i0, i1;
        androidx.work.Data $r4;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r2 = $r3;

        i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        specialinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableData: void addEntry(android.os.Parcel,java.util.Map)>(r1, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = new androidx.work.Data;

        specialinvoke $r4.<androidx.work.Data: void <init>(java.util.Map)>(r2);

        r0.<androidx.work.multiprocess.parcelable.ParcelableData: androidx.work.Data mData> = $r4;

        return;
    }

    public androidx.work.Data getData()
    {
        androidx.work.multiprocess.parcelable.ParcelableData r0;
        androidx.work.Data $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableData: androidx.work.Data mData>;

        return $r1;
    }

    public int describeContents()
    {
        androidx.work.multiprocess.parcelable.ParcelableData r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.work.multiprocess.parcelable.ParcelableData r0;
        android.os.Parcel r1;
        int i0, $i1;
        java.util.Map r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        androidx.work.Data $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r10;
        java.lang.String $r9;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r5 = r0.<androidx.work.multiprocess.parcelable.ParcelableData: androidx.work.Data mData>;

        r2 = virtualinvoke $r5.<androidx.work.Data: java.util.Map getKeyValueMap()>();

        $i1 = interfaceinvoke r2.<java.util.Map: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        specialinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableData: void writeToParcel(android.os.Parcel,java.lang.String,java.lang.Object)>(r1, $r9, $r10);

        goto label1;

     label2:
        return;
    }

    private void writeToParcel(android.os.Parcel, java.lang.String, java.lang.Object)
    {
        androidx.work.multiprocess.parcelable.ParcelableData r0;
        android.os.Parcel r1;
        java.lang.String r2, $r7, r22, r30;
        java.lang.Object r3;
        java.lang.Class r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.IllegalArgumentException $r9;
        double[] $r10;
        float[] $r11;
        long[] $r12;
        int[] $r13;
        byte[] $r14;
        boolean[] $r15;
        java.lang.Double $r16;
        java.lang.Float $r17;
        long $l0;
        java.lang.Integer $r18;
        java.lang.Byte $r19;
        java.lang.Boolean $r20;
        boolean z0;
        byte b1;
        int i2;
        java.lang.Long r21;
        float f0;
        double d0;
        java.lang.Boolean[] r23;
        java.lang.Byte[] r24;
        java.lang.Integer[] r25;
        java.lang.Long[] r26;
        java.lang.Float[] r27;
        java.lang.Double[] r28;
        java.lang.String[] r29;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        if r3 != null goto label01;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(0);

        goto label16;

     label01:
        r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        if r4 != class "Ljava/lang/Boolean;" goto label02;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(1);

        $r20 = (java.lang.Boolean) r3;

        z0 = virtualinvoke $r20.<java.lang.Boolean: boolean booleanValue()>();

        staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: void writeBooleanValue(android.os.Parcel,boolean)>(r1, z0);

        goto label16;

     label02:
        if r4 != class "Ljava/lang/Byte;" goto label03;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(2);

        $r19 = (java.lang.Byte) r3;

        b1 = virtualinvoke $r19.<java.lang.Byte: byte byteValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(b1);

        goto label16;

     label03:
        if r4 != class "Ljava/lang/Integer;" goto label04;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(3);

        $r18 = (java.lang.Integer) r3;

        i2 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i2);

        goto label16;

     label04:
        if r4 != class "Ljava/lang/Long;" goto label05;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(4);

        r21 = (java.lang.Long) r3;

        $l0 = virtualinvoke r21.<java.lang.Long: long longValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l0);

        goto label16;

     label05:
        if r4 != class "Ljava/lang/Float;" goto label06;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(5);

        $r17 = (java.lang.Float) r3;

        f0 = virtualinvoke $r17.<java.lang.Float: float floatValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>(f0);

        goto label16;

     label06:
        if r4 != class "Ljava/lang/Double;" goto label07;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(6);

        $r16 = (java.lang.Double) r3;

        d0 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeDouble(double)>(d0);

        goto label16;

     label07:
        if r4 != class "Ljava/lang/String;" goto label08;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(7);

        r22 = (java.lang.String) r3;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r22);

        goto label16;

     label08:
        if r4 != class "[Ljava/lang/Boolean;" goto label09;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(8);

        r23 = (java.lang.Boolean[]) r3;

        $r15 = staticinvoke <androidx.work.Data: boolean[] convertToPrimitiveArray(java.lang.Boolean[])>(r23);

        virtualinvoke r1.<android.os.Parcel: void writeBooleanArray(boolean[])>($r15);

        goto label16;

     label09:
        if r4 != class "[Ljava/lang/Byte;" goto label10;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(9);

        r24 = (java.lang.Byte[]) r3;

        $r14 = staticinvoke <androidx.work.Data: byte[] convertToPrimitiveArray(java.lang.Byte[])>(r24);

        virtualinvoke r1.<android.os.Parcel: void writeByteArray(byte[])>($r14);

        goto label16;

     label10:
        if r4 != class "[Ljava/lang/Integer;" goto label11;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(10);

        r25 = (java.lang.Integer[]) r3;

        $r13 = staticinvoke <androidx.work.Data: int[] convertToPrimitiveArray(java.lang.Integer[])>(r25);

        virtualinvoke r1.<android.os.Parcel: void writeIntArray(int[])>($r13);

        goto label16;

     label11:
        if r4 != class "[Ljava/lang/Long;" goto label12;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(11);

        r26 = (java.lang.Long[]) r3;

        $r12 = staticinvoke <androidx.work.Data: long[] convertToPrimitiveArray(java.lang.Long[])>(r26);

        virtualinvoke r1.<android.os.Parcel: void writeLongArray(long[])>($r12);

        goto label16;

     label12:
        if r4 != class "[Ljava/lang/Float;" goto label13;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(12);

        r27 = (java.lang.Float[]) r3;

        $r11 = staticinvoke <androidx.work.Data: float[] convertToPrimitiveArray(java.lang.Float[])>(r27);

        virtualinvoke r1.<android.os.Parcel: void writeFloatArray(float[])>($r11);

        goto label16;

     label13:
        if r4 != class "[Ljava/lang/Double;" goto label14;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(13);

        r28 = (java.lang.Double[]) r3;

        $r10 = staticinvoke <androidx.work.Data: double[] convertToPrimitiveArray(java.lang.Double[])>(r28);

        virtualinvoke r1.<android.os.Parcel: void writeDoubleArray(double[])>($r10);

        goto label16;

     label14:
        if r4 != class "[Ljava/lang/String;" goto label15;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>(14);

        r29 = (java.lang.String[]) r3;

        virtualinvoke r1.<android.os.Parcel: void writeStringArray(java.lang.String[])>(r29);

        goto label16;

     label15:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported value type ");

        $r7 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r30 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r30);

        throw $r9;

     label16:
        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r2);

        return;
    }

    private void addEntry(android.os.Parcel, java.util.Map)
    {
        androidx.work.multiprocess.parcelable.ParcelableData r0;
        android.os.Parcel r1;
        java.util.Map r2;
        byte b0, $b3;
        double[] $r4;
        float[] $r5;
        long[] $r6;
        int[] $r7;
        byte[] $r8;
        boolean[] $r9;
        double $d0;
        float $f0;
        long $l1;
        int $i2;
        boolean $z0;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.IllegalStateException $r13;
        java.lang.Object r14;
        java.lang.String r15, r16;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: java.util.Map;

        b0 = virtualinvoke r1.<android.os.Parcel: byte readByte()>();

        r14 = null;

        tableswitch(b0)
        {
            case 0: goto label01;
            case 1: goto label03;
            case 2: goto label02;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label12;
            case 12: goto label13;
            case 13: goto label14;
            case 14: goto label15;
            default: goto label16;
        };

     label01:
        goto label17;

     label02:
        $b3 = virtualinvoke r1.<android.os.Parcel: byte readByte()>();

        r14 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        goto label17;

     label03:
        $z0 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: boolean readBooleanValue(android.os.Parcel)>(r1);

        r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        goto label17;

     label04:
        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        goto label17;

     label05:
        $l1 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        goto label17;

     label06:
        $f0 = virtualinvoke r1.<android.os.Parcel: float readFloat()>();

        r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        goto label17;

     label07:
        $d0 = virtualinvoke r1.<android.os.Parcel: double readDouble()>();

        r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        goto label17;

     label08:
        r14 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        goto label17;

     label09:
        $r9 = virtualinvoke r1.<android.os.Parcel: boolean[] createBooleanArray()>();

        r14 = staticinvoke <androidx.work.Data: java.lang.Boolean[] convertPrimitiveBooleanArray(boolean[])>($r9);

        goto label17;

     label10:
        $r8 = virtualinvoke r1.<android.os.Parcel: byte[] createByteArray()>();

        r14 = staticinvoke <androidx.work.Data: java.lang.Byte[] convertPrimitiveByteArray(byte[])>($r8);

        goto label17;

     label11:
        $r7 = virtualinvoke r1.<android.os.Parcel: int[] createIntArray()>();

        r14 = staticinvoke <androidx.work.Data: java.lang.Integer[] convertPrimitiveIntArray(int[])>($r7);

        goto label17;

     label12:
        $r6 = virtualinvoke r1.<android.os.Parcel: long[] createLongArray()>();

        r14 = staticinvoke <androidx.work.Data: java.lang.Long[] convertPrimitiveLongArray(long[])>($r6);

        goto label17;

     label13:
        $r5 = virtualinvoke r1.<android.os.Parcel: float[] createFloatArray()>();

        r14 = staticinvoke <androidx.work.Data: java.lang.Float[] convertPrimitiveFloatArray(float[])>($r5);

        goto label17;

     label14:
        $r4 = virtualinvoke r1.<android.os.Parcel: double[] createDoubleArray()>();

        r14 = staticinvoke <androidx.work.Data: java.lang.Double[] convertPrimitiveDoubleArray(double[])>($r4);

        goto label17;

     label15:
        r14 = virtualinvoke r1.<android.os.Parcel: java.lang.String[] createStringArray()>();

        goto label17;

     label16:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported type ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);

        r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r15);

        throw $r13;

     label17:
        r16 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r14);

        return;
    }

    static void <clinit>()
    {
        androidx.work.multiprocess.parcelable.ParcelableData$1 $r0;

        $r0 = new androidx.work.multiprocess.parcelable.ParcelableData$1;

        specialinvoke $r0.<androidx.work.multiprocess.parcelable.ParcelableData$1: void <init>()>();

        <androidx.work.multiprocess.parcelable.ParcelableData: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

androidx.work.multiprocess.parcelable.ParcelableData$1
    void <init>()
    {
        androidx.work.multiprocess.parcelable.ParcelableData$1 r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.work.multiprocess.parcelable.ParcelableData createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableData$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableData $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = new androidx.work.multiprocess.parcelable.ParcelableData;

        specialinvoke $r2.<androidx.work.multiprocess.parcelable.ParcelableData: void <init>(android.os.Parcel)>(r1);

        return $r2;
    }

    public androidx.work.multiprocess.parcelable.ParcelableData[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableData$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableData[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.work.multiprocess.parcelable.ParcelableData)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableData$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableData[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableData$1: androidx.work.multiprocess.parcelable.ParcelableData[] newArray(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableData$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableData $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableData$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableData$1: androidx.work.multiprocess.parcelable.ParcelableData createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

