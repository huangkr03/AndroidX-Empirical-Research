androidx.security.identity.CredentialData
<androidx.security.identity.CredentialData: java.lang.String TAG>
<androidx.security.identity.CredentialData: android.content.Context mContext>
<androidx.security.identity.CredentialData: java.lang.String mCredentialName>
<androidx.security.identity.CredentialData: java.lang.String mDocType>
<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias>
<androidx.security.identity.CredentialData: java.util.Collection mCertificateChain>
<androidx.security.identity.CredentialData: byte[] mProofOfProvisioningSha256>
<androidx.security.identity.CredentialData: java.util.AbstractList mAccessControlProfiles>
<androidx.security.identity.CredentialData: java.util.AbstractMap mProfileIdToAcpMap>
<androidx.security.identity.CredentialData: java.util.AbstractList mNamespaceDatas>
<androidx.security.identity.CredentialData: int mAuthKeyCount>
<androidx.security.identity.CredentialData: int mAuthMaxUsesPerKey>
<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias>
<androidx.security.identity.CredentialData: java.util.AbstractMap mAcpTimeoutKeyAliases>
<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>
    private void <init>(android.content.Context, java.lang.String)
    {
        androidx.security.identity.CredentialData r0;
        android.content.Context r1;
        java.lang.String r2;
        java.util.ArrayList $r3, $r5, $r6;
        java.util.HashMap $r4;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.lang.String mDocType> = "";

        r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias> = "";

        r0.<androidx.security.identity.CredentialData: java.util.Collection mCertificateChain> = null;

        r0.<androidx.security.identity.CredentialData: byte[] mProofOfProvisioningSha256> = null;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAccessControlProfiles> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.AbstractMap mProfileIdToAcpMap> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.AbstractList mNamespaceDatas> = $r5;

        r0.<androidx.security.identity.CredentialData: int mAuthKeyCount> = 0;

        r0.<androidx.security.identity.CredentialData: int mAuthMaxUsesPerKey> = 1;

        r0.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias> = "";

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas> = $r6;

        r0.<androidx.security.identity.CredentialData: android.content.Context mContext> = r1;

        r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialName> = r2;

        return;
    }

    void deleteKeysForReplacement()
    {
        androidx.security.identity.CredentialData r0;
        java.security.KeyStore r1;
        java.lang.String $r2, $r7, $r8, $r9, $r10, $r12, r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.AbstractMap $r3;
        java.util.Collection $r4;
        java.util.AbstractList $r5;
        java.lang.Object $r6, $r11;
        java.lang.Throwable $r13, $r15, r17, r22;
        java.lang.RuntimeException $r14, $r16;
        java.util.Iterator r18, r20;
        androidx.security.identity.CredentialData$AuthKeyData r21;

        r0 := @this: androidx.security.identity.CredentialData;

     label01:
        r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r1.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

     label02:
        goto label04;

     label03:
        $r13 := @caughtexception;

        r17 = $r13;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error loading keystore", r17);

        throw $r14;

     label04:
        $r2 = r0.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label05;

        $r12 = r0.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias>;

        virtualinvoke r1.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r12);

     label05:
        $r3 = r0.<androidx.security.identity.CredentialData: java.util.AbstractMap mAcpTimeoutKeyAliases>;

        $r4 = virtualinvoke $r3.<java.util.AbstractMap: java.util.Collection values()>();

        r18 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z4 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label07;

        $r11 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r11;

        virtualinvoke r1.<java.security.KeyStore: void deleteEntry(java.lang.String)>(r19);

        goto label06;

     label07:
        $r5 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        r20 = virtualinvoke $r5.<java.util.AbstractList: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r6 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (androidx.security.identity.CredentialData$AuthKeyData) $r6;

        $r7 = r21.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label09;

        $r10 = r21.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        virtualinvoke r1.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r10);

     label09:
        $r8 = r21.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        $z3 = virtualinvoke $r8.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label10;

        $r9 = r21.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        virtualinvoke r1.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r9);

     label10:
        goto label08;

     label11:
        goto label13;

     label12:
        $r15 := @caughtexception;

        r22 = $r15;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error deleting key", r22);

        throw $r16;

     label13:
        return;

        catch java.security.cert.CertificateException from label01 to label02 with label03;
        catch java.io.IOException from label01 to label02 with label03;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label03;
        catch java.security.KeyStoreException from label01 to label02 with label03;
        catch java.security.KeyStoreException from label04 to label11 with label12;
    }

    static androidx.security.identity.CredentialData createCredentialData(android.content.Context, java.lang.String, java.lang.String, java.lang.String, java.util.Collection, androidx.security.identity.PersonalizationData, byte[], boolean)
    {
        android.content.Context r0;
        java.lang.String r1, r2, r3;
        java.util.Collection r4, $r11, $r14, $r16;
        androidx.security.identity.PersonalizationData r5;
        byte[] r6;
        boolean z0, z1, $z3, $z5, $z6;
        androidx.security.identity.CredentialData r7, $r8;
        long l0;
        java.util.ArrayList $r9, $r12;
        java.util.HashMap $r10, $r15;
        java.util.AbstractList $r13, $r19;
        java.lang.Object $r17, $r18;
        java.util.AbstractMap $r20;
        androidx.security.identity.AccessControlProfileId $r21;
        int $i1;
        java.lang.Integer $r22;
        java.lang.RuntimeException $r24;
        java.util.Iterator r25, r27;
        androidx.security.identity.AccessControlProfile r26, r28;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.util.Collection;

        r5 := @parameter5: androidx.security.identity.PersonalizationData;

        r6 := @parameter6: byte[];

        z0 := @parameter7: boolean;

        if z0 != 0 goto label1;

        $z5 = staticinvoke <androidx.security.identity.CredentialData: boolean credentialAlreadyExists(android.content.Context,java.lang.String)>(r0, r2);

        if $z5 == 0 goto label1;

        $r24 = new java.lang.RuntimeException;

        specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.String)>("Credential with given name already exists");

        throw $r24;

     label1:
        $r8 = new androidx.security.identity.CredentialData;

        specialinvoke $r8.<androidx.security.identity.CredentialData: void <init>(android.content.Context,java.lang.String)>(r0, r2);

        r7 = $r8;

        r7.<androidx.security.identity.CredentialData: java.lang.String mDocType> = r1;

        r7.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias> = r3;

        r7.<androidx.security.identity.CredentialData: java.util.Collection mCertificateChain> = r4;

        r7.<androidx.security.identity.CredentialData: byte[] mProofOfProvisioningSha256> = r6;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r7.<androidx.security.identity.CredentialData: java.util.AbstractList mAccessControlProfiles> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r7.<androidx.security.identity.CredentialData: java.util.AbstractMap mProfileIdToAcpMap> = $r10;

        $r11 = virtualinvoke r5.<androidx.security.identity.PersonalizationData: java.util.Collection getAccessControlProfiles()>();

        r25 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z6 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label3;

        $r18 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (androidx.security.identity.AccessControlProfile) $r18;

        $r19 = r7.<androidx.security.identity.CredentialData: java.util.AbstractList mAccessControlProfiles>;

        virtualinvoke $r19.<java.util.AbstractList: boolean add(java.lang.Object)>(r26);

        $r20 = r7.<androidx.security.identity.CredentialData: java.util.AbstractMap mProfileIdToAcpMap>;

        $r21 = virtualinvoke r26.<androidx.security.identity.AccessControlProfile: androidx.security.identity.AccessControlProfileId getAccessControlProfileId()>();

        $i1 = virtualinvoke $r21.<androidx.security.identity.AccessControlProfileId: int getId()>();

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r20.<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, r26);

        goto label2;

     label3:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r7.<androidx.security.identity.CredentialData: java.util.AbstractList mNamespaceDatas> = $r12;

        $r13 = r7.<androidx.security.identity.CredentialData: java.util.AbstractList mNamespaceDatas>;

        $r14 = virtualinvoke r5.<androidx.security.identity.PersonalizationData: java.util.Collection getNamespaceDatas()>();

        virtualinvoke $r13.<java.util.AbstractList: boolean addAll(java.util.Collection)>($r14);

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r7.<androidx.security.identity.CredentialData: java.util.AbstractMap mAcpTimeoutKeyAliases> = $r15;

        $r16 = virtualinvoke r5.<androidx.security.identity.PersonalizationData: java.util.Collection getAccessControlProfiles()>();

        r27 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r17 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (androidx.security.identity.AccessControlProfile) $r17;

        z1 = virtualinvoke r28.<androidx.security.identity.AccessControlProfile: boolean isUserAuthenticationRequired()>();

        l0 = virtualinvoke r28.<androidx.security.identity.AccessControlProfile: long getUserAuthenticationTimeout()>();

        if z1 == 0 goto label5;

        staticinvoke <androidx.security.identity.CredentialData: void ensurePerReaderSessionKey(java.lang.String,androidx.security.identity.CredentialData)>(r2, r7);

        staticinvoke <androidx.security.identity.CredentialData: void ensureAcpTimoutKeyForProfile(java.lang.String,androidx.security.identity.CredentialData,androidx.security.identity.AccessControlProfile,long)>(r2, r7, r28, l0);

     label5:
        goto label4;

     label6:
        specialinvoke r7.<androidx.security.identity.CredentialData: void createDataEncryptionKey()>();

        specialinvoke r7.<androidx.security.identity.CredentialData: void saveToDisk()>();

        return r7;
    }

    static boolean credentialAlreadyExists(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1, r2;
        android.util.AtomicFile r3, $r5;
        java.lang.Throwable r4, $r8;
        java.io.File $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getFilenameForCredentialData(java.lang.String)>(r1);

        $r5 = new android.util.AtomicFile;

        $r6 = virtualinvoke r0.<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>(r2);

        specialinvoke $r5.<android.util.AtomicFile: void <init>(java.io.File)>($r6);

        r3 = $r5;

     label1:
        virtualinvoke r3.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        return 0;

     label4:
        return 1;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    private static void ensurePerReaderSessionKey(java.lang.String, androidx.security.identity.CredentialData)
    {
        java.lang.String r0, $r3, $r4, $r6;
        androidx.security.identity.CredentialData r1;
        android.security.keystore.KeyGenParameterSpec$Builder r2, $r5, $r8, $r10, $r11, $r12;
        boolean $z0;
        java.lang.String[] $r7, $r9;
        android.security.keystore.KeyGenParameterSpec $r13;
        java.lang.Throwable $r15, r18;
        java.lang.RuntimeException $r16;
        javax.crypto.KeyGenerator r17;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.security.identity.CredentialData;

        $r3 = r1.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getAcpKeyAliasFromCredentialName(java.lang.String)>(r0);

        r1.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias> = $r4;

     label2:
        r17 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>("AES", "AndroidKeyStore");

        $r5 = new android.security.keystore.KeyGenParameterSpec$Builder;

        $r6 = r1.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias>;

        specialinvoke $r5.<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(java.lang.String,int)>($r6, 3);

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "GCM";

        $r8 = virtualinvoke $r5.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setBlockModes(java.lang.String[])>($r7);

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = "NoPadding";

        $r10 = virtualinvoke $r8.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setEncryptionPaddings(java.lang.String[])>($r9);

        $r11 = virtualinvoke $r10.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeySize(int)>(128);

        $r12 = virtualinvoke $r11.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationRequired(boolean)>(1);

        r2 = virtualinvoke $r12.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationValidityDurationSeconds(int)>(-1);

        $r13 = virtualinvoke r2.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()>();

        virtualinvoke r17.<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec)>($r13);

        virtualinvoke r17.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        r18 = $r15;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating ACP auth-bound key", r18);

        throw $r16;

     label5:
        return;

        catch java.security.InvalidAlgorithmParameterException from label2 to label3 with label4;
        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
        catch java.security.NoSuchProviderException from label2 to label3 with label4;
    }

    private static void ensureAcpTimoutKeyForProfile(java.lang.String, androidx.security.identity.CredentialData, androidx.security.identity.AccessControlProfile, long)
    {
        java.lang.String r0, r3;
        androidx.security.identity.CredentialData r1;
        androidx.security.identity.AccessControlProfile r2;
        long l0, $l3;
        int i1, i4;
        javax.crypto.KeyGenerator r4;
        android.security.keystore.KeyGenParameterSpec$Builder r5, $r7, $r9, $r11, $r12, $r13;
        byte $b2;
        androidx.security.identity.AccessControlProfileId $r6;
        java.lang.String[] $r8, $r10;
        android.security.keystore.KeyGenParameterSpec $r14;
        java.util.AbstractMap $r16;
        java.lang.Integer $r17;
        java.lang.Throwable $r19, r21;
        java.lang.RuntimeException $r20;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.security.identity.CredentialData;

        r2 := @parameter2: androidx.security.identity.AccessControlProfile;

        l0 := @parameter3: long;

        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label5;

        $r6 = virtualinvoke r2.<androidx.security.identity.AccessControlProfile: androidx.security.identity.AccessControlProfileId getAccessControlProfileId()>();

        i1 = virtualinvoke $r6.<androidx.security.identity.AccessControlProfileId: int getId()>();

        r3 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getAcpTimeoutKeyAliasFromCredentialName(java.lang.String,int)>(r0, i1);

     label1:
        $l3 = l0 / 1000L;

        i4 = (int) $l3;

        r4 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>("AES", "AndroidKeyStore");

        $r7 = new android.security.keystore.KeyGenParameterSpec$Builder;

        specialinvoke $r7.<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(java.lang.String,int)>(r3, 3);

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "GCM";

        $r9 = virtualinvoke $r7.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setBlockModes(java.lang.String[])>($r8);

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "NoPadding";

        $r11 = virtualinvoke $r9.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setEncryptionPaddings(java.lang.String[])>($r10);

        $r12 = virtualinvoke $r11.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationRequired(boolean)>(1);

        $r13 = virtualinvoke $r12.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationValidityDurationSeconds(int)>(i4);

        r5 = virtualinvoke $r13.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeySize(int)>(128);

        $r14 = virtualinvoke r5.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()>();

        virtualinvoke r4.<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec)>($r14);

        virtualinvoke r4.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

        r21 = $r19;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating ACP auth-bound timeout key", r21);

        throw $r20;

     label4:
        $r16 = r1.<androidx.security.identity.CredentialData: java.util.AbstractMap mAcpTimeoutKeyAliases>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r16.<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r3);

     label5:
        return;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.NoSuchProviderException from label1 to label2 with label3;
    }

    static androidx.security.identity.CredentialData loadCredentialData(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1, r3;
        androidx.security.identity.CredentialData r2, $r4;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r4 = new androidx.security.identity.CredentialData;

        specialinvoke $r4.<androidx.security.identity.CredentialData: void <init>(android.content.Context,java.lang.String)>(r0, r1);

        r2 = $r4;

        r3 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getDataKeyAliasFromCredentialName(java.lang.String)>(r1);

        $z0 = specialinvoke r2.<androidx.security.identity.CredentialData: boolean loadFromDisk(java.lang.String)>(r3);

        if $z0 != 0 goto label1;

        return null;

     label1:
        return r2;
    }

    static java.lang.String escapeCredentialName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r7, $r9;
        java.lang.Throwable r2, $r10;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8;
        java.lang.RuntimeException $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("identity_credential_");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r7 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(r1, "UTF-8");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected UnsupportedEncodingException", r2);

        throw $r11;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    static java.lang.String getFilenameForCredentialData(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String escapeCredentialName(java.lang.String,java.lang.String)>("data", r0);

        return $r1;
    }

    static java.lang.String getAliasFromCredentialName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String escapeCredentialName(java.lang.String,java.lang.String)>("credkey", r0);

        return $r1;
    }

    static java.lang.String getDataKeyAliasFromCredentialName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String escapeCredentialName(java.lang.String,java.lang.String)>("datakey", r0);

        return $r1;
    }

    static java.lang.String getAcpTimeoutKeyAliasFromCredentialName(java.lang.String, int)
    {
        java.lang.String r0, $r4, $r5;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("acp_timeout_for_id");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String escapeCredentialName(java.lang.String,java.lang.String)>($r4, r0);

        return $r5;
    }

    static java.lang.String getAcpKeyAliasFromCredentialName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String escapeCredentialName(java.lang.String,java.lang.String)>("acp", r0);

        return $r1;
    }

    java.security.PrivateKey getCredentialKeyPrivate()
    {
        androidx.security.identity.CredentialData r0;
        java.security.KeyStore r1;
        java.security.KeyStore$Entry r2;
        java.lang.Throwable r3, $r7;
        java.lang.String $r4;
        java.security.KeyStore$PrivateKeyEntry $r5;
        java.security.PrivateKey $r6;
        java.lang.RuntimeException $r8;

        r0 := @this: androidx.security.identity.CredentialData;

     label1:
        r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r1.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $r4 = r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias>;

        r2 = virtualinvoke r1.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>($r4, null);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error loading keystore", r3);

        throw $r8;

     label4:
        $r5 = (java.security.KeyStore$PrivateKeyEntry) r2;

        $r6 = virtualinvoke $r5.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();

        return $r6;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label3;
        catch java.security.UnrecoverableEntryException from label1 to label2 with label3;
    }

    byte[] proveOwnership(byte[])
    {
        androidx.security.identity.CredentialData r0;
        byte[] r1, r4, r6;
        java.security.PrivateKey r2;
        co.nstant.in.cbor.CborBuilder r3, $r7;
        co.nstant.in.cbor.CborEncoder r5, $r15;
        co.nstant.in.cbor.builder.ArrayBuilder $r8, $r9, $r11, $r12;
        java.lang.String $r10;
        java.io.ByteArrayOutputStream $r14, r22;
        java.util.List $r16;
        java.lang.Object $r17;
        co.nstant.in.cbor.model.DataItem $r18, $r19;
        java.lang.Throwable $r20, r23;
        java.lang.RuntimeException $r21;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: byte[];

        r2 = virtualinvoke r0.<androidx.security.identity.CredentialData: java.security.PrivateKey getCredentialKeyPrivate()>();

        $r7 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r7.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r3 = $r7;

        $r8 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        $r9 = virtualinvoke $r8.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>("ProofOfOwnership");

        $r10 = r0.<androidx.security.identity.CredentialData: java.lang.String mDocType>;

        $r11 = virtualinvoke $r9.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r1);

        virtualinvoke $r12.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(boolean)>(0);

     label1:
        $r14 = new java.io.ByteArrayOutputStream;

        specialinvoke $r14.<java.io.ByteArrayOutputStream: void <init>()>();

        r22 = $r14;

        $r15 = new co.nstant.in.cbor.CborEncoder;

        specialinvoke $r15.<co.nstant.in.cbor.CborEncoder: void <init>(java.io.OutputStream)>(r22);

        r5 = $r15;

        $r16 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        $r18 = (co.nstant.in.cbor.model.DataItem) $r17;

        virtualinvoke r5.<co.nstant.in.cbor.CborEncoder: void encode(co.nstant.in.cbor.model.DataItem)>($r18);

        r6 = virtualinvoke r22.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r19 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem coseSign1Sign(java.security.PrivateKey,byte[],byte[],java.util.Collection)>(r2, r6, null, null);

        r4 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r19);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        r23 = $r20;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error building ProofOfOwnership", r23);

        throw $r21;

     label4:
        return r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
        catch co.nstant.in.cbor.CborException from label1 to label2 with label3;
    }

    static byte[] buildProofOfDeletionSignature(java.lang.String, java.security.PrivateKey, byte[])
    {
        java.lang.String r0;
        java.security.PrivateKey r1;
        byte[] r2, r5, r7;
        co.nstant.in.cbor.CborBuilder r3, $r8;
        co.nstant.in.cbor.builder.ArrayBuilder r4, $r9;
        co.nstant.in.cbor.CborEncoder r6, $r13;
        java.io.ByteArrayOutputStream $r12, r21;
        java.util.List $r14;
        java.lang.Object $r15;
        co.nstant.in.cbor.model.DataItem $r16, $r17;
        java.lang.Throwable $r19, r22;
        java.lang.RuntimeException $r20;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.PrivateKey;

        r2 := @parameter2: byte[];

        $r8 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r8.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r3 = $r8;

        r4 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.ArrayBuilder addArray()>();

        $r9 = virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>("ProofOfDeletion");

        virtualinvoke $r9.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(java.lang.String)>(r0);

        if r2 == null goto label1;

        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>(r2);

     label1:
        virtualinvoke r4.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(boolean)>(0);

     label2:
        $r12 = new java.io.ByteArrayOutputStream;

        specialinvoke $r12.<java.io.ByteArrayOutputStream: void <init>()>();

        r21 = $r12;

        $r13 = new co.nstant.in.cbor.CborEncoder;

        specialinvoke $r13.<co.nstant.in.cbor.CborEncoder: void <init>(java.io.OutputStream)>(r21);

        r6 = $r13;

        $r14 = virtualinvoke r3.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (co.nstant.in.cbor.model.DataItem) $r15;

        virtualinvoke r6.<co.nstant.in.cbor.CborEncoder: void encode(co.nstant.in.cbor.model.DataItem)>($r16);

        r7 = virtualinvoke r21.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r17 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem coseSign1Sign(java.security.PrivateKey,byte[],byte[],java.util.Collection)>(r1, r7, null, null);

        r5 = staticinvoke <androidx.security.identity.Util: byte[] cborEncode(co.nstant.in.cbor.model.DataItem)>($r17);

     label3:
        goto label5;

     label4:
        $r19 := @caughtexception;

        r22 = $r19;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error building ProofOfDeletion", r22);

        throw $r20;

     label5:
        return r5;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
        catch java.security.InvalidKeyException from label2 to label3 with label4;
        catch java.security.cert.CertificateEncodingException from label2 to label3 with label4;
        catch co.nstant.in.cbor.CborException from label2 to label3 with label4;
    }

    static byte[] delete(android.content.Context, java.lang.String, byte[])
    {
        android.content.Context r0;
        java.lang.String r1, r3, r5, $r11, $r13, $r15, $r16, $r21, $r22, $r23, $r24, $r26, r40;
        byte[] r2, r38;
        android.util.AtomicFile r4, $r7;
        java.security.KeyStore$Entry r6;
        java.io.File $r8;
        androidx.security.identity.CredentialData $r10, r34;
        java.security.KeyStore$PrivateKeyEntry $r12;
        java.security.PrivateKey $r14;
        boolean $z1, $z2, $z3, $z4, $z5;
        java.util.AbstractMap $r17;
        java.util.Collection $r18;
        java.util.AbstractList $r19;
        java.lang.Object $r20, $r25;
        java.lang.Throwable $r27, $r29, $r30, $r31, r33, r35, r37, r43;
        java.lang.RuntimeException $r28, $r32;
        java.security.KeyStore r36;
        java.util.Iterator r39, r41;
        androidx.security.identity.CredentialData$AuthKeyData r42;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        r3 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getFilenameForCredentialData(java.lang.String)>(r1);

        $r7 = new android.util.AtomicFile;

        $r8 = virtualinvoke r0.<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>(r3);

        specialinvoke $r7.<android.util.AtomicFile: void <init>(java.io.File)>($r8);

        r4 = $r7;

     label01:
        virtualinvoke r4.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        goto label04;

     label03:
        $r29 := @caughtexception;

        r33 = $r29;

        return null;

     label04:
        $r10 = new androidx.security.identity.CredentialData;

        specialinvoke $r10.<androidx.security.identity.CredentialData: void <init>(android.content.Context,java.lang.String)>(r0, r1);

        r34 = $r10;

        r5 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getDataKeyAliasFromCredentialName(java.lang.String)>(r1);

     label05:
        specialinvoke r34.<androidx.security.identity.CredentialData: boolean loadFromDisk(java.lang.String)>(r5);

     label06:
        goto label08;

     label07:
        $r30 := @caughtexception;

        r35 = $r30;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CredentialData", "Error parsing file on disk (old version?). Deleting anyway.");

        virtualinvoke r4.<android.util.AtomicFile: void delete()>();

        return null;

     label08:
        r36 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r36.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $r11 = r34.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias>;

        r6 = virtualinvoke r36.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>($r11, null);

     label09:
        goto label11;

     label10:
        $r31 := @caughtexception;

        r37 = $r31;

        $r32 = new java.lang.RuntimeException;

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error loading keystore", r37);

        throw $r32;

     label11:
        $r13 = r34.<androidx.security.identity.CredentialData: java.lang.String mDocType>;

        $r12 = (java.security.KeyStore$PrivateKeyEntry) r6;

        $r14 = virtualinvoke $r12.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();

        r38 = staticinvoke <androidx.security.identity.CredentialData: byte[] buildProofOfDeletionSignature(java.lang.String,java.security.PrivateKey,byte[])>($r13, $r14, r2);

        virtualinvoke r4.<android.util.AtomicFile: void delete()>();

     label12:
        $r15 = r34.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias>;

        virtualinvoke r36.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r15);

        $r16 = r34.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias>;

        $z1 = virtualinvoke $r16.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label13;

        $r26 = r34.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias>;

        virtualinvoke r36.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r26);

     label13:
        $r17 = r34.<androidx.security.identity.CredentialData: java.util.AbstractMap mAcpTimeoutKeyAliases>;

        $r18 = virtualinvoke $r17.<java.util.AbstractMap: java.util.Collection values()>();

        r39 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();

     label14:
        $z5 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label15;

        $r25 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.lang.String) $r25;

        virtualinvoke r36.<java.security.KeyStore: void deleteEntry(java.lang.String)>(r40);

        goto label14;

     label15:
        $r19 = r34.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        r41 = virtualinvoke $r19.<java.util.AbstractList: java.util.Iterator iterator()>();

     label16:
        $z2 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label19;

        $r20 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();

        r42 = (androidx.security.identity.CredentialData$AuthKeyData) $r20;

        $r21 = r42.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $z3 = virtualinvoke $r21.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label17;

        $r24 = r42.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        virtualinvoke r36.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r24);

     label17:
        $r22 = r42.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        $z4 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label18;

        $r23 = r42.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        virtualinvoke r36.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r23);

     label18:
        goto label16;

     label19:
        goto label21;

     label20:
        $r27 := @caughtexception;

        r43 = $r27;

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error deleting key", r43);

        throw $r28;

     label21:
        return r38;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch java.lang.RuntimeException from label05 to label06 with label07;
        catch java.security.cert.CertificateException from label08 to label09 with label10;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label10;
        catch java.security.KeyStoreException from label08 to label09 with label10;
        catch java.security.UnrecoverableEntryException from label08 to label09 with label10;
        catch java.security.KeyStoreException from label12 to label19 with label20;
    }

    private void createDataEncryptionKey()
    {
        androidx.security.identity.CredentialData r0;
        javax.crypto.KeyGenerator r1;
        android.security.keystore.KeyGenParameterSpec$Builder r2, $r4, $r6, $r8;
        java.lang.String $r3, r13;
        java.lang.String[] $r5, $r7;
        android.security.keystore.KeyGenParameterSpec $r9;
        java.lang.Throwable $r11, r14;
        java.lang.RuntimeException $r12;

        r0 := @this: androidx.security.identity.CredentialData;

     label1:
        $r3 = r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialName>;

        r13 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getDataKeyAliasFromCredentialName(java.lang.String)>($r3);

        r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>("AES", "AndroidKeyStore");

        $r4 = new android.security.keystore.KeyGenParameterSpec$Builder;

        specialinvoke $r4.<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(java.lang.String,int)>(r13, 3);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "GCM";

        $r6 = virtualinvoke $r4.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setBlockModes(java.lang.String[])>($r5);

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "NoPadding";

        $r8 = virtualinvoke $r6.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setEncryptionPaddings(java.lang.String[])>($r7);

        r2 = virtualinvoke $r8.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeySize(int)>(128);

        $r9 = virtualinvoke r2.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()>();

        virtualinvoke r1.<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec)>($r9);

        virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r14 = $r11;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating data encryption key", r14);

        throw $r12;

     label4:
        return;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.NoSuchProviderException from label1 to label2 with label3;
    }

    private void saveToDisk()
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.CborBuilder r1, $r8;
        co.nstant.in.cbor.builder.MapBuilder r2;
        byte[] r3, r4;
        java.lang.String r5, $r9;
        android.util.AtomicFile r6, $r10;
        java.lang.Throwable r7, $r13;
        android.content.Context $r11;
        java.io.File $r12;
        java.lang.RuntimeException $r14;
        java.io.FileOutputStream r15;

        r0 := @this: androidx.security.identity.CredentialData;

        $r8 = new co.nstant.in.cbor.CborBuilder;

        specialinvoke $r8.<co.nstant.in.cbor.CborBuilder: void <init>()>();

        r1 = $r8;

        r2 = virtualinvoke r1.<co.nstant.in.cbor.CborBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        specialinvoke r0.<androidx.security.identity.CredentialData: void saveToDiskBasic(co.nstant.in.cbor.builder.MapBuilder)>(r2);

        specialinvoke r0.<androidx.security.identity.CredentialData: void saveToDiskAuthDatas(co.nstant.in.cbor.builder.MapBuilder)>(r2);

        specialinvoke r0.<androidx.security.identity.CredentialData: void saveToDiskACPs(co.nstant.in.cbor.builder.MapBuilder)>(r2);

        specialinvoke r0.<androidx.security.identity.CredentialData: void saveToDiskNamespaceDatas(co.nstant.in.cbor.builder.MapBuilder)>(r2);

        specialinvoke r0.<androidx.security.identity.CredentialData: void saveToDiskAuthKeys(co.nstant.in.cbor.builder.MapBuilder)>(r2);

        r3 = specialinvoke r0.<androidx.security.identity.CredentialData: byte[] saveToDiskEncode(co.nstant.in.cbor.CborBuilder)>(r1);

        r4 = specialinvoke r0.<androidx.security.identity.CredentialData: byte[] saveToDiskEncrypt(byte[])>(r3);

        $r9 = r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialName>;

        r5 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getFilenameForCredentialData(java.lang.String)>($r9);

        $r10 = new android.util.AtomicFile;

        $r11 = r0.<androidx.security.identity.CredentialData: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>(r5);

        specialinvoke $r10.<android.util.AtomicFile: void <init>(java.io.File)>($r12);

        r6 = $r10;

        r15 = null;

     label1:
        r15 = virtualinvoke r6.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        virtualinvoke r15.<java.io.FileOutputStream: void write(byte[])>(r4);

        virtualinvoke r15.<java.io.FileOutputStream: void close()>();

        virtualinvoke r6.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r15);

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        r7 = $r13;

        if r15 == null goto label4;

        virtualinvoke r6.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r15);

     label4:
        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error writing data", r7);

        throw $r14;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private byte[] saveToDiskEncode(co.nstant.in.cbor.CborBuilder)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.CborBuilder r1;
        java.io.ByteArrayOutputStream r2, $r5;
        co.nstant.in.cbor.CborEncoder r3, $r6;
        java.lang.Throwable r4, $r9;
        java.util.List $r7;
        byte[] $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.CborBuilder;

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r2 = $r5;

        $r6 = new co.nstant.in.cbor.CborEncoder;

        specialinvoke $r6.<co.nstant.in.cbor.CborEncoder: void <init>(java.io.OutputStream)>(r2);

        r3 = $r6;

     label1:
        $r7 = virtualinvoke r1.<co.nstant.in.cbor.CborBuilder: java.util.List build()>();

        virtualinvoke r3.<co.nstant.in.cbor.CborEncoder: void encode(java.util.List)>($r7);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r4 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error encoding data", r4);

        throw $r10;

     label4:
        $r8 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r8;

        catch co.nstant.in.cbor.CborException from label1 to label2 with label3;
    }

    private byte[] saveToDiskEncrypt(byte[])
    {
        androidx.security.identity.CredentialData r0;
        byte[] r1, r2, r7, $r11;
        java.lang.String r3, $r9;
        java.security.KeyStore$Entry r4;
        javax.crypto.SecretKey r5;
        javax.crypto.Cipher r6;
        java.nio.ByteBuffer r8;
        java.security.KeyStore$SecretKeyEntry $r10;
        int $i0, $i1;
        java.lang.Throwable $r14, r17;
        java.lang.RuntimeException $r15;
        java.security.KeyStore r16;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: byte[];

     label1:
        r16 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r16.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $r9 = r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialName>;

        r3 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getDataKeyAliasFromCredentialName(java.lang.String)>($r9);

        r4 = virtualinvoke r16.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>(r3, null);

        $r10 = (java.security.KeyStore$SecretKeyEntry) r4;

        r5 = virtualinvoke $r10.<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>();

        r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        virtualinvoke r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r5);

        r7 = virtualinvoke r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1);

        $i0 = lengthof r7;

        $i1 = 12 + $i0;

        r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        $r11 = virtualinvoke r6.<javax.crypto.Cipher: byte[] getIV()>();

        virtualinvoke r8.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r11);

        virtualinvoke r8.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r7);

        r2 = virtualinvoke r8.<java.nio.ByteBuffer: byte[] array()>();

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r17 = $r14;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error encrypting CBOR for saving to disk", r17);

        throw $r15;

     label4:
        return r2;

        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.UnrecoverableEntryException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label3;
    }

    private void saveToDiskAuthKeys(co.nstant.in.cbor.builder.MapBuilder)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.builder.MapBuilder r1, r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int i0;
        java.lang.String r5, $r6;
        java.util.AbstractMap $r8;
        java.util.Set $r9;
        boolean $z0;
        java.lang.Object $r10, $r11, $r13;
        java.lang.Integer $r12;
        co.nstant.in.cbor.model.UnsignedInteger $r14;
        long $l1;
        co.nstant.in.cbor.model.UnicodeString $r15;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.builder.MapBuilder;

        $r6 = r0.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias>;

        virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,java.lang.String)>("perReaderSessionKeyAlias", $r6);

        r2 = virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder putMap(java.lang.String)>("acpTimeoutKeyMap");

        $r8 = r0.<androidx.security.identity.CredentialData: java.util.AbstractMap mAcpTimeoutKeyAliases>;

        $r9 = virtualinvoke $r8.<java.util.AbstractMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.Integer) $r11;

        i0 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (java.lang.String) $r13;

        $r14 = new co.nstant.in.cbor.model.UnsignedInteger;

        $l1 = (long) i0;

        specialinvoke $r14.<co.nstant.in.cbor.model.UnsignedInteger: void <init>(long)>($l1);

        $r15 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r15.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>(r5);

        virtualinvoke r2.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(co.nstant.in.cbor.model.DataItem,co.nstant.in.cbor.model.DataItem)>($r14, $r15);

        goto label1;

     label2:
        return;
    }

    private void saveToDiskNamespaceDatas(co.nstant.in.cbor.builder.MapBuilder)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.builder.MapBuilder r1, r2;
        java.util.Iterator r3;
        androidx.security.identity.PersonalizationData$NamespaceData r4;
        java.util.AbstractList $r5;
        boolean $z0;
        java.lang.Object $r6;
        co.nstant.in.cbor.model.UnicodeString $r7;
        java.lang.String $r8;
        co.nstant.in.cbor.model.DataItem $r9;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.builder.MapBuilder;

        r2 = virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder putMap(java.lang.String)>("namespaceDatas");

        $r5 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mNamespaceDatas>;

        r3 = virtualinvoke $r5.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.security.identity.PersonalizationData$NamespaceData) $r6;

        $r7 = new co.nstant.in.cbor.model.UnicodeString;

        $r8 = virtualinvoke r4.<androidx.security.identity.PersonalizationData$NamespaceData: java.lang.String getNamespaceName()>();

        specialinvoke $r7.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>($r8);

        $r9 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem namespaceDataToCbor(androidx.security.identity.PersonalizationData$NamespaceData)>(r4);

        virtualinvoke r2.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(co.nstant.in.cbor.model.DataItem,co.nstant.in.cbor.model.DataItem)>($r7, $r9);

        goto label1;

     label2:
        return;
    }

    private void saveToDiskACPs(co.nstant.in.cbor.builder.MapBuilder)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.builder.MapBuilder r1;
        co.nstant.in.cbor.builder.ArrayBuilder r2;
        java.util.Iterator r3;
        androidx.security.identity.AccessControlProfile r4;
        java.util.AbstractList $r5;
        boolean $z0;
        java.lang.Object $r6;
        co.nstant.in.cbor.model.DataItem $r7;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.builder.MapBuilder;

        r2 = virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.ArrayBuilder putArray(java.lang.String)>("accessControlProfiles");

        $r5 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAccessControlProfiles>;

        r3 = virtualinvoke $r5.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.security.identity.AccessControlProfile) $r6;

        $r7 = staticinvoke <androidx.security.identity.Util: co.nstant.in.cbor.model.DataItem accessControlProfileToCbor(androidx.security.identity.AccessControlProfile)>(r4);

        virtualinvoke r2.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(co.nstant.in.cbor.model.DataItem)>($r7);

        goto label1;

     label2:
        return;
    }

    private void saveToDiskAuthDatas(co.nstant.in.cbor.builder.MapBuilder)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.builder.MapBuilder r1, $r8, $r10, $r11, $r13, $r15, $r17, $r19, $r20;
        co.nstant.in.cbor.builder.ArrayBuilder r2;
        java.util.Iterator r3;
        androidx.security.identity.CredentialData$AuthKeyData r4;
        java.util.AbstractList $r5;
        boolean $z0;
        java.lang.Object $r6;
        android.icu.util.Calendar $r7, $r22;
        java.lang.String $r9, $r16;
        int $i0;
        long $l1, l2;
        byte[] $r12, $r14, $r18;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.builder.MapBuilder;

        r2 = virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.ArrayBuilder putArray(java.lang.String)>("authKeyDatas");

        $r5 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        r3 = virtualinvoke $r5.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.security.identity.CredentialData$AuthKeyData) $r6;

        l2 = 9223372036854775807L;

        $r7 = r4.<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate>;

        if $r7 == null goto label2;

        $r22 = r4.<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate>;

        l2 = virtualinvoke $r22.<android.icu.util.Calendar: long getTimeInMillis()>();

     label2:
        $r8 = virtualinvoke r2.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.MapBuilder addMap()>();

        $r9 = r4.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $r10 = virtualinvoke $r8.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,java.lang.String)>("alias", $r9);

        $i0 = r4.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount>;

        $l1 = (long) $i0;

        $r11 = virtualinvoke $r10.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,long)>("useCount", $l1);

        $r12 = r4.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mCertificate>;

        $r13 = virtualinvoke $r11.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,byte[])>("certificate", $r12);

        $r14 = r4.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mStaticAuthenticationData>;

        $r15 = virtualinvoke $r13.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,byte[])>("staticAuthenticationData", $r14);

        $r16 = r4.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        $r17 = virtualinvoke $r15.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,java.lang.String)>("pendingAlias", $r16);

        $r18 = r4.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate>;

        $r19 = virtualinvoke $r17.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,byte[])>("pendingCertificate", $r18);

        $r20 = virtualinvoke $r19.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,long)>("expirationDateMillis", l2);

        virtualinvoke $r20.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.AbstractBuilder end()>();

        goto label1;

     label3:
        return;
    }

    private void saveToDiskBasic(co.nstant.in.cbor.builder.MapBuilder)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.builder.MapBuilder r1;
        co.nstant.in.cbor.builder.ArrayBuilder r2;
        java.util.Iterator r3;
        java.security.cert.X509Certificate r4;
        java.lang.Throwable r5, $r18;
        java.lang.String $r6, $r8;
        java.util.Collection $r10;
        boolean $z0;
        byte[] $r11, $r16;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Object $r15;
        java.lang.RuntimeException $r19;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.builder.MapBuilder;

        $r6 = r0.<androidx.security.identity.CredentialData: java.lang.String mDocType>;

        virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,java.lang.String)>("docType", $r6);

        $r8 = r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias>;

        virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,java.lang.String)>("credentialKeyAlias", $r8);

        r2 = virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.ArrayBuilder putArray(java.lang.String)>("credentialKeyCertChain");

        $r10 = r0.<androidx.security.identity.CredentialData: java.util.Collection mCertificateChain>;

        r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.security.cert.X509Certificate) $r15;

     label2:
        $r16 = virtualinvoke r4.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        virtualinvoke r2.<co.nstant.in.cbor.builder.ArrayBuilder: co.nstant.in.cbor.builder.ArrayBuilder add(byte[])>($r16);

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        r5 = $r18;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error encoding certificate", r5);

        throw $r19;

     label5:
        goto label1;

     label6:
        $r11 = r0.<androidx.security.identity.CredentialData: byte[] mProofOfProvisioningSha256>;

        virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,byte[])>("proofOfProvisioningSha256", $r11);

        $i0 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        $l1 = (long) $i0;

        virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,long)>("authKeyCount", $l1);

        $i2 = r0.<androidx.security.identity.CredentialData: int mAuthMaxUsesPerKey>;

        $l3 = (long) $i2;

        virtualinvoke r1.<co.nstant.in.cbor.builder.MapBuilder: co.nstant.in.cbor.builder.MapBuilder put(java.lang.String,long)>("authKeyMaxUses", $l3);

        return;

        catch java.security.cert.CertificateEncodingException from label2 to label3 with label4;
    }

    private boolean loadFromDisk(java.lang.String)
    {
        androidx.security.identity.CredentialData r0;
        java.lang.String r1, r2, $r5, $r18;
        java.util.List r3;
        co.nstant.in.cbor.model.Map r4;
        android.util.AtomicFile $r6, r23;
        android.content.Context $r7;
        java.io.File $r8;
        java.io.ByteArrayInputStream $r9, r27;
        co.nstant.in.cbor.CborDecoder $r10;
        int $i0, $i1;
        java.lang.Object $r11, $r12;
        boolean $z0;
        java.lang.RuntimeException $r13, $r14, $r20;
        java.lang.StringBuilder $r15, $r16, $r17;
        java.lang.Throwable $r19, $r21, r25, r28;
        byte[] r22, r24, r26;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialName>;

        r2 = staticinvoke <androidx.security.identity.CredentialData: java.lang.String getFilenameForCredentialData(java.lang.String)>($r5);

        r22 = newarray (byte)[0];

     label01:
        $r6 = new android.util.AtomicFile;

        $r7 = r0.<androidx.security.identity.CredentialData: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>(r2);

        specialinvoke $r6.<android.util.AtomicFile: void <init>(java.io.File)>($r8);

        r23 = $r6;

        r24 = virtualinvoke r23.<android.util.AtomicFile: byte[] readFully()>();

     label02:
        goto label04;

     label03:
        $r21 := @caughtexception;

        r25 = $r21;

        return 0;

     label04:
        r26 = specialinvoke r0.<androidx.security.identity.CredentialData: byte[] loadFromDiskDecrypt(java.lang.String,byte[])>(r1, r24);

     label05:
        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>(r26);

        r27 = $r9;

        $r10 = new co.nstant.in.cbor.CborDecoder;

        specialinvoke $r10.<co.nstant.in.cbor.CborDecoder: void <init>(java.io.InputStream)>(r27);

        r3 = virtualinvoke $r10.<co.nstant.in.cbor.CborDecoder: java.util.List decode()>();

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 == 1 goto label06;

        $r14 = new java.lang.RuntimeException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected 1 item, found ");

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label06:
        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $z0 = $r11 instanceof co.nstant.in.cbor.model.Map;

        if $z0 != 0 goto label07;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Item is not a map");

        throw $r13;

     label07:
        $r12 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (co.nstant.in.cbor.model.Map) $r12;

        specialinvoke r0.<androidx.security.identity.CredentialData: void loadBasic(co.nstant.in.cbor.model.Map)>(r4);

        specialinvoke r0.<androidx.security.identity.CredentialData: void loadCredentialKeyCertChain(co.nstant.in.cbor.model.Map)>(r4);

        specialinvoke r0.<androidx.security.identity.CredentialData: void loadProofOfProvisioningSha256(co.nstant.in.cbor.model.Map)>(r4);

        specialinvoke r0.<androidx.security.identity.CredentialData: void loadAccessControlProfiles(co.nstant.in.cbor.model.Map)>(r4);

        specialinvoke r0.<androidx.security.identity.CredentialData: void loadNamespaceDatas(co.nstant.in.cbor.model.Map)>(r4);

        specialinvoke r0.<androidx.security.identity.CredentialData: void loadAuthKey(co.nstant.in.cbor.model.Map)>(r4);

     label08:
        goto label10;

     label09:
        $r19 := @caughtexception;

        r28 = $r19;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error decoding data", r28);

        throw $r20;

     label10:
        return 1;

        catch java.lang.Exception from label01 to label02 with label03;
        catch co.nstant.in.cbor.CborException from label05 to label08 with label09;
    }

    private byte[] loadFromDiskDecrypt(java.lang.String, byte[])
    {
        androidx.security.identity.CredentialData r0;
        java.lang.String r1;
        byte[] r2, r6, r7, r15;
        java.security.KeyStore$Entry r3;
        javax.crypto.SecretKey r4;
        java.nio.ByteBuffer r5;
        javax.crypto.Cipher r8;
        java.security.KeyStore$SecretKeyEntry $r9;
        int $i0, $i1, $i2;
        javax.crypto.spec.GCMParameterSpec $r10;
        java.lang.RuntimeException $r11, $r13;
        java.lang.Throwable $r12, r16;
        java.security.KeyStore r14;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

     label1:
        r14 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r14.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        r3 = virtualinvoke r14.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>(r1, null);

        $r9 = (java.security.KeyStore$SecretKeyEntry) r3;

        r4 = virtualinvoke $r9.<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>();

        $i0 = lengthof r2;

        if $i0 >= 12 goto label2;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Encrypted CBOR on disk is too small");

        throw $r11;

     label2:
        r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r2);

        r6 = newarray (byte)[12];

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r6);

        $i1 = lengthof r2;

        $i2 = $i1 - 12;

        r7 = newarray (byte)[$i2];

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r7);

        r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        $r10 = new javax.crypto.spec.GCMParameterSpec;

        specialinvoke $r10.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(128, r6);

        virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r4, $r10);

        r15 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r7);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r16 = $r12;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error decrypting CBOR", r16);

        throw $r13;

     label5:
        return r15;

        catch java.security.InvalidAlgorithmParameterException from label1 to label3 with label4;
        catch javax.crypto.NoSuchPaddingException from label1 to label3 with label4;
        catch javax.crypto.BadPaddingException from label1 to label3 with label4;
        catch java.security.NoSuchAlgorithmException from label1 to label3 with label4;
        catch java.security.cert.CertificateException from label1 to label3 with label4;
        catch java.security.InvalidKeyException from label1 to label3 with label4;
        catch java.io.IOException from label1 to label3 with label4;
        catch javax.crypto.IllegalBlockSizeException from label1 to label3 with label4;
        catch java.security.UnrecoverableEntryException from label1 to label3 with label4;
        catch java.security.KeyStoreException from label1 to label3 with label4;
    }

    private void loadBasic(co.nstant.in.cbor.model.Map)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.model.Map r1;
        co.nstant.in.cbor.model.UnicodeString $r2, $r4, $r6, $r8;
        co.nstant.in.cbor.model.DataItem $r3, $r7;
        java.lang.String $r5, $r9;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.model.Map;

        $r2 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r2.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("docType");

        $r3 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r2);

        $r4 = (co.nstant.in.cbor.model.UnicodeString) $r3;

        $r5 = virtualinvoke $r4.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        r0.<androidx.security.identity.CredentialData: java.lang.String mDocType> = $r5;

        $r6 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r6.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("credentialKeyAlias");

        $r7 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r6);

        $r8 = (co.nstant.in.cbor.model.UnicodeString) $r7;

        $r9 = virtualinvoke $r8.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias> = $r9;

        return;
    }

    private void loadAuthKey(co.nstant.in.cbor.model.Map)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.model.Map r1, $r11, $r60, r76;
        co.nstant.in.cbor.model.DataItem r2, r3, $r6, $r14, $r18, $r28, $r32, $r36, $r40, $r44, $r48, r69, r70, r72, r74;
        android.icu.util.Calendar r4;
        co.nstant.in.cbor.model.UnicodeString $r5, $r7, $r9, $r13, $r17, $r21, $r27, $r29, $r31, $r35, $r39, $r43, $r45, $r47, $r51, $r61;
        java.lang.String $r8, $r30, $r46, r71;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z7;
        java.util.HashMap $r10;
        java.util.Collection $r12;
        co.nstant.in.cbor.model.Number $r15, $r19, $r33, $r53;
        java.math.BigInteger $r16, $r20, $r34, $r54, $r59;
        int $i0, $i1, $i2, i3;
        java.util.ArrayList $r22;
        co.nstant.in.cbor.model.Array $r23;
        java.util.List $r24;
        java.lang.Object $r25, $r57;
        androidx.security.identity.CredentialData$AuthKeyData $r26, r75;
        co.nstant.in.cbor.model.ByteString $r37, $r41, $r49;
        byte[] $r38, $r42, $r50;
        java.util.AbstractList $r52;
        java.lang.RuntimeException $r55, $r56, $r65, $r66, $r67;
        co.nstant.in.cbor.model.UnsignedInteger $r58;
        java.util.AbstractMap $r62;
        java.lang.Integer $r63;
        java.util.Iterator r68, r73;
        long l4;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.model.Map;

        $r5 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r5.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("perReaderSessionKeyAlias");

        $r6 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r5);

        $r7 = (co.nstant.in.cbor.model.UnicodeString) $r6;

        $r8 = virtualinvoke $r7.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        r0.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias> = $r8;

        $r9 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r9.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("acpTimeoutKeyMap");

        r2 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r9);

        $z0 = r2 instanceof co.nstant.in.cbor.model.Map;

        if $z0 != 0 goto label01;

        $r67 = new java.lang.RuntimeException;

        specialinvoke $r67.<java.lang.RuntimeException: void <init>(java.lang.String)>("acpTimeoutKeyMap not found or not map");

        throw $r67;

     label01:
        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.AbstractMap mAcpTimeoutKeyAliases> = $r10;

        $r11 = (co.nstant.in.cbor.model.Map) r2;

        $r12 = virtualinvoke $r11.<co.nstant.in.cbor.model.Map: java.util.Collection getKeys()>();

        r68 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r57 = interfaceinvoke r68.<java.util.Iterator: java.lang.Object next()>();

        r69 = (co.nstant.in.cbor.model.DataItem) $r57;

        $z6 = r69 instanceof co.nstant.in.cbor.model.UnsignedInteger;

        if $z6 != 0 goto label03;

        $r66 = new java.lang.RuntimeException;

        specialinvoke $r66.<java.lang.RuntimeException: void <init>(java.lang.String)>("Key in acpTimeoutKeyMap is not an integer");

        throw $r66;

     label03:
        $r58 = (co.nstant.in.cbor.model.UnsignedInteger) r69;

        $r59 = virtualinvoke $r58.<co.nstant.in.cbor.model.UnsignedInteger: java.math.BigInteger getValue()>();

        i3 = virtualinvoke $r59.<java.math.BigInteger: int intValue()>();

        $r60 = (co.nstant.in.cbor.model.Map) r2;

        r70 = virtualinvoke $r60.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>(r69);

        $z7 = r70 instanceof co.nstant.in.cbor.model.UnicodeString;

        if $z7 != 0 goto label04;

        $r65 = new java.lang.RuntimeException;

        specialinvoke $r65.<java.lang.RuntimeException: void <init>(java.lang.String)>("Item in acpTimeoutKeyMap is not a string");

        throw $r65;

     label04:
        $r61 = (co.nstant.in.cbor.model.UnicodeString) r70;

        r71 = virtualinvoke $r61.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        $r62 = r0.<androidx.security.identity.CredentialData: java.util.AbstractMap mAcpTimeoutKeyAliases>;

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        virtualinvoke $r62.<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r63, r71);

        goto label02;

     label05:
        $r13 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r13.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("authKeyCount");

        $r14 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r13);

        $r15 = (co.nstant.in.cbor.model.Number) $r14;

        $r16 = virtualinvoke $r15.<co.nstant.in.cbor.model.Number: java.math.BigInteger getValue()>();

        $i0 = virtualinvoke $r16.<java.math.BigInteger: int intValue()>();

        r0.<androidx.security.identity.CredentialData: int mAuthKeyCount> = $i0;

        $r17 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r17.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("authKeyMaxUses");

        $r18 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r17);

        $r19 = (co.nstant.in.cbor.model.Number) $r18;

        $r20 = virtualinvoke $r19.<co.nstant.in.cbor.model.Number: java.math.BigInteger getValue()>();

        $i1 = virtualinvoke $r20.<java.math.BigInteger: int intValue()>();

        r0.<androidx.security.identity.CredentialData: int mAuthMaxUsesPerKey> = $i1;

        $r21 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r21.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("authKeyDatas");

        r72 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r21);

        $z2 = r72 instanceof co.nstant.in.cbor.model.Array;

        if $z2 != 0 goto label06;

        $r56 = new java.lang.RuntimeException;

        specialinvoke $r56.<java.lang.RuntimeException: void <init>(java.lang.String)>("authKeyDatas not found or not array");

        throw $r56;

     label06:
        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas> = $r22;

        $r23 = (co.nstant.in.cbor.model.Array) r72;

        $r24 = virtualinvoke $r23.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        r73 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke r73.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r25 = interfaceinvoke r73.<java.util.Iterator: java.lang.Object next()>();

        r74 = (co.nstant.in.cbor.model.DataItem) $r25;

        $r26 = new androidx.security.identity.CredentialData$AuthKeyData;

        specialinvoke $r26.<androidx.security.identity.CredentialData$AuthKeyData: void <init>()>();

        r75 = $r26;

        r76 = (co.nstant.in.cbor.model.Map) r74;

        $r27 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r27.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("alias");

        $r28 = virtualinvoke r76.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r27);

        $r29 = (co.nstant.in.cbor.model.UnicodeString) $r28;

        $r30 = virtualinvoke $r29.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        r75.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias> = $r30;

        $r31 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r31.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("useCount");

        $r32 = virtualinvoke r76.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r31);

        $r33 = (co.nstant.in.cbor.model.Number) $r32;

        $r34 = virtualinvoke $r33.<co.nstant.in.cbor.model.Number: java.math.BigInteger getValue()>();

        $i2 = virtualinvoke $r34.<java.math.BigInteger: int intValue()>();

        r75.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount> = $i2;

        $r35 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r35.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("certificate");

        $r36 = virtualinvoke r76.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r35);

        $r37 = (co.nstant.in.cbor.model.ByteString) $r36;

        $r38 = virtualinvoke $r37.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        r75.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mCertificate> = $r38;

        $r39 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r39.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("staticAuthenticationData");

        $r40 = virtualinvoke r76.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r39);

        $r41 = (co.nstant.in.cbor.model.ByteString) $r40;

        $r42 = virtualinvoke $r41.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        r75.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mStaticAuthenticationData> = $r42;

        $r43 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r43.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("pendingAlias");

        $r44 = virtualinvoke r76.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r43);

        $r45 = (co.nstant.in.cbor.model.UnicodeString) $r44;

        $r46 = virtualinvoke $r45.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        r75.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias> = $r46;

        $r47 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r47.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("pendingCertificate");

        $r48 = virtualinvoke r76.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r47);

        $r49 = (co.nstant.in.cbor.model.ByteString) $r48;

        $r50 = virtualinvoke $r49.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        r75.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate> = $r50;

        l4 = 9223372036854775807L;

        $r51 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r51.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("expirationDateMillis");

        r3 = virtualinvoke r76.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r51);

        if r3 == null goto label09;

        $z5 = r3 instanceof co.nstant.in.cbor.model.Number;

        if $z5 != 0 goto label08;

        $r55 = new java.lang.RuntimeException;

        specialinvoke $r55.<java.lang.RuntimeException: void <init>(java.lang.String)>("expirationDateMillis not a number");

        throw $r55;

     label08:
        $r53 = (co.nstant.in.cbor.model.Number) r3;

        $r54 = virtualinvoke $r53.<co.nstant.in.cbor.model.Number: java.math.BigInteger getValue()>();

        l4 = virtualinvoke $r54.<java.math.BigInteger: long longValue()>();

     label09:
        r4 = staticinvoke <android.icu.util.Calendar: android.icu.util.Calendar getInstance()>();

        virtualinvoke r4.<android.icu.util.Calendar: void setTimeInMillis(long)>(l4);

        r75.<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate> = r4;

        $r52 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        virtualinvoke $r52.<java.util.AbstractList: boolean add(java.lang.Object)>(r75);

        goto label07;

     label10:
        return;
    }

    private void loadNamespaceDatas(co.nstant.in.cbor.model.Map)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.model.Map r1, $r9, $r13;
        co.nstant.in.cbor.model.DataItem r2, r4, r6;
        java.util.Iterator r3;
        java.lang.String r5;
        co.nstant.in.cbor.model.UnicodeString $r7, $r12;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r8;
        java.util.Collection $r10;
        java.lang.Object $r11;
        java.util.AbstractList $r14;
        androidx.security.identity.PersonalizationData$NamespaceData $r15;
        java.lang.RuntimeException $r16, $r17;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.model.Map;

        $r7 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r7.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("namespaceDatas");

        r2 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r7);

        $z0 = r2 instanceof co.nstant.in.cbor.model.Map;

        if $z0 != 0 goto label1;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>("namespaceDatas not found or not map");

        throw $r17;

     label1:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.AbstractList mNamespaceDatas> = $r8;

        $r9 = (co.nstant.in.cbor.model.Map) r2;

        $r10 = virtualinvoke $r9.<co.nstant.in.cbor.model.Map: java.util.Collection getKeys()>();

        r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (co.nstant.in.cbor.model.DataItem) $r11;

        $z2 = r4 instanceof co.nstant.in.cbor.model.UnicodeString;

        if $z2 != 0 goto label3;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("Key in namespaceDatas is not a string");

        throw $r16;

     label3:
        $r12 = (co.nstant.in.cbor.model.UnicodeString) r4;

        r5 = virtualinvoke $r12.<co.nstant.in.cbor.model.UnicodeString: java.lang.String getString()>();

        $r13 = (co.nstant.in.cbor.model.Map) r2;

        r6 = virtualinvoke $r13.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>(r4);

        $r14 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mNamespaceDatas>;

        $r15 = staticinvoke <androidx.security.identity.Util: androidx.security.identity.PersonalizationData$NamespaceData namespaceDataFromCbor(java.lang.String,co.nstant.in.cbor.model.DataItem)>(r5, r6);

        virtualinvoke $r14.<java.util.AbstractList: boolean add(java.lang.Object)>($r15);

        goto label2;

     label4:
        return;
    }

    private void loadAccessControlProfiles(co.nstant.in.cbor.model.Map)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.model.Map r1;
        co.nstant.in.cbor.model.DataItem r2, r4;
        java.util.Iterator r3;
        androidx.security.identity.AccessControlProfile r5;
        co.nstant.in.cbor.model.UnicodeString $r6;
        boolean $z0, $z1;
        java.util.ArrayList $r7;
        java.util.HashMap $r8;
        co.nstant.in.cbor.model.Array $r9;
        java.util.List $r10;
        java.lang.Object $r11;
        java.util.AbstractList $r12;
        java.util.AbstractMap $r13;
        androidx.security.identity.AccessControlProfileId $r14;
        int $i0;
        java.lang.Integer $r15;
        java.lang.RuntimeException $r17;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.model.Map;

        $r6 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r6.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("accessControlProfiles");

        r2 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r6);

        $z0 = r2 instanceof co.nstant.in.cbor.model.Array;

        if $z0 != 0 goto label1;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>("accessControlProfiles not found or not array");

        throw $r17;

     label1:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAccessControlProfiles> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.AbstractMap mProfileIdToAcpMap> = $r8;

        $r9 = (co.nstant.in.cbor.model.Array) r2;

        $r10 = virtualinvoke $r9.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (co.nstant.in.cbor.model.DataItem) $r11;

        r5 = staticinvoke <androidx.security.identity.Util: androidx.security.identity.AccessControlProfile accessControlProfileFromCbor(co.nstant.in.cbor.model.DataItem)>(r4);

        $r12 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAccessControlProfiles>;

        virtualinvoke $r12.<java.util.AbstractList: boolean add(java.lang.Object)>(r5);

        $r13 = r0.<androidx.security.identity.CredentialData: java.util.AbstractMap mProfileIdToAcpMap>;

        $r14 = virtualinvoke r5.<androidx.security.identity.AccessControlProfile: androidx.security.identity.AccessControlProfileId getAccessControlProfileId()>();

        $i0 = virtualinvoke $r14.<androidx.security.identity.AccessControlProfileId: int getId()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r13.<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r5);

        goto label2;

     label3:
        return;
    }

    private void loadProofOfProvisioningSha256(co.nstant.in.cbor.model.Map)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.model.Map r1;
        co.nstant.in.cbor.model.DataItem r2;
        co.nstant.in.cbor.model.UnicodeString $r3;
        boolean $z0;
        co.nstant.in.cbor.model.ByteString $r4;
        byte[] $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.model.Map;

        $r3 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r3.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("proofOfProvisioningSha256");

        r2 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r3);

        $z0 = r2 instanceof co.nstant.in.cbor.model.ByteString;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("proofOfProvisioningSha256 not found or not bstr");

        throw $r6;

     label1:
        $r4 = (co.nstant.in.cbor.model.ByteString) r2;

        $r5 = virtualinvoke $r4.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

        r0.<androidx.security.identity.CredentialData: byte[] mProofOfProvisioningSha256> = $r5;

        return;
    }

    private void loadCredentialKeyCertChain(co.nstant.in.cbor.model.Map)
    {
        androidx.security.identity.CredentialData r0;
        co.nstant.in.cbor.model.Map r1;
        co.nstant.in.cbor.model.DataItem r2, r4;
        java.util.Iterator r3;
        byte[] r5;
        java.io.ByteArrayInputStream r6, $r13;
        co.nstant.in.cbor.model.UnicodeString $r7;
        boolean $z0, $z1;
        java.util.ArrayList $r8;
        co.nstant.in.cbor.model.Array $r9;
        java.util.List $r10;
        java.lang.Object $r11;
        co.nstant.in.cbor.model.ByteString $r12;
        java.util.Collection $r14;
        java.security.cert.Certificate $r15;
        java.security.cert.X509Certificate $r16;
        java.lang.RuntimeException $r17, $r19;
        java.lang.Throwable $r18, r21;
        java.security.cert.CertificateFactory r20;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: co.nstant.in.cbor.model.Map;

        $r7 = new co.nstant.in.cbor.model.UnicodeString;

        specialinvoke $r7.<co.nstant.in.cbor.model.UnicodeString: void <init>(java.lang.String)>("credentialKeyCertChain");

        r2 = virtualinvoke r1.<co.nstant.in.cbor.model.Map: co.nstant.in.cbor.model.DataItem get(co.nstant.in.cbor.model.DataItem)>($r7);

        $z0 = r2 instanceof co.nstant.in.cbor.model.Array;

        if $z0 != 0 goto label1;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>("credentialKeyCertChain not found or not array");

        throw $r17;

     label1:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<androidx.security.identity.CredentialData: java.util.Collection mCertificateChain> = $r8;

        $r9 = (co.nstant.in.cbor.model.Array) r2;

        $r10 = virtualinvoke $r9.<co.nstant.in.cbor.model.Array: java.util.List getDataItems()>();

        r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (co.nstant.in.cbor.model.DataItem) $r11;

        $r12 = (co.nstant.in.cbor.model.ByteString) r4;

        r5 = virtualinvoke $r12.<co.nstant.in.cbor.model.ByteString: byte[] getBytes()>();

     label3:
        r20 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r13 = new java.io.ByteArrayInputStream;

        specialinvoke $r13.<java.io.ByteArrayInputStream: void <init>(byte[])>(r5);

        r6 = $r13;

        $r14 = r0.<androidx.security.identity.CredentialData: java.util.Collection mCertificateChain>;

        $r15 = virtualinvoke r20.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r6);

        $r16 = (java.security.cert.X509Certificate) $r15;

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r16);

     label4:
        goto label6;

     label5:
        $r18 := @caughtexception;

        r21 = $r18;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error decoding certificate blob", r21);

        throw $r19;

     label6:
        goto label2;

     label7:
        return;

        catch java.security.cert.CertificateException from label3 to label4 with label5;
    }

    java.util.Collection getAccessControlProfiles()
    {
        androidx.security.identity.CredentialData r0;
        java.util.AbstractList $r1;

        r0 := @this: androidx.security.identity.CredentialData;

        $r1 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAccessControlProfiles>;

        return $r1;
    }

    java.util.Collection getNamespaceDatas()
    {
        androidx.security.identity.CredentialData r0;
        java.util.AbstractList $r1;

        r0 := @this: androidx.security.identity.CredentialData;

        $r1 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mNamespaceDatas>;

        return $r1;
    }

    androidx.security.identity.PersonalizationData$NamespaceData lookupNamespaceData(java.lang.String)
    {
        androidx.security.identity.CredentialData r0;
        java.lang.String r1, $r6;
        java.util.Iterator r2;
        androidx.security.identity.PersonalizationData$NamespaceData r3;
        java.util.AbstractList $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mNamespaceDatas>;

        r2 = virtualinvoke $r4.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.security.identity.PersonalizationData$NamespaceData) $r5;

        $r6 = virtualinvoke r3.<androidx.security.identity.PersonalizationData$NamespaceData: java.lang.String getNamespaceName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    java.lang.String getCredentialKeyAlias()
    {
        androidx.security.identity.CredentialData r0;
        java.lang.String $r1;

        r0 := @this: androidx.security.identity.CredentialData;

        $r1 = r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias>;

        return $r1;
    }

    java.lang.String getPerReaderSessionKeyAlias()
    {
        androidx.security.identity.CredentialData r0;
        java.lang.String $r1;

        r0 := @this: androidx.security.identity.CredentialData;

        $r1 = r0.<androidx.security.identity.CredentialData: java.lang.String mPerReaderSessionKeyAlias>;

        return $r1;
    }

    int getAuthKeyCount()
    {
        androidx.security.identity.CredentialData r0;
        int $i0;

        r0 := @this: androidx.security.identity.CredentialData;

        $i0 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        return $i0;
    }

    int getAuthMaxUsesPerKey()
    {
        androidx.security.identity.CredentialData r0;
        int $i0;

        r0 := @this: androidx.security.identity.CredentialData;

        $i0 = r0.<androidx.security.identity.CredentialData: int mAuthMaxUsesPerKey>;

        return $i0;
    }

    int[] getAuthKeyUseCounts()
    {
        androidx.security.identity.CredentialData r0;
        int[] r1;
        java.util.Iterator r2;
        androidx.security.identity.CredentialData$AuthKeyData r3;
        int $i0, $i1, $i2, i3;
        java.util.AbstractList $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: androidx.security.identity.CredentialData;

        $i0 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        r1 = newarray (int)[$i0];

        i3 = 0;

        $r4 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        r2 = virtualinvoke $r4.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.security.identity.CredentialData$AuthKeyData) $r5;

        $i1 = i3;

        i3 = i3 + 1;

        $i2 = r3.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount>;

        r1[$i1] = $i2;

        goto label1;

     label2:
        return r1;
    }

    void setAvailableAuthenticationKeys(int, int)
    {
        androidx.security.identity.CredentialData r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        androidx.security.identity.CredentialData$AuthKeyData r1, $r11;
        java.util.AbstractList $r2, $r6, $r12;
        java.lang.Object $r3;
        java.lang.String $r4, $r5, $r7, $r8, $r9, $r10, $r17, $r19, $r24, $r26;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Throwable $r13, $r20, $r27, r30, r31, r32;
        java.lang.RuntimeException $r14, $r21, $r28;
        java.lang.StringBuilder $r15, $r16, $r18, $r22, $r23, $r25;
        java.security.KeyStore r29;

        r0 := @this: androidx.security.identity.CredentialData;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        r0.<androidx.security.identity.CredentialData: int mAuthKeyCount> = i0;

        r0.<androidx.security.identity.CredentialData: int mAuthMaxUsesPerKey> = i1;

        $i3 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        if i2 >= $i3 goto label03;

        i7 = i2;

     label01:
        $i6 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        if i7 >= $i6 goto label02;

        $r12 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        $r11 = new androidx.security.identity.CredentialData$AuthKeyData;

        specialinvoke $r11.<androidx.security.identity.CredentialData$AuthKeyData: void <init>()>();

        virtualinvoke $r12.<java.util.AbstractList: boolean add(java.lang.Object)>($r11);

        i7 = i7 + 1;

        goto label01;

     label02:
        goto label17;

     label03:
        $i4 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        if i2 <= $i4 goto label17;

     label04:
        r29 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r29.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

     label05:
        goto label07;

     label06:
        $r27 := @caughtexception;

        r30 = $r27;

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error loading keystore", r30);

        throw $r28;

     label07:
        $i5 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        i8 = i2 - $i5;

        i9 = 0;

     label08:
        if i9 >= i8 goto label17;

        $r2 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        $r3 = virtualinvoke $r2.<java.util.AbstractList: java.lang.Object get(int)>(0);

        r1 = (androidx.security.identity.CredentialData$AuthKeyData) $r3;

        $r4 = r1.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label12;

     label09:
        $r9 = r1.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $z3 = virtualinvoke r29.<java.security.KeyStore: boolean containsAlias(java.lang.String)>($r9);

        if $z3 == 0 goto label10;

        $r10 = r1.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        virtualinvoke r29.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r10);

     label10:
        goto label12;

     label11:
        $r20 := @caughtexception;

        r31 = $r20;

        $r21 = new java.lang.RuntimeException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error deleting auth key with mAlias ");

        $r24 = r1.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r26, r31);

        throw $r21;

     label12:
        $r5 = r1.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label16;

     label13:
        $r7 = r1.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        $z2 = virtualinvoke r29.<java.security.KeyStore: boolean containsAlias(java.lang.String)>($r7);

        if $z2 == 0 goto label14;

        $r8 = r1.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        virtualinvoke r29.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r8);

     label14:
        goto label16;

     label15:
        $r13 := @caughtexception;

        r32 = $r13;

        $r14 = new java.lang.RuntimeException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error deleting auth key with mPendingAlias ");

        $r17 = r1.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r19, r32);

        throw $r14;

     label16:
        $r6 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        virtualinvoke $r6.<java.util.AbstractList: java.lang.Object remove(int)>(0);

        i9 = i9 + 1;

        goto label08;

     label17:
        specialinvoke r0.<androidx.security.identity.CredentialData: void saveToDisk()>();

        return;

        catch java.security.cert.CertificateException from label04 to label05 with label06;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label06;
        catch java.security.KeyStoreException from label04 to label05 with label06;
        catch java.security.KeyStoreException from label09 to label10 with label11;
        catch java.security.KeyStoreException from label13 to label14 with label15;
    }

    java.util.Collection getAuthKeysNeedingCertification()
    {
        androidx.security.identity.CredentialData r0;
        android.icu.util.Calendar r1, $r8, $r32;
        androidx.security.identity.CredentialData$AuthKeyData r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, z9;
        android.security.keystore.KeyGenParameterSpec$Builder r3, $r23;
        java.security.cert.X509Certificate r4, $r14;
        java.util.ArrayList $r5, r41;
        int $i0, $i1, $i2, i3;
        java.util.AbstractList $r6;
        java.lang.Object $r7;
        java.lang.String $r9, $r10, $r16, $r20, $r22, $r27, r42;
        java.io.ByteArrayInputStream $r11, r46;
        byte[] $r12, $r26, $r28;
        java.security.cert.Certificate $r13;
        java.lang.StringBuilder $r15, $r17, $r21, $r29, $r30, $r31;
        java.lang.Object[] $r18;
        java.lang.Integer $r19;
        java.lang.String[] $r24;
        android.security.keystore.KeyGenParameterSpec $r25;
        java.lang.Throwable $r33, $r35, $r37, r40, r44, r47;
        java.lang.RuntimeException $r34, $r36, $r38;
        java.security.KeyStore r39;
        java.security.KeyPairGenerator r43;
        java.security.cert.CertificateFactory r45;

        r0 := @this: androidx.security.identity.CredentialData;

     label01:
        r39 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r39.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

     label02:
        goto label04;

     label03:
        $r33 := @caughtexception;

        r40 = $r33;

        $r34 = new java.lang.RuntimeException;

        specialinvoke $r34.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error loading keystore", r40);

        throw $r34;

     label04:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r41 = $r5;

        r1 = staticinvoke <android.icu.util.Calendar: android.icu.util.Calendar getInstance()>();

        i3 = 0;

     label05:
        $i0 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        if i3 >= $i0 goto label23;

        $r6 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        $r7 = virtualinvoke $r6.<java.util.AbstractList: java.lang.Object get(int)>(i3);

        r2 = (androidx.security.identity.CredentialData$AuthKeyData) $r7;

        $i2 = r2.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount>;

        $i1 = r0.<androidx.security.identity.CredentialData: int mAuthMaxUsesPerKey>;

        if $i2 < $i1 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        z0 = $z5;

        z6 = 0;

        $r8 = r2.<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate>;

        if $r8 == null goto label08;

        $r32 = r2.<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate>;

        z6 = virtualinvoke r1.<android.icu.util.Calendar: boolean after(java.lang.Object)>($r32);

     label08:
        $r9 = r2.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label09;

        if z0 != 0 goto label09;

        if z6 == 0 goto label10;

     label09:
        $z7 = 1;

        goto label11;

     label10:
        $z7 = 0;

     label11:
        z1 = $z7;

        $r10 = r2.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        $z3 = virtualinvoke $r10.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label12;

        $z8 = 1;

        goto label13;

     label12:
        $z8 = 0;

     label13:
        z9 = $z8;

        if z1 == 0 goto label18;

        if z9 != 0 goto label18;

     label14:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r18[0] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("_auth_%d", $r18);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        r42 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = r2.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $z4 = virtualinvoke r42.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z4 == 0 goto label15;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        r42 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        r43 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)>("EC", "AndroidKeyStore");

        $r23 = new android.security.keystore.KeyGenParameterSpec$Builder;

        specialinvoke $r23.<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(java.lang.String,int)>(r42, 12);

        $r24 = newarray (java.lang.String)[2];

        $r24[0] = "SHA-256";

        $r24[1] = "SHA-512";

        r3 = virtualinvoke $r23.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setDigests(java.lang.String[])>($r24);

        $r25 = virtualinvoke r3.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()>();

        virtualinvoke r43.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r25);

        virtualinvoke r43.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        $r27 = r0.<androidx.security.identity.CredentialData: java.lang.String mCredentialKeyAlias>;

        $r26 = r0.<androidx.security.identity.CredentialData: byte[] mProofOfProvisioningSha256>;

        r4 = staticinvoke <androidx.security.identity.Util: java.security.cert.X509Certificate generateAuthenticationKeyCert(java.lang.String,java.lang.String,byte[])>(r42, $r27, $r26);

        r2.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias> = r42;

        $r28 = virtualinvoke r4.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        r2.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate> = $r28;

        z9 = 1;

     label16:
        goto label18;

     label17:
        $r35 := @caughtexception;

        r44 = $r35;

        $r36 = new java.lang.RuntimeException;

        specialinvoke $r36.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating auth key", r44);

        throw $r36;

     label18:
        if z9 == 0 goto label22;

     label19:
        r45 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r11 = new java.io.ByteArrayInputStream;

        $r12 = r2.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate>;

        specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12);

        r46 = $r11;

        $r13 = virtualinvoke r45.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r46);

        $r14 = (java.security.cert.X509Certificate) $r13;

        virtualinvoke r41.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

     label20:
        goto label22;

     label21:
        $r37 := @caughtexception;

        r47 = $r37;

        $r38 = new java.lang.RuntimeException;

        specialinvoke $r38.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating certificate for auth key", r47);

        throw $r38;

     label22:
        i3 = i3 + 1;

        goto label05;

     label23:
        specialinvoke r0.<androidx.security.identity.CredentialData: void saveToDisk()>();

        return r41;

        catch java.security.cert.CertificateException from label01 to label02 with label03;
        catch java.io.IOException from label01 to label02 with label03;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label03;
        catch java.security.KeyStoreException from label01 to label02 with label03;
        catch java.security.InvalidAlgorithmParameterException from label14 to label16 with label17;
        catch java.security.NoSuchAlgorithmException from label14 to label16 with label17;
        catch java.security.NoSuchProviderException from label14 to label16 with label17;
        catch java.security.cert.CertificateEncodingException from label14 to label16 with label17;
        catch java.security.cert.CertificateException from label19 to label20 with label21;
    }

    void storeStaticAuthenticationData(java.security.cert.X509Certificate, android.icu.util.Calendar, byte[]) throws androidx.security.identity.UnknownAuthenticationKeyException
    {
        androidx.security.identity.CredentialData r0;
        java.security.cert.X509Certificate r1, r5;
        android.icu.util.Calendar r2;
        byte[] r3, $r9, $r10, $r15, $r17;
        java.io.ByteArrayInputStream r4, r30;
        java.util.AbstractList $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r7, $r8, $r11, $r12;
        java.lang.Object $r14;
        int $i0;
        java.security.cert.Certificate $r18;
        java.lang.Throwable $r19, $r21, r27, r29, r34;
        androidx.security.identity.CredentialData$AuthKeyData r23, r26;
        java.security.cert.CertificateFactory r24;
        java.util.Iterator r25;
        java.security.KeyStore r28;
        java.lang.RuntimeException r31, r33;
        androidx.security.identity.UnknownAuthenticationKeyException r32;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: java.security.cert.X509Certificate;

        r2 := @parameter1: android.icu.util.Calendar;

        r3 := @parameter2: byte[];

        r23 = null;

     label01:
        r24 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r6 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        r25 = virtualinvoke $r6.<java.util.AbstractList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r14 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (androidx.security.identity.CredentialData$AuthKeyData) $r14;

        $r15 = r26.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate>;

        $i0 = lengthof $r15;

        if $i0 <= 0 goto label03;

        r30 = new java.io.ByteArrayInputStream;

        $r17 = r26.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate>;

        specialinvoke r30.<java.io.ByteArrayInputStream: void <init>(byte[])>($r17);

        r4 = r30;

        $r18 = virtualinvoke r24.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r4);

        r5 = (java.security.cert.X509Certificate) $r18;

        $z3 = virtualinvoke r5.<java.security.cert.X509Certificate: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label03;

        r23 = r26;

        goto label04;

     label03:
        goto label02;

     label04:
        goto label06;

     label05:
        $r21 := @caughtexception;

        r27 = $r21;

        r31 = new java.lang.RuntimeException;

        specialinvoke r31.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error encoding certificate", r27);

        throw r31;

     label06:
        if r23 != null goto label07;

        r32 = new androidx.security.identity.UnknownAuthenticationKeyException;

        specialinvoke r32.<androidx.security.identity.UnknownAuthenticationKeyException: void <init>(java.lang.String)>("No such authentication key");

        r34 = (java.lang.Throwable) r32;

        throw r34;

     label07:
        $r7 = r23.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label11;

     label08:
        r28 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r28.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $r11 = r23.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $z2 = virtualinvoke r28.<java.security.KeyStore: boolean containsAlias(java.lang.String)>($r11);

        if $z2 == 0 goto label09;

        $r12 = r23.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        virtualinvoke r28.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r12);

     label09:
        goto label11;

     label10:
        $r19 := @caughtexception;

        r29 = $r19;

        r33 = new java.lang.RuntimeException;

        specialinvoke r33.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error deleting old authentication key", r29);

        throw r33;

     label11:
        $r8 = r23.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>;

        r23.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias> = $r8;

        $r9 = r23.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate>;

        r23.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mCertificate> = $r9;

        r23.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mStaticAuthenticationData> = r3;

        r23.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount> = 0;

        r23.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias> = "";

        $r10 = newarray (byte)[0];

        r23.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate> = $r10;

        r23.<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate> = r2;

        specialinvoke r0.<androidx.security.identity.CredentialData: void saveToDisk()>();

        return;

        catch java.security.cert.CertificateException from label01 to label04 with label05;
        catch java.security.cert.CertificateException from label08 to label09 with label10;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label10;
        catch java.security.KeyStoreException from label08 to label09 with label10;
    }

    android.util.Pair selectAuthenticationKey(boolean, boolean)
    {
        androidx.security.identity.CredentialData r0;
        boolean z0, z1;
        android.util.Pair r1, $r2;

        r0 := @this: androidx.security.identity.CredentialData;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = virtualinvoke r0.<androidx.security.identity.CredentialData: android.util.Pair selectAuthenticationKeyHelper(boolean,boolean)>(z0, 0);

        if r1 == null goto label1;

        return r1;

     label1:
        if z1 != 0 goto label2;

        return null;

     label2:
        $r2 = virtualinvoke r0.<androidx.security.identity.CredentialData: android.util.Pair selectAuthenticationKeyHelper(boolean,boolean)>(z0, 1);

        return $r2;
    }

    android.util.Pair selectAuthenticationKeyHelper(boolean, boolean)
    {
        androidx.security.identity.CredentialData r0;
        boolean z0, z1, $z2, $z3;
        android.icu.util.Calendar r1, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r2, $r9;
        android.util.Pair $r3, r19;
        java.security.KeyStore$PrivateKeyEntry $r4;
        java.security.PrivateKey $r5;
        byte[] $r6;
        java.util.AbstractList $r7;
        java.lang.Object $r8;
        java.lang.Throwable $r12, r18;
        java.lang.RuntimeException $r13;
        androidx.security.identity.CredentialData$AuthKeyData r14, r15;
        java.security.KeyStore r16;
        java.security.KeyStore$Entry r17;

        r0 := @this: androidx.security.identity.CredentialData;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r14 = null;

        r1 = staticinvoke <android.icu.util.Calendar: android.icu.util.Calendar getInstance()>();

        i7 = 0;

     label01:
        $i0 = r0.<androidx.security.identity.CredentialData: int mAuthKeyCount>;

        if i7 >= $i0 goto label05;

        $r7 = r0.<androidx.security.identity.CredentialData: java.util.AbstractList mAuthKeyDatas>;

        $r8 = virtualinvoke $r7.<java.util.AbstractList: java.lang.Object get(int)>(i7);

        r15 = (androidx.security.identity.CredentialData$AuthKeyData) $r8;

        $r9 = r15.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label04;

        $r10 = r15.<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate>;

        if $r10 == null goto label02;

        $r11 = r15.<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate>;

        $z3 = virtualinvoke r1.<android.icu.util.Calendar: boolean after(java.lang.Object)>($r11);

        if $z3 == 0 goto label02;

        if z1 != 0 goto label02;

        goto label04;

     label02:
        if r14 == null goto label03;

        $i6 = r15.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount>;

        $i5 = r14.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount>;

        if $i6 >= $i5 goto label04;

     label03:
        r14 = r15;

     label04:
        i7 = i7 + 1;

        goto label01;

     label05:
        if r14 != null goto label06;

        return null;

     label06:
        $i2 = r14.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount>;

        $i1 = r0.<androidx.security.identity.CredentialData: int mAuthMaxUsesPerKey>;

        if $i2 < $i1 goto label07;

        if z0 != 0 goto label07;

        return null;

     label07:
        r16 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r16.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $r2 = r14.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>;

        r17 = virtualinvoke r16.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>($r2, null);

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        r18 = $r12;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error loading keystore", r18);

        throw $r13;

     label10:
        $r3 = new android.util.Pair;

        $r4 = (java.security.KeyStore$PrivateKeyEntry) r17;

        $r5 = virtualinvoke $r4.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();

        $r6 = r14.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mStaticAuthenticationData>;

        specialinvoke $r3.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

        r19 = $r3;

        $i3 = r14.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount>;

        $i4 = $i3 + 1;

        r14.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount> = $i4;

        specialinvoke r0.<androidx.security.identity.CredentialData: void saveToDisk()>();

        return r19;

        catch java.security.cert.CertificateException from label07 to label08 with label09;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label09;
        catch java.security.KeyStoreException from label07 to label08 with label09;
        catch java.security.UnrecoverableEntryException from label07 to label08 with label09;
    }

    java.lang.String getDocType()
    {
        androidx.security.identity.CredentialData r0;
        java.lang.String $r1;

        r0 := @this: androidx.security.identity.CredentialData;

        $r1 = r0.<androidx.security.identity.CredentialData: java.lang.String mDocType>;

        return $r1;
    }

    java.util.Collection getCredentialKeyCertificateChain()
    {
        androidx.security.identity.CredentialData r0;
        java.util.Collection $r1;

        r0 := @this: androidx.security.identity.CredentialData;

        $r1 = r0.<androidx.security.identity.CredentialData: java.util.Collection mCertificateChain>;

        return $r1;
    }

    androidx.security.identity.AccessControlProfile getAccessControlProfile(androidx.security.identity.AccessControlProfileId)
    {
        androidx.security.identity.CredentialData r0;
        androidx.security.identity.AccessControlProfileId r1;
        androidx.security.identity.AccessControlProfile r2;
        java.util.AbstractMap $r3;
        int $i0, $i1;
        java.lang.Integer $r4;
        java.lang.Object $r5;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: androidx.security.identity.AccessControlProfileId;

        $r3 = r0.<androidx.security.identity.CredentialData: java.util.AbstractMap mProfileIdToAcpMap>;

        $i0 = virtualinvoke r1.<androidx.security.identity.AccessControlProfileId: int getId()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = virtualinvoke $r3.<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (androidx.security.identity.AccessControlProfile) $r5;

        if r2 != null goto label1;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No profile with id ");

        $i1 = virtualinvoke r1.<androidx.security.identity.AccessControlProfileId: int getId()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        return r2;
    }

    private boolean checkUserAuthenticationTimeout(java.lang.String)
    {
        androidx.security.identity.CredentialData r0;
        java.lang.String r1;
        java.security.KeyStore$Entry r2;
        javax.crypto.SecretKey r3;
        javax.crypto.Cipher r4;
        byte[] r5, $r7;
        java.security.KeyStore$SecretKeyEntry $r6;
        java.lang.Throwable $r9, r11;
        java.security.KeyStore r10;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: java.lang.String;

     label1:
        r10 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r10.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        r2 = virtualinvoke r10.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>(r1, null);

        $r6 = (java.security.KeyStore$SecretKeyEntry) r2;

        r3 = virtualinvoke $r6.<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>();

        r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r3);

        $r7 = newarray (byte)[2];

        $r7[0] = 1;

        $r7[1] = 2;

        r5 = $r7;

        virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r11 = $r9;

        return 0;

     label4:
        return 1;

        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch java.security.UnrecoverableEntryException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label3;
    }

    boolean checkUserAuthentication(androidx.security.identity.AccessControlProfileId, boolean)
    {
        androidx.security.identity.CredentialData r0;
        androidx.security.identity.AccessControlProfileId r1;
        boolean z0, $z1;
        androidx.security.identity.AccessControlProfile r2;
        java.lang.String r3, $r11;
        long $l0;
        byte $b1;
        java.util.AbstractMap $r4;
        int $i2, $i3;
        java.lang.Integer $r5;
        java.lang.Object $r6;
        java.lang.RuntimeException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: androidx.security.identity.CredentialData;

        r1 := @parameter0: androidx.security.identity.AccessControlProfileId;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<androidx.security.identity.CredentialData: androidx.security.identity.AccessControlProfile getAccessControlProfile(androidx.security.identity.AccessControlProfileId)>(r1);

        $l0 = virtualinvoke r2.<androidx.security.identity.AccessControlProfile: long getUserAuthenticationTimeout()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return z0;

     label1:
        $r4 = r0.<androidx.security.identity.CredentialData: java.util.AbstractMap mAcpTimeoutKeyAliases>;

        $i2 = virtualinvoke r1.<androidx.security.identity.AccessControlProfileId: int getId()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6 = virtualinvoke $r4.<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (java.lang.String) $r6;

        if r3 != null goto label2;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No key alias for ACP with ID ");

        $i3 = virtualinvoke r1.<androidx.security.identity.AccessControlProfileId: int getId()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        $z1 = specialinvoke r0.<androidx.security.identity.CredentialData: boolean checkUserAuthenticationTimeout(java.lang.String)>(r3);

        return $z1;
    }

androidx.security.identity.CredentialData$AuthKeyData
<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias>
<androidx.security.identity.CredentialData$AuthKeyData: byte[] mCertificate>
<androidx.security.identity.CredentialData$AuthKeyData: byte[] mStaticAuthenticationData>
<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount>
<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias>
<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate>
<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate>
    void <init>()
    {
        androidx.security.identity.CredentialData$AuthKeyData r0;
        byte[] $r1, $r2, $r3;

        r0 := @this: androidx.security.identity.CredentialData$AuthKeyData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mAlias> = "";

        $r1 = newarray (byte)[0];

        r0.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mCertificate> = $r1;

        $r2 = newarray (byte)[0];

        r0.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mStaticAuthenticationData> = $r2;

        r0.<androidx.security.identity.CredentialData$AuthKeyData: int mUseCount> = 0;

        r0.<androidx.security.identity.CredentialData$AuthKeyData: java.lang.String mPendingAlias> = "";

        $r3 = newarray (byte)[0];

        r0.<androidx.security.identity.CredentialData$AuthKeyData: byte[] mPendingCertificate> = $r3;

        r0.<androidx.security.identity.CredentialData$AuthKeyData: android.icu.util.Calendar mExpirationDate> = null;

        return;
    }

