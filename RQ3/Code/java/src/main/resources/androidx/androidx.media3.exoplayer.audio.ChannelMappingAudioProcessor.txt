androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor
<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: int[] pendingOutputChannels>
<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: int[] outputChannels>
    void <init>()
    {
        androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor r0;

        r0 := @this: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor;

        specialinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: void <init>()>();

        return;
    }

    public void setChannelMap(int[])
    {
        androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor r0;
        int[] r1;

        r0 := @this: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor;

        r1 := @parameter0: int[];

        r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: int[] pendingOutputChannels> = r1;

        return;
    }

    public androidx.media3.common.audio.AudioProcessor$AudioFormat onConfigure(androidx.media3.common.audio.AudioProcessor$AudioFormat) throws androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException
    {
        androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat r1, $r5, $r6;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        boolean $z0, $z1, z2, $z3;
        androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException $r3, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessor$AudioFormat;

        r2 = r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: int[] pendingOutputChannels>;

        if r2 != null goto label01;

        $r5 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        return $r5;

     label01:
        $i1 = r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int encoding>;

        if $i1 == 2 goto label02;

        $r4 = new androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException;

        specialinvoke $r4.<androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException: void <init>(androidx.media3.common.audio.AudioProcessor$AudioFormat)>(r1);

        throw $r4;

     label02:
        $i3 = r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int channelCount>;

        $i2 = lengthof r2;

        if $i3 == $i2 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        z2 = $z1;

        i7 = 0;

     label05:
        $i8 = lengthof r2;

        if i7 >= $i8 goto label09;

        i0 = r2[i7];

        $i6 = r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int channelCount>;

        if i0 < $i6 goto label06;

        $r3 = new androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException;

        specialinvoke $r3.<androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException: void <init>(androidx.media3.common.audio.AudioProcessor$AudioFormat)>(r1);

        throw $r3;

     label06:
        $z0 = z2;

        if i0 == i7 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        z2 = $z0 | $z3;

        i7 = i7 + 1;

        goto label05;

     label09:
        if z2 == 0 goto label10;

        $r6 = new androidx.media3.common.audio.AudioProcessor$AudioFormat;

        $i5 = r1.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        $i4 = lengthof r2;

        specialinvoke $r6.<androidx.media3.common.audio.AudioProcessor$AudioFormat: void <init>(int,int,int)>($i5, $i4, 2);

        goto label11;

     label10:
        $r6 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

     label11:
        return $r6;
    }

    public void queueInput(java.nio.ByteBuffer)
    {
        androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor r0;
        java.nio.ByteBuffer r1, r3;
        int[] r2, r4, $r5;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i12, i13;
        java.lang.Object $r6;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r7, $r8, $r11;
        short $s11;

        r0 := @this: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r5 = r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: int[] outputChannels>;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        r2 = (int[]) $r6;

        i12 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i6 = i0 - i12;

        $r7 = r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i5 = $r7.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int bytesPerFrame>;

        i1 = $i6 / $i5;

        $r8 = r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat>;

        $i7 = $r8.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int bytesPerFrame>;

        i2 = i1 * $i7;

        r3 = virtualinvoke r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: java.nio.ByteBuffer replaceOutputBuffer(int)>(i2);

     label1:
        if i12 >= i0 goto label4;

        r4 = r2;

        i3 = lengthof r4;

        i13 = 0;

     label2:
        if i13 >= i3 goto label3;

        i4 = r4[i13];

        $i9 = 2 * i4;

        $i10 = i12 + $i9;

        $s11 = virtualinvoke r1.<java.nio.ByteBuffer: short getShort(int)>($i10);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s11);

        i13 = i13 + 1;

        goto label2;

     label3:
        $r11 = r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>;

        $i8 = $r11.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int bytesPerFrame>;

        i12 = i12 + $i8;

        goto label1;

     label4:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;
    }

    protected void onFlush()
    {
        androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor r0;
        int[] $r1;

        r0 := @this: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor;

        $r1 = r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: int[] pendingOutputChannels>;

        r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: int[] outputChannels> = $r1;

        return;
    }

    protected void onReset()
    {
        androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor r0;

        r0 := @this: androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor;

        r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: int[] outputChannels> = null;

        r0.<androidx.media3.exoplayer.audio.ChannelMappingAudioProcessor: int[] pendingOutputChannels> = null;

        return;
    }

