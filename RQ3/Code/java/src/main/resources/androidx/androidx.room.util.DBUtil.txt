androidx.room.util.DBUtil
    public static final android.database.Cursor query(androidx.room.RoomDatabase, androidx.sqlite.db.SupportSQLiteQuery, boolean)
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        boolean z0;
        android.database.Cursor $r2;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: androidx.sqlite.db.SupportSQLiteQuery;

        z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "db");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sqLiteQuery");

        $r2 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r0, r1, z0, null);

        return $r2;
    }

    public static final android.database.Cursor query(androidx.room.RoomDatabase, androidx.sqlite.db.SupportSQLiteQuery, boolean, android.os.CancellationSignal)
    {
        androidx.room.RoomDatabase r0;
        androidx.sqlite.db.SupportSQLiteQuery r1;
        boolean z0, $z1, $z2;
        android.os.CancellationSignal r2;
        android.database.Cursor r3, $r6;
        int i0, i1, $i2, $i3;
        android.database.AbstractWindowedCursor $r4, $r5, $r7;
        android.database.CursorWindow $r8;

        r0 := @parameter0: androidx.room.RoomDatabase;

        r1 := @parameter1: androidx.sqlite.db.SupportSQLiteQuery;

        z0 := @parameter2: boolean;

        r2 := @parameter3: android.os.CancellationSignal;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "db");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sqLiteQuery");

        r3 = virtualinvoke r0.<androidx.room.RoomDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery,android.os.CancellationSignal)>(r1, r2);

        if z0 == 0 goto label4;

        $z1 = r3 instanceof android.database.AbstractWindowedCursor;

        if $z1 == 0 goto label4;

        $r4 = (android.database.AbstractWindowedCursor) r3;

        i0 = virtualinvoke $r4.<android.database.AbstractWindowedCursor: int getCount()>();

        $r5 = (android.database.AbstractWindowedCursor) r3;

        $z2 = virtualinvoke $r5.<android.database.AbstractWindowedCursor: boolean hasWindow()>();

        if $z2 == 0 goto label1;

        $r7 = (android.database.AbstractWindowedCursor) r3;

        $r8 = virtualinvoke $r7.<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()>();

        $i3 = virtualinvoke $r8.<android.database.CursorWindow: int getNumRows()>();

        goto label2;

     label1:
        $i3 = i0;

     label2:
        i1 = $i3;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 23 goto label3;

        if i1 >= i0 goto label4;

     label3:
        $r6 = staticinvoke <androidx.room.util.CursorUtil: android.database.Cursor copyAndClose(android.database.Cursor)>(r3);

        return $r6;

     label4:
        return r3;
    }

    public static final void dropFtsSyncTriggers(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.sqlite.db.SupportSQLiteDatabase r0;
        java.util.List r1, $r12;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, $r6, $r8, $r26;
        java.lang.Iterable $r7;
        java.lang.Throwable $r9, $r10, $r11, r18, r19, r20;
        android.database.Cursor $r14, r16;
        java.io.Closeable $r15;
        kotlin.Unit r17, $r22;
        java.util.Iterator $r24;
        java.lang.Object $r25;

        r0 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "db");

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        $r14 = interfaceinvoke r0.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String)>("SELECT name FROM sqlite_master WHERE type = \'trigger\'");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 15 goto label09;

        $r15 = (java.io.Closeable) $r14;

     label01:
        r16 = (android.database.Cursor) $r15;

     label02:
        $z2 = interfaceinvoke r16.<android.database.Cursor: boolean moveToNext()>();

        if $z2 == 0 goto label03;

        $r8 = interfaceinvoke r16.<android.database.Cursor: java.lang.String getString(int)>(0);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label02;

     label03:
        r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label04:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r15, null);

        goto label08;

     label05:
        $r11 := @caughtexception;

        r18 = $r11;

        r19 = r18;

        throw r18;

     label06:
        $r9 := @caughtexception;

        r20 = $r9;

     label07:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r15, r19);

        throw r20;

     label08:
        goto label14;

     label09:
        $z0 = interfaceinvoke $r14.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke $r14.<android.database.Cursor: java.lang.String getString(int)>(0);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label09;

     label10:
        $r22 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label11:
        interfaceinvoke $r14.<android.database.Cursor: void close()>();

        goto label14;

     label12:
        $r10 := @caughtexception;

     label13:
        interfaceinvoke $r14.<android.database.Cursor: void close()>();

        throw $r10;

     label14:
        r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>($r12);

        $r7 = (java.lang.Iterable) r1;

        $r24 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label15:
        $z3 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        $r26 = (java.lang.String) $r25;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r26, "triggerName");

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r26, "room_fts_content_sync_", 0, 2, null);

        if $z1 == 0 goto label16;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TRIGGER IF EXISTS ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r0.<androidx.sqlite.db.SupportSQLiteDatabase: void execSQL(java.lang.String)>($r5);

     label16:
        goto label15;

     label17:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public static final void foreignKeyCheck(androidx.sqlite.db.SupportSQLiteDatabase, java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteDatabase r0;
        java.lang.String r1, r3, $r8, r16;
        android.database.Cursor $r2, r15;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2;
        android.database.sqlite.SQLiteConstraintException $r9, $r10;
        java.lang.Throwable $r11, $r12, $r13, r18, r19, r20, r23;
        java.io.Closeable r14;
        kotlin.Unit r17, r22;

        r0 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "db");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tableName");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA foreign_key_check(`");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("`)");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = interfaceinvoke r0.<androidx.sqlite.db.SupportSQLiteDatabase: android.database.Cursor query(java.lang.String)>($r8);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 <= 15 goto label08;

        r14 = (java.io.Closeable) $r2;

     label01:
        r15 = (android.database.Cursor) r14;

        $i2 = interfaceinvoke r15.<android.database.Cursor: int getCount()>();

        if $i2 <= 0 goto label02;

        r16 = staticinvoke <androidx.room.util.DBUtil: java.lang.String processForeignKeyCheckFailure(android.database.Cursor)>(r15);

        $r10 = new android.database.sqlite.SQLiteConstraintException;

        specialinvoke $r10.<android.database.sqlite.SQLiteConstraintException: void <init>(java.lang.String)>(r16);

        throw $r10;

     label02:
        r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label03:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r14, null);

        goto label07;

     label04:
        $r13 := @caughtexception;

        r18 = $r13;

        r19 = r18;

        throw r18;

     label05:
        $r11 := @caughtexception;

        r20 = $r11;

     label06:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r14, r19);

        throw r20;

     label07:
        goto label13;

     label08:
        $i1 = interfaceinvoke $r2.<android.database.Cursor: int getCount()>();

        if $i1 <= 0 goto label09;

        r3 = staticinvoke <androidx.room.util.DBUtil: java.lang.String processForeignKeyCheckFailure(android.database.Cursor)>($r2);

        $r9 = new android.database.sqlite.SQLiteConstraintException;

        specialinvoke $r9.<android.database.sqlite.SQLiteConstraintException: void <init>(java.lang.String)>(r3);

        throw $r9;

     label09:
        r22 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label10:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        goto label13;

     label11:
        $r12 := @caughtexception;

        r23 = $r12;

     label12:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        throw r23;

     label13:
        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static final int readVersion(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.io.Closeable r1;
        java.nio.ByteBuffer r2;
        int i0, i1;
        java.io.FileInputStream $r3;
        java.nio.channels.FileChannel $r4, r8;
        java.io.IOException $r5;
        java.lang.Throwable $r6, $r7, r9, r10, r11;

        r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "databaseFile");

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        $r4 = virtualinvoke $r3.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        r1 = (java.io.Closeable) $r4;

     label1:
        r8 = (java.nio.channels.FileChannel) r1;

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        virtualinvoke r8.<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>(60L, 4L, 1);

        virtualinvoke r8.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>(60L);

        i0 = virtualinvoke r8.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>(r2);

        if i0 == 4 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Bad database header, unable to read 4 bytes at offset 60");

        throw $r5;

     label2:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        i1 = virtualinvoke r2.<java.nio.ByteBuffer: int getInt()>();

     label3:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r1, null);

        return i1;

     label4:
        $r7 := @caughtexception;

        r9 = $r7;

        r10 = r9;

        throw r9;

     label5:
        $r6 := @caughtexception;

        r11 = $r6;

     label6:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r1, r10);

        throw r11;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static final android.os.CancellationSignal createCancellationSignal()
    {
        int $i0;
        android.os.CancellationSignal $r0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        $r0 = staticinvoke <androidx.sqlite.db.SupportSQLiteCompat$Api16Impl: android.os.CancellationSignal createCancellationSignal()>();

        goto label2;

     label1:
        $r0 = (android.os.CancellationSignal) null;

     label2:
        return $r0;
    }

    private static final java.lang.String processForeignKeyCheckFailure(android.database.Cursor)
    {
        android.database.Cursor r0;
        java.lang.StringBuilder r1, $r4, $r8, $r11, $r22, $r28;
        int i0, $i1;
        java.util.Map r3, r31;
        java.util.LinkedHashMap $r5;
        java.util.Set $r7, $r14;
        boolean $z1, $z2, $z3, $z4;
        java.lang.String $r15, $r24, $r27, r30, r32, r33, r36, r37;
        java.lang.Object $r16, $r17, $r18;
        java.util.Iterator r34;
        java.util.Map$Entry r35;

        r0 := @parameter0: android.database.Cursor;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r1 = $r4;

        i0 = interfaceinvoke r0.<android.database.Cursor: int getCount()>();

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        r3 = (java.util.Map) $r5;

     label1:
        $z4 = interfaceinvoke r0.<android.database.Cursor: boolean moveToNext()>();

        if $z4 == 0 goto label3;

        $z2 = interfaceinvoke r0.<android.database.Cursor: boolean isFirst()>();

        if $z2 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Foreign key violation(s) detected in \'");

        $r27 = interfaceinvoke r0.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.\n");

     label2:
        r30 = interfaceinvoke r0.<android.database.Cursor: java.lang.String getString(int)>(3);

        $z3 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r30);

        if $z3 != 0 goto label1;

        r31 = r3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r30, "constraintIndex");

        r32 = r30;

        $r24 = interfaceinvoke r0.<android.database.Cursor: java.lang.String getString(int)>(2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r24, "cursor.getString(2)");

        r33 = $r24;

        interfaceinvoke r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r33);

        goto label1;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of different violations discovered: ");

        $r7 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>();

        $i1 = interfaceinvoke $r7.<java.util.Set: int size()>();

        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of rows in violation: ");

        $r11 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Violation(s) detected in the following constraint(s):\n");

        $r14 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        r34 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r16 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.util.Map$Entry) $r16;

        $r17 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>();

        r36 = (java.lang.String) $r17;

        $r18 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        r37 = (java.lang.String) $r18;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tParent Table = ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Foreign Key Constraint Index = ");

        $r22 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label4;

     label5:
        $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r15, "StringBuilder().apply(builderAction).toString()");

        return $r15;
    }

