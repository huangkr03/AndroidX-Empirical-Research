androidx.room.compiler.codegen.XFunSpec
<androidx.room.compiler.codegen.XFunSpec: androidx.room.compiler.codegen.XFunSpec$Companion Companion>
    static void <clinit>()
    {
        androidx.room.compiler.codegen.XFunSpec$Companion $r0;

        $r0 = <androidx.room.compiler.codegen.XFunSpec$Companion: androidx.room.compiler.codegen.XFunSpec$Companion $$INSTANCE>;

        <androidx.room.compiler.codegen.XFunSpec: androidx.room.compiler.codegen.XFunSpec$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.codegen.XFunSpec$Builder$Companion
<androidx.room.compiler.codegen.XFunSpec$Builder$Companion: androidx.room.compiler.codegen.XFunSpec$Builder$Companion $$INSTANCE>
    private void <init>()
    {
        androidx.room.compiler.codegen.XFunSpec$Builder$Companion r0;

        r0 := @this: androidx.room.compiler.codegen.XFunSpec$Builder$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final transient androidx.room.compiler.codegen.XFunSpec$Builder addStatement(androidx.room.compiler.codegen.XFunSpec$Builder, java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.XFunSpec$Builder$Companion r0;
        androidx.room.compiler.codegen.XFunSpec$Builder $r1, $r10;
        java.lang.String r2;
        java.lang.Object[] r3, $r7;
        androidx.room.compiler.codegen.XCodeBlock$Companion $r4;
        androidx.room.compiler.codegen.CodeLanguage $r5;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r6, $r8;
        int $i0;
        androidx.room.compiler.codegen.XCodeBlock $r9;

        r0 := @this: androidx.room.compiler.codegen.XFunSpec$Builder$Companion;

        $r1 := @parameter0: androidx.room.compiler.codegen.XFunSpec$Builder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "format");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "args");

        $r4 = <androidx.room.compiler.codegen.XCodeBlock: androidx.room.compiler.codegen.XCodeBlock$Companion Companion>;

        $r5 = interfaceinvoke $r1.<androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.CodeLanguage getLanguage()>();

        $r6 = virtualinvoke $r4.<androidx.room.compiler.codegen.XCodeBlock$Companion: androidx.room.compiler.codegen.XCodeBlock$Builder builder(androidx.room.compiler.codegen.CodeLanguage)>($r5);

        $i0 = lengthof r3;

        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, $i0);

        $r8 = interfaceinvoke $r6.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder addStatement(java.lang.String,java.lang.Object[])>(r2, $r7);

        $r9 = interfaceinvoke $r8.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock build()>();

        $r10 = interfaceinvoke $r1.<androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.XFunSpec$Builder addCode(androidx.room.compiler.codegen.XCodeBlock)>($r9);

        return $r10;
    }

    static void <clinit>()
    {
        androidx.room.compiler.codegen.XFunSpec$Builder$Companion $r0;

        $r0 = new androidx.room.compiler.codegen.XFunSpec$Builder$Companion;

        specialinvoke $r0.<androidx.room.compiler.codegen.XFunSpec$Builder$Companion: void <init>()>();

        <androidx.room.compiler.codegen.XFunSpec$Builder$Companion: androidx.room.compiler.codegen.XFunSpec$Builder$Companion $$INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.codegen.XFunSpec$Builder
<androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.XFunSpec$Builder$Companion Companion>
<androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.XFunSpec$Builder addParameter(androidx.room.compiler.codegen.XTypeName,java.lang.String,java.util.List)>
    public static androidx.room.compiler.codegen.XFunSpec$Builder addParameter$default(androidx.room.compiler.codegen.XFunSpec$Builder, androidx.room.compiler.codegen.XTypeName, java.lang.String, java.util.List, int, java.lang.Object)
    {
        androidx.room.compiler.codegen.XFunSpec$Builder r0, $r4;
        androidx.room.compiler.codegen.XTypeName r1;
        java.lang.String r2;
        int i0, $i1;
        java.lang.Object r3;
        java.lang.UnsupportedOperationException $r5;
        java.util.List r6;

        r0 := @parameter0: androidx.room.compiler.codegen.XFunSpec$Builder;

        r1 := @parameter1: androidx.room.compiler.codegen.XTypeName;

        r2 := @parameter2: java.lang.String;

        r6 := @parameter3: java.util.List;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

        if r3 == null goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: addParameter");

        throw $r5;

     label1:
        $i1 = i0 & 4;

        if $i1 == 0 goto label2;

        r6 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label2:
        $r4 = interfaceinvoke r0.<androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.XFunSpec$Builder addParameter(androidx.room.compiler.codegen.XTypeName,java.lang.String,java.util.List)>(r1, r2, r6);

        return $r4;
    }

<androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.XFunSpec$Builder addCode(androidx.room.compiler.codegen.XCodeBlock)>
<androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.XFunSpec$Builder callSuperConstructor(androidx.room.compiler.codegen.XCodeBlock[])>
<androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.XFunSpec$Builder returns(androidx.room.compiler.codegen.XTypeName)>
<androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.XFunSpec build()>
    static void <clinit>()
    {
        androidx.room.compiler.codegen.XFunSpec$Builder$Companion $r0;

        $r0 = <androidx.room.compiler.codegen.XFunSpec$Builder$Companion: androidx.room.compiler.codegen.XFunSpec$Builder$Companion $$INSTANCE>;

        <androidx.room.compiler.codegen.XFunSpec$Builder: androidx.room.compiler.codegen.XFunSpec$Builder$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.codegen.XFunSpec$Companion$WhenMappings
<androidx.room.compiler.codegen.XFunSpec$Companion$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.room.compiler.codegen.CodeLanguage[] $r1;
        int $i0, $i1, $i2;
        androidx.room.compiler.codegen.CodeLanguage $r2, $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        $r1 = staticinvoke <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label1:
        $r2 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage JAVA>;

        $i1 = virtualinvoke $r2.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        $r3 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage KOTLIN>;

        $i2 = virtualinvoke $r3.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r7 = $r4;

     label7:
        <androidx.room.compiler.codegen.XFunSpec$Companion$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

androidx.room.compiler.codegen.XFunSpec$Companion
<androidx.room.compiler.codegen.XFunSpec$Companion: androidx.room.compiler.codegen.XFunSpec$Companion $$INSTANCE>
    private void <init>()
    {
        androidx.room.compiler.codegen.XFunSpec$Companion r0;

        r0 := @this: androidx.room.compiler.codegen.XFunSpec$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.compiler.codegen.XFunSpec$Builder builder(androidx.room.compiler.codegen.CodeLanguage, java.lang.String, androidx.room.compiler.codegen.VisibilityModifier, boolean, boolean)
    {
        androidx.room.compiler.codegen.XFunSpec$Companion r0;
        androidx.room.compiler.codegen.CodeLanguage r1;
        java.lang.String r2;
        androidx.room.compiler.codegen.VisibilityModifier r3;
        boolean z0, z1;
        com.squareup.kotlinpoet.FunSpec$Builder r4, r7;
        javax.lang.model.element.Modifier[] r5;
        com.squareup.javapoet.MethodSpec$Builder r6, $r23;
        int[] $r8;
        int $i0, $i1;
        com.squareup.kotlinpoet.FunSpec$Companion $r9;
        com.squareup.kotlinpoet.KModifier $r10, $r13, $r15;
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder $r12;
        javax.lang.model.element.Modifier $r17;
        androidx.room.compiler.codegen.java.JavaFunSpec$Builder $r19;
        kotlin.NoWhenBranchMatchedException $r22;
        androidx.room.compiler.codegen.XFunSpec$Builder $r25;
        com.squareup.kotlinpoet.KModifier[] $r27, $r28, $r29;

        r0 := @this: androidx.room.compiler.codegen.XFunSpec$Companion;

        r1 := @parameter0: androidx.room.compiler.codegen.CodeLanguage;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.room.compiler.codegen.VisibilityModifier;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "language");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "visibility");

        $r8 = <androidx.room.compiler.codegen.XFunSpec$Companion$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r1.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        $i1 = $r8[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            default: goto label6;
        };

     label1:
        $r23 = staticinvoke <com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder methodBuilder(java.lang.String)>(r2);

        r5 = newarray (javax.lang.model.element.Modifier)[1];

        $r17 = staticinvoke <androidx.room.compiler.codegen.java.JavaFunSpecKt: javax.lang.model.element.Modifier toJavaVisibilityModifier(androidx.room.compiler.codegen.VisibilityModifier)>(r3);

        r5[0] = $r17;

        virtualinvoke $r23.<com.squareup.javapoet.MethodSpec$Builder: com.squareup.javapoet.MethodSpec$Builder addModifiers(javax.lang.model.element.Modifier[])>(r5);

        if z1 == 0 goto label2;

        virtualinvoke $r23.<com.squareup.javapoet.MethodSpec$Builder: com.squareup.javapoet.MethodSpec$Builder addAnnotation(java.lang.Class)>(class "Ljava/lang/Override;");

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r23, "methodBuilder(name).appl\u2026                        }");

        r6 = $r23;

        $r19 = new androidx.room.compiler.codegen.java.JavaFunSpec$Builder;

        specialinvoke $r19.<androidx.room.compiler.codegen.java.JavaFunSpec$Builder: void <init>(com.squareup.javapoet.MethodSpec$Builder)>(r6);

        $r25 = (androidx.room.compiler.codegen.XFunSpec$Builder) $r19;

        goto label7;

     label3:
        $r9 = <com.squareup.kotlinpoet.FunSpec: com.squareup.kotlinpoet.FunSpec$Companion Companion>;

        r4 = virtualinvoke $r9.<com.squareup.kotlinpoet.FunSpec$Companion: com.squareup.kotlinpoet.FunSpec$Builder builder(java.lang.String)>(r2);

        $r27 = newarray (com.squareup.kotlinpoet.KModifier)[1];

        $r10 = staticinvoke <androidx.room.compiler.codegen.kotlin.KotlinFunSpecKt: com.squareup.kotlinpoet.KModifier toKotlinVisibilityModifier(androidx.room.compiler.codegen.VisibilityModifier)>(r3);

        $r27[0] = $r10;

        virtualinvoke r4.<com.squareup.kotlinpoet.FunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder addModifiers(com.squareup.kotlinpoet.KModifier[])>($r27);

        if z0 == 0 goto label4;

        $r28 = newarray (com.squareup.kotlinpoet.KModifier)[1];

        $r15 = <com.squareup.kotlinpoet.KModifier: com.squareup.kotlinpoet.KModifier OPEN>;

        $r28[0] = $r15;

        virtualinvoke r4.<com.squareup.kotlinpoet.FunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder addModifiers(com.squareup.kotlinpoet.KModifier[])>($r28);

     label4:
        if z1 == 0 goto label5;

        $r29 = newarray (com.squareup.kotlinpoet.KModifier)[1];

        $r13 = <com.squareup.kotlinpoet.KModifier: com.squareup.kotlinpoet.KModifier OVERRIDE>;

        $r29[0] = $r13;

        virtualinvoke r4.<com.squareup.kotlinpoet.FunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder addModifiers(com.squareup.kotlinpoet.KModifier[])>($r29);

     label5:
        r7 = r4;

        $r12 = new androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        specialinvoke $r12.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: void <init>(com.squareup.kotlinpoet.FunSpec$Builder)>(r7);

        $r25 = (androidx.room.compiler.codegen.XFunSpec$Builder) $r12;

        goto label7;

     label6:
        $r22 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r22.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r22;

     label7:
        return $r25;
    }

    public static androidx.room.compiler.codegen.XFunSpec$Builder builder$default(androidx.room.compiler.codegen.XFunSpec$Companion, androidx.room.compiler.codegen.CodeLanguage, java.lang.String, androidx.room.compiler.codegen.VisibilityModifier, boolean, boolean, int, java.lang.Object)
    {
        androidx.room.compiler.codegen.XFunSpec$Companion r0;
        androidx.room.compiler.codegen.CodeLanguage r1;
        java.lang.String r2;
        androidx.room.compiler.codegen.VisibilityModifier r3;
        int i0, $i1, $i2;
        java.lang.Object r4;
        androidx.room.compiler.codegen.XFunSpec$Builder $r5;
        boolean z0, z1;

        r0 := @parameter0: androidx.room.compiler.codegen.XFunSpec$Companion;

        r1 := @parameter1: androidx.room.compiler.codegen.CodeLanguage;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: androidx.room.compiler.codegen.VisibilityModifier;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        i0 := @parameter6: int;

        r4 := @parameter7: java.lang.Object;

        $i1 = i0 & 8;

        if $i1 == 0 goto label1;

        z0 = 0;

     label1:
        $i2 = i0 & 16;

        if $i2 == 0 goto label2;

        z1 = 0;

     label2:
        $r5 = virtualinvoke r0.<androidx.room.compiler.codegen.XFunSpec$Companion: androidx.room.compiler.codegen.XFunSpec$Builder builder(androidx.room.compiler.codegen.CodeLanguage,java.lang.String,androidx.room.compiler.codegen.VisibilityModifier,boolean,boolean)>(r1, r2, r3, z0, z1);

        return $r5;
    }

    public final androidx.room.compiler.codegen.XFunSpec$Builder constructorBuilder(androidx.room.compiler.codegen.CodeLanguage, androidx.room.compiler.codegen.VisibilityModifier)
    {
        androidx.room.compiler.codegen.XFunSpec$Companion r0;
        androidx.room.compiler.codegen.CodeLanguage r1;
        androidx.room.compiler.codegen.VisibilityModifier r2;
        com.squareup.kotlinpoet.FunSpec$Builder r3, r6;
        javax.lang.model.element.Modifier[] r4;
        com.squareup.javapoet.MethodSpec$Builder r5, $r16;
        int[] $r7;
        int $i0, $i1;
        com.squareup.kotlinpoet.FunSpec$Companion $r8;
        com.squareup.kotlinpoet.KModifier $r9;
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder $r11;
        javax.lang.model.element.Modifier $r12;
        androidx.room.compiler.codegen.java.JavaFunSpec$Builder $r14;
        kotlin.NoWhenBranchMatchedException $r15;
        androidx.room.compiler.codegen.XFunSpec$Builder $r17;
        com.squareup.kotlinpoet.KModifier[] $r18;

        r0 := @this: androidx.room.compiler.codegen.XFunSpec$Companion;

        r1 := @parameter0: androidx.room.compiler.codegen.CodeLanguage;

        r2 := @parameter1: androidx.room.compiler.codegen.VisibilityModifier;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "language");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "visibility");

        $r7 = <androidx.room.compiler.codegen.XFunSpec$Companion$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r1.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r16 = staticinvoke <com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder constructorBuilder()>();

        r4 = newarray (javax.lang.model.element.Modifier)[1];

        $r12 = staticinvoke <androidx.room.compiler.codegen.java.JavaFunSpecKt: javax.lang.model.element.Modifier toJavaVisibilityModifier(androidx.room.compiler.codegen.VisibilityModifier)>(r2);

        r4[0] = $r12;

        virtualinvoke $r16.<com.squareup.javapoet.MethodSpec$Builder: com.squareup.javapoet.MethodSpec$Builder addModifiers(javax.lang.model.element.Modifier[])>(r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "constructorBuilder().app\u2026                        }");

        r5 = $r16;

        $r14 = new androidx.room.compiler.codegen.java.JavaFunSpec$Builder;

        specialinvoke $r14.<androidx.room.compiler.codegen.java.JavaFunSpec$Builder: void <init>(com.squareup.javapoet.MethodSpec$Builder)>(r5);

        $r17 = (androidx.room.compiler.codegen.XFunSpec$Builder) $r14;

        goto label4;

     label2:
        $r8 = <com.squareup.kotlinpoet.FunSpec: com.squareup.kotlinpoet.FunSpec$Companion Companion>;

        r3 = virtualinvoke $r8.<com.squareup.kotlinpoet.FunSpec$Companion: com.squareup.kotlinpoet.FunSpec$Builder constructorBuilder()>();

        $r18 = newarray (com.squareup.kotlinpoet.KModifier)[1];

        $r9 = staticinvoke <androidx.room.compiler.codegen.kotlin.KotlinFunSpecKt: com.squareup.kotlinpoet.KModifier toKotlinVisibilityModifier(androidx.room.compiler.codegen.VisibilityModifier)>(r2);

        $r18[0] = $r9;

        virtualinvoke r3.<com.squareup.kotlinpoet.FunSpec$Builder: com.squareup.kotlinpoet.FunSpec$Builder addModifiers(com.squareup.kotlinpoet.KModifier[])>($r18);

        r6 = r3;

        $r11 = new androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder;

        specialinvoke $r11.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec$Builder: void <init>(com.squareup.kotlinpoet.FunSpec$Builder)>(r6);

        $r17 = (androidx.room.compiler.codegen.XFunSpec$Builder) $r11;

        goto label4;

     label3:
        $r15 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r15.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r15;

     label4:
        return $r17;
    }

    static void <clinit>()
    {
        androidx.room.compiler.codegen.XFunSpec$Companion $r0;

        $r0 = new androidx.room.compiler.codegen.XFunSpec$Companion;

        specialinvoke $r0.<androidx.room.compiler.codegen.XFunSpec$Companion: void <init>()>();

        <androidx.room.compiler.codegen.XFunSpec$Companion: androidx.room.compiler.codegen.XFunSpec$Companion $$INSTANCE> = $r0;

        return;
    }

