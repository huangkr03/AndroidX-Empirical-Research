androidx.test.uiautomator.AccessibilityNodeInfoDumper
<androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>
<androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String[] NAF_EXCLUDED_CLASSES>
    void <init>()
    {
        androidx.test.uiautomator.AccessibilityNodeInfoDumper r0;

        r0 := @this: androidx.test.uiautomator.AccessibilityNodeInfoDumper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dumpWindowHierarchy(androidx.test.uiautomator.UiDevice, java.io.OutputStream) throws java.io.IOException
    {
        androidx.test.uiautomator.UiDevice r0;
        java.io.OutputStream r1;
        org.xmlpull.v1.XmlSerializer r2;
        android.view.accessibility.AccessibilityNodeInfo[] r3;
        int i0, $i1, $i2, $i3, i4;
        android.view.accessibility.AccessibilityNodeInfo r4;
        java.lang.Boolean $r5;
        java.lang.String $r7;

        r0 := @parameter0: androidx.test.uiautomator.UiDevice;

        r1 := @parameter1: java.io.OutputStream;

        r2 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, "UTF-8");

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>("UTF-8", $r5);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "hierarchy");

        $i1 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: int getDisplayRotation()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "rotation", $r7);

        r3 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: android.view.accessibility.AccessibilityNodeInfo[] getWindowRoots()>();

        i0 = lengthof r3;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r4 = r3[i4];

        $i2 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: int getDisplayWidth()>();

        $i3 = virtualinvoke r0.<androidx.test.uiautomator.UiDevice: int getDisplayHeight()>();

        staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo,org.xmlpull.v1.XmlSerializer,int,int,int)>(r4, r2, 0, $i2, $i3);

        i4 = i4 + 1;

        goto label1;

     label2:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "hierarchy");

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        return;
    }

    private static void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo, org.xmlpull.v1.XmlSerializer, int, int, int) throws java.io.IOException
    {
        android.view.accessibility.AccessibilityNodeInfo r0, r2;
        org.xmlpull.v1.XmlSerializer r1;
        int i0, i1, i2, i3, i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.Object[] $r23, $r29;
        java.lang.String $r24, $r27, $r28, $r30, $r31, $r32, $r33, $r35, $r37, $r38, $r39, $r41, $r43, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r58;
        java.lang.Integer $r25, $r26;
        java.lang.CharSequence $r36, $r40, $r42, $r44;
        android.graphics.Rect $r57;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r1 := @parameter1: org.xmlpull.v1.XmlSerializer;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "node");

        $z0 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: boolean nafExcludedClass(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        if $z0 != 0 goto label1;

        $z2 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: boolean nafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        if $z2 != 0 goto label1;

        $r33 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "NAF", $r33);

     label1:
        $r35 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "index", $r35);

        $r36 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r37 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r36);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "text", $r37);

        $r38 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>();

        $r39 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r38);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "resource-id", $r39);

        $r40 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        $r41 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r40);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "class", $r41);

        $r42 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>();

        $r43 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r42);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "package", $r43);

        $r44 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r45 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r44);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "content-desc", $r45);

        $z3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>();

        $r46 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "checkable", $r46);

        $z4 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>();

        $r47 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "checked", $r47);

        $z5 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        $r48 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z5);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "clickable", $r48);

        $z6 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        $r49 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z6);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "enabled", $r49);

        $z7 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>();

        $r50 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z7);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "focusable", $r50);

        $z8 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        $r51 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z8);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "focused", $r51);

        $z9 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>();

        $r52 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z9);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "scrollable", $r52);

        $z10 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>();

        $r53 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z10);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "long-clickable", $r53);

        $z11 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>();

        $r54 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z11);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "password", $r54);

        $z12 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>();

        $r55 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z12);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "selected", $r55);

        $z13 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>();

        $r56 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z13);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "visible-to-user", $r56);

        $r57 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoHelper: android.graphics.Rect getVisibleBoundsInScreen(android.view.accessibility.AccessibilityNodeInfo,int,int)>(r0, i1, i2);

        $r58 = virtualinvoke $r57.<android.graphics.Rect: java.lang.String toShortString()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "bounds", $r58);

        i3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        i6 = 0;

     label2:
        if i6 >= i3 goto label6;

        r2 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>(i6);

        if r2 == null goto label4;

        $z1 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>();

        if $z1 == 0 goto label3;

        staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo,org.xmlpull.v1.XmlSerializer,int,int,int)>(r2, r1, i6, i1, i2);

        virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

        goto label5;

     label3:
        $r30 = <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r29 = newarray (java.lang.Object)[1];

        $r31 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>();

        $r29[0] = $r31;

        $r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Skipping invisible child: %s", $r29);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r30, $r32);

        goto label5;

     label4:
        $r24 = <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r23 = newarray (java.lang.Object)[3];

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r23[0] = $r25;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r23[1] = $r26;

        $r27 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>();

        $r23[2] = $r27;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Null child %d/%d, parent: %s", $r23);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r24, $r28);

     label5:
        i6 = i6 + 1;

        goto label2;

     label6:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "node");

        return;
    }

    private static boolean nafExcludedClass(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        int i0, i1;
        java.lang.CharSequence $r4;
        boolean $z0;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $r4 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        r1 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r4);

        r2 = <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String[] NAF_EXCLUDED_CLASSES>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static boolean nafCheck(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.CharSequence $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $z1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        if $z1 == 0 goto label1;

        $z3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        if $z3 == 0 goto label1;

        $r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r2 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r1);

        $z4 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        $r3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r4 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r3);

        $z5 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z5 == 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        z0 = $z6;

        if z0 != 0 goto label3;

        return 1;

     label3:
        $z2 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        return $z2;
    }

    private static boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0, r1;
        int i0, i1;
        java.lang.CharSequence $r2, $r4;
        java.lang.String $r3, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>(i1);

        $r2 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r3 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r5 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r4);

        $z1 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label3;

     label2:
        return 1;

     label3:
        $z2 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return 0;
    }

    private static java.lang.String safeCharSeqToString(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = staticinvoke <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String stripInvalidXMLChars(java.lang.CharSequence)>(r0);

        return $r1;
    }

    private static java.lang.String stripInvalidXMLChars(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.StringBuffer r1, $r2;
        char c0;
        int $i1, i2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.CharSequence;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        r1 = $r2;

        i2 = 0;

     label01:
        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i2 >= $i1 goto label26;

        c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        if c0 < 1 goto label02;

        if c0 <= 8 goto label23;

     label02:
        if c0 < 11 goto label03;

        if c0 <= 12 goto label23;

     label03:
        if c0 < 14 goto label04;

        if c0 <= 31 goto label23;

     label04:
        if c0 < 127 goto label05;

        if c0 <= 132 goto label23;

     label05:
        if c0 < 134 goto label06;

        if c0 <= 159 goto label23;

     label06:
        if c0 < 64976 goto label07;

        if c0 <= 64991 goto label23;

     label07:
        if c0 < 131070 goto label08;

        if c0 <= 131071 goto label23;

     label08:
        if c0 < 196606 goto label09;

        if c0 <= 196607 goto label23;

     label09:
        if c0 < 262142 goto label10;

        if c0 <= 262143 goto label23;

     label10:
        if c0 < 327678 goto label11;

        if c0 <= 327679 goto label23;

     label11:
        if c0 < 393214 goto label12;

        if c0 <= 393215 goto label23;

     label12:
        if c0 < 458750 goto label13;

        if c0 <= 458751 goto label23;

     label13:
        if c0 < 524286 goto label14;

        if c0 <= 524287 goto label23;

     label14:
        if c0 < 589822 goto label15;

        if c0 <= 589823 goto label23;

     label15:
        if c0 < 655358 goto label16;

        if c0 <= 655359 goto label23;

     label16:
        if c0 < 720894 goto label17;

        if c0 <= 720895 goto label23;

     label17:
        if c0 < 786430 goto label18;

        if c0 <= 786431 goto label23;

     label18:
        if c0 < 851966 goto label19;

        if c0 <= 851967 goto label23;

     label19:
        if c0 < 917502 goto label20;

        if c0 <= 917503 goto label23;

     label20:
        if c0 < 983038 goto label21;

        if c0 <= 983039 goto label23;

     label21:
        if c0 < 1048574 goto label22;

        if c0 <= 1048575 goto label23;

     label22:
        if c0 < 1114110 goto label24;

        if c0 > 1114111 goto label24;

     label23:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        goto label25;

     label24:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label25:
        i2 = i2 + 1;

        goto label01;

     label26:
        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r3, $r5, $r7, $r9;
        java.lang.String $r1, $r4, $r6, $r8, $r10;
        java.lang.String[] $r2;

        $r0 = class "Landroidx/test/uiautomator/AccessibilityNodeInfoDumper;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String LOGTAG> = $r1;

        $r2 = newarray (java.lang.String)[4];

        $r3 = class "Landroid/widget/GridView;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2[0] = $r4;

        $r5 = class "Landroid/widget/GridLayout;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r2[1] = $r6;

        $r7 = class "Landroid/widget/ListView;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r2[2] = $r8;

        $r9 = class "Landroid/widget/TableLayout;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r2[3] = $r10;

        <androidx.test.uiautomator.AccessibilityNodeInfoDumper: java.lang.String[] NAF_EXCLUDED_CLASSES> = $r2;

        return;
    }

