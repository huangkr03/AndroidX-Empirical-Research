androidx.test.internal.events.client.TestEventClientArgs
<androidx.test.internal.events.client.TestEventClientArgs: boolean isOrchestrated>
<androidx.test.internal.events.client.TestEventClientArgs: boolean isPrimaryInstrProcess>
<androidx.test.internal.events.client.TestEventClientArgs: boolean isTestDiscoveryRequested>
<androidx.test.internal.events.client.TestEventClientArgs: boolean isTestRunEventsRequested>
<androidx.test.internal.events.client.TestEventClientArgs: int orchestratorVersion>
<androidx.test.internal.events.client.TestEventClientArgs: java.lang.String testDiscoveryService>
<androidx.test.internal.events.client.TestEventClientArgs: java.lang.String testRunEventService>
<androidx.test.internal.events.client.TestEventClientArgs: androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory connectionFactory>
<androidx.test.internal.events.client.TestEventClientArgs: boolean testPlatformMigration>
    public static androidx.test.internal.events.client.TestEventClientArgs$Builder builder()
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder $r0;

        $r0 = new androidx.test.internal.events.client.TestEventClientArgs$Builder;

        specialinvoke $r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: void <init>()>();

        return $r0;
    }

    private void <init>(boolean, int, androidx.test.internal.events.client.TestEventClientArgs$Builder)
    {
        androidx.test.internal.events.client.TestEventClientArgs r0;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0;
        androidx.test.internal.events.client.TestEventClientArgs$Builder r1;
        java.lang.String $r2, $r3;
        androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory $r4;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.internal.events.client.TestEventClientArgs: boolean isOrchestrated> = z0;

        $z1 = r1.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean isPrimaryInstProcess>;

        r0.<androidx.test.internal.events.client.TestEventClientArgs: boolean isPrimaryInstrProcess> = $z1;

        $z2 = r1.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testDiscoveryRequested>;

        r0.<androidx.test.internal.events.client.TestEventClientArgs: boolean isTestDiscoveryRequested> = $z2;

        $z3 = r1.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested>;

        r0.<androidx.test.internal.events.client.TestEventClientArgs: boolean isTestRunEventsRequested> = $z3;

        $r2 = staticinvoke <androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String '-$$Nest$fgettestDiscoveryService'(androidx.test.internal.events.client.TestEventClientArgs$Builder)>(r1);

        r0.<androidx.test.internal.events.client.TestEventClientArgs: java.lang.String testDiscoveryService> = $r2;

        $r3 = staticinvoke <androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String '-$$Nest$fgettestRunEventService'(androidx.test.internal.events.client.TestEventClientArgs$Builder)>(r1);

        r0.<androidx.test.internal.events.client.TestEventClientArgs: java.lang.String testRunEventService> = $r3;

        $r4 = staticinvoke <androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory '-$$Nest$fgetconnectionFactory'(androidx.test.internal.events.client.TestEventClientArgs$Builder)>(r1);

        r0.<androidx.test.internal.events.client.TestEventClientArgs: androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory connectionFactory> = $r4;

        r0.<androidx.test.internal.events.client.TestEventClientArgs: int orchestratorVersion> = i0;

        $z4 = r1.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testPlatformMigration>;

        r0.<androidx.test.internal.events.client.TestEventClientArgs: boolean testPlatformMigration> = $z4;

        return;
    }

    void <init>(boolean, int, androidx.test.internal.events.client.TestEventClientArgs$Builder, androidx.test.internal.events.client.TestEventClientArgs-IA)
    {
        androidx.test.internal.events.client.TestEventClientArgs r0;
        boolean z0;
        int i0;
        androidx.test.internal.events.client.TestEventClientArgs$Builder r1;
        androidx.test.internal.events.client.TestEventClientArgs-IA r2;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        r2 := @parameter3: androidx.test.internal.events.client.TestEventClientArgs-IA;

        specialinvoke r0.<androidx.test.internal.events.client.TestEventClientArgs: void <init>(boolean,int,androidx.test.internal.events.client.TestEventClientArgs$Builder)>(z0, i0, r1);

        return;
    }

androidx.test.internal.events.client.TestEventClientArgs$Builder
<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String TAG>
<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean isPrimaryInstProcess>
<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testDiscoveryRequested>
<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested>
<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testPlatformMigration>
<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory connectionFactory>
<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String orchestratorService>
<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testDiscoveryService>
<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testRunEventService>
    public androidx.test.internal.events.client.TestEventClientArgs$Builder setConnectionFactory(androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory r1;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        r1 := @parameter0: androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory connectionFactory> = r1;

        return r0;
    }

    public androidx.test.internal.events.client.TestEventClientArgs$Builder setOrchestratorService(java.lang.String)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        java.lang.String r1;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String orchestratorService> = r1;

        return r0;
    }

    public androidx.test.internal.events.client.TestEventClientArgs$Builder setPrimaryInstProcess(boolean)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        boolean z0;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean isPrimaryInstProcess> = z0;

        return r0;
    }

    public androidx.test.internal.events.client.TestEventClientArgs$Builder setTestDiscoveryRequested(boolean)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        boolean z0;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testDiscoveryRequested> = z0;

        return r0;
    }

    public androidx.test.internal.events.client.TestEventClientArgs$Builder setTestDiscoveryService(java.lang.String)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        java.lang.String r1;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testDiscoveryService> = r1;

        return r0;
    }

    public androidx.test.internal.events.client.TestEventClientArgs$Builder setTestPlatformMigration(boolean)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        boolean z0;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testPlatformMigration> = z0;

        return r0;
    }

    public androidx.test.internal.events.client.TestEventClientArgs$Builder setTestRunEventService(java.lang.String)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        java.lang.String r1;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testRunEventService> = r1;

        return r0;
    }

    public androidx.test.internal.events.client.TestEventClientArgs$Builder setTestRunEventsRequested(boolean)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        boolean z0;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested> = z0;

        return r0;
    }

    static volatile androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory '-$$Nest$fgetconnectionFactory'(androidx.test.internal.events.client.TestEventClientArgs$Builder)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory $r1;

        r0 := @parameter0: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        $r1 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory connectionFactory>;

        return $r1;
    }

    public androidx.test.internal.events.client.TestEventClientArgs build()
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        java.lang.String $r1, $r2, $r3, $r8, $r14, $r19, $r20, $r21, r22, r23;
        androidx.test.internal.events.client.TestEventClientArgs $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory $r9;
        byte b5, b6;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        b5 = 0;

        $r1 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testDiscoveryService>;

        if $r1 == null goto label01;

        $r21 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testDiscoveryService>;

        $z4 = virtualinvoke $r21.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label01;

        b5 = 2;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testDiscoveryRequested> = 1;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested> = 0;

        goto label07;

     label01:
        $r2 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testRunEventService>;

        if $r2 == null goto label02;

        $r20 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testRunEventService>;

        $z3 = virtualinvoke $r20.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label02;

        b5 = 2;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested> = 1;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testDiscoveryRequested> = 0;

        goto label07;

     label02:
        $r3 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String orchestratorService>;

        if $r3 == null goto label06;

        $r9 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory connectionFactory>;

        if $r9 != null goto label03;

        r22 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String orchestratorService>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Orchestrator service [");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] argument given, but no connectionFactory was provided for the v1 service");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TestEventClient", $r19);

        goto label07;

     label03:
        $z1 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testDiscoveryRequested>;

        if $z1 != 0 goto label04;

        $z2 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested>;

        if $z2 == 0 goto label05;

     label04:
        b5 = 1;

        goto label07;

     label05:
        r23 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String orchestratorService>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Orchestrator service [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] argument given, but neither test discovery nor run event services was requested");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TestEventClient", $r14);

        goto label07;

     label06:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TestEventClient", "No service name argument was given (testDiscoveryService, testRunEventService or orchestratorService)");

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testDiscoveryRequested> = 0;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested> = 0;

     label07:
        $z5 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testDiscoveryRequested>;

        if $z5 == 0 goto label08;

        $z0 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested>;

        if $z0 == 0 goto label08;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TestEventClient", "Can\'t use both the test discovery and run event services simultaneously");

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested> = 0;

     label08:
        if b5 <= 0 goto label09;

        b6 = b5;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connecting to Orchestrator v");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TestEventClient", $r8);

     label09:
        $r4 = new androidx.test.internal.events.client.TestEventClientArgs;

        if b5 <= 0 goto label10;

        $z6 = 1;

        goto label11;

     label10:
        $z6 = 0;

     label11:
        specialinvoke $r4.<androidx.test.internal.events.client.TestEventClientArgs: void <init>(boolean,int,androidx.test.internal.events.client.TestEventClientArgs$Builder,androidx.test.internal.events.client.TestEventClientArgs-IA)>($z6, b5, r0, null);

        return $r4;
    }

    static volatile java.lang.String '-$$Nest$fgettestDiscoveryService'(androidx.test.internal.events.client.TestEventClientArgs$Builder)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        java.lang.String $r1;

        r0 := @parameter0: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        $r1 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testDiscoveryService>;

        return $r1;
    }

    static volatile java.lang.String '-$$Nest$fgettestRunEventService'(androidx.test.internal.events.client.TestEventClientArgs$Builder)
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;
        java.lang.String $r1;

        r0 := @parameter0: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        $r1 = r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: java.lang.String testRunEventService>;

        return $r1;
    }

    public void <init>()
    {
        androidx.test.internal.events.client.TestEventClientArgs$Builder r0;

        r0 := @this: androidx.test.internal.events.client.TestEventClientArgs$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean isPrimaryInstProcess> = 1;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testDiscoveryRequested> = 0;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testRunEventsRequested> = 0;

        r0.<androidx.test.internal.events.client.TestEventClientArgs$Builder: boolean testPlatformMigration> = 0;

        return;
    }

androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory
<androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory: androidx.test.internal.events.client.TestEventServiceConnection create(androidx.test.internal.events.client.TestEventClientConnectListener)>
