androidx.room.compiler.processing.ksp.KspMethodType
<androidx.room.compiler.processing.ksp.KspMethodType: androidx.room.compiler.processing.ksp.KspMethodType$Companion Companion>
<androidx.room.compiler.processing.ksp.KspMethodType: androidx.room.compiler.processing.ksp.KspMethodElement origin>
<androidx.room.compiler.processing.ksp.KspMethodType: kotlin.Lazy typeVariableNames$delegate>
    private void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, androidx.room.compiler.processing.ksp.KspMethodElement, androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspMethodType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        androidx.room.compiler.processing.ksp.KspMethodElement r2;
        androidx.room.compiler.processing.ksp.KspType r3;
        androidx.room.compiler.processing.ksp.KspExecutableElement $r4;
        androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2 $r5;
        kotlin.jvm.functions.Function0 $r6;
        kotlin.Lazy $r7;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: androidx.room.compiler.processing.ksp.KspMethodElement;

        r3 := @parameter2: androidx.room.compiler.processing.ksp.KspType;

        $r4 = (androidx.room.compiler.processing.ksp.KspExecutableElement) r2;

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspExecutableType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspExecutableElement,androidx.room.compiler.processing.ksp.KspType)>(r1, $r4, r3);

        r0.<androidx.room.compiler.processing.ksp.KspMethodType: androidx.room.compiler.processing.ksp.KspMethodElement origin> = r2;

        $r5 = new androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2;

        specialinvoke $r5.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2: void <init>(androidx.room.compiler.processing.ksp.KspMethodType,androidx.room.compiler.processing.ksp.KspProcessingEnv)>(r0, r1);

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        $r7 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r6);

        r0.<androidx.room.compiler.processing.ksp.KspMethodType: kotlin.Lazy typeVariableNames$delegate> = $r7;

        return;
    }

    public androidx.room.compiler.processing.ksp.KspMethodElement getOrigin()
    {
        androidx.room.compiler.processing.ksp.KspMethodType r0;
        androidx.room.compiler.processing.ksp.KspMethodElement $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspMethodType: androidx.room.compiler.processing.ksp.KspMethodElement origin>;

        return $r1;
    }

    public java.util.List getTypeVariableNames()
    {
        androidx.room.compiler.processing.ksp.KspMethodType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspMethodType: kotlin.Lazy typeVariableNames$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    public volatile androidx.room.compiler.processing.ksp.KspExecutableElement getOrigin()
    {
        androidx.room.compiler.processing.ksp.KspMethodType r0;
        androidx.room.compiler.processing.ksp.KspMethodElement $r1;
        androidx.room.compiler.processing.ksp.KspExecutableElement $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType: androidx.room.compiler.processing.ksp.KspMethodElement getOrigin()>();

        $r2 = (androidx.room.compiler.processing.ksp.KspExecutableElement) $r1;

        return $r2;
    }

    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, androidx.room.compiler.processing.ksp.KspMethodElement, androidx.room.compiler.processing.ksp.KspType, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.processing.ksp.KspMethodType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        androidx.room.compiler.processing.ksp.KspMethodElement r2;
        androidx.room.compiler.processing.ksp.KspType r3;
        kotlin.jvm.internal.DefaultConstructorMarker $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: androidx.room.compiler.processing.ksp.KspMethodElement;

        r3 := @parameter2: androidx.room.compiler.processing.ksp.KspType;

        $r4 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspMethodElement,androidx.room.compiler.processing.ksp.KspType)>(r1, r2, r3);

        return;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.ksp.KspMethodType$Companion $r0;

        $r0 = new androidx.room.compiler.processing.ksp.KspMethodType$Companion;

        specialinvoke $r0.<androidx.room.compiler.processing.ksp.KspMethodType$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.compiler.processing.ksp.KspMethodType: androidx.room.compiler.processing.ksp.KspMethodType$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.processing.ksp.KspMethodType$Companion
    private void <init>()
    {
        androidx.room.compiler.processing.ksp.KspMethodType$Companion r0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspMethodType create(androidx.room.compiler.processing.ksp.KspProcessingEnv, androidx.room.compiler.processing.ksp.KspMethodElement, androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspMethodType$Companion r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        androidx.room.compiler.processing.ksp.KspMethodElement r2;
        androidx.room.compiler.processing.ksp.KspType r3;
        boolean $z0;
        androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType $r4;
        androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType $r5;
        androidx.room.compiler.processing.ksp.KspMethodType $r6;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$Companion;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: androidx.room.compiler.processing.ksp.KspMethodElement;

        r3 := @parameter2: androidx.room.compiler.processing.ksp.KspType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "origin");

        $z0 = virtualinvoke r2.<androidx.room.compiler.processing.ksp.KspMethodElement: boolean isSuspendFunction()>();

        if $z0 == 0 goto label1;

        $r5 = new androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType;

        specialinvoke $r5.<androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspMethodElement,androidx.room.compiler.processing.ksp.KspType)>(r1, r2, r3);

        $r6 = (androidx.room.compiler.processing.ksp.KspMethodType) $r5;

        goto label2;

     label1:
        $r4 = new androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType;

        specialinvoke $r4.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspMethodElement,androidx.room.compiler.processing.ksp.KspType)>(r1, r2, r3);

        $r6 = (androidx.room.compiler.processing.ksp.KspMethodType) $r4;

     label2:
        return $r6;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.processing.ksp.KspMethodType$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType$Companion: void <init>()>();

        return;
    }

androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2
<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspMethodElement $origin>
<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspProcessingEnv $env>
<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspType $containing>
    void <init>(androidx.room.compiler.processing.ksp.KspMethodElement, androidx.room.compiler.processing.ksp.KspProcessingEnv, androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2 r0;
        androidx.room.compiler.processing.ksp.KspMethodElement $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        androidx.room.compiler.processing.ksp.KspType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspMethodElement;

        $r2 := @parameter1: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        $r3 := @parameter2: androidx.room.compiler.processing.ksp.KspType;

        r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspMethodElement $origin> = $r1;

        r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspProcessingEnv $env> = $r2;

        r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspType $containing> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.room.compiler.processing.ksp.KspType invoke()
    {
        androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2 r0;
        androidx.room.compiler.processing.ksp.KspMethodElement $r1;
        com.google.devtools.ksp.symbol.KSFunctionDeclaration $r2;
        androidx.room.compiler.processing.ksp.KspType $r3, $r5;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2;

        $r1 = r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspMethodElement $origin>;

        $r2 = virtualinvoke $r1.<androidx.room.compiler.processing.ksp.KspMethodElement: com.google.devtools.ksp.symbol.KSFunctionDeclaration getDeclaration()>();

        $r4 = r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspProcessingEnv $env>;

        $r3 = r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspType $containing>;

        $r5 = staticinvoke <androidx.room.compiler.processing.ksp.KSFunctionExtKt: androidx.room.compiler.processing.ksp.KspType returnKspType(com.google.devtools.ksp.symbol.KSFunctionDeclaration,androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspType)>($r2, $r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2 r0;
        androidx.room.compiler.processing.ksp.KspType $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: androidx.room.compiler.processing.ksp.KspType invoke()>();

        return $r1;
    }

androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType
<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType: kotlin.Lazy returnType$delegate>
    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, androidx.room.compiler.processing.ksp.KspMethodElement, androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        androidx.room.compiler.processing.ksp.KspMethodElement r2;
        androidx.room.compiler.processing.ksp.KspType r3;
        androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2 $r4;
        kotlin.jvm.functions.Function0 $r5;
        kotlin.Lazy $r6;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: androidx.room.compiler.processing.ksp.KspMethodElement;

        r3 := @parameter2: androidx.room.compiler.processing.ksp.KspType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "origin");

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspMethodElement,androidx.room.compiler.processing.ksp.KspType,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, r2, r3, null);

        $r4 = new androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2;

        specialinvoke $r4.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType$returnType$2: void <init>(androidx.room.compiler.processing.ksp.KspMethodElement,androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspType)>(r2, r1, r3);

        $r5 = (kotlin.jvm.functions.Function0) $r4;

        $r6 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r5);

        r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType: kotlin.Lazy returnType$delegate> = $r6;

        return;
    }

    public androidx.room.compiler.processing.XType getReturnType()
    {
        androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.room.compiler.processing.XType $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType;

        r1 = r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspNormalMethodType: kotlin.Lazy returnType$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.room.compiler.processing.XType) $r2;

        return $r3;
    }

androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType
    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, androidx.room.compiler.processing.ksp.KspMethodElement, androidx.room.compiler.processing.ksp.KspType)
    {
        androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        androidx.room.compiler.processing.ksp.KspMethodElement r2;
        androidx.room.compiler.processing.ksp.KspType r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: androidx.room.compiler.processing.ksp.KspMethodElement;

        r3 := @parameter2: androidx.room.compiler.processing.ksp.KspType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "origin");

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,androidx.room.compiler.processing.ksp.KspMethodElement,androidx.room.compiler.processing.ksp.KspType,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, r2, r3, null);

        return;
    }

    public androidx.room.compiler.processing.XType getReturnType()
    {
        androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType r0;
        androidx.room.compiler.processing.ksp.KspMethodElement $r1;
        androidx.room.compiler.processing.XType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType: androidx.room.compiler.processing.ksp.KspMethodElement getOrigin()>();

        $r2 = virtualinvoke $r1.<androidx.room.compiler.processing.ksp.KspMethodElement: androidx.room.compiler.processing.XType getReturnType()>();

        return $r2;
    }

    public androidx.room.compiler.processing.XType getSuspendFunctionReturnType()
    {
        androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;
        androidx.room.compiler.processing.ksp.KspMethodElement $r2;
        com.google.devtools.ksp.symbol.KSFunctionDeclaration $r3;
        androidx.room.compiler.processing.ksp.KspType $r4, $r6;
        com.google.devtools.ksp.symbol.KSType $r5, $r8;
        androidx.room.compiler.processing.XType $r7;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType: androidx.room.compiler.processing.ksp.KspMethodElement getOrigin()>();

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspMethodElement: com.google.devtools.ksp.symbol.KSFunctionDeclaration getDeclaration()>();

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType$KspSuspendMethodType: androidx.room.compiler.processing.ksp.KspType getContaining()>();

        if $r4 == null goto label1;

        $r8 = virtualinvoke $r4.<androidx.room.compiler.processing.ksp.KspType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        goto label2;

     label1:
        $r8 = null;

     label2:
        $r5 = staticinvoke <androidx.room.compiler.processing.ksp.KSAsMemberOfKt: com.google.devtools.ksp.symbol.KSType returnTypeAsMemberOf(com.google.devtools.ksp.symbol.KSFunctionDeclaration,com.google.devtools.ksp.symbol.KSType)>($r3, $r8);

        $r6 = virtualinvoke $r1.<androidx.room.compiler.processing.ksp.KspProcessingEnv: androidx.room.compiler.processing.ksp.KspType wrap(com.google.devtools.ksp.symbol.KSType,boolean)>($r5, 0);

        $r7 = (androidx.room.compiler.processing.XType) $r6;

        return $r7;
    }

androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1
<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1: androidx.room.compiler.processing.ksp.KspProcessingEnv $env>
    void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)
    {
        androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1 r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r0.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1: androidx.room.compiler.processing.ksp.KspProcessingEnv $env> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final com.squareup.javapoet.TypeName invoke(com.google.devtools.ksp.symbol.KSTypeReference)
    {
        androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1 r0;
        com.google.devtools.ksp.symbol.KSTypeReference r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.processing.Resolver $r3;
        com.squareup.javapoet.TypeName $r4;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1;

        r1 := @parameter0: com.google.devtools.ksp.symbol.KSTypeReference;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1: androidx.room.compiler.processing.ksp.KspProcessingEnv $env>;

        $r3 = virtualinvoke $r2.<androidx.room.compiler.processing.ksp.KspProcessingEnv: com.google.devtools.ksp.processing.Resolver getResolver()>();

        $r4 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeJavaPoetExtKt: com.squareup.javapoet.TypeName asJTypeName(com.google.devtools.ksp.symbol.KSTypeReference,com.google.devtools.ksp.processing.Resolver)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1 r0;
        java.lang.Object r1;
        com.google.devtools.ksp.symbol.KSTypeReference $r2;
        com.squareup.javapoet.TypeName $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.devtools.ksp.symbol.KSTypeReference) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1: com.squareup.javapoet.TypeName invoke(com.google.devtools.ksp.symbol.KSTypeReference)>($r2);

        return $r3;
    }

androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2
<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2: androidx.room.compiler.processing.ksp.KspMethodType this$0>
<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2: androidx.room.compiler.processing.ksp.KspProcessingEnv $env>
    void <init>(androidx.room.compiler.processing.ksp.KspMethodType, androidx.room.compiler.processing.ksp.KspProcessingEnv)
    {
        androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2 r0;
        androidx.room.compiler.processing.ksp.KspMethodType $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2;

        $r1 := @parameter0: androidx.room.compiler.processing.ksp.KspMethodType;

        $r2 := @parameter1: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r0.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2: androidx.room.compiler.processing.ksp.KspMethodType this$0> = $r1;

        r0.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2: androidx.room.compiler.processing.ksp.KspProcessingEnv $env> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.List invoke()
    {
        androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2 r0;
        java.lang.Iterable $r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r2;
        java.util.Collection r3, r7, r9;
        java.util.Iterator r4;
        java.lang.Object r5;
        com.google.devtools.ksp.symbol.KSTypeParameter r6;
        com.squareup.javapoet.TypeName[] r8, $r21, $r26;
        androidx.room.compiler.processing.ksp.KspMethodType $r10;
        androidx.room.compiler.processing.ksp.KspMethodElement $r11;
        com.google.devtools.ksp.symbol.KSFunctionDeclaration $r12;
        java.util.List $r13, $r15, $r20;
        java.util.ArrayList $r14;
        int $i0, $i1;
        boolean $z4;
        kotlin.sequences.Sequence $r16, $r19;
        androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1 $r17;
        kotlin.jvm.functions.Function1 $r18;
        java.lang.Object[] $r22, $r25;
        com.google.devtools.ksp.symbol.KSName $r23;
        java.lang.String $r24;
        com.squareup.javapoet.TypeVariableName $r27;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2;

        $r10 = r0.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2: androidx.room.compiler.processing.ksp.KspMethodType this$0>;

        $r11 = virtualinvoke $r10.<androidx.room.compiler.processing.ksp.KspMethodType: androidx.room.compiler.processing.ksp.KspMethodElement getOrigin()>();

        $r12 = virtualinvoke $r11.<androidx.room.compiler.processing.ksp.KspMethodElement: com.google.devtools.ksp.symbol.KSFunctionDeclaration getDeclaration()>();

        $r13 = interfaceinvoke $r12.<com.google.devtools.ksp.symbol.KSFunctionDeclaration: java.util.List getTypeParameters()>();

        $r1 = (java.lang.Iterable) $r13;

        r2 = r0.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2: androidx.room.compiler.processing.ksp.KspProcessingEnv $env>;

        $r14 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r1, 10);

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = (java.util.Collection) $r14;

        r4 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.google.devtools.ksp.symbol.KSTypeParameter) r5;

        r9 = r3;

        $r16 = interfaceinvoke r6.<com.google.devtools.ksp.symbol.KSTypeParameter: kotlin.sequences.Sequence getBounds()>();

        $r17 = new androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1;

        specialinvoke $r17.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2$1$typeParameterBounds$1: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv)>(r2);

        $r18 = (kotlin.jvm.functions.Function1) $r17;

        $r19 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r16, $r18);

        $r20 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r19);

        r7 = (java.util.Collection) $r20;

        $r21 = newarray (com.squareup.javapoet.TypeName)[0];

        $r22 = interfaceinvoke r7.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r21);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r22, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        r8 = (com.squareup.javapoet.TypeName[]) $r22;

        $r23 = interfaceinvoke r6.<com.google.devtools.ksp.symbol.KSTypeParameter: com.google.devtools.ksp.symbol.KSName getName()>();

        $r24 = interfaceinvoke $r23.<com.google.devtools.ksp.symbol.KSName: java.lang.String asString()>();

        $i1 = lengthof r8;

        $r25 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r8, $i1);

        $r26 = (com.squareup.javapoet.TypeName[]) $r25;

        $r27 = staticinvoke <com.squareup.javapoet.TypeVariableName: com.squareup.javapoet.TypeVariableName get(java.lang.String,com.squareup.javapoet.TypeName[])>($r24, $r26);

        interfaceinvoke r9.<java.util.Collection: boolean add(java.lang.Object)>($r27);

        goto label1;

     label2:
        $r15 = (java.util.List) r3;

        return $r15;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2 r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspMethodType$typeVariableNames$2: java.util.List invoke()>();

        return $r1;
    }

