androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep
<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion Companion>
<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.util.List symbolProcessorProviders>
<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.util.Map processorOptions>
<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.lang.String name>
<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.lang.String JAVA_OUT_DIR>
<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.lang.String KOTLIN_OUT_DIR>
<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.lang.String CLASS_OUT_FOLDER_NAME>
    public void <init>(java.util.List, java.util.Map)
    {
        androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep r0;
        java.util.List r1;
        java.util.Map r2;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "symbolProcessorProviders");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "processorOptions");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.util.List symbolProcessorProviders> = r1;

        r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.util.Map processorOptions> = r2;

        r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.lang.String name> = "ksp";

        return;
    }

    public java.lang.String getName()
    {
        androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep r0;
        java.lang.String $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.lang.String name>;

        return $r1;
    }

    private final com.google.devtools.ksp.KspOptions$Builder createKspOptions(java.io.File)
    {
        androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep r0;
        java.io.File r1, $r5, $r6;
        com.google.devtools.ksp.KspOptions$Builder r2, $r4;
        java.util.Map $r7, $r8;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep;

        r1 := @parameter0: java.io.File;

        $r4 = new com.google.devtools.ksp.KspOptions$Builder;

        specialinvoke $r4.<com.google.devtools.ksp.KspOptions$Builder: void <init>()>();

        r2 = $r4;

        $r5 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r1, "generatedJava");

        virtualinvoke r2.<com.google.devtools.ksp.KspOptions$Builder: void setJavaOutputDir(java.io.File)>($r5);

        $r6 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r1, "generatedKotlin");

        virtualinvoke r2.<com.google.devtools.ksp.KspOptions$Builder: void setKotlinOutputDir(java.io.File)>($r6);

        $r7 = virtualinvoke r2.<com.google.devtools.ksp.KspOptions$Builder: java.util.Map getProcessingOptions()>();

        $r8 = r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.util.Map processorOptions>;

        interfaceinvoke $r7.<java.util.Map: void putAll(java.util.Map)>($r8);

        return r2;
    }

    public androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult execute(java.io.File, androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments)
    {
        androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep r0;
        java.io.File r1, $r9, $r11, $r20, $r22, $r42;
        androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments r2, $r41;
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector r3, $r7;
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List r5, $r6, $r14, $r15, $r24, $r26, $r28, $r29, $r32, r33, $r37, $r40, $r43;
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner $r8;
        androidx.room.compiler.processing.util.compiler.TestKspRegistrar $r10;
        com.google.devtools.ksp.KspOptions$Builder $r12;
        org.jetbrains.kotlin.cli.common.messages.MessageCollector $r13;
        org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments $r16;
        androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult$Companion $r17;
        androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult $r18, $r34;
        androidx.room.compiler.processing.util.compiler.SourceSet[] r19;
        androidx.room.compiler.processing.util.compiler.SourceSet $r21, $r23;
        java.util.Collection $r25, $r30, $r38;
        java.lang.Iterable $r27, $r31, $r39;
        org.jetbrains.kotlin.cli.common.ExitCode $r35, $r36;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workingDir");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "arguments");

        $r6 = r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.util.List symbolProcessorProviders>;

        $z1 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r17 = <androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult: androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult$Companion Companion>;

        $r18 = virtualinvoke $r17.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult$Companion: androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult skip(androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments)>(r2);

        return $r18;

     label1:
        $r7 = new androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        specialinvoke $r7.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: void <init>()>();

        r3 = $r7;

        $r8 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: androidx.room.compiler.processing.util.compiler.KotlinCliRunner INSTANCE>;

        $r9 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r1, "class-out");

        $r10 = new androidx.room.compiler.processing.util.compiler.TestKspRegistrar;

        $r11 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r1, "ksp-compiler");

        $r12 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: com.google.devtools.ksp.KspOptions$Builder createKspOptions(java.io.File)>(r1);

        $r14 = r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: java.util.List symbolProcessorProviders>;

        $r13 = (org.jetbrains.kotlin.cli.common.messages.MessageCollector) r3;

        specialinvoke $r10.<androidx.room.compiler.processing.util.compiler.TestKspRegistrar: void <init>(java.io.File,com.google.devtools.ksp.KspOptions$Builder,java.util.List,org.jetbrains.kotlin.cli.common.messages.MessageCollector)>($r11, $r12, $r14, $r13);

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r10);

        r4 = virtualinvoke $r8.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult runKotlinCli(androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments,java.io.File,java.util.List)>(r2, $r9, $r15);

        $r16 = virtualinvoke r4.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments getKotlinCliArguments()>();

        $z2 = virtualinvoke $r16.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: boolean getAllWarningsAsErrors()>();

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r3.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: boolean hasWarnings()>();

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        z0 = $z4;

        r19 = newarray (androidx.room.compiler.processing.util.compiler.SourceSet)[2];

        $r20 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r1, "generatedKotlin");

        $r21 = staticinvoke <androidx.room.compiler.processing.util.compiler.SourceSetKt: androidx.room.compiler.processing.util.compiler.SourceSet toSourceSet(java.io.File)>($r20);

        r19[0] = $r21;

        $r22 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r1, "generatedJava");

        $r23 = staticinvoke <androidx.room.compiler.processing.util.compiler.SourceSetKt: androidx.room.compiler.processing.util.compiler.SourceSet toSourceSet(java.io.File)>($r22);

        r19[1] = $r23;

        r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>(r19);

        $r24 = virtualinvoke r4.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: java.util.List getDiagnostics()>();

        $r25 = (java.util.Collection) $r24;

        $r26 = virtualinvoke r3.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.util.List getDiagnostics()>();

        $r27 = (java.lang.Iterable) $r26;

        $r28 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r25, $r27);

        $r29 = virtualinvoke r2.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getSourceSets()>();

        $r30 = (java.util.Collection) $r29;

        $r31 = (java.lang.Iterable) r5;

        $r32 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r30, $r31);

        r33 = staticinvoke <androidx.room.compiler.processing.util.compiler.steps.KotlinCompilationStepKt: java.util.List resolveDiagnostics(java.util.List,java.util.List)>($r28, $r32);

        $r34 = new androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult;

        $r35 = virtualinvoke r4.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: org.jetbrains.kotlin.cli.common.ExitCode getExitCode()>();

        $r36 = <org.jetbrains.kotlin.cli.common.ExitCode: org.jetbrains.kotlin.cli.common.ExitCode OK>;

        if $r35 != $r36 goto label4;

        if z0 != 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        $r37 = virtualinvoke r2.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getSourceSets()>();

        $r38 = (java.util.Collection) $r37;

        $r39 = (java.lang.Iterable) r5;

        $r40 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r38, $r39);

        $r41 = staticinvoke <androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments copy$default(androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments,java.util.List,java.util.List,boolean,java.util.List,java.util.List,int,java.lang.Object)>(r2, $r40, null, 0, null, null, 30, null);

        $r42 = virtualinvoke r4.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: java.io.File getCompiledClasspath()>();

        $r43 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r42);

        specialinvoke $r34.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepResult: void <init>(boolean,java.util.List,java.util.List,androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments,java.util.List)>($z5, r5, r33, $r41, $r43);

        return $r34;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep: androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion
    private void <init>()
    {
        androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.processing.util.compiler.steps.KspCompilationStep$Companion: void <init>()>();

        return;
    }

