androidx.metrics.performance.JankStats
<androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStats$Companion Companion>
<androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStats$OnFrameListener frameListener>
<androidx.metrics.performance.JankStats: androidx.metrics.performance.PerformanceMetricsState$Holder holder>
<androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStatsBaseImpl implementation>
<androidx.metrics.performance.JankStats: boolean isTrackingEnabled>
<androidx.metrics.performance.JankStats: float jankHeuristicMultiplier>
    private void <init>(android.view.Window, androidx.metrics.performance.JankStats$OnFrameListener)
    {
        androidx.metrics.performance.JankStats r0;
        android.view.Window r1;
        androidx.metrics.performance.JankStats$OnFrameListener r2;
        android.view.View r3;
        androidx.metrics.performance.PerformanceMetricsState$Companion $r4;
        androidx.metrics.performance.PerformanceMetricsState$Holder $r5;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.metrics.performance.JankStatsApi16Impl $r6;
        androidx.metrics.performance.JankStatsApi22Impl $r7;
        androidx.metrics.performance.JankStatsApi24Impl $r8;
        androidx.metrics.performance.JankStatsApi26Impl $r9;
        androidx.metrics.performance.JankStatsApi31Impl $r10;
        java.lang.IllegalStateException $r11;
        androidx.metrics.performance.JankStatsBaseImpl $r13, $r14;

        r0 := @this: androidx.metrics.performance.JankStats;

        r1 := @parameter0: android.view.Window;

        r2 := @parameter1: androidx.metrics.performance.JankStats$OnFrameListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStats$OnFrameListener frameListener> = r2;

        r3 = virtualinvoke r1.<android.view.Window: android.view.View peekDecorView()>();

        if r3 != null goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("window.peekDecorView() is null: JankStats can only be created with a Window that has a non-null DecorView");

        throw $r11;

     label1:
        $r4 = <androidx.metrics.performance.PerformanceMetricsState: androidx.metrics.performance.PerformanceMetricsState$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.metrics.performance.PerformanceMetricsState$Companion: androidx.metrics.performance.PerformanceMetricsState$Holder create$metrics_performance_release(android.view.View)>(r3);

        r0.<androidx.metrics.performance.JankStats: androidx.metrics.performance.PerformanceMetricsState$Holder holder> = $r5;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 31 goto label2;

        $r10 = new androidx.metrics.performance.JankStatsApi31Impl;

        specialinvoke $r10.<androidx.metrics.performance.JankStatsApi31Impl: void <init>(androidx.metrics.performance.JankStats,android.view.View,android.view.Window)>(r0, r3, r1);

        $r13 = (androidx.metrics.performance.JankStatsBaseImpl) $r10;

        goto label7;

     label2:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 26 goto label3;

        $r9 = new androidx.metrics.performance.JankStatsApi26Impl;

        specialinvoke $r9.<androidx.metrics.performance.JankStatsApi26Impl: void <init>(androidx.metrics.performance.JankStats,android.view.View,android.view.Window)>(r0, r3, r1);

        $r13 = (androidx.metrics.performance.JankStatsBaseImpl) $r9;

        goto label7;

     label3:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 24 goto label4;

        $r8 = new androidx.metrics.performance.JankStatsApi24Impl;

        specialinvoke $r8.<androidx.metrics.performance.JankStatsApi24Impl: void <init>(androidx.metrics.performance.JankStats,android.view.View,android.view.Window)>(r0, r3, r1);

        $r13 = (androidx.metrics.performance.JankStatsBaseImpl) $r8;

        goto label7;

     label4:
        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 < 22 goto label5;

        $r7 = new androidx.metrics.performance.JankStatsApi22Impl;

        specialinvoke $r7.<androidx.metrics.performance.JankStatsApi22Impl: void <init>(androidx.metrics.performance.JankStats,android.view.View)>(r0, r3);

        $r13 = (androidx.metrics.performance.JankStatsBaseImpl) $r7;

        goto label7;

     label5:
        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 < 16 goto label6;

        $r6 = new androidx.metrics.performance.JankStatsApi16Impl;

        specialinvoke $r6.<androidx.metrics.performance.JankStatsApi16Impl: void <init>(androidx.metrics.performance.JankStats,android.view.View)>(r0, r3);

        $r13 = (androidx.metrics.performance.JankStatsBaseImpl) $r6;

        goto label7;

     label6:
        $r13 = new androidx.metrics.performance.JankStatsBaseImpl;

        specialinvoke $r13.<androidx.metrics.performance.JankStatsBaseImpl: void <init>(androidx.metrics.performance.JankStats)>(r0);

     label7:
        r0.<androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStatsBaseImpl implementation> = $r13;

        $r14 = r0.<androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStatsBaseImpl implementation>;

        virtualinvoke $r14.<androidx.metrics.performance.JankStatsBaseImpl: void setupFrameTimer(boolean)>(1);

        r0.<androidx.metrics.performance.JankStats: boolean isTrackingEnabled> = 1;

        r0.<androidx.metrics.performance.JankStats: float jankHeuristicMultiplier> = 2.0F;

        return;
    }

    public final androidx.metrics.performance.JankStatsBaseImpl getImplementation$metrics_performance_release()
    {
        androidx.metrics.performance.JankStats r0;
        androidx.metrics.performance.JankStatsBaseImpl $r1;

        r0 := @this: androidx.metrics.performance.JankStats;

        $r1 = r0.<androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStatsBaseImpl implementation>;

        return $r1;
    }

    public final boolean isTrackingEnabled()
    {
        androidx.metrics.performance.JankStats r0;
        boolean $z0;

        r0 := @this: androidx.metrics.performance.JankStats;

        $z0 = r0.<androidx.metrics.performance.JankStats: boolean isTrackingEnabled>;

        return $z0;
    }

    public final void setTrackingEnabled(boolean)
    {
        androidx.metrics.performance.JankStats r0;
        boolean z0;
        androidx.metrics.performance.JankStatsBaseImpl $r1;

        r0 := @this: androidx.metrics.performance.JankStats;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStatsBaseImpl implementation>;

        virtualinvoke $r1.<androidx.metrics.performance.JankStatsBaseImpl: void setupFrameTimer(boolean)>(z0);

        r0.<androidx.metrics.performance.JankStats: boolean isTrackingEnabled> = z0;

        return;
    }

    public final float getJankHeuristicMultiplier()
    {
        androidx.metrics.performance.JankStats r0;
        float $f0;

        r0 := @this: androidx.metrics.performance.JankStats;

        $f0 = r0.<androidx.metrics.performance.JankStats: float jankHeuristicMultiplier>;

        return $f0;
    }

    public final void setJankHeuristicMultiplier(float)
    {
        androidx.metrics.performance.JankStats r0;
        float f0;
        androidx.metrics.performance.JankStatsBaseImpl$Companion $r1;

        r0 := @this: androidx.metrics.performance.JankStats;

        f0 := @parameter0: float;

        $r1 = <androidx.metrics.performance.JankStatsBaseImpl: androidx.metrics.performance.JankStatsBaseImpl$Companion Companion>;

        virtualinvoke $r1.<androidx.metrics.performance.JankStatsBaseImpl$Companion: void setFrameDuration(long)>(-1L);

        r0.<androidx.metrics.performance.JankStats: float jankHeuristicMultiplier> = f0;

        return;
    }

    public final void logFrameData$metrics_performance_release(androidx.metrics.performance.FrameData)
    {
        androidx.metrics.performance.JankStats r0;
        androidx.metrics.performance.FrameData r1;
        androidx.metrics.performance.JankStats$OnFrameListener $r2;

        r0 := @this: androidx.metrics.performance.JankStats;

        r1 := @parameter0: androidx.metrics.performance.FrameData;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "volatileFrameData");

        $r2 = r0.<androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStats$OnFrameListener frameListener>;

        interfaceinvoke $r2.<androidx.metrics.performance.JankStats$OnFrameListener: void onFrame(androidx.metrics.performance.FrameData)>(r1);

        return;
    }

    public static final androidx.metrics.performance.JankStats createAndTrack(android.view.Window, androidx.metrics.performance.JankStats$OnFrameListener)
    {
        android.view.Window r0;
        androidx.metrics.performance.JankStats$OnFrameListener r1;
        androidx.metrics.performance.JankStats$Companion $r2;
        androidx.metrics.performance.JankStats $r3;

        r0 := @parameter0: android.view.Window;

        r1 := @parameter1: androidx.metrics.performance.JankStats$OnFrameListener;

        $r2 = <androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStats$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.metrics.performance.JankStats$Companion: androidx.metrics.performance.JankStats createAndTrack(android.view.Window,androidx.metrics.performance.JankStats$OnFrameListener)>(r0, r1);

        return $r3;
    }

    public void <init>(android.view.Window, androidx.metrics.performance.JankStats$OnFrameListener, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.metrics.performance.JankStats r0;
        android.view.Window r1;
        androidx.metrics.performance.JankStats$OnFrameListener r2;
        kotlin.jvm.internal.DefaultConstructorMarker $r3;

        r0 := @this: androidx.metrics.performance.JankStats;

        r1 := @parameter0: android.view.Window;

        r2 := @parameter1: androidx.metrics.performance.JankStats$OnFrameListener;

        $r3 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.metrics.performance.JankStats: void <init>(android.view.Window,androidx.metrics.performance.JankStats$OnFrameListener)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        androidx.metrics.performance.JankStats$Companion $r0;

        $r0 = new androidx.metrics.performance.JankStats$Companion;

        specialinvoke $r0.<androidx.metrics.performance.JankStats$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.metrics.performance.JankStats: androidx.metrics.performance.JankStats$Companion Companion> = $r0;

        return;
    }

androidx.metrics.performance.JankStats$Companion
    private void <init>()
    {
        androidx.metrics.performance.JankStats$Companion r0;

        r0 := @this: androidx.metrics.performance.JankStats$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.metrics.performance.JankStats createAndTrack(android.view.Window, androidx.metrics.performance.JankStats$OnFrameListener)
    {
        androidx.metrics.performance.JankStats$Companion r0;
        android.view.Window r1;
        androidx.metrics.performance.JankStats$OnFrameListener r2;
        androidx.metrics.performance.JankStats $r3;

        r0 := @this: androidx.metrics.performance.JankStats$Companion;

        r1 := @parameter0: android.view.Window;

        r2 := @parameter1: androidx.metrics.performance.JankStats$OnFrameListener;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "window");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "frameListener");

        $r3 = new androidx.metrics.performance.JankStats;

        specialinvoke $r3.<androidx.metrics.performance.JankStats: void <init>(android.view.Window,androidx.metrics.performance.JankStats$OnFrameListener,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, r2, null);

        return $r3;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.metrics.performance.JankStats$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.metrics.performance.JankStats$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.metrics.performance.JankStats$Companion: void <init>()>();

        return;
    }

androidx.metrics.performance.JankStats$OnFrameListener
<androidx.metrics.performance.JankStats$OnFrameListener: void onFrame(androidx.metrics.performance.FrameData)>
