androidx.media3.database.StandaloneDatabaseProvider
<androidx.media3.database.StandaloneDatabaseProvider: java.lang.String DATABASE_NAME>
<androidx.media3.database.StandaloneDatabaseProvider: int VERSION>
<androidx.media3.database.StandaloneDatabaseProvider: java.lang.String TAG>
    public void <init>(android.content.Context)
    {
        androidx.media3.database.StandaloneDatabaseProvider r0;
        android.content.Context r1, $r2;

        r0 := @this: androidx.media3.database.StandaloneDatabaseProvider;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>($r2, "exoplayer_internal.db", null, 1);

        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        androidx.media3.database.StandaloneDatabaseProvider r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: androidx.media3.database.StandaloneDatabaseProvider;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        androidx.media3.database.StandaloneDatabaseProvider r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;

        r0 := @this: androidx.media3.database.StandaloneDatabaseProvider;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        androidx.media3.database.StandaloneDatabaseProvider r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;

        r0 := @this: androidx.media3.database.StandaloneDatabaseProvider;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <androidx.media3.database.StandaloneDatabaseProvider: void wipeDatabase(android.database.sqlite.SQLiteDatabase)>(r1);

        return;
    }

    private static void wipeDatabase(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String[] r1, $r5;
        android.database.Cursor r2;
        java.lang.String r3, $r6, $r17, r19, r20;
        java.lang.Throwable r4, $r12, $r13, $r18, r21, r22;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r16;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "type";

        $r5[1] = "name";

        r1 = $r5;

        r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("sqlite_master", r1, null, null, null, null, null);

     label01:
        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label06;

        r19 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(0);

        r20 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r6 = "sqlite_sequence";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r20);

        if $z1 != 0 goto label05;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IF EXISTS ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(r3);

     label03:
        goto label05;

     label04:
        $r13 := @caughtexception;

        r4 = $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error executing ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("SADatabaseProvider", $r17, r4);

     label05:
        goto label01;

     label06:
        if r2 == null goto label12;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

        goto label12;

     label07:
        $r12 := @caughtexception;

        r21 = $r12;

        if r2 == null goto label11;

     label08:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

        r22 = $r18;

        virtualinvoke r21.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r22);

     label11:
        throw r21;

     label12:
        return;

        catch android.database.SQLException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

