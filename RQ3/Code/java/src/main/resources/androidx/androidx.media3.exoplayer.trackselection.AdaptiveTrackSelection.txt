androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: java.lang.String TAG>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int DEFAULT_MIN_DURATION_FOR_QUALITY_INCREASE_MS>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int DEFAULT_MAX_DURATION_FOR_QUALITY_DECREASE_MS>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int DEFAULT_MIN_DURATION_TO_RETAIN_AFTER_DISCARD_MS>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int DEFAULT_MAX_WIDTH_TO_DISCARD>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int DEFAULT_MAX_HEIGHT_TO_DISCARD>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float DEFAULT_BANDWIDTH_FRACTION>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float DEFAULT_BUFFERED_FRACTION_TO_LIVE_EDGE_FOR_QUALITY_INCREASE>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.exoplayer.upstream.BandwidthMeter bandwidthMeter>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long minDurationForQualityIncreaseUs>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long maxDurationForQualityDecreaseUs>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long minDurationToRetainAfterDiscardUs>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int maxWidthToDiscard>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int maxHeightToDiscard>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float bandwidthFraction>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float bufferedFractionToLiveEdgeForQualityIncrease>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList adaptationCheckpoints>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.common.util.Clock clock>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float playbackSpeed>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int selectedIndex>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int reason>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long lastBufferEvaluationMs>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.exoplayer.source.chunk.MediaChunk lastBufferEvaluationMediaChunk>
    public void <init>(androidx.media3.common.TrackGroup, int[], androidx.media3.exoplayer.upstream.BandwidthMeter)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        androidx.media3.common.TrackGroup r1;
        int[] r2;
        androidx.media3.exoplayer.upstream.BandwidthMeter r3;
        com.google.common.collect.ImmutableList $r4;
        androidx.media3.common.util.Clock $r5;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        r1 := @parameter0: androidx.media3.common.TrackGroup;

        r2 := @parameter1: int[];

        r3 := @parameter2: androidx.media3.exoplayer.upstream.BandwidthMeter;

        $r4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        $r5 = <androidx.media3.common.util.Clock: androidx.media3.common.util.Clock DEFAULT>;

        specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: void <init>(androidx.media3.common.TrackGroup,int[],int,androidx.media3.exoplayer.upstream.BandwidthMeter,long,long,long,int,int,float,float,java.util.List,androidx.media3.common.util.Clock)>(r1, r2, 0, r3, 10000L, 25000L, 25000L, 1279, 719, 0.7F, 0.75F, $r4, $r5);

        return;
    }

    protected void <init>(androidx.media3.common.TrackGroup, int[], int, androidx.media3.exoplayer.upstream.BandwidthMeter, long, long, long, int, int, float, float, java.util.List, androidx.media3.common.util.Clock)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        androidx.media3.common.TrackGroup r1;
        int[] r2;
        int i0, i3, i4;
        androidx.media3.exoplayer.upstream.BandwidthMeter r3;
        long l1, l2, $l6, $l7, $l8, l9;
        float f0, f1;
        java.util.List r4;
        androidx.media3.common.util.Clock r5;
        byte $b5;
        com.google.common.collect.ImmutableList $r6;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        r1 := @parameter0: androidx.media3.common.TrackGroup;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.media3.exoplayer.upstream.BandwidthMeter;

        l1 := @parameter4: long;

        l2 := @parameter5: long;

        l9 := @parameter6: long;

        i3 := @parameter7: int;

        i4 := @parameter8: int;

        f0 := @parameter9: float;

        f1 := @parameter10: float;

        r4 := @parameter11: java.util.List;

        r5 := @parameter12: androidx.media3.common.util.Clock;

        specialinvoke r0.<androidx.media3.exoplayer.trackselection.BaseTrackSelection: void <init>(androidx.media3.common.TrackGroup,int[],int)>(r1, r2, i0);

        $b5 = l9 cmp l1;

        if $b5 >= 0 goto label1;

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("AdaptiveTrackSelection", "Adjusting minDurationToRetainAfterDiscardMs to be at least minDurationForQualityIncreaseMs");

        l9 = l1;

     label1:
        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.exoplayer.upstream.BandwidthMeter bandwidthMeter> = r3;

        $l6 = l1 * 1000L;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long minDurationForQualityIncreaseUs> = $l6;

        $l7 = l2 * 1000L;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long maxDurationForQualityDecreaseUs> = $l7;

        $l8 = l9 * 1000L;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long minDurationToRetainAfterDiscardUs> = $l8;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int maxWidthToDiscard> = i3;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int maxHeightToDiscard> = i4;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float bandwidthFraction> = f0;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float bufferedFractionToLiveEdgeForQualityIncrease> = f1;

        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>(r4);

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList adaptationCheckpoints> = $r6;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.common.util.Clock clock> = r5;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float playbackSpeed> = 1.0F;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int reason> = 0;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long lastBufferEvaluationMs> = -9223372036854775807L;

        return;
    }

    public void enable()
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long lastBufferEvaluationMs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.exoplayer.source.chunk.MediaChunk lastBufferEvaluationMediaChunk> = null;

        return;
    }

    public void disable()
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.exoplayer.source.chunk.MediaChunk lastBufferEvaluationMediaChunk> = null;

        return;
    }

    public void onPlaybackSpeed(float)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        float f0;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        f0 := @parameter0: float;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float playbackSpeed> = f0;

        return;
    }

    public void updateSelectedTrack(long, long, long, java.util.List, androidx.media3.exoplayer.source.chunk.MediaChunkIterator[])
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        long l0, l1, l2, l3, l4, l6, $l12;
        java.util.List r1;
        androidx.media3.exoplayer.source.chunk.MediaChunkIterator[] r2;
        int i5, $i7, $i8, $i9, $i10, $i11, $i15, i16, i17, $i18, i19, $i20;
        androidx.media3.common.Format r3, r4, $r8;
        androidx.media3.common.util.Clock $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r10;
        androidx.media3.exoplayer.source.chunk.MediaChunk $r7, $r11;
        byte $b13, $b14;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.List;

        r2 := @parameter4: androidx.media3.exoplayer.source.chunk.MediaChunkIterator[];

        $r5 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.common.util.Clock clock>;

        l3 = interfaceinvoke $r5.<androidx.media3.common.util.Clock: long elapsedRealtime()>();

        l4 = specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long getNextChunkDurationUs(androidx.media3.exoplayer.source.chunk.MediaChunkIterator[],java.util.List)>(r2, r1);

        $i7 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int reason>;

        if $i7 != 0 goto label1;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int reason> = 1;

        $i15 = specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int determineIdealSelectedIndex(long,long)>(l3, l4);

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int selectedIndex> = $i15;

        return;

     label1:
        i16 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int selectedIndex>;

        i17 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int reason>;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $i18 = -1;

        goto label3;

     label2:
        $r6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getLast(java.lang.Iterable)>(r1);

        $r7 = (androidx.media3.exoplayer.source.chunk.MediaChunk) $r6;

        $r8 = $r7.<androidx.media3.exoplayer.source.chunk.MediaChunk: androidx.media3.common.Format trackFormat>;

        $i18 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int indexOf(androidx.media3.common.Format)>($r8);

     label3:
        i5 = $i18;

        if i5 == -1 goto label4;

        i16 = i5;

        $r10 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getLast(java.lang.Iterable)>(r1);

        $r11 = (androidx.media3.exoplayer.source.chunk.MediaChunk) $r10;

        i17 = $r11.<androidx.media3.exoplayer.source.chunk.MediaChunk: int trackSelectionReason>;

     label4:
        i19 = specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int determineIdealSelectedIndex(long,long)>(l3, l4);

        $z1 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: boolean isBlacklisted(int,long)>(i16, l3);

        if $z1 != 0 goto label6;

        r3 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.common.Format getFormat(int)>(i16);

        r4 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.common.Format getFormat(int)>(i19);

        l6 = specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long minDurationForQualityIncreaseUs(long,long)>(l2, l4);

        $i9 = r4.<androidx.media3.common.Format: int bitrate>;

        $i8 = r3.<androidx.media3.common.Format: int bitrate>;

        if $i9 <= $i8 goto label5;

        $b14 = l1 cmp l6;

        if $b14 >= 0 goto label5;

        i19 = i16;

        goto label6;

     label5:
        $i11 = r4.<androidx.media3.common.Format: int bitrate>;

        $i10 = r3.<androidx.media3.common.Format: int bitrate>;

        if $i11 >= $i10 goto label6;

        $l12 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long maxDurationForQualityDecreaseUs>;

        $b13 = l1 cmp $l12;

        if $b13 < 0 goto label6;

        i19 = i16;

     label6:
        if i19 != i16 goto label7;

        $i20 = i17;

        goto label8;

     label7:
        $i20 = 3;

     label8:
        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int reason> = $i20;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int selectedIndex> = i19;

        return;
    }

    public int getSelectedIndex()
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        $i0 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int selectedIndex>;

        return $i0;
    }

    public int getSelectionReason()
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        $i0 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int reason>;

        return $i0;
    }

    public java.lang.Object getSelectionData()
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        return null;
    }

    public int evaluateQueueSize(long, java.util.List)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        long l0, l1, l3, l4, l6, l7, $l9, $l10, $l12, $l13;
        java.util.List r1;
        int i2, i5, $i8, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26;
        androidx.media3.exoplayer.source.chunk.MediaChunk r2, r4, $r11;
        androidx.media3.common.Format r3, r5;
        androidx.media3.common.util.Clock $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, $r8, $r9;
        float $f0, $f1;
        byte $b11, $b14;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.List;

        $r6 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.common.util.Clock clock>;

        l1 = interfaceinvoke $r6.<androidx.media3.common.util.Clock: long elapsedRealtime()>();

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: boolean shouldEvaluateQueueSize(long,java.util.List)>(l1, r1);

        if $z0 != 0 goto label1;

        $i25 = interfaceinvoke r1.<java.util.List: int size()>();

        return $i25;

     label1:
        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long lastBufferEvaluationMs> = l1;

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r11 = null;

        goto label3;

     label2:
        $r7 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getLast(java.lang.Iterable)>(r1);

        $r11 = (androidx.media3.exoplayer.source.chunk.MediaChunk) $r7;

     label3:
        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.exoplayer.source.chunk.MediaChunk lastBufferEvaluationMediaChunk> = $r11;

        $z2 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label4;

        return 0;

     label4:
        i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $i8 = i2 - 1;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i8);

        r2 = (androidx.media3.exoplayer.source.chunk.MediaChunk) $r8;

        $l9 = r2.<androidx.media3.exoplayer.source.chunk.MediaChunk: long startTimeUs>;

        $l10 = $l9 - l0;

        $f0 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float playbackSpeed>;

        l3 = staticinvoke <androidx.media3.common.util.Util: long getPlayoutDurationForMediaDuration(long,float)>($l10, $f0);

        l4 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long getMinDurationToRetainAfterDiscardUs()>();

        $b11 = l3 cmp l4;

        if $b11 >= 0 goto label5;

        return i2;

     label5:
        $l12 = specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long getLastChunkDurationUs(java.util.List)>(r1);

        i5 = specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int determineIdealSelectedIndex(long,long)>(l1, $l12);

        r3 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.common.Format getFormat(int)>(i5);

        i26 = 0;

     label6:
        if i26 >= i2 goto label8;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i26);

        r4 = (androidx.media3.exoplayer.source.chunk.MediaChunk) $r9;

        r5 = r4.<androidx.media3.exoplayer.source.chunk.MediaChunk: androidx.media3.common.Format trackFormat>;

        $l13 = r4.<androidx.media3.exoplayer.source.chunk.MediaChunk: long startTimeUs>;

        l6 = $l13 - l0;

        $f1 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float playbackSpeed>;

        l7 = staticinvoke <androidx.media3.common.util.Util: long getPlayoutDurationForMediaDuration(long,float)>(l6, $f1);

        $b14 = l7 cmp l4;

        if $b14 < 0 goto label7;

        $i16 = r5.<androidx.media3.common.Format: int bitrate>;

        $i15 = r3.<androidx.media3.common.Format: int bitrate>;

        if $i16 >= $i15 goto label7;

        $i17 = r5.<androidx.media3.common.Format: int height>;

        if $i17 == -1 goto label7;

        $i19 = r5.<androidx.media3.common.Format: int height>;

        $i18 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int maxHeightToDiscard>;

        if $i19 > $i18 goto label7;

        $i20 = r5.<androidx.media3.common.Format: int width>;

        if $i20 == -1 goto label7;

        $i22 = r5.<androidx.media3.common.Format: int width>;

        $i21 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int maxWidthToDiscard>;

        if $i22 > $i21 goto label7;

        $i24 = r5.<androidx.media3.common.Format: int height>;

        $i23 = r3.<androidx.media3.common.Format: int height>;

        if $i24 >= $i23 goto label7;

        return i26;

     label7:
        i26 = i26 + 1;

        goto label6;

     label8:
        return i2;
    }

    protected boolean canSelectFormat(androidx.media3.common.Format, int, long)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        androidx.media3.common.Format r1;
        int i0;
        long l1, $l2;
        byte $b3;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        r1 := @parameter0: androidx.media3.common.Format;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $l2 = (long) i0;

        $b3 = $l2 cmp l1;

        if $b3 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean shouldEvaluateQueueSize(long, java.util.List)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        long l0, $l1, $l3, $l4;
        java.util.List r1;
        byte $b2, $b5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        androidx.media3.exoplayer.source.chunk.MediaChunk $r3, $r4;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.List;

        $l1 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long lastBufferEvaluationMs>;

        $b2 = $l1 cmp -9223372036854775807L;

        if $b2 == 0 goto label1;

        $l3 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long lastBufferEvaluationMs>;

        $l4 = l0 - $l3;

        $b5 = $l4 cmp 1000L;

        if $b5 >= 0 goto label1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getLast(java.lang.Iterable)>(r1);

        $r4 = (androidx.media3.exoplayer.source.chunk.MediaChunk) $r2;

        $r3 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.exoplayer.source.chunk.MediaChunk lastBufferEvaluationMediaChunk>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected long getMinDurationToRetainAfterDiscardUs()
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        $l0 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long minDurationToRetainAfterDiscardUs>;

        return $l0;
    }

    private int determineIdealSelectedIndex(long, long)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        long l0, l1, l2;
        androidx.media3.common.Format r1;
        int $i3, $i5, i6, i7;
        byte $b4;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long getAllocatedBandwidth(long)>(l1);

        i6 = 0;

        i7 = 0;

     label1:
        $i3 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int length>;

        if i7 >= $i3 goto label5;

        $b4 = l0 cmp -9223372036854775808L;

        if $b4 == 0 goto label2;

        $z1 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: boolean isBlacklisted(int,long)>(i7, l0);

        if $z1 != 0 goto label4;

     label2:
        r1 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.common.Format getFormat(int)>(i7);

        $i5 = r1.<androidx.media3.common.Format: int bitrate>;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: boolean canSelectFormat(androidx.media3.common.Format,int,long)>(r1, $i5, l2);

        if $z0 == 0 goto label3;

        return i7;

     label3:
        i6 = i7;

     label4:
        i7 = i7 + 1;

        goto label1;

     label5:
        return i6;
    }

    private long minDurationForQualityIncreaseUs(long, long)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        long l0, l1, $l4, $l5, $l6, l7;
        byte $b2, $b3;
        float $f0, $f1, $f2;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        l7 := @parameter0: long;

        l0 := @parameter1: long;

        $b2 = l7 cmp -9223372036854775807L;

        if $b2 != 0 goto label1;

        $l6 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long minDurationForQualityIncreaseUs>;

        return $l6;

     label1:
        $b3 = l0 cmp -9223372036854775807L;

        if $b3 == 0 goto label2;

        l7 = l7 - l0;

     label2:
        $f1 = (float) l7;

        $f0 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float bufferedFractionToLiveEdgeForQualityIncrease>;

        $f2 = $f1 * $f0;

        l1 = (long) $f2;

        $l4 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long minDurationForQualityIncreaseUs>;

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>(l1, $l4);

        return $l5;
    }

    private long getNextChunkDurationUs(androidx.media3.exoplayer.source.chunk.MediaChunkIterator[], java.util.List)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        androidx.media3.exoplayer.source.chunk.MediaChunkIterator[] r1, r6;
        java.util.List r2;
        int i0, $i1, $i2, $i7, $i8, i12;
        androidx.media3.exoplayer.source.chunk.MediaChunkIterator r3, $r4, r5;
        long $l3, $l4, $l5, $l6, $l9, $l10, $l11;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.MediaChunkIterator[];

        r2 := @parameter1: java.util.List;

        $i2 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int selectedIndex>;

        $i1 = lengthof r1;

        if $i2 >= $i1 goto label1;

        $i7 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int selectedIndex>;

        $r4 = r1[$i7];

        $z1 = interfaceinvoke $r4.<androidx.media3.exoplayer.source.chunk.MediaChunkIterator: boolean next()>();

        if $z1 == 0 goto label1;

        $i8 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: int selectedIndex>;

        r5 = r1[$i8];

        $l9 = interfaceinvoke r5.<androidx.media3.exoplayer.source.chunk.MediaChunkIterator: long getChunkEndTimeUs()>();

        $l10 = interfaceinvoke r5.<androidx.media3.exoplayer.source.chunk.MediaChunkIterator: long getChunkStartTimeUs()>();

        $l11 = $l9 - $l10;

        return $l11;

     label1:
        r6 = r1;

        i0 = lengthof r6;

        i12 = 0;

     label2:
        if i12 >= i0 goto label4;

        r3 = r6[i12];

        $z0 = interfaceinvoke r3.<androidx.media3.exoplayer.source.chunk.MediaChunkIterator: boolean next()>();

        if $z0 == 0 goto label3;

        $l4 = interfaceinvoke r3.<androidx.media3.exoplayer.source.chunk.MediaChunkIterator: long getChunkEndTimeUs()>();

        $l5 = interfaceinvoke r3.<androidx.media3.exoplayer.source.chunk.MediaChunkIterator: long getChunkStartTimeUs()>();

        $l6 = $l4 - $l5;

        return $l6;

     label3:
        i12 = i12 + 1;

        goto label2;

     label4:
        $l3 = specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long getLastChunkDurationUs(java.util.List)>(r2);

        return $l3;
    }

    private long getLastChunkDurationUs(java.util.List)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        java.util.List r1;
        androidx.media3.exoplayer.source.chunk.MediaChunk r2;
        boolean $z0;
        java.lang.Object $r3;
        long $l0, $l2, $l4, $l5, $l6;
        byte $b1, $b3;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -9223372036854775807L;

     label1:
        $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getLast(java.lang.Iterable)>(r1);

        r2 = (androidx.media3.exoplayer.source.chunk.MediaChunk) $r3;

        $l0 = r2.<androidx.media3.exoplayer.source.chunk.MediaChunk: long startTimeUs>;

        $b1 = $l0 cmp -9223372036854775807L;

        if $b1 == 0 goto label2;

        $l2 = r2.<androidx.media3.exoplayer.source.chunk.MediaChunk: long endTimeUs>;

        $b3 = $l2 cmp -9223372036854775807L;

        if $b3 == 0 goto label2;

        $l5 = r2.<androidx.media3.exoplayer.source.chunk.MediaChunk: long endTimeUs>;

        $l4 = r2.<androidx.media3.exoplayer.source.chunk.MediaChunk: long startTimeUs>;

        $l6 = $l5 - $l4;

        goto label3;

     label2:
        $l6 = -9223372036854775807L;

     label3:
        return $l6;
    }

    private long getAllocatedBandwidth(long)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        long l0, l1, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16;
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint r1, r2, $r11;
        float f0, $f1, $f2, $f3, $f4;
        com.google.common.collect.ImmutableList $r3, $r4, $r5, $r7, $r9;
        boolean $z0;
        int $i2, $i3, $i4, i18;
        java.lang.Object $r6, $r8, $r10;
        byte $b17;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        l0 := @parameter0: long;

        l1 = specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long getTotalAllocatableBandwidth(long)>(l0);

        $r3 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList adaptationCheckpoints>;

        $z0 = virtualinvoke $r3.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return l1;

     label1:
        i18 = 1;

     label2:
        $r4 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList adaptationCheckpoints>;

        $i2 = virtualinvoke $r4.<com.google.common.collect.ImmutableList: int size()>();

        $i3 = $i2 - 1;

        if i18 >= $i3 goto label3;

        $r9 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList adaptationCheckpoints>;

        $r10 = virtualinvoke $r9.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i18);

        $r11 = (androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint) $r10;

        $l16 = $r11.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long totalBandwidth>;

        $b17 = $l16 cmp l1;

        if $b17 >= 0 goto label3;

        i18 = i18 + 1;

        goto label2;

     label3:
        $r5 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList adaptationCheckpoints>;

        $i4 = i18 - 1;

        $r6 = virtualinvoke $r5.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>($i4);

        r1 = (androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint) $r6;

        $r7 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList adaptationCheckpoints>;

        $r8 = virtualinvoke $r7.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i18);

        r2 = (androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint) $r8;

        $l5 = r1.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long totalBandwidth>;

        $l6 = l1 - $l5;

        $f2 = (float) $l6;

        $l8 = r2.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long totalBandwidth>;

        $l7 = r1.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long totalBandwidth>;

        $l9 = $l8 - $l7;

        $f1 = (float) $l9;

        f0 = $f2 / $f1;

        $l14 = r1.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long allocatedBandwidth>;

        $l11 = r2.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long allocatedBandwidth>;

        $l10 = r1.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long allocatedBandwidth>;

        $l12 = $l11 - $l10;

        $f3 = (float) $l12;

        $f4 = f0 * $f3;

        $l13 = (long) $f4;

        $l15 = $l14 + $l13;

        return $l15;
    }

    private long getTotalAllocatableBandwidth(long)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection r0;
        long l0, l1, l2, $l3, $l5, $l7;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        androidx.media3.exoplayer.upstream.BandwidthMeter $r1, $r2;
        byte $b4, $b6;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.exoplayer.upstream.BandwidthMeter bandwidthMeter>;

        $l3 = interfaceinvoke $r1.<androidx.media3.exoplayer.upstream.BandwidthMeter: long getBitrateEstimate()>();

        $f2 = (float) $l3;

        $f1 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float bandwidthFraction>;

        $f3 = $f2 * $f1;

        l1 = (long) $f3;

        $r2 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: androidx.media3.exoplayer.upstream.BandwidthMeter bandwidthMeter>;

        l2 = interfaceinvoke $r2.<androidx.media3.exoplayer.upstream.BandwidthMeter: long getTimeToFirstByteEstimateUs()>();

        $b4 = l2 cmp -9223372036854775807L;

        if $b4 == 0 goto label1;

        $b6 = l0 cmp -9223372036854775807L;

        if $b6 != 0 goto label2;

     label1:
        $f5 = (float) l1;

        $f4 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float playbackSpeed>;

        $f6 = $f5 / $f4;

        $l5 = (long) $f6;

        return $l5;

     label2:
        $f8 = (float) l0;

        $f7 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: float playbackSpeed>;

        $f10 = $f8 / $f7;

        $f9 = (float) l2;

        $f11 = $f10 - $f9;

        f0 = staticinvoke <java.lang.Math: float max(float,float)>($f11, 0.0F);

        $f12 = (float) l1;

        $f14 = $f12 * f0;

        $f13 = (float) l0;

        $f15 = $f14 / $f13;

        $l7 = (long) $f15;

        return $l7;
    }

    private static com.google.common.collect.ImmutableList getAdaptationCheckpoints(androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[])
    {
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[] r0;
        java.util.ArrayList r1, $r3;
        long[] r2, $r11, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9, $i10, $i12, $i13, $i14, i15, i16, i18, i19, i20, i21, i22;
        com.google.common.collect.ImmutableList $r4, r23, $r26;
        java.lang.Object $r5, $r8, $r9;
        long $l7, $l8, $l11, $l17;
        java.lang.Integer $r10;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition $r15, $r16;
        int[] $r17, r22;
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint $r18;
        com.google.common.collect.ImmutableList$Builder r20, r24, r25;
        long[][] r21;

        r0 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[];

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        i15 = 0;

     label01:
        $i0 = lengthof r0;

        if i15 >= $i0 goto label04;

        $r15 = r0[i15];

        if $r15 == null goto label02;

        $r16 = r0[i15];

        $r17 = $r16.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>;

        $i14 = lengthof $r17;

        if $i14 <= 1 goto label02;

        r20 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r18 = new androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint;

        specialinvoke $r18.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: void <init>(long,long)>(0L, 0L);

        virtualinvoke r20.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r18);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r20);

        goto label03;

     label02:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(null);

     label03:
        i15 = i15 + 1;

        goto label01;

     label04:
        r21 = staticinvoke <androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: long[][] getSortedTrackBitrates(androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[])>(r0);

        $i1 = lengthof r21;

        r22 = newarray (int)[$i1];

        $i2 = lengthof r21;

        r2 = newarray (long)[$i2];

        i16 = 0;

     label05:
        $i3 = lengthof r21;

        if i16 >= $i3 goto label08;

        $i13 = i16;

        $r12 = r21[i16];

        $i12 = lengthof $r12;

        if $i12 != 0 goto label06;

        $l17 = 0L;

        goto label07;

     label06:
        $r13 = r21[i16];

        $l17 = $r13[0];

     label07:
        r2[$i13] = $l17;

        i16 = i16 + 1;

        goto label05;

     label08:
        staticinvoke <androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: void addCheckpoint(java.util.List,long[])>(r1, r2);

        r23 = staticinvoke <androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList getSwitchOrder(long[][])>(r21);

        i18 = 0;

     label09:
        $i4 = virtualinvoke r23.<com.google.common.collect.ImmutableList: int size()>();

        if i18 >= $i4 goto label10;

        $r9 = virtualinvoke r23.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i18);

        $r10 = (java.lang.Integer) $r9;

        i19 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $i9 = r22[i19];

        $i10 = $i9 + 1;

        r22[i19] = $i10;

        i20 = $i10;

        $r11 = r21[i19];

        $l11 = $r11[i20];

        r2[i19] = $l11;

        staticinvoke <androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: void addCheckpoint(java.util.List,long[])>(r1, r2);

        i18 = i18 + 1;

        goto label09;

     label10:
        i21 = 0;

     label11:
        $i5 = lengthof r0;

        if i21 >= $i5 goto label13;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i21);

        if $r8 == null goto label12;

        $l7 = r2[i21];

        $l8 = $l7 * 2L;

        r2[i21] = $l8;

     label12:
        i21 = i21 + 1;

        goto label11;

     label13:
        staticinvoke <androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: void addCheckpoint(java.util.List,long[])>(r1, r2);

        r24 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        i22 = 0;

     label14:
        $i6 = interfaceinvoke r1.<java.util.List: int size()>();

        if i22 >= $i6 goto label17;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i22);

        r25 = (com.google.common.collect.ImmutableList$Builder) $r5;

        if r25 != null goto label15;

        $r26 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        goto label16;

     label15:
        $r26 = virtualinvoke r25.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

     label16:
        virtualinvoke r24.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r26);

        i22 = i22 + 1;

        goto label14;

     label17:
        $r4 = virtualinvoke r24.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r4;
    }

    private static long[][] getSortedTrackBitrates(androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[])
    {
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[] r0;
        long[][] r1;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition r2;
        long l0, $l11;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i8, i9, i10;
        int[] $r3, $r5, $r7;
        long[] $r4, $r6, $r10, $r11;
        androidx.media3.common.TrackGroup $r8;
        androidx.media3.common.Format $r9;
        byte $b7;

        r0 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[];

        $i1 = lengthof r0;

        r1 = newarray (long[])[$i1];

        i9 = 0;

     label1:
        $i2 = lengthof r0;

        if i9 >= $i2 goto label8;

        r2 = r0[i9];

        if r2 != null goto label2;

        $r11 = newarray (long)[0];

        r1[i9] = $r11;

        goto label7;

     label2:
        $r3 = r2.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>;

        $i3 = lengthof $r3;

        $r4 = newarray (long)[$i3];

        r1[i9] = $r4;

        i10 = 0;

     label3:
        $r5 = r2.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>;

        $i4 = lengthof $r5;

        if i10 >= $i4 goto label6;

        $r8 = r2.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: androidx.media3.common.TrackGroup group>;

        $r7 = r2.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>;

        $i5 = $r7[i10];

        $r9 = virtualinvoke $r8.<androidx.media3.common.TrackGroup: androidx.media3.common.Format getFormat(int)>($i5);

        $i6 = $r9.<androidx.media3.common.Format: int bitrate>;

        l0 = (long) $i6;

        $r10 = r1[i9];

        $i8 = i10;

        $b7 = l0 cmp -1L;

        if $b7 != 0 goto label4;

        $l11 = 0L;

        goto label5;

     label4:
        $l11 = l0;

     label5:
        $r10[$i8] = $l11;

        i10 = i10 + 1;

        goto label3;

     label6:
        $r6 = r1[i9];

        staticinvoke <java.util.Arrays: void sort(long[])>($r6);

     label7:
        i9 = i9 + 1;

        goto label1;

     label8:
        return r1;
    }

    private static com.google.common.collect.ImmutableList getSwitchOrder(long[][])
    {
        long[][] r0;
        com.google.common.collect.ListMultimap r1;
        double[] r2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, $d12;
        com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys $r3;
        com.google.common.collect.MultimapBuilder$ListMultimapBuilder $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i13, i14, i15, i16;
        java.util.Collection $r5;
        com.google.common.collect.ImmutableList $r6;
        long[] $r7, $r8, $r9, $r12, $r13;
        byte $b9, $b11;
        java.lang.Double $r10;
        java.lang.Integer $r11;
        long $l10, $l12;

        r0 := @parameter0: long[][];

        $r3 = staticinvoke <com.google.common.collect.MultimapBuilder: com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys treeKeys()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys: com.google.common.collect.MultimapBuilder$ListMultimapBuilder arrayListValues()>();

        r1 = virtualinvoke $r4.<com.google.common.collect.MultimapBuilder$ListMultimapBuilder: com.google.common.collect.ListMultimap build()>();

        i14 = 0;

     label01:
        $i0 = lengthof r0;

        if i14 >= $i0 goto label11;

        $r7 = r0[i14];

        $i1 = lengthof $r7;

        if $i1 > 1 goto label02;

        goto label10;

     label02:
        $r8 = r0[i14];

        $i2 = lengthof $r8;

        r2 = newarray (double)[$i2];

        i15 = 0;

     label03:
        $r9 = r0[i14];

        $i3 = lengthof $r9;

        if i15 >= $i3 goto label06;

        $i13 = i15;

        $r12 = r0[i14];

        $l10 = $r12[i15];

        $b11 = $l10 cmp -1L;

        if $b11 != 0 goto label04;

        $d10 = 0.0;

        goto label05;

     label04:
        $r13 = r0[i14];

        $l12 = $r13[i15];

        $d9 = (double) $l12;

        $d10 = staticinvoke <java.lang.Math: double log(double)>($d9);

     label05:
        r2[$i13] = $d10;

        i15 = i15 + 1;

        goto label03;

     label06:
        $i4 = lengthof r2;

        $i5 = $i4 - 1;

        $d3 = r2[$i5];

        $d2 = r2[0];

        d11 = $d3 - $d2;

        i16 = 0;

     label07:
        $i6 = lengthof r2;

        $i7 = $i6 - 1;

        if i16 >= $i7 goto label10;

        $d5 = r2[i16];

        $i8 = i16 + 1;

        $d4 = r2[$i8];

        $d6 = $d5 + $d4;

        d0 = 0.5 * $d6;

        $b9 = d11 cmpl 0.0;

        if $b9 != 0 goto label08;

        $d12 = 1.0;

        goto label09;

     label08:
        $d7 = r2[0];

        $d8 = d0 - $d7;

        $d12 = $d8 / d11;

     label09:
        d1 = $d12;

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i14);

        interfaceinvoke r1.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r10, $r11);

        i16 = i16 + 1;

        goto label07;

     label10:
        i14 = i14 + 1;

        goto label01;

     label11:
        $r5 = interfaceinvoke r1.<com.google.common.collect.Multimap: java.util.Collection values()>();

        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r5);

        return $r6;
    }

    private static void addCheckpoint(java.util.List, long[])
    {
        java.util.List r0;
        long[] r1;
        com.google.common.collect.ImmutableList$Builder r2;
        int $i0, $i1, i5, i6;
        java.lang.Object $r3;
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint $r4;
        long $l2, $l3, l4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: long[];

        l4 = 0L;

        i5 = 0;

     label1:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label2;

        $l3 = r1[i5];

        l4 = l4 + $l3;

        i5 = i5 + 1;

        goto label1;

     label2:
        i6 = 0;

     label3:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i6 >= $i1 goto label6;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i6);

        r2 = (com.google.common.collect.ImmutableList$Builder) $r3;

        if r2 != null goto label4;

        goto label5;

     label4:
        $r4 = new androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint;

        $l2 = r1[i6];

        specialinvoke $r4.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: void <init>(long,long)>(l4, $l2);

        virtualinvoke r2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r4);

     label5:
        i6 = i6 + 1;

        goto label3;

     label6:
        return;
    }

    static com.google.common.collect.ImmutableList access$000(androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[])
    {
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[] r0;
        com.google.common.collect.ImmutableList $r1;

        r0 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[];

        $r1 = staticinvoke <androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList getAdaptationCheckpoints(androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[])>(r0);

        return $r1;
    }

androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long totalBandwidth>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long allocatedBandwidth>
    public void <init>(long, long)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint r0;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long totalBandwidth> = l0;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long allocatedBandwidth> = l1;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint) r1;

        $l1 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long totalBandwidth>;

        $l0 = r2.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long totalBandwidth>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label3;

        $l4 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long allocatedBandwidth>;

        $l3 = r2.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long allocatedBandwidth>;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public int hashCode()
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint r0;
        long $l0, $l2;
        int $i1, $i3, $i4, $i5;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint;

        $l0 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long totalBandwidth>;

        $i1 = (int) $l0;

        $i4 = 31 * $i1;

        $l2 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$AdaptationCheckpoint: long allocatedBandwidth>;

        $i3 = (int) $l2;

        $i5 = $i4 + $i3;

        return $i5;
    }

androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int minDurationForQualityIncreaseMs>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int maxDurationForQualityDecreaseMs>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int minDurationToRetainAfterDiscardMs>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int maxWidthToDiscard>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int maxHeightToDiscard>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: float bandwidthFraction>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: float bufferedFractionToLiveEdgeForQualityIncrease>
<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: androidx.media3.common.util.Clock clock>
    public void <init>()
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory r0;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory;

        specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: void <init>(int,int,int,float)>(10000, 25000, 25000, 0.7F);

        return;
    }

    public void <init>(int, int, int, float)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory r0;
        int i0, i1, i2;
        float f0;
        androidx.media3.common.util.Clock $r1;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        f0 := @parameter3: float;

        $r1 = <androidx.media3.common.util.Clock: androidx.media3.common.util.Clock DEFAULT>;

        specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: void <init>(int,int,int,int,int,float,float,androidx.media3.common.util.Clock)>(i0, i1, i2, 1279, 719, f0, 0.75F, $r1);

        return;
    }

    public void <init>(int, int, int, int, int, float)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory r0;
        int i0, i1, i2, i3, i4;
        float f0;
        androidx.media3.common.util.Clock $r1;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        f0 := @parameter5: float;

        $r1 = <androidx.media3.common.util.Clock: androidx.media3.common.util.Clock DEFAULT>;

        specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: void <init>(int,int,int,int,int,float,float,androidx.media3.common.util.Clock)>(i0, i1, i2, i3, i4, f0, 0.75F, $r1);

        return;
    }

    public void <init>(int, int, int, float, float, androidx.media3.common.util.Clock)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory r0;
        int i0, i1, i2;
        float f0, f1;
        androidx.media3.common.util.Clock r1;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r1 := @parameter5: androidx.media3.common.util.Clock;

        specialinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: void <init>(int,int,int,int,int,float,float,androidx.media3.common.util.Clock)>(i0, i1, i2, 1279, 719, f0, f1, r1);

        return;
    }

    public void <init>(int, int, int, int, int, float, float, androidx.media3.common.util.Clock)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory r0;
        int i0, i1, i2, i3, i4;
        float f0, f1;
        androidx.media3.common.util.Clock r1;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        r1 := @parameter7: androidx.media3.common.util.Clock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int minDurationForQualityIncreaseMs> = i0;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int maxDurationForQualityDecreaseMs> = i1;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int minDurationToRetainAfterDiscardMs> = i2;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int maxWidthToDiscard> = i3;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int maxHeightToDiscard> = i4;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: float bandwidthFraction> = f0;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: float bufferedFractionToLiveEdgeForQualityIncrease> = f1;

        r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: androidx.media3.common.util.Clock clock> = r1;

        return;
    }

    public final androidx.media3.exoplayer.trackselection.ExoTrackSelection[] createTrackSelections(androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[], androidx.media3.exoplayer.upstream.BandwidthMeter, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.common.Timeline)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory r0;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[] r1;
        androidx.media3.exoplayer.upstream.BandwidthMeter r2;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r3;
        androidx.media3.common.Timeline r4;
        com.google.common.collect.ImmutableList r5, $r13;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection[] r6;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        int[] $r8, $r9, $r11, $r14;
        androidx.media3.common.TrackGroup $r10, $r15;
        java.lang.Object $r12;
        androidx.media3.exoplayer.trackselection.BaseTrackSelection $r17;
        androidx.media3.exoplayer.trackselection.FixedTrackSelection r18;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory;

        r1 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[];

        r2 := @parameter1: androidx.media3.exoplayer.upstream.BandwidthMeter;

        r3 := @parameter2: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r4 := @parameter3: androidx.media3.common.Timeline;

        r5 = staticinvoke <androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: com.google.common.collect.ImmutableList access$000(androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[])>(r1);

        $i0 = lengthof r1;

        r6 = newarray (androidx.media3.exoplayer.trackselection.ExoTrackSelection)[$i0];

        i8 = 0;

     label1:
        $i1 = lengthof r1;

        if i8 >= $i1 goto label6;

        r7 = r1[i8];

        if r7 == null goto label5;

        $r8 = r7.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>;

        $i2 = lengthof $r8;

        if $i2 != 0 goto label2;

        goto label5;

     label2:
        $i7 = i8;

        $r9 = r7.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>;

        $i3 = lengthof $r9;

        if $i3 != 1 goto label3;

        r18 = new androidx.media3.exoplayer.trackselection.FixedTrackSelection;

        $r17 = r18;

        $r15 = r7.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: androidx.media3.common.TrackGroup group>;

        $r14 = r7.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>;

        $i6 = $r14[0];

        $i5 = r7.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int type>;

        specialinvoke r18.<androidx.media3.exoplayer.trackselection.FixedTrackSelection: void <init>(androidx.media3.common.TrackGroup,int,int)>($r15, $i6, $i5);

        goto label4;

     label3:
        $r10 = r7.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: androidx.media3.common.TrackGroup group>;

        $r11 = r7.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>;

        $i4 = r7.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int type>;

        $r12 = virtualinvoke r5.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i8);

        $r13 = (com.google.common.collect.ImmutableList) $r12;

        $r17 = virtualinvoke r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection createAdaptiveTrackSelection(androidx.media3.common.TrackGroup,int[],int,androidx.media3.exoplayer.upstream.BandwidthMeter,com.google.common.collect.ImmutableList)>($r10, $r11, $i4, r2, $r13);

     label4:
        r6[$i7] = $r17;

     label5:
        i8 = i8 + 1;

        goto label1;

     label6:
        return r6;
    }

    protected androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection createAdaptiveTrackSelection(androidx.media3.common.TrackGroup, int[], int, androidx.media3.exoplayer.upstream.BandwidthMeter, com.google.common.collect.ImmutableList)
    {
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory r0;
        androidx.media3.common.TrackGroup r1;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        androidx.media3.exoplayer.upstream.BandwidthMeter r3;
        com.google.common.collect.ImmutableList r4;
        androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection $r5;
        androidx.media3.common.util.Clock $r6;
        float $f0, $f1;
        long $l6, $l7, $l8;

        r0 := @this: androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory;

        r1 := @parameter0: androidx.media3.common.TrackGroup;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.media3.exoplayer.upstream.BandwidthMeter;

        r4 := @parameter4: com.google.common.collect.ImmutableList;

        $r5 = new androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection;

        $i1 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int minDurationForQualityIncreaseMs>;

        $l8 = (long) $i1;

        $i2 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int maxDurationForQualityDecreaseMs>;

        $l7 = (long) $i2;

        $i3 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int minDurationToRetainAfterDiscardMs>;

        $l6 = (long) $i3;

        $i5 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int maxWidthToDiscard>;

        $i4 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: int maxHeightToDiscard>;

        $f1 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: float bandwidthFraction>;

        $f0 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: float bufferedFractionToLiveEdgeForQualityIncrease>;

        $r6 = r0.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection$Factory: androidx.media3.common.util.Clock clock>;

        specialinvoke $r5.<androidx.media3.exoplayer.trackselection.AdaptiveTrackSelection: void <init>(androidx.media3.common.TrackGroup,int[],int,androidx.media3.exoplayer.upstream.BandwidthMeter,long,long,long,int,int,float,float,java.util.List,androidx.media3.common.util.Clock)>(r1, r2, i0, r3, $l8, $l7, $l6, $i5, $i4, $f1, $f0, r4, $r6);

        return $r5;
    }

