kotlinx.coroutines.CancellableContinuationKt
    public static final void disposeOnCancellation(kotlinx.coroutines.CancellableContinuation, kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.CancellableContinuation $r0;
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.DisposeOnCancel $r2;

        $r0 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r1 := @parameter1: kotlinx.coroutines.DisposableHandle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "handle");

        $r2 = new kotlinx.coroutines.DisposeOnCancel;

        specialinvoke $r2.<kotlinx.coroutines.DisposeOnCancel: void <init>(kotlinx.coroutines.DisposableHandle)>($r1);

        interfaceinvoke $r0.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r2);

        return;
    }

    public static final kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        boolean $z0;
        kotlinx.coroutines.CancellableContinuationImpl $r1, $r3;
        kotlinx.coroutines.internal.DispatchedContinuation $r2;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "delegate");

        $z0 = $r0 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        if $z0 != 0 goto label1;

        $r1 = new kotlinx.coroutines.CancellableContinuationImpl;

        specialinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r0, 1);

        return $r1;

     label1:
        $r2 = (kotlinx.coroutines.internal.DispatchedContinuation) $r0;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CancellableContinuationImpl claimReusableCancellableContinuation()>();

        $r3 = $r1;

        if $r1 == null goto label4;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: boolean resetStateReusable()>();

        if $z0 != 0 goto label2;

        $r3 = null;

     label2:
        if $r3 != null goto label3;

        goto label4;

     label3:
        return $r3;

     label4:
        $r1 = new kotlinx.coroutines.CancellableContinuationImpl;

        specialinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r0, 2);

        return $r1;
    }

    public static final void removeOnCancellation(kotlinx.coroutines.CancellableContinuation, kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.CancellableContinuation $r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;
        kotlinx.coroutines.RemoveOnCancel $r2;

        $r0 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r1 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "node");

        $r2 = new kotlinx.coroutines.RemoveOnCancel;

        specialinvoke $r2.<kotlinx.coroutines.RemoveOnCancel: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r1);

        interfaceinvoke $r0.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r2);

        return;
    }

