androidx.camera.camera2.internal.ProcessingCaptureSession
<androidx.camera.camera2.internal.ProcessingCaptureSession: java.lang.String TAG>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionProcessor mSessionProcessor>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCamera2CameraInfoImpl>
<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.CaptureSession mCaptureSession>
<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List mOutputSurfaces>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2RequestProcessor mRequestProcessor>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mProcessorSessionConfig>
<androidx.camera.camera2.internal.ProcessingCaptureSession: long TIMEOUT_GET_SURFACE_IN_MS>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>
<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List sHeldProcessorSurfaces>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig>
<androidx.camera.camera2.internal.ProcessingCaptureSession: boolean mIsExecutingStillCaptureRequest>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback mSessionProcessorCaptureCallback>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mSessionOptions>
<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mStillCaptureOptions>
<androidx.camera.camera2.internal.ProcessingCaptureSession: int sNextInstanceId>
<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>
    void <init>(androidx.camera.core.impl.SessionProcessor, androidx.camera.camera2.internal.Camera2CameraInfoImpl, java.util.concurrent.Executor, java.util.concurrent.ScheduledExecutorService)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        androidx.camera.core.impl.SessionProcessor r1;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl r2;
        java.util.concurrent.Executor r3;
        java.util.concurrent.ScheduledExecutorService r4;
        java.util.ArrayList $r5;
        androidx.camera.camera2.interop.CaptureRequestOptions$Builder $r6, $r8;
        androidx.camera.camera2.interop.CaptureRequestOptions $r7, $r9;
        androidx.camera.camera2.internal.CaptureSession $r10;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r11;
        androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback $r12;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;
        java.lang.String $r17;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.SessionProcessor;

        r2 := @parameter1: androidx.camera.camera2.internal.Camera2CameraInfoImpl;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: java.util.concurrent.ScheduledExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List mOutputSurfaces> = $r5;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig> = null;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: boolean mIsExecutingStillCaptureRequest> = 0;

        $r6 = new androidx.camera.camera2.interop.CaptureRequestOptions$Builder;

        specialinvoke $r6.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: void <init>()>();

        $r7 = virtualinvoke $r6.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions build()>();

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mSessionOptions> = $r7;

        $r8 = new androidx.camera.camera2.interop.CaptureRequestOptions$Builder;

        specialinvoke $r8.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: void <init>()>();

        $r9 = virtualinvoke $r8.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions build()>();

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mStillCaptureOptions> = $r9;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId> = 0;

        $r10 = new androidx.camera.camera2.internal.CaptureSession;

        specialinvoke $r10.<androidx.camera.camera2.internal.CaptureSession: void <init>()>();

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.CaptureSession mCaptureSession> = $r10;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionProcessor mSessionProcessor> = r1;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCamera2CameraInfoImpl> = r2;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.Executor mExecutor> = r3;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService> = r4;

        $r11 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState UNINITIALIZED>;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState> = $r11;

        $r12 = new androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback;

        specialinvoke $r12.<androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback: void <init>()>();

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback mSessionProcessorCaptureCallback> = $r12;

        $i0 = <androidx.camera.camera2.internal.ProcessingCaptureSession: int sNextInstanceId>;

        $i1 = $i0 + 1;

        <androidx.camera.camera2.internal.ProcessingCaptureSession: int sNextInstanceId> = $i1;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId> = $i0;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New ProcessingCaptureSession (id=");

        $i2 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r17);

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture open(androidx.camera.core.impl.SessionConfig, android.hardware.camera2.CameraDevice, androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        androidx.camera.core.impl.SessionConfig r1;
        android.hardware.camera2.CameraDevice r2;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r3;
        androidx.camera.core.impl.utils.futures.FutureChain r4, $r23, $r26;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r5, $r6, $r9;
        java.lang.StringBuilder $r7, $r8, $r10, $r13, $r14, $r15, $r16;
        java.lang.String $r11, $r17;
        java.util.List $r12, $r18, $r21;
        boolean $z0, $z1, $z2;
        int $i0;
        java.util.concurrent.ScheduledExecutorService $r19;
        java.util.concurrent.Executor $r20, $r25, $r28;
        com.google.common.util.concurrent.ListenableFuture $r22;
        androidx.camera.core.impl.utils.futures.AsyncFunction $r24;
        androidx.arch.core.util.Function $r27;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        r2 := @parameter1: android.hardware.camera2.CameraDevice;

        r3 := @parameter2: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        $r6 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r5 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState UNINITIALIZED>;

        if $r6 != $r5 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid state state:");

        $r9 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r11);

        $r12 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $z0 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "SessionConfig contains no surfaces");

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("open (id=");

        $i0 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r17);

        $r18 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List mOutputSurfaces> = $r18;

        $r21 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List mOutputSurfaces>;

        $r20 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.Executor mExecutor>;

        $r19 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r22 = staticinvoke <androidx.camera.core.impl.DeferrableSurfaces: com.google.common.util.concurrent.ListenableFuture surfaceListWithTimeout(java.util.Collection,boolean,long,java.util.concurrent.Executor,java.util.concurrent.ScheduledExecutorService)>($r21, 0, 5000L, $r20, $r19);

        $r23 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>($r22);

        $r24 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.camera2.internal.ProcessingCaptureSession,androidx.camera.core.impl.SessionConfig,android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener)>(r0, r1, r2, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.ProcessingCaptureSession: com.google.common.util.concurrent.ListenableFuture lambda$open$2(androidx.camera.core.impl.SessionConfig,android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener,java.util.List)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.util.List));

        $r25 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.Executor mExecutor>;

        $r26 = virtualinvoke $r23.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r24, $r25);

        $r27 = dynamicinvoke "apply" <androidx.arch.core.util.Function (androidx.camera.camera2.internal.ProcessingCaptureSession)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.ProcessingCaptureSession: java.lang.Void lambda$open$3(java.lang.Void)>, methodtype: java.lang.Void __METHODTYPE__(java.lang.Void));

        $r28 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.Executor mExecutor>;

        r4 = virtualinvoke $r26.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transform(androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r27, $r28);

        return r4;
    }

    private static void cancelRequests(java.util.List)
    {
        java.util.List r0, $r6;
        java.util.Iterator r1, r3;
        androidx.camera.core.impl.CaptureConfig r2;
        androidx.camera.core.impl.CameraCaptureCallback r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r7;

        r0 := @parameter0: java.util.List;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.core.impl.CaptureConfig) $r5;

        $r6 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: java.util.List getCameraCaptureCallbacks()>();

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.core.impl.CameraCaptureCallback) $r7;

        virtualinvoke r4.<androidx.camera.core.impl.CameraCaptureCallback: void onCaptureCancelled()>();

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    private boolean isStillCapture(java.util.List)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        java.util.List r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.CaptureConfig r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CaptureConfig) $r4;

        $i0 = virtualinvoke r3.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        if $i0 == 2 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }

    public void issueCaptureRequests(java.util.List)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        java.util.List r1;
        androidx.camera.core.impl.CaptureConfig r2, $r4;
        androidx.camera.camera2.interop.CaptureRequestOptions$Builder r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r5, $r33, $r40;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r15, $r16, $r18;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r10, $r13, $r17;
        java.lang.String $r12, $r19;
        int[] $r14;
        androidx.camera.core.impl.Config $r20, $r21, $r23, $r31, $r38;
        androidx.camera.core.impl.Config$Option $r22, $r24, $r32, $r39;
        androidx.camera.camera2.interop.CaptureRequestOptions $r25, $r26, $r27;
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 $r28;
        androidx.camera.core.impl.SessionProcessor $r29;
        android.hardware.camera2.CaptureRequest$Key $r30, $r37;
        java.lang.Integer $r34, $r41;
        byte $b5;
        java.lang.Byte $r35;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 > 1 goto label02;

        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: boolean isStillCapture(java.util.List)>(r1);

        if $z1 != 0 goto label03;

     label02:
        staticinvoke <androidx.camera.camera2.internal.ProcessingCaptureSession: void cancelRequests(java.util.List)>(r1);

        return;

     label03:
        $r4 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig>;

        if $r4 != null goto label04;

        $z2 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: boolean mIsExecutingStillCaptureRequest>;

        if $z2 == 0 goto label05;

     label04:
        staticinvoke <androidx.camera.camera2.internal.ProcessingCaptureSession: void cancelRequests(java.util.List)>(r1);

        return;

     label05:
        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (androidx.camera.core.impl.CaptureConfig) $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("issueCaptureRequests (id=");

        $i1 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") + state =");

        $r10 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r12);

        $r14 = <androidx.camera.camera2.internal.ProcessingCaptureSession$3: int[] $SwitchMap$androidx$camera$camera2$internal$ProcessingCaptureSession$ProcessorState>;

        $r13 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $i2 = virtualinvoke $r13.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: int ordinal()>();

        $i3 = $r14[$i2];

        tableswitch($i3)
        {
            case 1: goto label06;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label10;
            case 5: goto label10;
            default: goto label11;
        };

     label06:
        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig> = r2;

        goto label11;

     label07:
        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: boolean mIsExecutingStillCaptureRequest> = 1;

        $r20 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        r3 = staticinvoke <androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions$Builder 'from'(androidx.camera.core.impl.Config)>($r20);

        $r21 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        $r22 = <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_ROTATION>;

        $z3 = interfaceinvoke $r21.<androidx.camera.core.impl.Config: boolean containsOption(androidx.camera.core.impl.Config$Option)>($r22);

        if $z3 == 0 goto label08;

        $r37 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        $r38 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        $r39 = <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_ROTATION>;

        $r40 = interfaceinvoke $r38.<androidx.camera.core.impl.Config: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option)>($r39);

        $r41 = (java.lang.Integer) $r40;

        virtualinvoke r3.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r37, $r41);

     label08:
        $r23 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        $r24 = <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_JPEG_QUALITY>;

        $z4 = interfaceinvoke $r23.<androidx.camera.core.impl.Config: boolean containsOption(androidx.camera.core.impl.Config$Option)>($r24);

        if $z4 == 0 goto label09;

        $r30 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_QUALITY>;

        $r31 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        $r32 = <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_JPEG_QUALITY>;

        $r33 = interfaceinvoke $r31.<androidx.camera.core.impl.Config: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option)>($r32);

        $r34 = (java.lang.Integer) $r33;

        $b5 = virtualinvoke $r34.<java.lang.Integer: byte byteValue()>();

        $r35 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b5);

        virtualinvoke r3.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r30, $r35);

     label09:
        $r25 = virtualinvoke r3.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions build()>();

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mStillCaptureOptions> = $r25;

        $r27 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mSessionOptions>;

        $r26 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mStillCaptureOptions>;

        specialinvoke r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: void updateParameters(androidx.camera.camera2.interop.CaptureRequestOptions,androidx.camera.camera2.interop.CaptureRequestOptions)>($r27, $r26);

        $r29 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionProcessor mSessionProcessor>;

        $r28 = new androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        specialinvoke $r28.<androidx.camera.camera2.internal.ProcessingCaptureSession$2: void <init>(androidx.camera.camera2.internal.ProcessingCaptureSession,androidx.camera.core.impl.CaptureConfig)>(r0, r2);

        interfaceinvoke $r29.<androidx.camera.core.impl.SessionProcessor: int startCapture(androidx.camera.core.impl.SessionProcessor$CaptureCallback)>($r28);

        goto label11;

     label10:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Run issueCaptureRequests in wrong state, state = ");

        $r17 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r19);

        staticinvoke <androidx.camera.camera2.internal.ProcessingCaptureSession: void cancelRequests(java.util.List)>(r1);

     label11:
        return;
    }

    public com.google.common.util.concurrent.ListenableFuture release(boolean)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        boolean z0, $z1;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        int $i0;
        java.lang.String $r7;
        androidx.camera.camera2.internal.CaptureSession $r8;
        com.google.common.util.concurrent.ListenableFuture $r9;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        z0 := @parameter0: boolean;

        $r2 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r1 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState CLOSED>;

        if $r2 != $r1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "release() can only be called in CLOSED state");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("release (id=");

        $i0 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r7);

        $r8 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.CaptureSession mCaptureSession>;

        $r9 = virtualinvoke $r8.<androidx.camera.camera2.internal.CaptureSession: com.google.common.util.concurrent.ListenableFuture release(boolean)>(z0);

        return $r9;
    }

    private static java.util.List getSessionProcessorSurfaceList(java.util.List)
    {
        java.util.List r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        androidx.camera.core.impl.DeferrableSurface r3;
        boolean $z0, $z1;
        java.lang.Object $r5;
        androidx.camera.core.impl.SessionProcessorSurface $r6;

        r0 := @parameter0: java.util.List;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.DeferrableSurface) $r5;

        $z1 = r3 instanceof androidx.camera.core.impl.SessionProcessorSurface;

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Surface must be SessionProcessorSurface");

        $r6 = (androidx.camera.core.impl.SessionProcessorSurface) r3;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return r1;
    }

    void onConfigured(androidx.camera.camera2.internal.CaptureSession)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        androidx.camera.camera2.internal.CaptureSession r1;
        java.util.List r2, $r12, $r13;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r3, $r4, $r7, $r16;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9;
        androidx.camera.camera2.internal.Camera2RequestProcessor $r10, $r14;
        androidx.camera.core.impl.SessionConfig $r11, $r17, $r21;
        androidx.camera.core.impl.SessionProcessor $r15;
        androidx.camera.core.impl.CaptureConfig $r18, $r20;
        androidx.camera.core.impl.CaptureConfig[] $r19;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSession;

        $r4 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r3 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState SESSION_INITIALIZED>;

        if $r4 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid state state:");

        $r7 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r9);

        $r10 = new androidx.camera.camera2.internal.Camera2RequestProcessor;

        $r11 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mProcessorSessionConfig>;

        $r12 = virtualinvoke $r11.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $r13 = staticinvoke <androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List getSessionProcessorSurfaceList(java.util.List)>($r12);

        specialinvoke $r10.<androidx.camera.camera2.internal.Camera2RequestProcessor: void <init>(androidx.camera.camera2.internal.CaptureSession,java.util.List)>(r1, $r13);

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2RequestProcessor mRequestProcessor> = $r10;

        $r15 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionProcessor mSessionProcessor>;

        $r14 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2RequestProcessor mRequestProcessor>;

        interfaceinvoke $r15.<androidx.camera.core.impl.SessionProcessor: void onCaptureSessionStart(androidx.camera.core.impl.RequestProcessor)>($r14);

        $r16 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_STARTED>;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState> = $r16;

        $r17 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        if $r17 == null goto label3;

        $r21 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        virtualinvoke r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: void setSessionConfig(androidx.camera.core.impl.SessionConfig)>($r21);

     label3:
        $r18 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig>;

        if $r18 == null goto label4;

        $r19 = newarray (androidx.camera.core.impl.CaptureConfig)[1];

        $r20 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig>;

        $r19[0] = $r20;

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r19);

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig> = null;

        virtualinvoke r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: void issueCaptureRequests(java.util.List)>(r2);

     label4:
        return;
    }

    public androidx.camera.core.impl.SessionConfig getSessionConfig()
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        androidx.camera.core.impl.SessionConfig $r1;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        $r1 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        return $r1;
    }

    public java.util.List getCaptureConfigs()
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        androidx.camera.core.impl.CaptureConfig $r1, $r3;
        androidx.camera.core.impl.CaptureConfig[] $r2;
        java.util.List $r4;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        $r1 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig>;

        if $r1 == null goto label1;

        $r2 = newarray (androidx.camera.core.impl.CaptureConfig)[1];

        $r3 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig>;

        $r2[0] = $r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        goto label2;

     label1:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        return $r4;
    }

    public void cancelIssuedCaptureRequests()
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        java.util.Iterator r1;
        androidx.camera.core.impl.CameraCaptureCallback r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        int $i0;
        java.lang.String $r7;
        androidx.camera.core.impl.CaptureConfig $r8, $r9;
        java.util.List $r10;
        boolean $z0;
        java.lang.Object $r11;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cancelIssuedCaptureRequests (id=");

        $i0 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r7);

        $r8 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig>;

        if $r8 == null goto label3;

        $r9 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig>;

        $r10 = virtualinvoke $r9.<androidx.camera.core.impl.CaptureConfig: java.util.List getCameraCaptureCallbacks()>();

        r1 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.core.impl.CameraCaptureCallback) $r11;

        virtualinvoke r2.<androidx.camera.core.impl.CameraCaptureCallback: void onCaptureCancelled()>();

        goto label1;

     label2:
        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.CaptureConfig mPendingCaptureConfig> = null;

     label3:
        return;
    }

    public void close()
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6;
        int $i0, $i1, $i2;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r5, $r8, $r12, $r15;
        java.lang.String $r7;
        int[] $r9;
        androidx.camera.core.impl.SessionProcessor $r10, $r14;
        androidx.camera.camera2.internal.Camera2RequestProcessor $r11, $r13;
        androidx.camera.camera2.internal.CaptureSession $r16;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close (id=");

        $i0 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") state=");

        $r5 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r7);

        $r9 = <androidx.camera.camera2.internal.ProcessingCaptureSession$3: int[] $SwitchMap$androidx$camera$camera2$internal$ProcessingCaptureSession$ProcessorState>;

        $r8 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $i1 = virtualinvoke $r8.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: int ordinal()>();

        $i2 = $r9[$i1];

        tableswitch($i2)
        {
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label1;
            case 4: goto label3;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        $r10 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionProcessor mSessionProcessor>;

        interfaceinvoke $r10.<androidx.camera.core.impl.SessionProcessor: void onCaptureSessionEnd()>();

        $r11 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2RequestProcessor mRequestProcessor>;

        if $r11 == null goto label2;

        $r13 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2RequestProcessor mRequestProcessor>;

        virtualinvoke $r13.<androidx.camera.camera2.internal.Camera2RequestProcessor: void close()>();

     label2:
        $r12 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_ENDED>;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState> = $r12;

     label3:
        $r14 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionProcessor mSessionProcessor>;

        interfaceinvoke $r14.<androidx.camera.core.impl.SessionProcessor: void deInitSession()>();

        goto label6;

     label4:
        goto label6;

     label5:
        return;

     label6:
        $r15 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState CLOSED>;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState> = $r15;

        $r16 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.CaptureSession mCaptureSession>;

        virtualinvoke $r16.<androidx.camera.camera2.internal.CaptureSession: void close()>();

        return;
    }

    public void setSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        androidx.camera.core.impl.SessionConfig r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        int $i0;
        java.lang.String $r6;
        androidx.camera.camera2.internal.Camera2RequestProcessor $r7, $r17;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r8, $r9;
        androidx.camera.core.impl.Config $r10;
        androidx.camera.camera2.interop.CaptureRequestOptions$Builder $r11;
        androidx.camera.camera2.interop.CaptureRequestOptions $r12, $r13, $r14;
        androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback $r15;
        androidx.camera.core.impl.SessionProcessor $r16;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setSessionConfig (id=");

        $i0 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r6);

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig> = r1;

        if r1 != null goto label1;

        return;

     label1:
        $r7 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2RequestProcessor mRequestProcessor>;

        if $r7 == null goto label2;

        $r17 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2RequestProcessor mRequestProcessor>;

        virtualinvoke $r17.<androidx.camera.camera2.internal.Camera2RequestProcessor: void updateSessionConfig(androidx.camera.core.impl.SessionConfig)>(r1);

     label2:
        $r9 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r8 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_STARTED>;

        if $r9 != $r8 goto label3;

        $r10 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        $r11 = staticinvoke <androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions$Builder 'from'(androidx.camera.core.impl.Config)>($r10);

        $r12 = virtualinvoke $r11.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions build()>();

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mSessionOptions> = $r12;

        $r14 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mSessionOptions>;

        $r13 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.interop.CaptureRequestOptions mStillCaptureOptions>;

        specialinvoke r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: void updateParameters(androidx.camera.camera2.interop.CaptureRequestOptions,androidx.camera.camera2.interop.CaptureRequestOptions)>($r14, $r13);

        $r16 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionProcessor mSessionProcessor>;

        $r15 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback mSessionProcessorCaptureCallback>;

        interfaceinvoke $r16.<androidx.camera.core.impl.SessionProcessor: int startRepeating(androidx.camera.core.impl.SessionProcessor$CaptureCallback)>($r15);

     label3:
        return;
    }

    private void updateParameters(androidx.camera.camera2.interop.CaptureRequestOptions, androidx.camera.camera2.interop.CaptureRequestOptions)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        androidx.camera.camera2.interop.CaptureRequestOptions r1, r2;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r3, r9;
        androidx.camera.core.impl.SessionProcessor $r7;
        androidx.camera.camera2.impl.Camera2ImplConfig $r8;
        androidx.camera.core.impl.Config r10, r11, r12;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r1 := @parameter0: androidx.camera.camera2.interop.CaptureRequestOptions;

        r2 := @parameter1: androidx.camera.camera2.interop.CaptureRequestOptions;

        r9 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke r9.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r3 = r9;

        r10 = (androidx.camera.core.impl.Config) r1;

        virtualinvoke r3.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder insertAllOptions(androidx.camera.core.impl.Config)>(r10);

        r11 = (androidx.camera.core.impl.Config) r2;

        virtualinvoke r3.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder insertAllOptions(androidx.camera.core.impl.Config)>(r11);

        $r7 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionProcessor mSessionProcessor>;

        $r8 = virtualinvoke r3.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        r12 = (androidx.camera.core.impl.Config) $r8;

        interfaceinvoke $r7.<androidx.camera.core.impl.SessionProcessor: void setParameters(androidx.camera.core.impl.Config)>(r12);

        return;
    }

    private java.lang.Void lambda$open$3(java.lang.Void)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        java.lang.Void r1;
        androidx.camera.camera2.internal.CaptureSession $r2;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r1 := @parameter0: java.lang.Void;

        $r2 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.CaptureSession mCaptureSession>;

        virtualinvoke r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: void onConfigured(androidx.camera.camera2.internal.CaptureSession)>($r2);

        return null;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$open$2(androidx.camera.core.impl.SessionConfig, android.hardware.camera2.CameraDevice, androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener, java.util.List) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        androidx.camera.core.impl.SessionConfig r1, $r23, $r24, $r31, $r34, r85;
        android.hardware.camera2.CameraDevice r2, $r37;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r3;
        java.util.List r4, $r13, $r14, $r25, $r32, $r41, $r45, $r68;
        com.google.common.util.concurrent.ListenableFuture r5, $r28, $r42, $r50, $r56, $r62, $r71, $r73, $r75;
        java.lang.StringBuilder $r7, $r8, $r9, $r17, $r18, $r19, r86, r92;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        java.lang.String $r10, $r20;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r11, $r12, $r15;
        boolean $z0, $z1, $z2, $z4, $z5, $z6;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl $r21;
        androidx.camera.core.impl.SessionProcessor $r22;
        java.lang.Object $r26, $r36, $r40, $r46, $r51, $r57, $r63, $r69;
        androidx.camera.core.impl.DeferrableSurface $r27, r76, r81, r83;
        java.lang.Runnable $r29, $r43;
        java.util.concurrent.Executor $r30, $r39, $r44;
        androidx.camera.camera2.internal.CaptureSession $r35;
        java.lang.Class $r47, $r48, $r49;
        android.view.Surface $r53, $r59, $r65;
        android.util.Size $r54, $r55, $r60, $r61, $r66, $r67, r89, r90, r91;
        java.lang.Throwable $r74, r77;
        androidx.camera.core.impl.OutputSurface r78, r79, r80;
        java.util.Iterator r82;
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r84, r93;
        java.lang.IllegalStateException r87;
        androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException r88;
        androidx.camera.camera2.internal.ProcessingCaptureSession$1 r94;
        androidx.camera.core.CameraInfo r95;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        r2 := @parameter1: android.hardware.camera2.CameraDevice;

        r3 := @parameter2: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        r4 := @parameter3: java.util.List;

        r86 = new java.lang.StringBuilder;

        specialinvoke r86.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-- getSurfaces done, start init (id=");

        $i0 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r10);

        $r12 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState>;

        $r11 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState CLOSED>;

        if $r12 != $r11 goto label01;

        r87 = new java.lang.IllegalStateException;

        specialinvoke r87.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SessionProcessorCaptureSession is closed.");

        $r73 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>(r87);

        return $r73;

     label01:
        $z0 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>(null);

        if $z0 == 0 goto label02;

        $r68 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $i12 = interfaceinvoke r4.<java.util.List: int indexOf(java.lang.Object)>(null);

        $r69 = interfaceinvoke $r68.<java.util.List: java.lang.Object get(int)>($i12);

        r76 = (androidx.camera.core.impl.DeferrableSurface) $r69;

        r88 = new androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException;

        specialinvoke r88.<androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException: void <init>(java.lang.String,androidx.camera.core.impl.DeferrableSurface)>("Surface closed", r76);

        $r71 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>(r88);

        return $r71;

     label02:
        $r13 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List mOutputSurfaces>;

        staticinvoke <androidx.camera.core.impl.DeferrableSurfaces: void incrementAll(java.util.List)>($r13);

     label03:
        goto label05;

     label04:
        $r74 := @caughtexception;

        r77 = $r74;

        $r75 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>(r77);

        return $r75;

     label05:
        r78 = null;

        r79 = null;

        r80 = null;

        i13 = 0;

     label06:
        $r14 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i13 >= $i1 goto label10;

        $r45 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $r46 = interfaceinvoke $r45.<java.util.List: java.lang.Object get(int)>(i13);

        r81 = (androidx.camera.core.impl.DeferrableSurface) $r46;

        $r47 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: java.lang.Class getContainerClass()>();

        $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r47, class "Landroidx/camera/core/Preview;");

        if $z4 == 0 goto label07;

        $r62 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        $r63 = interfaceinvoke $r62.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        $r65 = (android.view.Surface) $r63;

        r89 = new android.util.Size;

        $r66 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: android.util.Size getPrescribedSize()>();

        $i9 = virtualinvoke $r66.<android.util.Size: int getWidth()>();

        $r67 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: android.util.Size getPrescribedSize()>();

        $i10 = virtualinvoke $r67.<android.util.Size: int getHeight()>();

        specialinvoke r89.<android.util.Size: void <init>(int,int)>($i9, $i10);

        $i11 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: int getPrescribedStreamFormat()>();

        r78 = staticinvoke <androidx.camera.core.impl.OutputSurface: androidx.camera.core.impl.OutputSurface create(android.view.Surface,android.util.Size,int)>($r65, r89, $i11);

        goto label09;

     label07:
        $r48 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: java.lang.Class getContainerClass()>();

        $z5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r48, class "Landroidx/camera/core/ImageCapture;");

        if $z5 == 0 goto label08;

        $r56 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        $r57 = interfaceinvoke $r56.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        $r59 = (android.view.Surface) $r57;

        r90 = new android.util.Size;

        $r60 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: android.util.Size getPrescribedSize()>();

        $i6 = virtualinvoke $r60.<android.util.Size: int getWidth()>();

        $r61 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: android.util.Size getPrescribedSize()>();

        $i7 = virtualinvoke $r61.<android.util.Size: int getHeight()>();

        specialinvoke r90.<android.util.Size: void <init>(int,int)>($i6, $i7);

        $i8 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: int getPrescribedStreamFormat()>();

        r79 = staticinvoke <androidx.camera.core.impl.OutputSurface: androidx.camera.core.impl.OutputSurface create(android.view.Surface,android.util.Size,int)>($r59, r90, $i8);

        goto label09;

     label08:
        $r49 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: java.lang.Class getContainerClass()>();

        $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r49, class "Landroidx/camera/core/ImageAnalysis;");

        if $z6 == 0 goto label09;

        $r50 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        $r51 = interfaceinvoke $r50.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        $r53 = (android.view.Surface) $r51;

        r91 = new android.util.Size;

        $r54 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: android.util.Size getPrescribedSize()>();

        $i3 = virtualinvoke $r54.<android.util.Size: int getWidth()>();

        $r55 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: android.util.Size getPrescribedSize()>();

        $i4 = virtualinvoke $r55.<android.util.Size: int getHeight()>();

        specialinvoke r91.<android.util.Size: void <init>(int,int)>($i3, $i4);

        $i5 = virtualinvoke r81.<androidx.camera.core.impl.DeferrableSurface: int getPrescribedStreamFormat()>();

        r80 = staticinvoke <androidx.camera.core.impl.OutputSurface: androidx.camera.core.impl.OutputSurface create(android.view.Surface,android.util.Size,int)>($r53, r91, $i5);

     label09:
        i13 = i13 + 1;

        goto label06;

     label10:
        $r15 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState SESSION_INITIALIZED>;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState mProcessorState> = $r15;

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("== initSession (id=");

        $i2 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: int mInstanceId>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("ProcessingCaptureSession", $r20);

        $r22 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionProcessor mSessionProcessor>;

        $r21 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCamera2CameraInfoImpl>;

        r95 = (androidx.camera.core.CameraInfo) $r21;

        $r23 = interfaceinvoke $r22.<androidx.camera.core.impl.SessionProcessor: androidx.camera.core.impl.SessionConfig initSession(androidx.camera.core.CameraInfo,androidx.camera.core.impl.OutputSurface,androidx.camera.core.impl.OutputSurface,androidx.camera.core.impl.OutputSurface)>(r95, r78, r79, r80);

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mProcessorSessionConfig> = $r23;

        $r24 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mProcessorSessionConfig>;

        $r25 = virtualinvoke $r24.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(0);

        $r27 = (androidx.camera.core.impl.DeferrableSurface) $r26;

        $r28 = virtualinvoke $r27.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r29 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.ProcessingCaptureSession)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.ProcessingCaptureSession: void lambda$open$0()>, methodtype: void __METHODTYPE__());

        $r30 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r28.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r29, $r30);

        $r31 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mProcessorSessionConfig>;

        $r32 = virtualinvoke $r31.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        r82 = interfaceinvoke $r32.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke r82.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r40 = interfaceinvoke r82.<java.util.Iterator: java.lang.Object next()>();

        r83 = (androidx.camera.core.impl.DeferrableSurface) $r40;

        $r41 = <androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List sHeldProcessorSurfaces>;

        interfaceinvoke $r41.<java.util.List: boolean add(java.lang.Object)>(r83);

        $r42 = virtualinvoke r83.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r43 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.impl.DeferrableSurface)>(r83) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.ProcessingCaptureSession: void lambda$open$1(androidx.camera.core.impl.DeferrableSurface)>, methodtype: void __METHODTYPE__());

        $r44 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.Executor mExecutor>;

        interfaceinvoke $r42.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r43, $r44);

        goto label11;

     label12:
        r93 = new androidx.camera.core.impl.SessionConfig$ValidatingBuilder;

        specialinvoke r93.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: void <init>()>();

        r84 = r93;

        virtualinvoke r84.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: void add(androidx.camera.core.impl.SessionConfig)>(r1);

        virtualinvoke r84.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: void clearSurfaces()>();

        $r34 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.core.impl.SessionConfig mProcessorSessionConfig>;

        virtualinvoke r84.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: void add(androidx.camera.core.impl.SessionConfig)>($r34);

        $z2 = virtualinvoke r84.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean isValid()>();

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Cannot transform the SessionConfig");

        r85 = virtualinvoke r84.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.SessionConfig build()>();

        $r35 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: androidx.camera.camera2.internal.CaptureSession mCaptureSession>;

        $r36 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r37 = (android.hardware.camera2.CameraDevice) $r36;

        r5 = virtualinvoke $r35.<androidx.camera.camera2.internal.CaptureSession: com.google.common.util.concurrent.ListenableFuture open(androidx.camera.core.impl.SessionConfig,android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener)>(r85, $r37, r3);

        r94 = new androidx.camera.camera2.internal.ProcessingCaptureSession$1;

        specialinvoke r94.<androidx.camera.camera2.internal.ProcessingCaptureSession$1: void <init>(androidx.camera.camera2.internal.ProcessingCaptureSession)>(r0);

        $r39 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.Executor mExecutor>;

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>(r5, r94, $r39);

        return r5;

        catch androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException from label02 to label03 with label04;
    }

    private static void lambda$open$1(androidx.camera.core.impl.DeferrableSurface)
    {
        androidx.camera.core.impl.DeferrableSurface r0;
        java.util.List $r1;

        r0 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        $r1 = <androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List sHeldProcessorSurfaces>;

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>(r0);

        return;
    }

    private void lambda$open$0()
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession r0;
        java.util.List $r1;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession;

        $r1 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List mOutputSurfaces>;

        staticinvoke <androidx.camera.core.impl.DeferrableSurfaces: void decrementAll(java.util.List)>($r1);

        return;
    }

    static void <clinit>()
    {
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.List sHeldProcessorSurfaces> = $r0;

        <androidx.camera.camera2.internal.ProcessingCaptureSession: int sNextInstanceId> = 0;

        return;
    }

androidx.camera.camera2.internal.ProcessingCaptureSession$1
<androidx.camera.camera2.internal.ProcessingCaptureSession$1: androidx.camera.camera2.internal.ProcessingCaptureSession this$0>
    void <init>(androidx.camera.camera2.internal.ProcessingCaptureSession)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$1 r0;
        androidx.camera.camera2.internal.ProcessingCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$1;

        r1 := @parameter0: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$1: androidx.camera.camera2.internal.ProcessingCaptureSession this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$1 r0;
        java.lang.Void r1;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$1;

        r1 := @parameter0: java.lang.Void;

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$1 r0;
        java.lang.Throwable r1;
        androidx.camera.camera2.internal.ProcessingCaptureSession $r2;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$1;

        r1 := @parameter0: java.lang.Throwable;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("ProcessingCaptureSession", "open session failed ", r1);

        $r2 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$1: androidx.camera.camera2.internal.ProcessingCaptureSession this$0>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.ProcessingCaptureSession: void close()>();

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$1: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.camera2.internal.ProcessingCaptureSession$2
<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.core.impl.CaptureConfig val$captureConfig>
<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.camera2.internal.ProcessingCaptureSession this$0>
    void <init>(androidx.camera.camera2.internal.ProcessingCaptureSession, androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 r0;
        androidx.camera.camera2.internal.ProcessingCaptureSession r1;
        androidx.camera.core.impl.CaptureConfig r2;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        r1 := @parameter0: androidx.camera.camera2.internal.ProcessingCaptureSession;

        r2 := @parameter1: androidx.camera.core.impl.CaptureConfig;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.camera2.internal.ProcessingCaptureSession this$0> = r1;

        r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.core.impl.CaptureConfig val$captureConfig> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onCaptureStarted(int, long)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 r0;
        int i0;
        long l1;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        return;
    }

    public void onCaptureProcessStarted(int)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 r0;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        i0 := @parameter0: int;

        return;
    }

    public void onCaptureFailed(int)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 r0;
        int i0;
        androidx.camera.camera2.internal.ProcessingCaptureSession $r1;
        androidx.camera.core.impl.CaptureConfig $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.camera2.internal.ProcessingCaptureSession this$0>;

        $r3 = $r1.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.Executor mExecutor>;

        $r2 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.core.impl.CaptureConfig val$captureConfig>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.ProcessingCaptureSession$2,androidx.camera.core.impl.CaptureConfig)>(r0, $r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.ProcessingCaptureSession$2: void lambda$onCaptureFailed$0(androidx.camera.core.impl.CaptureConfig)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    public void onCaptureSequenceCompleted(int)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 r0;
        int i0;
        androidx.camera.camera2.internal.ProcessingCaptureSession $r1;
        androidx.camera.core.impl.CaptureConfig $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.camera2.internal.ProcessingCaptureSession this$0>;

        $r3 = $r1.<androidx.camera.camera2.internal.ProcessingCaptureSession: java.util.concurrent.Executor mExecutor>;

        $r2 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.core.impl.CaptureConfig val$captureConfig>;

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.ProcessingCaptureSession$2,androidx.camera.core.impl.CaptureConfig)>(r0, $r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.ProcessingCaptureSession$2: void lambda$onCaptureSequenceCompleted$1(androidx.camera.core.impl.CaptureConfig)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    public void onCaptureSequenceAborted(int)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 r0;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        i0 := @parameter0: int;

        return;
    }

    public void onCaptureCompleted(long, int, java.util.Map)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 r0;
        long l0;
        int i1;
        java.util.Map r1;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.Map;

        return;
    }

    private void lambda$onCaptureSequenceCompleted$1(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 r0;
        androidx.camera.core.impl.CaptureConfig r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.CameraCaptureCallback r3;
        java.util.List $r4;
        boolean $z0;
        androidx.camera.camera2.internal.ProcessingCaptureSession $r5;
        java.lang.Object $r6;
        androidx.camera.core.impl.CameraCaptureResult$EmptyCameraCaptureResult r8;
        androidx.camera.core.impl.CameraCaptureResult r9;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        $r4 = virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig: java.util.List getCameraCaptureCallbacks()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CameraCaptureCallback) $r6;

        r8 = new androidx.camera.core.impl.CameraCaptureResult$EmptyCameraCaptureResult;

        specialinvoke r8.<androidx.camera.core.impl.CameraCaptureResult$EmptyCameraCaptureResult: void <init>()>();

        r9 = (androidx.camera.core.impl.CameraCaptureResult) r8;

        virtualinvoke r3.<androidx.camera.core.impl.CameraCaptureCallback: void onCaptureCompleted(androidx.camera.core.impl.CameraCaptureResult)>(r9);

        goto label1;

     label2:
        $r5 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.camera2.internal.ProcessingCaptureSession this$0>;

        $r5.<androidx.camera.camera2.internal.ProcessingCaptureSession: boolean mIsExecutingStillCaptureRequest> = 0;

        return;
    }

    private void lambda$onCaptureFailed$0(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$2 r0;
        androidx.camera.core.impl.CaptureConfig r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.CameraCaptureCallback r3;
        java.util.List $r4;
        boolean $z0;
        androidx.camera.camera2.internal.ProcessingCaptureSession $r5;
        java.lang.Object $r6;
        androidx.camera.core.impl.CameraCaptureFailure $r7;
        androidx.camera.core.impl.CameraCaptureFailure$Reason $r8;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$2;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        $r4 = virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig: java.util.List getCameraCaptureCallbacks()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CameraCaptureCallback) $r6;

        $r7 = new androidx.camera.core.impl.CameraCaptureFailure;

        $r8 = <androidx.camera.core.impl.CameraCaptureFailure$Reason: androidx.camera.core.impl.CameraCaptureFailure$Reason ERROR>;

        specialinvoke $r7.<androidx.camera.core.impl.CameraCaptureFailure: void <init>(androidx.camera.core.impl.CameraCaptureFailure$Reason)>($r8);

        virtualinvoke r3.<androidx.camera.core.impl.CameraCaptureCallback: void onCaptureFailed(androidx.camera.core.impl.CameraCaptureFailure)>($r7);

        goto label1;

     label2:
        $r5 = r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$2: androidx.camera.camera2.internal.ProcessingCaptureSession this$0>;

        $r5.<androidx.camera.camera2.internal.ProcessingCaptureSession: boolean mIsExecutingStillCaptureRequest> = 0;

        return;
    }

androidx.camera.camera2.internal.ProcessingCaptureSession$3
<androidx.camera.camera2.internal.ProcessingCaptureSession$3: int[] $SwitchMap$androidx$camera$camera2$internal$ProcessingCaptureSession$ProcessorState>
    static void <clinit>()
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r3, $r5, $r7, $r9, $r11;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r2, $r4, $r6, $r8, $r10;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, r17, r18, r19, r20, r21;

        $r0 = staticinvoke <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.camera2.internal.ProcessingCaptureSession$3: int[] $SwitchMap$androidx$camera$camera2$internal$ProcessingCaptureSession$ProcessorState> = $r1;

     label01:
        $r3 = <androidx.camera.camera2.internal.ProcessingCaptureSession$3: int[] $SwitchMap$androidx$camera$camera2$internal$ProcessingCaptureSession$ProcessorState>;

        $r2 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState UNINITIALIZED>;

        $i1 = virtualinvoke $r2.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r13 := @caughtexception;

        r17 = $r13;

     label04:
        $r5 = <androidx.camera.camera2.internal.ProcessingCaptureSession$3: int[] $SwitchMap$androidx$camera$camera2$internal$ProcessingCaptureSession$ProcessorState>;

        $r4 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState SESSION_INITIALIZED>;

        $i2 = virtualinvoke $r4.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        r18 = $r16;

     label07:
        $r7 = <androidx.camera.camera2.internal.ProcessingCaptureSession$3: int[] $SwitchMap$androidx$camera$camera2$internal$ProcessingCaptureSession$ProcessorState>;

        $r6 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_STARTED>;

        $i3 = virtualinvoke $r6.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        r19 = $r12;

     label10:
        $r9 = <androidx.camera.camera2.internal.ProcessingCaptureSession$3: int[] $SwitchMap$androidx$camera$camera2$internal$ProcessingCaptureSession$ProcessorState>;

        $r8 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_ENDED>;

        $i4 = virtualinvoke $r8.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

        r20 = $r14;

     label13:
        $r11 = <androidx.camera.camera2.internal.ProcessingCaptureSession$3: int[] $SwitchMap$androidx$camera$camera2$internal$ProcessingCaptureSession$ProcessorState>;

        $r10 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState CLOSED>;

        $i5 = virtualinvoke $r10.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r15 := @caughtexception;

        r21 = $r15;

     label16:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
    }

androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState
<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState UNINITIALIZED>
<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState SESSION_INITIALIZED>
<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_STARTED>
<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_ENDED>
<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState CLOSED>
<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState[] $VALUES>
    public static androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState[] values()
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState[]) $r1;

        return $r2;
    }

    public static androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/camera2/internal/ProcessingCaptureSession$ProcessorState;", r0);

        $r2 = (androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState $r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState[] $r5;

        $r0 = new androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState;

        specialinvoke $r0.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: void <init>(java.lang.String,int)>("UNINITIALIZED", 0);

        <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState UNINITIALIZED> = $r0;

        $r1 = new androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState;

        specialinvoke $r1.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: void <init>(java.lang.String,int)>("SESSION_INITIALIZED", 1);

        <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState SESSION_INITIALIZED> = $r1;

        $r2 = new androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState;

        specialinvoke $r2.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: void <init>(java.lang.String,int)>("ON_CAPTURE_SESSION_STARTED", 2);

        <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_STARTED> = $r2;

        $r3 = new androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState;

        specialinvoke $r3.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: void <init>(java.lang.String,int)>("ON_CAPTURE_SESSION_ENDED", 3);

        <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_ENDED> = $r3;

        $r4 = new androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState;

        specialinvoke $r4.<androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: void <init>(java.lang.String,int)>("CLOSED", 4);

        <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState CLOSED> = $r4;

        $r5 = newarray (androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState)[5];

        $r6 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState UNINITIALIZED>;

        $r5[0] = $r6;

        $r7 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState SESSION_INITIALIZED>;

        $r5[1] = $r7;

        $r8 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_STARTED>;

        $r5[2] = $r8;

        $r9 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState ON_CAPTURE_SESSION_ENDED>;

        $r5[3] = $r9;

        $r10 = <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState CLOSED>;

        $r5[4] = $r10;

        <androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState: androidx.camera.camera2.internal.ProcessingCaptureSession$ProcessorState[] $VALUES> = $r5;

        return;
    }

androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback
    void <init>()
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback r0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onCaptureStarted(int, long)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback r0;
        int i0;
        long l1;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        return;
    }

    public void onCaptureProcessStarted(int)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback r0;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback;

        i0 := @parameter0: int;

        return;
    }

    public void onCaptureFailed(int)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback r0;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback;

        i0 := @parameter0: int;

        return;
    }

    public void onCaptureSequenceCompleted(int)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback r0;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback;

        i0 := @parameter0: int;

        return;
    }

    public void onCaptureSequenceAborted(int)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback r0;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback;

        i0 := @parameter0: int;

        return;
    }

    public void onCaptureCompleted(long, int, java.util.Map)
    {
        androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback r0;
        long l0;
        int i1;
        java.util.Map r1;

        r0 := @this: androidx.camera.camera2.internal.ProcessingCaptureSession$SessionProcessorCaptureCallback;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.Map;

        return;
    }

