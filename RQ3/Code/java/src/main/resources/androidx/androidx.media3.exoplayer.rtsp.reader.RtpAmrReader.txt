androidx.media3.exoplayer.rtsp.reader.RtpAmrReader
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: java.lang.String TAG>
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int[] AMR_NB_FRAME_TYPE_INDEX_TO_FRAME_SIZE>
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int[] AMR_WB_FRAME_TYPE_INDEX_TO_FRAME_SIZE>
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: boolean isWideBand>
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int sampleRate>
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: androidx.media3.extractor.TrackOutput trackOutput>
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: long firstReceivedTimestamp>
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: long startTimeOffsetUs>
<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int previousSequenceNumber>
    public void <init>(androidx.media3.exoplayer.rtsp.RtpPayloadFormat)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAmrReader r0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat r1;
        androidx.media3.common.Format $r2;
        java.lang.String $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAmrReader;

        r1 := @parameter0: androidx.media3.exoplayer.rtsp.RtpPayloadFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat> = r1;

        $r4 = "audio/amr-wb";

        $r2 = r1.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        $r3 = $r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: boolean isWideBand> = $z0;

        $i0 = r1.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: int clockRate>;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int sampleRate> = $i0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: long firstReceivedTimestamp> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int previousSequenceNumber> = -1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: long startTimeOffsetUs> = 0L;

        return;
    }

    public void createTracks(androidx.media3.extractor.ExtractorOutput, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAmrReader r0;
        androidx.media3.extractor.ExtractorOutput r1;
        int i0;
        androidx.media3.extractor.TrackOutput $r2, $r5;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r3;
        androidx.media3.common.Format $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAmrReader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(i0, 1);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: androidx.media3.extractor.TrackOutput trackOutput> = $r2;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r4 = $r3.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        interfaceinvoke $r5.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r4);

        return;
    }

    public void onReceivingFirstPacket(long, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAmrReader r0;
        long l0;
        int i1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAmrReader;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: long firstReceivedTimestamp> = l0;

        return;
    }

    public void consume(androidx.media3.common.util.ParsableByteArray, long, int, boolean)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAmrReader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0, l4, $l7, $l8;
        int i1, i2, i3, $i5, $i6, $i9, i10, $i11, $i12, i13;
        boolean z0, $z1, $z2;
        androidx.media3.extractor.TrackOutput $r2, $r4, $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7, $r8;
        java.lang.String $r9;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAmrReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: androidx.media3.extractor.TrackOutput trackOutput>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r2);

        $i5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int previousSequenceNumber>;

        if $i5 == -1 goto label1;

        $i9 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int previousSequenceNumber>;

        i10 = staticinvoke <androidx.media3.exoplayer.rtsp.RtpPacket: int getNextSequenceNumber(int)>($i9);

        if i1 == i10 goto label1;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[1] = $r8;

        $r9 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("Received RTP packet with unexpected sequence number. Expected: %d; received: %d.", $r6);

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("RtpAmrReader", $r9);

     label1:
        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(1);

        $i11 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int peekUnsignedByte()>();

        $i12 = $i11 >> 3;

        i13 = $i12 & 15;

        $z1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: boolean isWideBand>;

        i2 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int getFrameSize(int,boolean)>(i13, $z1);

        i3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        if i3 != i2 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "compound payload not supported currently");

        $r4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: androidx.media3.extractor.TrackOutput trackOutput>;

        interfaceinvoke $r4.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i3);

        $l8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: long startTimeOffsetUs>;

        $l7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: long firstReceivedTimestamp>;

        $i6 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int sampleRate>;

        l4 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpReaderUtils: long toSampleTimeUs(long,long,long,int)>($l8, l0, $l7, $i6);

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: androidx.media3.extractor.TrackOutput trackOutput>;

        interfaceinvoke $r5.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l4, 1, i3, 0, null);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int previousSequenceNumber> = i1;

        return;
    }

    public void seek(long, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAmrReader r0;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAmrReader;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: long firstReceivedTimestamp> = l0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: long startTimeOffsetUs> = l1;

        return;
    }

    public static int getFrameSize(int, boolean)
    {
        int i0, $i1;
        boolean z0, $z3;
        java.lang.StringBuilder $r0, $r3, $r5, $r6, $r7;
        int[] $r1, $r2;
        java.lang.String $r4, $r8;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 < 0 goto label1;

        if i0 <= 8 goto label2;

     label1:
        if i0 != 15 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal AMR ");

        if z0 == 0 goto label5;

        $r4 = "WB";

        goto label6;

     label5:
        $r4 = "NB";

     label6:
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" frame type ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z3, $r8);

        if z0 == 0 goto label7;

        $r2 = <androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int[] AMR_WB_FRAME_TYPE_INDEX_TO_FRAME_SIZE>;

        $i1 = $r2[i0];

        goto label8;

     label7:
        $r1 = <androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int[] AMR_NB_FRAME_TYPE_INDEX_TO_FRAME_SIZE>;

        $i1 = $r1[i0];

     label8:
        return $i1;
    }

    static void <clinit>()
    {
        int[] $r0, $r1;

        $r0 = newarray (int)[16];

        $r0[0] = 13;

        $r0[1] = 14;

        $r0[2] = 16;

        $r0[3] = 18;

        $r0[4] = 20;

        $r0[5] = 21;

        $r0[6] = 27;

        $r0[7] = 32;

        $r0[8] = 6;

        $r0[9] = 7;

        $r0[10] = 6;

        $r0[11] = 6;

        $r0[12] = 1;

        $r0[13] = 1;

        $r0[14] = 1;

        $r0[15] = 1;

        <androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int[] AMR_NB_FRAME_TYPE_INDEX_TO_FRAME_SIZE> = $r0;

        $r1 = newarray (int)[16];

        $r1[0] = 18;

        $r1[1] = 24;

        $r1[2] = 33;

        $r1[3] = 37;

        $r1[4] = 41;

        $r1[5] = 47;

        $r1[6] = 51;

        $r1[7] = 59;

        $r1[8] = 61;

        $r1[9] = 6;

        $r1[10] = 1;

        $r1[11] = 1;

        $r1[12] = 1;

        $r1[13] = 1;

        $r1[14] = 1;

        $r1[15] = 1;

        <androidx.media3.exoplayer.rtsp.reader.RtpAmrReader: int[] AMR_WB_FRAME_TYPE_INDEX_TO_FRAME_SIZE> = $r1;

        return;
    }

