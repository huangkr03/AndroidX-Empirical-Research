kotlinx.coroutines.internal.LockFreeLinkedListHead
    public void <init>()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r0;

        $r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        specialinvoke $r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <init>()>();

        return;
    }

    public boolean isRemoved()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r0;

        $r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        return 0;
    }

    public final java.lang.Void remove()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r0;
        java.lang.IllegalStateException $r1;
        java.lang.String $r2;

        $r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        $r1 = new java.lang.IllegalStateException;

        $r2 = "head cannot be removed";

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    public volatile boolean remove()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r0;
        java.lang.Void $r1;
        java.lang.Boolean $r2;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.internal.LockFreeLinkedListHead: java.lang.Void remove()>();

        $r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

