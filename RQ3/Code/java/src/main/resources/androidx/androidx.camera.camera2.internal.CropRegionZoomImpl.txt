androidx.camera.camera2.internal.CropRegionZoomImpl
<androidx.camera.camera2.internal.CropRegionZoomImpl: float MIN_DIGITAL_ZOOM>
<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>
<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mCurrentCropRect>
<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>
<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mPendingZoomCropRegion>
    void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)
    {
        androidx.camera.camera2.internal.CropRegionZoomImpl r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1;

        r0 := @this: androidx.camera.camera2.internal.CropRegionZoomImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mCurrentCropRect> = null;

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mPendingZoomCropRegion> = null;

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics> = r1;

        return;
    }

    public float getMinZoom()
    {
        androidx.camera.camera2.internal.CropRegionZoomImpl r0;

        r0 := @this: androidx.camera.camera2.internal.CropRegionZoomImpl;

        return 1.0F;
    }

    public float getMaxZoom()
    {
        androidx.camera.camera2.internal.CropRegionZoomImpl r0;
        java.lang.Float r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r3;
        java.lang.Object $r4;
        float $f0, $f1, $f2, $f3;
        byte $b0;

        r0 := @this: androidx.camera.camera2.internal.CropRegionZoomImpl;

        $r3 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (java.lang.Float) $r4;

        if r1 != null goto label1;

        return 1.0F;

     label1:
        $f0 = virtualinvoke r1.<java.lang.Float: float floatValue()>();

        $f1 = virtualinvoke r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: float getMinZoom()>();

        $b0 = $f0 cmpg $f1;

        if $b0 >= 0 goto label2;

        $f3 = virtualinvoke r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: float getMinZoom()>();

        return $f3;

     label2:
        $f2 = virtualinvoke r1.<java.lang.Float: float floatValue()>();

        return $f2;
    }

    public void addRequestOption(androidx.camera.camera2.impl.Camera2ImplConfig$Builder)
    {
        androidx.camera.camera2.internal.CropRegionZoomImpl r0;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r1;
        android.graphics.Rect $r2, $r3;
        android.hardware.camera2.CaptureRequest$Key $r4;

        r0 := @this: androidx.camera.camera2.internal.CropRegionZoomImpl;

        r1 := @parameter0: androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        $r2 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mCurrentCropRect>;

        if $r2 == null goto label1;

        $r4 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r3 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mCurrentCropRect>;

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r4, $r3);

     label1:
        return;
    }

    public void resetZoom()
    {
        androidx.camera.camera2.internal.CropRegionZoomImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1, $r3;
        androidx.camera.core.CameraControl$OperationCanceledException $r2;

        r0 := @this: androidx.camera.camera2.internal.CropRegionZoomImpl;

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mPendingZoomCropRegion> = null;

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mCurrentCropRect> = null;

        $r1 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        $r2 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r2.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r2);

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter> = null;

     label1:
        return;
    }

    private android.graphics.Rect getSensorRect()
    {
        androidx.camera.camera2.internal.CropRegionZoomImpl r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r2;
        java.lang.Object $r3, $r5;
        android.graphics.Rect $r4, $r6;

        r0 := @this: androidx.camera.camera2.internal.CropRegionZoomImpl;

        $r2 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r3 = virtualinvoke $r2.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (android.graphics.Rect) $r3;

        $r5 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r6 = (android.graphics.Rect) $r5;

        return $r6;
    }

    private static android.graphics.Rect getCropRectByRatio(android.graphics.Rect, float)
    {
        android.graphics.Rect r0, $r1;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @parameter0: android.graphics.Rect;

        f0 := @parameter1: float;

        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f5 = (float) $i0;

        f1 = $f5 / f0;

        $i1 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f6 = (float) $i1;

        f2 = $f6 / f0;

        $i2 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f7 = (float) $i2;

        $f8 = $f7 - f1;

        f3 = $f8 / 2.0F;

        $i3 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f9 = (float) $i3;

        $f10 = $f9 - f2;

        f4 = $f10 / 2.0F;

        $r1 = new android.graphics.Rect;

        $i7 = (int) f3;

        $i6 = (int) f4;

        $f11 = f3 + f1;

        $i5 = (int) $f11;

        $f12 = f4 + f2;

        $i4 = (int) $f12;

        specialinvoke $r1.<android.graphics.Rect: void <init>(int,int,int,int)>($i7, $i6, $i5, $i4);

        return $r1;
    }

    public void setZoomRatio(float, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.CropRegionZoomImpl r0;
        float f0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1, $r4, $r7;
        android.graphics.Rect r2, $r3, $r5;
        androidx.camera.core.CameraControl$OperationCanceledException $r6;

        r0 := @this: androidx.camera.camera2.internal.CropRegionZoomImpl;

        f0 := @parameter0: float;

        r1 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r2 = specialinvoke r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect getSensorRect()>();

        $r3 = staticinvoke <androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect getCropRectByRatio(android.graphics.Rect,float)>(r2, f0);

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mCurrentCropRect> = $r3;

        $r4 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        if $r4 == null goto label1;

        $r7 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        $r6 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r6.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("There is a new zoomRatio being set");

        virtualinvoke $r7.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r6);

     label1:
        $r5 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mCurrentCropRect>;

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mPendingZoomCropRegion> = $r5;

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter> = r1;

        return;
    }

    public void onCaptureResult(android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.CropRegionZoomImpl r0;
        android.hardware.camera2.TotalCaptureResult r1;
        android.hardware.camera2.CaptureRequest r2;
        android.graphics.Rect r3, $r7, $r8, $r10;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r4, $r9;
        android.hardware.camera2.CaptureRequest$Key $r5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.CropRegionZoomImpl;

        r1 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $r4 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        if $r4 == null goto label3;

        r2 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: android.hardware.camera2.CaptureRequest getRequest()>();

        if r2 != null goto label1;

        $r10 = null;

        goto label2;

     label1:
        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r6 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r5);

        $r10 = (android.graphics.Rect) $r6;

     label2:
        r3 = $r10;

        $r7 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mPendingZoomCropRegion>;

        if $r7 == null goto label3;

        $r8 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mPendingZoomCropRegion>;

        $z0 = virtualinvoke $r8.<android.graphics.Rect: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        $r9 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        virtualinvoke $r9.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter> = null;

        r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mPendingZoomCropRegion> = null;

     label3:
        return;
    }

    public android.graphics.Rect getCropSensorRegion()
    {
        androidx.camera.camera2.internal.CropRegionZoomImpl r0;
        android.graphics.Rect $r1, $r2;

        r0 := @this: androidx.camera.camera2.internal.CropRegionZoomImpl;

        $r1 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mCurrentCropRect>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect mCurrentCropRect>;

        goto label2;

     label1:
        $r2 = specialinvoke r0.<androidx.camera.camera2.internal.CropRegionZoomImpl: android.graphics.Rect getSensorRect()>();

     label2:
        return $r2;
    }

