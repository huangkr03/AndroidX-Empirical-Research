androidx.camera.video.Recorder
<androidx.camera.video.Recorder: java.lang.String TAG>
<androidx.camera.video.Recorder: java.util.Set PENDING_STATES>
<androidx.camera.video.Recorder: java.util.Set VALID_NON_PENDING_STATES_WHILE_PENDING>
<androidx.camera.video.Recorder: androidx.camera.video.QualitySelector DEFAULT_QUALITY_SELECTOR>
<androidx.camera.video.Recorder: androidx.camera.video.VideoSpec VIDEO_SPEC_DEFAULT>
<androidx.camera.video.Recorder: androidx.camera.video.MediaSpec MEDIA_SPEC_DEFAULT>
<androidx.camera.video.Recorder: java.lang.String MEDIA_COLUMN>
<androidx.camera.video.Recorder: java.lang.Exception PENDING_RECORDING_ERROR_CAUSE_SOURCE_INACTIVE>
<androidx.camera.video.Recorder: int PENDING>
<androidx.camera.video.Recorder: int NOT_PENDING>
<androidx.camera.video.Recorder: long SOURCE_NON_STREAMING_TIMEOUT_MS>
<androidx.camera.video.Recorder: int AUDIO_CACHE_SIZE>
<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory DEFAULT_ENCODER_FACTORY>
<androidx.camera.video.Recorder: java.util.concurrent.Executor AUDIO_EXECUTOR>
<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mStreamInfo>
<androidx.camera.video.Recorder: java.util.concurrent.Executor mUserProvidedExecutor>
<androidx.camera.video.Recorder: java.util.concurrent.Executor mExecutor>
<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>
<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory mVideoEncoderFactory>
<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory mAudioEncoderFactory>
<androidx.camera.video.Recorder: java.lang.Object mLock>
<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>
<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mNonPendingState>
<androidx.camera.video.Recorder: int mStreamId>
<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>
<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>
<androidx.camera.video.Recorder: long mLastGeneratedRecordingId>
<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>
<androidx.camera.video.Recorder: boolean mShouldWaitForNewSurface>
<androidx.camera.video.Recorder: boolean mInProgressRecordingStopping>
<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest$TransformationInfo mSurfaceTransformationInfo>
<androidx.camera.video.Recorder: androidx.camera.core.impl.CamcorderProfileProxy mResolvedCamcorderProfile>
<androidx.camera.video.Recorder: java.util.List mEncodingFutures>
<androidx.camera.video.Recorder: java.lang.Integer mAudioTrackIndex>
<androidx.camera.video.Recorder: java.lang.Integer mVideoTrackIndex>
<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest mSurfaceRequest>
<androidx.camera.video.Recorder: androidx.camera.core.impl.Timebase mVideoSourceTimebase>
<androidx.camera.video.Recorder: android.view.Surface mLatestSurface>
<androidx.camera.video.Recorder: android.view.Surface mActiveSurface>
<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer>
<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec>
<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>
<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>
<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mVideoOutputConfig>
<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>
<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mAudioOutputConfig>
<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState>
<androidx.camera.video.Recorder: android.net.Uri mOutputUri>
<androidx.camera.video.Recorder: long mRecordingBytes>
<androidx.camera.video.Recorder: long mRecordingDurationNs>
<androidx.camera.video.Recorder: long mFirstRecordingVideoDataTimeUs>
<androidx.camera.video.Recorder: long mFirstRecordingAudioDataTimeUs>
<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>
<androidx.camera.video.Recorder: int mRecordingStopError>
<androidx.camera.video.Recorder: java.lang.Throwable mRecordingStopErrorCause>
<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData>
<androidx.camera.video.Recorder: androidx.camera.core.internal.utils.RingBuffer mPendingAudioRingBuffer>
<androidx.camera.video.Recorder: java.lang.Throwable mAudioErrorCause>
<androidx.camera.video.Recorder: boolean mIsAudioSourceSilenced>
<androidx.camera.video.Recorder: androidx.camera.video.VideoOutput$SourceState mSourceState>
<androidx.camera.video.Recorder: java.util.concurrent.ScheduledFuture mSourceNonStreamingTimeout>
    void <init>(java.util.concurrent.Executor, androidx.camera.video.MediaSpec, androidx.camera.video.internal.encoder.EncoderFactory, androidx.camera.video.internal.encoder.EncoderFactory)
    {
        androidx.camera.video.Recorder r0;
        java.util.concurrent.Executor r1, $r12, $r13, $r21;
        androidx.camera.video.MediaSpec r2, $r14;
        androidx.camera.video.internal.encoder.EncoderFactory r3, r4;
        java.lang.Object $r5;
        androidx.camera.video.Recorder$State $r6, $r16;
        java.util.ArrayList $r7;
        androidx.camera.video.Recorder$AudioState $r8;
        android.net.Uri $r9;
        androidx.camera.core.internal.utils.ArrayRingBuffer $r10;
        androidx.camera.video.VideoOutput$SourceState $r11;
        androidx.camera.core.impl.MutableStateObservable $r15, $r19;
        int $i0;
        androidx.camera.video.StreamInfo$StreamState $r17;
        androidx.camera.video.StreamInfo $r18;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.camera.video.MediaSpec;

        r3 := @parameter2: androidx.camera.video.internal.encoder.EncoderFactory;

        r4 := @parameter3: androidx.camera.video.internal.encoder.EncoderFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.video.Recorder: java.lang.Object mLock> = $r5;

        $r6 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState> = $r6;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mNonPendingState> = null;

        r0.<androidx.camera.video.Recorder: int mStreamId> = 0;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord> = null;

        r0.<androidx.camera.video.Recorder: long mLastGeneratedRecordingId> = 0L;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording> = null;

        r0.<androidx.camera.video.Recorder: boolean mInProgressRecordingStopping> = 0;

        r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest$TransformationInfo mSurfaceTransformationInfo> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.CamcorderProfileProxy mResolvedCamcorderProfile> = null;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.video.Recorder: java.util.List mEncodingFutures> = $r7;

        r0.<androidx.camera.video.Recorder: java.lang.Integer mAudioTrackIndex> = null;

        r0.<androidx.camera.video.Recorder: java.lang.Integer mVideoTrackIndex> = null;

        r0.<androidx.camera.video.Recorder: android.view.Surface mLatestSurface> = null;

        r0.<androidx.camera.video.Recorder: android.view.Surface mActiveSurface> = null;

        r0.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mVideoOutputConfig> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mAudioOutputConfig> = null;

        $r8 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState INITIALIZING>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState> = $r8;

        $r9 = <android.net.Uri: android.net.Uri EMPTY>;

        r0.<androidx.camera.video.Recorder: android.net.Uri mOutputUri> = $r9;

        r0.<androidx.camera.video.Recorder: long mRecordingBytes> = 0L;

        r0.<androidx.camera.video.Recorder: long mRecordingDurationNs> = 0L;

        r0.<androidx.camera.video.Recorder: long mFirstRecordingVideoDataTimeUs> = 0L;

        r0.<androidx.camera.video.Recorder: long mFirstRecordingAudioDataTimeUs> = 0L;

        r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes> = 0L;

        r0.<androidx.camera.video.Recorder: int mRecordingStopError> = 1;

        r0.<androidx.camera.video.Recorder: java.lang.Throwable mRecordingStopErrorCause> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData> = null;

        $r10 = new androidx.camera.core.internal.utils.ArrayRingBuffer;

        specialinvoke $r10.<androidx.camera.core.internal.utils.ArrayRingBuffer: void <init>(int)>(60);

        r0.<androidx.camera.video.Recorder: androidx.camera.core.internal.utils.RingBuffer mPendingAudioRingBuffer> = $r10;

        r0.<androidx.camera.video.Recorder: java.lang.Throwable mAudioErrorCause> = null;

        r0.<androidx.camera.video.Recorder: boolean mIsAudioSourceSilenced> = 0;

        $r11 = <androidx.camera.video.VideoOutput$SourceState: androidx.camera.video.VideoOutput$SourceState INACTIVE>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.VideoOutput$SourceState mSourceState> = $r11;

        r0.<androidx.camera.video.Recorder: java.util.concurrent.ScheduledFuture mSourceNonStreamingTimeout> = null;

        r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mUserProvidedExecutor> = r1;

        if r1 == null goto label1;

        $r21 = r1;

        goto label2;

     label1:
        $r21 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor ioExecutor()>();

     label2:
        r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mExecutor> = $r21;

        $r12 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mExecutor>;

        $r13 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor)>($r12);

        r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor> = $r13;

        $r14 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.MediaSpec composeRecorderMediaSpec(androidx.camera.video.MediaSpec)>(r2);

        $r15 = staticinvoke <androidx.camera.core.impl.MutableStateObservable: androidx.camera.core.impl.MutableStateObservable withInitialState(java.lang.Object)>($r14);

        r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec> = $r15;

        $i0 = r0.<androidx.camera.video.Recorder: int mStreamId>;

        $r16 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r17 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.StreamInfo$StreamState internalStateToStreamState(androidx.camera.video.Recorder$State)>($r16);

        $r18 = staticinvoke <androidx.camera.video.StreamInfo: androidx.camera.video.StreamInfo of(int,androidx.camera.video.StreamInfo$StreamState)>($i0, $r17);

        $r19 = staticinvoke <androidx.camera.core.impl.MutableStateObservable: androidx.camera.core.impl.MutableStateObservable withInitialState(java.lang.Object)>($r18);

        r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mStreamInfo> = $r19;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory mVideoEncoderFactory> = r3;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory mAudioEncoderFactory> = r4;

        return;
    }

    public void onSurfaceRequested(androidx.camera.core.SurfaceRequest)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest r1;
        androidx.camera.core.impl.Timebase $r2;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        $r2 = <androidx.camera.core.impl.Timebase: androidx.camera.core.impl.Timebase UPTIME>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void onSurfaceRequested(androidx.camera.core.SurfaceRequest,androidx.camera.core.impl.Timebase)>(r1, $r2);

        return;
    }

    public void onSurfaceRequested(androidx.camera.core.SurfaceRequest, androidx.camera.core.impl.Timebase)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest r1;
        androidx.camera.core.impl.Timebase r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r26;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r19, $r20, $r22;
        androidx.camera.video.Recorder$State $r8, $r13, $r15, $r21;
        int $i0, $i1, $i2;
        java.lang.String $r12, $r23;
        int[] $r14;
        java.util.concurrent.Executor $r16, $r24;
        java.lang.Runnable $r17, $r25;
        java.lang.IllegalStateException $r18;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        r2 := @parameter1: androidx.camera.core.impl.Timebase;

        $r5 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface is requested in state: ");

        $r8 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Current surface: ");

        $i0 = r0.<androidx.camera.video.Recorder: int mStreamId>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r12);

        $r14 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r13 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i1 = virtualinvoke $r13.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i2 = $r14[$i1];

        tableswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label4;
            default: goto label5;
        };

     label2:
        $r24 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r25 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder,androidx.camera.core.SurfaceRequest,androidx.camera.core.impl.Timebase)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$onSurfaceRequested$0(androidx.camera.core.SurfaceRequest,androidx.camera.core.impl.Timebase)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r24.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r25);

        goto label5;

     label3:
        $r18 = new java.lang.IllegalStateException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface was requested when the Recorder had been initialized with state ");

        $r21 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label4:
        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("Recorder", "Surface was requested when the Recorder had encountered error.");

        $r15 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r15);

        $r16 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r17 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder,androidx.camera.core.SurfaceRequest,androidx.camera.core.impl.Timebase)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$onSurfaceRequested$1(androidx.camera.core.SurfaceRequest,androidx.camera.core.impl.Timebase)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r16.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r17);

     label5:
        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r26 := @caughtexception;

        r4 = $r26;

        exitmonitor r3;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public androidx.camera.core.impl.Observable getMediaSpec()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.impl.MutableStateObservable $r1;
        androidx.camera.core.impl.Observable r2;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec>;

        r2 = (androidx.camera.core.impl.Observable) $r1;

        return r2;
    }

    public androidx.camera.core.impl.Observable getStreamInfo()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.impl.MutableStateObservable $r1;
        androidx.camera.core.impl.Observable r2;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mStreamInfo>;

        r2 = (androidx.camera.core.impl.Observable) $r1;

        return r2;
    }

    public void onSourceStateChanged(androidx.camera.video.VideoOutput$SourceState)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.VideoOutput$SourceState r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.VideoOutput$SourceState;

        $r2 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder,androidx.camera.video.VideoOutput$SourceState)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$onSourceStateChanged$2(androidx.camera.video.VideoOutput$SourceState)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    public androidx.camera.video.PendingRecording prepareRecording(android.content.Context, androidx.camera.video.FileOutputOptions)
    {
        androidx.camera.video.Recorder r0;
        android.content.Context r1;
        androidx.camera.video.FileOutputOptions r2;
        androidx.camera.video.PendingRecording $r3;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.camera.video.FileOutputOptions;

        $r3 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.PendingRecording prepareRecordingInternal(android.content.Context,androidx.camera.video.OutputOptions)>(r1, r2);

        return $r3;
    }

    public androidx.camera.video.PendingRecording prepareRecording(android.content.Context, androidx.camera.video.FileDescriptorOutputOptions)
    {
        androidx.camera.video.Recorder r0;
        android.content.Context r1;
        androidx.camera.video.FileDescriptorOutputOptions r2;
        int $i0;
        androidx.camera.video.PendingRecording $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.camera.video.FileDescriptorOutputOptions;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 26 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("File descriptors as output destinations are not supported on pre-Android O (API 26) devices.");

        throw $r4;

     label1:
        $r3 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.PendingRecording prepareRecordingInternal(android.content.Context,androidx.camera.video.OutputOptions)>(r1, r2);

        return $r3;
    }

    public androidx.camera.video.PendingRecording prepareRecording(android.content.Context, androidx.camera.video.MediaStoreOutputOptions)
    {
        androidx.camera.video.Recorder r0;
        android.content.Context r1;
        androidx.camera.video.MediaStoreOutputOptions r2;
        androidx.camera.video.PendingRecording $r3;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.camera.video.MediaStoreOutputOptions;

        $r3 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.PendingRecording prepareRecordingInternal(android.content.Context,androidx.camera.video.OutputOptions)>(r1, r2);

        return $r3;
    }

    private androidx.camera.video.PendingRecording prepareRecordingInternal(android.content.Context, androidx.camera.video.OutputOptions)
    {
        androidx.camera.video.Recorder r0;
        android.content.Context r1;
        androidx.camera.video.OutputOptions r2;
        androidx.camera.video.PendingRecording $r4;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.camera.video.OutputOptions;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "The OutputOptions cannot be null.");

        $r4 = new androidx.camera.video.PendingRecording;

        specialinvoke $r4.<androidx.camera.video.PendingRecording: void <init>(android.content.Context,androidx.camera.video.Recorder,androidx.camera.video.OutputOptions)>(r1, r0, r2);

        return $r4;
    }

    public androidx.camera.video.QualitySelector getQualitySelector()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.impl.MutableStateObservable $r1;
        java.lang.Object $r2;
        androidx.camera.video.MediaSpec $r3;
        androidx.camera.video.VideoSpec $r4;
        androidx.camera.video.QualitySelector $r5;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec>;

        $r2 = virtualinvoke r0.<androidx.camera.video.Recorder: java.lang.Object getObservableData(androidx.camera.core.impl.StateObservable)>($r1);

        $r3 = (androidx.camera.video.MediaSpec) $r2;

        $r4 = virtualinvoke $r3.<androidx.camera.video.MediaSpec: androidx.camera.video.VideoSpec getVideoSpec()>();

        $r5 = virtualinvoke $r4.<androidx.camera.video.VideoSpec: androidx.camera.video.QualitySelector getQualitySelector()>();

        return $r5;
    }

    int getAudioSource()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.impl.MutableStateObservable $r1;
        java.lang.Object $r2;
        androidx.camera.video.MediaSpec $r3;
        androidx.camera.video.AudioSpec $r4;
        int $i0;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec>;

        $r2 = virtualinvoke r0.<androidx.camera.video.Recorder: java.lang.Object getObservableData(androidx.camera.core.impl.StateObservable)>($r1);

        $r3 = (androidx.camera.video.MediaSpec) $r2;

        $r4 = virtualinvoke $r3.<androidx.camera.video.MediaSpec: androidx.camera.video.AudioSpec getAudioSpec()>();

        $i0 = virtualinvoke $r4.<androidx.camera.video.AudioSpec: int getSource()>();

        return $i0;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        androidx.camera.video.Recorder r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mUserProvidedExecutor>;

        return $r1;
    }

    int getAspectRatio()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.impl.MutableStateObservable $r1;
        java.lang.Object $r2;
        androidx.camera.video.MediaSpec $r3;
        androidx.camera.video.VideoSpec $r4;
        int $i0;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec>;

        $r2 = virtualinvoke r0.<androidx.camera.video.Recorder: java.lang.Object getObservableData(androidx.camera.core.impl.StateObservable)>($r1);

        $r3 = (androidx.camera.video.MediaSpec) $r2;

        $r4 = virtualinvoke $r3.<androidx.camera.video.MediaSpec: androidx.camera.video.VideoSpec getVideoSpec()>();

        $i0 = virtualinvoke $r4.<androidx.camera.video.VideoSpec: int getAspectRatio()>();

        return $i0;
    }

    androidx.camera.video.Recording start(androidx.camera.video.PendingRecording)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.PendingRecording r1;
        long l0, $l1, $l2;
        java.lang.Object r2, $r5, $r17;
        java.lang.Throwable r3, $r31, $r32, r34, r39;
        androidx.camera.video.Recorder$State $r6, $r18, $r19, $r20, $r21, $r22, $r23, $r26, $r37, $r38;
        int[] $r7;
        int $i3, $i4;
        androidx.camera.video.Recording $r8, $r14;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        androidx.camera.video.Recorder$RecordingRecord $r13, $r16, $r29, $r30, r33, r35;
        java.lang.IllegalStateException $r15;
        java.util.concurrent.Executor $r24, $r27;
        java.lang.Runnable $r25, $r28;
        byte b5;
        boolean $z0;
        android.content.Context $r36;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.PendingRecording;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "The given PendingRecording cannot be null.");

        r33 = null;

        b5 = 0;

        r34 = null;

        $r5 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $l1 = r0.<androidx.camera.video.Recorder: long mLastGeneratedRecordingId>;

        $l2 = $l1 + 1L;

        r0.<androidx.camera.video.Recorder: long mLastGeneratedRecordingId> = $l2;

        l0 = $l2;

        $r7 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i3 = virtualinvoke $r6.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i4 = $r7[$i3];

        tableswitch($i4)
        {
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label03;
            case 4: goto label03;
            case 5: goto label04;
            case 6: goto label04;
            case 7: goto label02;
            case 8: goto label02;
            case 9: goto label04;
            default: goto label12;
        };

     label02:
        r33 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        goto label12;

     label03:
        $r16 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        $r17 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r16);

        r33 = (androidx.camera.video.Recorder$RecordingRecord) $r17;

        goto label12;

     label04:
        $r19 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r18 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State IDLING>;

        if $r19 != $r18 goto label07;

        $r29 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        if $r29 != null goto label05;

        $r30 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        if $r30 != null goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Expected recorder to be idle but a recording is either pending or in progress.");

     label07:
        r35 = staticinvoke <androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.Recorder$RecordingRecord 'from'(androidx.camera.video.PendingRecording,long)>(r1, l0);

        $r36 = virtualinvoke r1.<androidx.camera.video.PendingRecording: android.content.Context getApplicationContext()>();

        virtualinvoke r35.<androidx.camera.video.Recorder$RecordingRecord: void initializeRecording(android.content.Context)>($r36);

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord> = r35;

        $r37 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r38 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State IDLING>;

        if $r37 != $r38 goto label08;

        $r26 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r26);

        $r27 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r28 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.camera.video.Recorder: void tryServicePendingRecording()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r27.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r28);

        goto label10;

     label08:
        $r21 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r20 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State ERROR>;

        if $r21 != $r20 goto label09;

        $r23 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r23);

        $r24 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r25 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$start$3()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r24.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r25);

        goto label10;

     label09:
        $r22 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r22);

     label10:
        goto label12;

     label11:
        $r31 := @caughtexception;

        r39 = $r31;

        b5 = 5;

        r34 = r39;

     label12:
        exitmonitor r2;

     label13:
        goto label16;

     label14:
        $r32 := @caughtexception;

        r3 = $r32;

        exitmonitor r2;

     label15:
        throw r3;

     label16:
        if r33 == null goto label17;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("A recording is already in progress. Previous recordings must be stopped before a new recording can be started.");

        throw $r15;

     label17:
        if b5 == 0 goto label18;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recording was started when the Recorder had encountered error ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Recorder", $r12);

        $r13 = staticinvoke <androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.Recorder$RecordingRecord 'from'(androidx.camera.video.PendingRecording,long)>(r1, l0);

        specialinvoke r0.<androidx.camera.video.Recorder: void finalizePendingRecording(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>($r13, b5, r34);

        $r14 = staticinvoke <androidx.camera.video.Recording: androidx.camera.video.Recording createFinalizedFrom(androidx.camera.video.PendingRecording,long)>(r1, l0);

        return $r14;

     label18:
        $r8 = staticinvoke <androidx.camera.video.Recording: androidx.camera.video.Recording 'from'(androidx.camera.video.PendingRecording,long)>(r1, l0);

        return $r8;

        catch java.io.IOException from label07 to label10 with label11;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    void pause(androidx.camera.video.Recording)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recording r1;
        java.lang.Object r2, $r5;
        androidx.camera.video.Recorder$RecordingRecord r3, $r6, $r19;
        java.lang.Throwable r4, $r25;
        boolean $z0, $z1;
        androidx.camera.video.Recorder$State $r7, $r9, $r15, $r18;
        int[] $r8;
        int $i0, $i1;
        java.util.concurrent.Executor $r10;
        java.lang.Runnable $r11;
        java.lang.IllegalStateException $r12;
        java.lang.StringBuilder $r13, $r14, $r16, $r20, $r21, $r23;
        java.lang.String $r17, $r24;
        androidx.camera.video.OutputOptions $r22;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recording;

        $r5 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        $z0 = staticinvoke <androidx.camera.video.Recorder: boolean isSameRecording(androidx.camera.video.Recording,androidx.camera.video.Recorder$RecordingRecord)>(r1, $r6);

        if $z0 != 0 goto label03;

        $r19 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        $z1 = staticinvoke <androidx.camera.video.Recorder: boolean isSameRecording(androidx.camera.video.Recording,androidx.camera.video.Recorder$RecordingRecord)>(r1, $r19);

        if $z1 != 0 goto label03;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pause() called on a recording that is no longer active: ");

        $r22 = virtualinvoke r1.<androidx.camera.video.Recording: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r24);

        exitmonitor r2;

     label02:
        return;

     label03:
        $r8 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i0 = virtualinvoke $r7.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i1 = $r8[$i0];

        tableswitch($i1)
        {
            case 1: goto label08;
            case 2: goto label08;
            case 3: goto label04;
            case 4: goto label07;
            case 5: goto label05;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label09;
            default: goto label09;
        };

     label04:
        $r18 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_PAUSED>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r18);

        goto label09;

     label05:
        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Called pause() from invalid state: ");

        $r15 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label06:
        $r9 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PAUSED>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r9);

        r3 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        $r10 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder,androidx.camera.video.Recorder$RecordingRecord)>(r0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$pause$4(androidx.camera.video.Recorder$RecordingRecord)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

        goto label09;

     label07:
        goto label09;

     label08:
        goto label09;

     label09:
        exitmonitor r2;

     label10:
        goto label13;

     label11:
        $r25 := @caughtexception;

        r4 = $r25;

        exitmonitor r2;

     label12:
        throw r4;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    void resume(androidx.camera.video.Recording)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recording r1;
        java.lang.Object r2, $r5;
        androidx.camera.video.Recorder$RecordingRecord r3, $r6, $r19;
        java.lang.Throwable r4, $r25;
        boolean $z0, $z1;
        androidx.camera.video.Recorder$State $r7, $r9, $r15, $r18;
        int[] $r8;
        int $i0, $i1;
        java.util.concurrent.Executor $r10;
        java.lang.Runnable $r11;
        java.lang.IllegalStateException $r12;
        java.lang.StringBuilder $r13, $r14, $r16, $r20, $r21, $r23;
        java.lang.String $r17, $r24;
        androidx.camera.video.OutputOptions $r22;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recording;

        $r5 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        $z0 = staticinvoke <androidx.camera.video.Recorder: boolean isSameRecording(androidx.camera.video.Recording,androidx.camera.video.Recorder$RecordingRecord)>(r1, $r6);

        if $z0 != 0 goto label03;

        $r19 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        $z1 = staticinvoke <androidx.camera.video.Recorder: boolean isSameRecording(androidx.camera.video.Recording,androidx.camera.video.Recorder$RecordingRecord)>(r1, $r19);

        if $z1 != 0 goto label03;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resume() called on a recording that is no longer active: ");

        $r22 = virtualinvoke r1.<androidx.camera.video.Recording: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r24);

        exitmonitor r2;

     label02:
        return;

     label03:
        $r8 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i0 = virtualinvoke $r7.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i1 = $r8[$i0];

        tableswitch($i1)
        {
            case 1: goto label06;
            case 2: goto label06;
            case 3: goto label06;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label08;
            default: goto label08;
        };

     label04:
        $r18 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r18);

        goto label08;

     label05:
        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Called resume() from invalid state: ");

        $r15 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label06:
        goto label08;

     label07:
        $r9 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RECORDING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r9);

        r3 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        $r10 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder,androidx.camera.video.Recorder$RecordingRecord)>(r0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$resume$5(androidx.camera.video.Recorder$RecordingRecord)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

        goto label08;

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r25 := @caughtexception;

        r4 = $r25;

        exitmonitor r2;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    void stop(androidx.camera.video.Recording)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recording r1;
        java.lang.Object r2, $r5;
        long l0, $l3;
        androidx.camera.video.Recorder$RecordingRecord r3, $r6, $r15, $r16, $r17, r24;
        java.lang.Throwable r4, $r23;
        boolean $z0, $z1, $z2, $z3;
        androidx.camera.video.Recorder$State $r7, $r9;
        int[] $r8;
        int $i1, $i2;
        java.util.concurrent.TimeUnit $r10;
        java.util.concurrent.Executor $r11;
        java.lang.Runnable $r12;
        java.lang.RuntimeException $r13;
        java.lang.IllegalStateException $r14;
        java.lang.StringBuilder $r18, $r19, $r21;
        androidx.camera.video.OutputOptions $r20;
        java.lang.String $r22;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recording;

        r24 = null;

        $r5 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        $z0 = staticinvoke <androidx.camera.video.Recorder: boolean isSameRecording(androidx.camera.video.Recording,androidx.camera.video.Recorder$RecordingRecord)>(r1, $r6);

        if $z0 != 0 goto label03;

        $r17 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        $z3 = staticinvoke <androidx.camera.video.Recorder: boolean isSameRecording(androidx.camera.video.Recording,androidx.camera.video.Recorder$RecordingRecord)>(r1, $r17);

        if $z3 != 0 goto label03;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stop() called on a recording that is no longer active: ");

        $r20 = virtualinvoke r1.<androidx.camera.video.Recording: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r22);

        exitmonitor r2;

     label02:
        return;

     label03:
        $r8 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i1 = virtualinvoke $r7.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i2 = $r8[$i1];

        tableswitch($i2)
        {
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label06;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label07;
            case 9: goto label08;
            default: goto label08;
        };

     label04:
        $r15 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        $z1 = staticinvoke <androidx.camera.video.Recorder: boolean isSameRecording(androidx.camera.video.Recording,androidx.camera.video.Recorder$RecordingRecord)>(r1, $r15);

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z1);

        r24 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord> = null;

        specialinvoke r0.<androidx.camera.video.Recorder: void restoreNonPendingState()>();

        goto label08;

     label05:
        $r16 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        $z2 = staticinvoke <androidx.camera.video.Recorder: boolean isSameRecording(androidx.camera.video.Recording,androidx.camera.video.Recorder$RecordingRecord)>(r1, $r16);

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z2);

        goto label08;

     label06:
        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Calling stop() while idling or initializing is invalid.");

        throw $r14;

     label07:
        $r9 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State STOPPING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r9);

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = virtualinvoke $r10.<java.util.concurrent.TimeUnit: long toMicros(long)>($l3);

        r3 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        $r11 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r12 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder,androidx.camera.video.Recorder$RecordingRecord,long)>(r0, r3, l0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$stop$6(androidx.camera.video.Recorder$RecordingRecord,long)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r11.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r12);

        goto label08;

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r23 := @caughtexception;

        r4 = $r23;

        exitmonitor r2;

     label11:
        throw r4;

     label12:
        if r24 == null goto label13;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Recording was stopped before any data could be produced.");

        specialinvoke r0.<androidx.camera.video.Recorder: void finalizePendingRecording(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r24, 8, $r13);

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void finalizePendingRecording(androidx.camera.video.Recorder$RecordingRecord, int, java.lang.Throwable)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        int i0;
        java.lang.Throwable r2, $r5;
        android.net.Uri $r3, $r8;
        androidx.camera.video.OutputOptions $r4;
        androidx.camera.video.AudioStats $r6;
        androidx.camera.video.RecordingStats $r7;
        androidx.camera.video.OutputResults $r9;
        androidx.camera.video.VideoRecordEvent$Finalize $r10;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Throwable;

        $r3 = <android.net.Uri: android.net.Uri EMPTY>;

        virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: void finalizeRecording(android.net.Uri)>($r3);

        $r4 = virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r5 = r0.<androidx.camera.video.Recorder: java.lang.Throwable mAudioErrorCause>;

        $r6 = staticinvoke <androidx.camera.video.AudioStats: androidx.camera.video.AudioStats of(int,java.lang.Throwable)>(1, $r5);

        $r7 = staticinvoke <androidx.camera.video.RecordingStats: androidx.camera.video.RecordingStats of(long,long,androidx.camera.video.AudioStats)>(0L, 0L, $r6);

        $r8 = <android.net.Uri: android.net.Uri EMPTY>;

        $r9 = staticinvoke <androidx.camera.video.OutputResults: androidx.camera.video.OutputResults of(android.net.Uri)>($r8);

        $r10 = staticinvoke <androidx.camera.video.VideoRecordEvent: androidx.camera.video.VideoRecordEvent$Finalize finalizeWithError(androidx.camera.video.OutputOptions,androidx.camera.video.RecordingStats,androidx.camera.video.OutputResults,int,java.lang.Throwable)>($r4, $r7, $r9, i0, r2);

        virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: void updateVideoRecordEvent(androidx.camera.video.VideoRecordEvent)>($r10);

        return;
    }

    void onSourceStateChangedInternal(androidx.camera.video.VideoOutput$SourceState)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.VideoOutput$SourceState r1, r2, $r11, $r12;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9;
        java.lang.String $r6, $r10;
        java.util.concurrent.ScheduledFuture $r13, $r14;
        boolean $z0;
        androidx.camera.video.internal.encoder.Encoder $r15, $r16;
        android.view.Surface $r17;
        androidx.camera.video.Recorder$RecordingRecord $r18, $r19;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.VideoOutput$SourceState;

        r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.VideoOutput$SourceState mSourceState>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.VideoOutput$SourceState mSourceState> = r1;

        if r2 == r1 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Video source has transitioned to state: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r10);

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Video source transitions to the same state: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r6);

        return;

     label2:
        $r11 = <androidx.camera.video.VideoOutput$SourceState: androidx.camera.video.VideoOutput$SourceState INACTIVE>;

        if r1 != $r11 goto label4;

        $r17 = r0.<androidx.camera.video.Recorder: android.view.Surface mActiveSurface>;

        if $r17 != null goto label3;

        virtualinvoke r0.<androidx.camera.video.Recorder: void reset(int,java.lang.Throwable)>(4, null);

        specialinvoke r0.<androidx.camera.video.Recorder: void setLatestSurface(android.view.Surface)>(null);

        goto label5;

     label3:
        $r18 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if $r18 == null goto label5;

        $r19 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void onInProgressRecordingInternalError(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>($r19, 4, null);

        goto label5;

     label4:
        $r12 = <androidx.camera.video.VideoOutput$SourceState: androidx.camera.video.VideoOutput$SourceState ACTIVE_NON_STREAMING>;

        if r1 != $r12 goto label5;

        $r13 = r0.<androidx.camera.video.Recorder: java.util.concurrent.ScheduledFuture mSourceNonStreamingTimeout>;

        if $r13 == null goto label5;

        $r14 = r0.<androidx.camera.video.Recorder: java.util.concurrent.ScheduledFuture mSourceNonStreamingTimeout>;

        $z0 = interfaceinvoke $r14.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);

        if $z0 == 0 goto label5;

        $r15 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        if $r15 == null goto label5;

        $r16 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        staticinvoke <androidx.camera.video.Recorder: void notifyEncoderSourceStopped(androidx.camera.video.internal.encoder.Encoder)>($r16);

     label5:
        return;
    }

    void reset(int, java.lang.Throwable)
    {
        androidx.camera.video.Recorder r0;
        int i0, $i1, $i2;
        java.lang.Throwable r1, r3, $r15;
        java.lang.Object r2, $r4;
        androidx.camera.video.Recorder$State $r5, $r9, $r12, $r13, $r14;
        int[] $r6;
        androidx.camera.video.Recorder$RecordingRecord $r7, $r8, $r10;
        java.lang.AssertionError $r11;
        boolean z0, z1;

        r0 := @this: androidx.camera.video.Recorder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Throwable;

        z0 = 0;

        z1 = 0;

        $r4 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $r6 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i1 = virtualinvoke $r5.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i2 = $r6[$i1];

        tableswitch($i2)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label02;
            case 4: goto label02;
            case 5: goto label04;
            case 6: goto label03;
            case 7: goto label05;
            case 8: goto label05;
            case 9: goto label03;
            default: goto label08;
        };

     label02:
        z0 = 1;

        $r13 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RESETTING>;

        specialinvoke r0.<androidx.camera.video.Recorder: void updateNonPendingState(androidx.camera.video.Recorder$State)>($r13);

        goto label08;

     label03:
        $r12 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r12);

     label04:
        z0 = 1;

        goto label08;

     label05:
        $r8 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if $r8 == $r7 goto label06;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>("In-progress recording does not match the active recording. Unable to reset encoder.");

        throw $r11;

     label06:
        $r9 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RESETTING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r9);

        z1 = 1;

        goto label08;

     label07:
        $r14 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RESETTING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r14);

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r2;

     label11:
        throw r3;

     label12:
        if z0 == 0 goto label13;

        specialinvoke r0.<androidx.camera.video.Recorder: void resetInternal()>();

        goto label14;

     label13:
        if z1 == 0 goto label14;

        $r10 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void stopInternal(androidx.camera.video.Recorder$RecordingRecord,java.lang.Long,int,java.lang.Throwable)>($r10, null, i0, r1);

     label14:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void initializeInternal(androidx.camera.core.SurfaceRequest, androidx.camera.core.impl.Timebase)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest r1;
        androidx.camera.core.impl.Timebase r2;
        android.util.Size r3;
        androidx.camera.video.VideoCapabilities r4;
        android.view.Surface $r5, $r11, $r12;
        java.util.concurrent.Executor $r6, $r13;
        androidx.camera.core.SurfaceRequest$TransformationInfoListener $r7;
        androidx.camera.core.impl.CameraInternal $r8;
        androidx.camera.core.CameraInfo $r9;
        androidx.camera.core.impl.CamcorderProfileProxy $r10;
        androidx.core.util.Consumer $r14;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        r2 := @parameter1: androidx.camera.core.impl.Timebase;

        $r5 = r0.<androidx.camera.video.Recorder: android.view.Surface mLatestSurface>;

        if $r5 == null goto label1;

        $r11 = r0.<androidx.camera.video.Recorder: android.view.Surface mLatestSurface>;

        r0.<androidx.camera.video.Recorder: android.view.Surface mActiveSurface> = $r11;

        $r12 = r0.<androidx.camera.video.Recorder: android.view.Surface mLatestSurface>;

        $r13 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r14 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.video.Recorder)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void onSurfaceRequestComplete(androidx.camera.core.SurfaceRequest$Result)>, methodtype: void __METHODTYPE__(androidx.camera.core.SurfaceRequest$Result));

        virtualinvoke r1.<androidx.camera.core.SurfaceRequest: void provideSurface(android.view.Surface,java.util.concurrent.Executor,androidx.core.util.Consumer)>($r12, $r13, $r14);

        specialinvoke r0.<androidx.camera.video.Recorder: void onInitialized()>();

        goto label2;

     label1:
        $r6 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r7 = dynamicinvoke "onTransformationInfoUpdate" <androidx.camera.core.SurfaceRequest$TransformationInfoListener (androidx.camera.video.Recorder)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.SurfaceRequest$TransformationInfo), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$initializeInternal$7(androidx.camera.core.SurfaceRequest$TransformationInfo)>, methodtype: void __METHODTYPE__(androidx.camera.core.SurfaceRequest$TransformationInfo));

        virtualinvoke r1.<androidx.camera.core.SurfaceRequest: void setTransformationInfoListener(java.util.concurrent.Executor,androidx.camera.core.SurfaceRequest$TransformationInfoListener)>($r6, $r7);

        r3 = virtualinvoke r1.<androidx.camera.core.SurfaceRequest: android.util.Size getResolution()>();

        $r8 = virtualinvoke r1.<androidx.camera.core.SurfaceRequest: androidx.camera.core.impl.CameraInternal getCamera()>();

        $r9 = interfaceinvoke $r8.<androidx.camera.core.impl.CameraInternal: androidx.camera.core.CameraInfo getCameraInfo()>();

        r4 = staticinvoke <androidx.camera.video.VideoCapabilities: androidx.camera.video.VideoCapabilities 'from'(androidx.camera.core.CameraInfo)>($r9);

        $r10 = virtualinvoke r4.<androidx.camera.video.VideoCapabilities: androidx.camera.core.impl.CamcorderProfileProxy findHighestSupportedCamcorderProfileFor(android.util.Size)>(r3);

        r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.CamcorderProfileProxy mResolvedCamcorderProfile> = $r10;

        specialinvoke r0.<androidx.camera.video.Recorder: void setupVideo(androidx.camera.core.SurfaceRequest,androidx.camera.core.impl.Timebase)>(r1, r2);

     label2:
        return;
    }

    private void onInitialized()
    {
        androidx.camera.video.Recorder r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r18, r25;
        androidx.camera.video.Recorder$State $r4, $r6, $r10, $r14;
        int[] $r5;
        int $i0, $i1;
        androidx.camera.video.Recorder$RecordingRecord $r7, r19, r20;
        androidx.camera.video.VideoOutput$SourceState $r8, $r9;
        java.lang.StringBuilder $r13, $r15, r22;
        java.lang.String $r16;
        boolean $z0, z1;
        byte b2;
        java.lang.Exception r21;
        java.lang.AssertionError r23, r24;

        r0 := @this: androidx.camera.video.Recorder;

        r19 = null;

        r20 = null;

        b2 = 0;

        r21 = null;

        z1 = 0;

        $r3 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r5 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r4 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i0 = virtualinvoke $r4.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label02;
            case 3: goto label08;
            case 4: goto label07;
            case 5: goto label05;
            case 6: goto label02;
            case 7: goto label02;
            case 8: goto label02;
            case 9: goto label06;
            default: goto label11;
        };

     label02:
        r23 = new java.lang.AssertionError;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrectly invoke onInitialized() in state ");

        $r14 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw r23;

     label03:
        $z0 = r0.<androidx.camera.video.Recorder: boolean mShouldWaitForNewSurface>;

        if $z0 == 0 goto label04;

        r0.<androidx.camera.video.Recorder: boolean mShouldWaitForNewSurface> = 0;

        goto label11;

     label04:
        r24 = new java.lang.AssertionError;

        specialinvoke r24.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unexpectedly invoke onInitialized() in a STOPPING state when it\'s not waiting for a new surface.");

        throw r24;

     label05:
        $r6 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State IDLING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r6);

        goto label11;

     label06:
        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Recorder", "onInitialized() was invoked when the Recorder had encountered error");

        goto label11;

     label07:
        z1 = 1;

     label08:
        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        if $r7 == null goto label09;

        goto label11;

     label09:
        $r9 = r0.<androidx.camera.video.Recorder: androidx.camera.video.VideoOutput$SourceState mSourceState>;

        $r8 = <androidx.camera.video.VideoOutput$SourceState: androidx.camera.video.VideoOutput$SourceState INACTIVE>;

        if $r9 != $r8 goto label10;

        r20 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord> = null;

        specialinvoke r0.<androidx.camera.video.Recorder: void restoreNonPendingState()>();

        b2 = 4;

        r21 = <androidx.camera.video.Recorder: java.lang.Exception PENDING_RECORDING_ERROR_CAUSE_SOURCE_INACTIVE>;

        goto label11;

     label10:
        $r10 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        r19 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord makePendingRecordingActiveLocked(androidx.camera.video.Recorder$State)>($r10);

     label11:
        exitmonitor r1;

     label12:
        goto label15;

     label13:
        $r18 := @caughtexception;

        r2 = $r18;

        exitmonitor r1;

     label14:
        throw r2;

     label15:
        if r19 == null goto label16;

        specialinvoke r0.<androidx.camera.video.Recorder: void startRecording(androidx.camera.video.Recorder$RecordingRecord,boolean)>(r19, z1);

        goto label17;

     label16:
        if r20 == null goto label17;

        r25 = (java.lang.Throwable) r21;

        specialinvoke r0.<androidx.camera.video.Recorder: void finalizePendingRecording(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r20, b2, r25);

     label17:
        return;

        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private androidx.camera.video.MediaSpec composeRecorderMediaSpec(androidx.camera.video.MediaSpec)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.MediaSpec r1, $r4;
        androidx.camera.video.MediaSpec$Builder r2;
        androidx.camera.video.VideoSpec r3;
        int $i0;
        androidx.core.util.Consumer $r5;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.MediaSpec;

        r2 = virtualinvoke r1.<androidx.camera.video.MediaSpec: androidx.camera.video.MediaSpec$Builder toBuilder()>();

        r3 = virtualinvoke r1.<androidx.camera.video.MediaSpec: androidx.camera.video.VideoSpec getVideoSpec()>();

        $i0 = virtualinvoke r3.<androidx.camera.video.VideoSpec: int getAspectRatio()>();

        if $i0 != -1 goto label1;

        $r5 = dynamicinvoke "accept" <androidx.core.util.Consumer ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder: void lambda$composeRecorderMediaSpec$8(androidx.camera.video.VideoSpec$Builder)>, methodtype: void __METHODTYPE__(androidx.camera.video.VideoSpec$Builder));

        virtualinvoke r2.<androidx.camera.video.MediaSpec$Builder: androidx.camera.video.MediaSpec$Builder configureVideo(androidx.core.util.Consumer)>($r5);

     label1:
        $r4 = virtualinvoke r2.<androidx.camera.video.MediaSpec$Builder: androidx.camera.video.MediaSpec build()>();

        return $r4;
    }

    private static boolean isSameRecording(androidx.camera.video.Recording, androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recording r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @parameter0: androidx.camera.video.Recording;

        r1 := @parameter1: androidx.camera.video.Recorder$RecordingRecord;

        if r1 != null goto label1;

        return 0;

     label1:
        $l0 = virtualinvoke r0.<androidx.camera.video.Recording: long getRecordingId()>();

        $l1 = virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: long getRecordingId()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void setupAudio(androidx.camera.video.Recorder$RecordingRecord) throws androidx.camera.video.internal.ResourceCreationException
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        androidx.camera.video.MediaSpec r2;
        androidx.camera.video.internal.config.MimeInfo r3;
        androidx.camera.core.impl.Timebase r4;
        androidx.camera.video.internal.AudioSource$Settings r5;
        androidx.camera.video.internal.encoder.AudioEncoderConfig r6;
        androidx.camera.video.internal.encoder.Encoder$EncoderInput r7;
        androidx.camera.core.impl.MutableStateObservable $r8;
        java.lang.Object $r9;
        androidx.camera.core.impl.CamcorderProfileProxy $r10;
        androidx.camera.video.AudioSpec $r11, $r18;
        androidx.camera.video.internal.AudioSource $r12, $r13, $r15, $r24;
        java.lang.Object[] $r14;
        int $i0;
        java.lang.Integer $r16;
        java.lang.String $r17;
        java.util.concurrent.Executor $r19;
        androidx.camera.video.internal.encoder.EncoderFactory $r20;
        androidx.camera.video.internal.encoder.Encoder $r21, $r22;
        boolean $z0;
        androidx.camera.video.internal.encoder.Encoder$ByteBufferInput $r23;
        java.lang.AssertionError $r25;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        $r8 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec>;

        $r9 = virtualinvoke r0.<androidx.camera.video.Recorder: java.lang.Object getObservableData(androidx.camera.core.impl.StateObservable)>($r8);

        r2 = (androidx.camera.video.MediaSpec) $r9;

        $r10 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.CamcorderProfileProxy mResolvedCamcorderProfile>;

        r3 = staticinvoke <androidx.camera.video.internal.config.AudioConfigUtil: androidx.camera.video.internal.config.MimeInfo resolveAudioMimeInfo(androidx.camera.video.MediaSpec,androidx.camera.core.impl.CamcorderProfileProxy)>(r2, $r10);

        r4 = <androidx.camera.core.impl.Timebase: androidx.camera.core.impl.Timebase UPTIME>;

        $r11 = virtualinvoke r2.<androidx.camera.video.MediaSpec: androidx.camera.video.AudioSpec getAudioSpec()>();

        r5 = staticinvoke <androidx.camera.video.internal.config.AudioConfigUtil: androidx.camera.video.internal.AudioSource$Settings resolveAudioSourceSettings(androidx.camera.video.internal.config.MimeInfo,androidx.camera.video.AudioSpec)>(r3, $r11);

        $r12 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>;

        if $r12 == null goto label1;

        specialinvoke r0.<androidx.camera.video.Recorder: void releaseCurrentAudioSource()>();

     label1:
        $r13 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource setupAudioSource(androidx.camera.video.Recorder$RecordingRecord,androidx.camera.video.internal.AudioSource$Settings)>(r1, r5);

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource> = $r13;

        $r14 = newarray (java.lang.Object)[1];

        $r15 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>;

        $i0 = virtualinvoke $r15.<java.lang.Object: int hashCode()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r14[0] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Set up new audio source: 0x%x", $r14);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r17);

        goto label2;

     label2:
        $r18 = virtualinvoke r2.<androidx.camera.video.MediaSpec: androidx.camera.video.AudioSpec getAudioSpec()>();

        r6 = staticinvoke <androidx.camera.video.internal.config.AudioConfigUtil: androidx.camera.video.internal.encoder.AudioEncoderConfig resolveAudioEncoderConfig(androidx.camera.video.internal.config.MimeInfo,androidx.camera.core.impl.Timebase,androidx.camera.video.internal.AudioSource$Settings,androidx.camera.video.AudioSpec)>(r3, r4, r5, $r18);

        $r20 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory mAudioEncoderFactory>;

        $r19 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mExecutor>;

        $r21 = interfaceinvoke $r20.<androidx.camera.video.internal.encoder.EncoderFactory: androidx.camera.video.internal.encoder.Encoder createEncoder(java.util.concurrent.Executor,androidx.camera.video.internal.encoder.EncoderConfig)>($r19, r6);

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder> = $r21;

        goto label3;

     label3:
        $r22 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>;

        r7 = interfaceinvoke $r22.<androidx.camera.video.internal.encoder.Encoder: androidx.camera.video.internal.encoder.Encoder$EncoderInput getInput()>();

        $z0 = r7 instanceof androidx.camera.video.internal.encoder.Encoder$ByteBufferInput;

        if $z0 != 0 goto label4;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>("The EncoderInput of audio isn\'t a ByteBufferInput.");

        throw $r25;

     label4:
        $r24 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>;

        $r23 = (androidx.camera.video.internal.encoder.Encoder$ByteBufferInput) r7;

        virtualinvoke $r24.<androidx.camera.video.internal.AudioSource: void setBufferProvider(androidx.camera.video.internal.BufferProvider)>($r23);

        return;
    }

    private androidx.camera.video.internal.AudioSource setupAudioSource(androidx.camera.video.Recorder$RecordingRecord, androidx.camera.video.internal.AudioSource$Settings) throws androidx.camera.video.internal.AudioSourceAccessException
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        androidx.camera.video.internal.AudioSource$Settings r2;
        androidx.camera.video.internal.AudioSource r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        r2 := @parameter1: androidx.camera.video.internal.AudioSource$Settings;

        $r4 = <androidx.camera.video.Recorder: java.util.concurrent.Executor AUDIO_EXECUTOR>;

        r3 = virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.internal.AudioSource performOneTimeAudioSourceCreation(androidx.camera.video.internal.AudioSource$Settings,java.util.concurrent.Executor)>(r2, $r4);

        return r3;
    }

    private void releaseCurrentAudioSource()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.internal.AudioSource r1, $r2;
        java.lang.Object[] $r3;
        int $i0;
        java.lang.Integer $r4;
        java.lang.String $r5;
        com.google.common.util.concurrent.ListenableFuture $r6;
        androidx.camera.video.Recorder$1 $r7;
        java.util.concurrent.Executor $r8;
        java.lang.AssertionError $r9;

        r0 := @this: androidx.camera.video.Recorder;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>;

        if $r2 != null goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cannot release null audio source.");

        throw $r9;

     label1:
        r1 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource> = null;

        $r3 = newarray (java.lang.Object)[1];

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Releasing audio source: 0x%x", $r3);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r5);

        $r6 = virtualinvoke r1.<androidx.camera.video.internal.AudioSource: com.google.common.util.concurrent.ListenableFuture release()>();

        $r7 = new androidx.camera.video.Recorder$1;

        specialinvoke $r7.<androidx.camera.video.Recorder$1: void <init>(androidx.camera.video.Recorder,androidx.camera.video.internal.AudioSource)>(r0, r1);

        $r8 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r6, $r7, $r8);

        return;
    }

    private void setupVideo(androidx.camera.core.SurfaceRequest, androidx.camera.core.impl.Timebase)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest r1;
        androidx.camera.core.impl.Timebase r2;
        androidx.camera.video.MediaSpec r3;
        androidx.camera.video.internal.config.MimeInfo r4;
        androidx.camera.video.internal.encoder.VideoEncoderConfig r5;
        androidx.camera.video.internal.encoder.Encoder$EncoderInput r6;
        androidx.camera.core.impl.MutableStateObservable $r7;
        java.lang.Object $r8;
        androidx.camera.core.impl.CamcorderProfileProxy $r9;
        androidx.camera.video.VideoSpec $r10;
        android.util.Size $r11;
        android.util.Range $r12;
        java.util.concurrent.Executor $r13, $r18;
        androidx.camera.video.internal.encoder.EncoderFactory $r14;
        androidx.camera.video.internal.encoder.Encoder $r15, $r16;
        boolean $z0;
        androidx.camera.video.internal.encoder.Encoder$SurfaceInput $r17;
        androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener $r19;
        java.lang.AssertionError $r20;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        r2 := @parameter1: androidx.camera.core.impl.Timebase;

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec>;

        $r8 = virtualinvoke r0.<androidx.camera.video.Recorder: java.lang.Object getObservableData(androidx.camera.core.impl.StateObservable)>($r7);

        r3 = (androidx.camera.video.MediaSpec) $r8;

        $r9 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.CamcorderProfileProxy mResolvedCamcorderProfile>;

        r4 = staticinvoke <androidx.camera.video.internal.config.VideoConfigUtil: androidx.camera.video.internal.config.MimeInfo resolveVideoMimeInfo(androidx.camera.video.MediaSpec,androidx.camera.core.impl.CamcorderProfileProxy)>(r3, $r9);

        $r10 = virtualinvoke r3.<androidx.camera.video.MediaSpec: androidx.camera.video.VideoSpec getVideoSpec()>();

        $r11 = virtualinvoke r1.<androidx.camera.core.SurfaceRequest: android.util.Size getResolution()>();

        $r12 = virtualinvoke r1.<androidx.camera.core.SurfaceRequest: android.util.Range getExpectedFrameRate()>();

        r5 = staticinvoke <androidx.camera.video.internal.config.VideoConfigUtil: androidx.camera.video.internal.encoder.VideoEncoderConfig resolveVideoEncoderConfig(androidx.camera.video.internal.config.MimeInfo,androidx.camera.core.impl.Timebase,androidx.camera.video.VideoSpec,android.util.Size,android.util.Range)>(r4, r2, $r10, $r11, $r12);

        $r14 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory mVideoEncoderFactory>;

        $r13 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mExecutor>;

        $r15 = interfaceinvoke $r14.<androidx.camera.video.internal.encoder.EncoderFactory: androidx.camera.video.internal.encoder.Encoder createEncoder(java.util.concurrent.Executor,androidx.camera.video.internal.encoder.EncoderConfig)>($r13, r5);

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder> = $r15;

        goto label1;

     label1:
        $r16 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        r6 = interfaceinvoke $r16.<androidx.camera.video.internal.encoder.Encoder: androidx.camera.video.internal.encoder.Encoder$EncoderInput getInput()>();

        $z0 = r6 instanceof androidx.camera.video.internal.encoder.Encoder$SurfaceInput;

        if $z0 != 0 goto label2;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("The EncoderInput of video isn\'t a SurfaceInput.");

        throw $r20;

     label2:
        $r17 = (androidx.camera.video.internal.encoder.Encoder$SurfaceInput) r6;

        $r18 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r19 = dynamicinvoke "onSurfaceUpdate" <androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener (androidx.camera.video.Recorder,androidx.camera.core.SurfaceRequest)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.view.Surface), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$setupVideo$9(androidx.camera.core.SurfaceRequest,android.view.Surface)>, methodtype: void __METHODTYPE__(android.view.Surface));

        interfaceinvoke $r17.<androidx.camera.video.internal.encoder.Encoder$SurfaceInput: void setOnSurfaceUpdateListener(java.util.concurrent.Executor,androidx.camera.video.internal.encoder.Encoder$SurfaceInput$OnSurfaceUpdateListener)>($r18, $r19);

        return;
    }

    private void onEncoderSurfaceUpdated(android.view.Surface, androidx.camera.core.SurfaceRequest)
    {
        androidx.camera.video.Recorder r0;
        android.view.Surface r1, r3, $r4;
        androidx.camera.core.SurfaceRequest r2;
        java.util.concurrent.Executor $r5;
        androidx.core.util.Consumer $r6;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: androidx.camera.core.SurfaceRequest;

        $r4 = r0.<androidx.camera.video.Recorder: android.view.Surface mLatestSurface>;

        if $r4 == r1 goto label2;

        r3 = r0.<androidx.camera.video.Recorder: android.view.Surface mLatestSurface>;

        specialinvoke r0.<androidx.camera.video.Recorder: void setLatestSurface(android.view.Surface)>(r1);

        if r3 != null goto label1;

        r0.<androidx.camera.video.Recorder: android.view.Surface mActiveSurface> = r1;

        $r5 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r6 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.video.Recorder)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void onSurfaceRequestComplete(androidx.camera.core.SurfaceRequest$Result)>, methodtype: void __METHODTYPE__(androidx.camera.core.SurfaceRequest$Result));

        virtualinvoke r2.<androidx.camera.core.SurfaceRequest: void provideSurface(android.view.Surface,java.util.concurrent.Executor,androidx.core.util.Consumer)>(r1, $r5, $r6);

        specialinvoke r0.<androidx.camera.video.Recorder: void onInitialized()>();

     label1:
        goto label3;

     label2:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Video encoder provides the same surface.");

     label3:
        return;
    }

    private void onSurfaceRequestComplete(androidx.camera.core.SurfaceRequest$Result)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest$Result r1;
        android.view.Surface r2, $r5, $r8, $r10, $r11;
        java.lang.StringBuilder $r3, $r4, $r6;
        int $i0;
        java.lang.String $r7;
        java.util.concurrent.ScheduledFuture $r9, $r12;
        boolean $z0, z1;
        androidx.camera.video.internal.encoder.Encoder $r13, $r14;
        androidx.camera.video.VideoOutput$SourceState $r15, $r16;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest$Result;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface closed: ");

        $r5 = virtualinvoke r1.<androidx.camera.core.SurfaceRequest$Result: android.view.Surface getSurface()>();

        $i0 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r7);

        r2 = virtualinvoke r1.<androidx.camera.core.SurfaceRequest$Result: android.view.Surface getSurface()>();

        $r8 = r0.<androidx.camera.video.Recorder: android.view.Surface mActiveSurface>;

        if r2 != $r8 goto label5;

        $r9 = r0.<androidx.camera.video.Recorder: java.util.concurrent.ScheduledFuture mSourceNonStreamingTimeout>;

        if $r9 == null goto label1;

        $r12 = r0.<androidx.camera.video.Recorder: java.util.concurrent.ScheduledFuture mSourceNonStreamingTimeout>;

        $z0 = interfaceinvoke $r12.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);

        if $z0 == 0 goto label1;

        $r13 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        if $r13 == null goto label1;

        $r14 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        staticinvoke <androidx.camera.video.Recorder: void notifyEncoderSourceStopped(androidx.camera.video.internal.encoder.Encoder)>($r14);

     label1:
        z1 = 0;

        $r15 = r0.<androidx.camera.video.Recorder: androidx.camera.video.VideoOutput$SourceState mSourceState>;

        $r16 = <androidx.camera.video.VideoOutput$SourceState: androidx.camera.video.VideoOutput$SourceState INACTIVE>;

        if $r15 != $r16 goto label2;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Latest active surface no longer in use and source state is INACTIVE. Resetting recorder...");

        z1 = 1;

        goto label3;

     label2:
        $r11 = r0.<androidx.camera.video.Recorder: android.view.Surface mActiveSurface>;

        $r10 = r0.<androidx.camera.video.Recorder: android.view.Surface mLatestSurface>;

        if $r11 != $r10 goto label3;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("Recorder", "Source has stopped producing frames into active surface, yet source state is still active. Stopping any in-progress recordings and resetting encoders in case a new surface is required.");

        z1 = 1;

     label3:
        r0.<androidx.camera.video.Recorder: android.view.Surface mActiveSurface> = null;

        if z1 == 0 goto label4;

        virtualinvoke r0.<androidx.camera.video.Recorder: void reset(int,java.lang.Throwable)>(4, null);

        specialinvoke r0.<androidx.camera.video.Recorder: void setLatestSurface(android.view.Surface)>(null);

     label4:
        goto label6;

     label5:
        virtualinvoke r2.<android.view.Surface: void release()>();

     label6:
        return;
    }

    private void onEncoderSetupError(java.lang.Throwable)
    {
        androidx.camera.video.Recorder r0;
        java.lang.Throwable r1, r3, $r16;
        java.lang.Object r2, $r4;
        androidx.camera.video.Recorder$State $r5, $r7, $r11;
        int[] $r6;
        int $i0, $i1;
        java.lang.AssertionError $r8;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r14;
        java.lang.String $r15;
        androidx.camera.video.Recorder$RecordingRecord r17;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: java.lang.Throwable;

        r17 = null;

        $r4 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $r6 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i0 = virtualinvoke $r5.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label02;
            case 4: goto label02;
            case 5: goto label03;
            case 6: goto label05;
            case 7: goto label05;
            case 8: goto label05;
            case 9: goto label04;
            default: goto label06;
        };

     label02:
        r17 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord> = null;

     label03:
        specialinvoke r0.<androidx.camera.video.Recorder: void setStreamId(int)>(-1);

        $r7 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State ERROR>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r7);

        goto label06;

     label04:
        goto label06;

     label05:
        $r8 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encountered encoder setup error while in unexpected state ");

        $r11 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r8;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r2;

     label09:
        throw r3;

     label10:
        if r17 == null goto label11;

        specialinvoke r0.<androidx.camera.video.Recorder: void finalizePendingRecording(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r17, 7, r1);

     label11:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void setupAndStartMediaMuxer(androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        androidx.camera.video.internal.encoder.EncodedData r2, r3, $r5, r40;
        android.media.MediaMuxer $r4, r42;
        boolean $z0, $z1, $z2, $z3, $z4;
        long $l0, $l1, $l10, $l12, $l13, l14;
        byte $b2, $b11;
        androidx.camera.core.impl.MutableStateObservable $r6;
        java.lang.Object $r7, $r14, $r18, $r20, $r29;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i15, i16;
        androidx.core.util.Consumer $r8;
        androidx.camera.core.SurfaceRequest$TransformationInfo $r9, $r22;
        androidx.camera.video.OutputOptions $r10;
        androidx.camera.video.internal.encoder.OutputConfig $r11, $r15;
        android.media.MediaFormat $r12, $r16;
        java.lang.Integer $r13, $r17;
        double $d0, $d1, $d2, $d3;
        java.lang.Double $r19, $r21;
        float $f0, $f1;
        androidx.camera.video.MediaSpec $r23, r41;
        androidx.camera.core.impl.CamcorderProfileProxy $r24;
        java.lang.Object[] $r25;
        java.lang.Long $r26, $r27;
        java.lang.String $r28;
        java.lang.AssertionError $r30, $r32, $r33;
        androidx.camera.core.internal.utils.RingBuffer $r31;
        java.lang.Throwable $r34, $r35, $r36, $r37, r43, r46, r48, r49;
        java.util.List r38;
        java.util.Iterator r39, r47;
        android.location.Location r44;
        android.util.Pair r45;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        $r4 = r0.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer>;

        if $r4 == null goto label01;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unable to set up media muxer when one already exists.");

        throw $r33;

     label01:
        $z0 = virtualinvoke r0.<androidx.camera.video.Recorder: boolean isAudioEnabled()>();

        if $z0 == 0 goto label02;

        $r31 = r0.<androidx.camera.video.Recorder: androidx.camera.core.internal.utils.RingBuffer mPendingAudioRingBuffer>;

        $z3 = interfaceinvoke $r31.<androidx.camera.core.internal.utils.RingBuffer: boolean isEmpty()>();

        if $z3 == 0 goto label02;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>("Audio is enabled but no audio sample is ready. Cannot start media muxer.");

        throw $r32;

     label02:
        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData>;

        if $r5 != null goto label03;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>(java.lang.Object)>("Media muxer cannot be started without an encoded video frame.");

        throw $r30;

     label03:
        r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData>;

     label04:
        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData> = null;

        $l0 = interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: long getPresentationTimeUs()>();

        r38 = specialinvoke r0.<androidx.camera.video.Recorder: java.util.List getAudioDataToWriteAndClearCache(long)>($l0);

        l14 = interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: long size()>();

        r39 = interfaceinvoke r38.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r29 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (androidx.camera.video.internal.encoder.EncodedData) $r29;

        $l13 = interfaceinvoke r40.<androidx.camera.video.internal.encoder.EncodedData: long size()>();

        l14 = l14 + $l13;

        goto label05;

     label06:
        $l1 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label09;

        $l10 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $b11 = l14 cmp $l10;

        if $b11 <= 0 goto label09;

        $r25 = newarray (java.lang.Object)[2];

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l14);

        $r25[0] = $r26;

        $l12 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r25[1] = $r27;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Initial data exceeds file size limit %d > %d", $r25);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r28);

        virtualinvoke r0.<androidx.camera.video.Recorder: void onInProgressRecordingInternalError(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r1, 2, null);

     label07:
        if r2 == null goto label08;

        interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

     label08:
        return;

     label09:
        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec>;

        $r7 = virtualinvoke r0.<androidx.camera.video.Recorder: java.lang.Object getObservableData(androidx.camera.core.impl.StateObservable)>($r6);

        r41 = (androidx.camera.video.MediaSpec) $r7;

        $i3 = virtualinvoke r41.<androidx.camera.video.MediaSpec: int getOutputFormat()>();

        if $i3 != -1 goto label10;

        $r24 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.CamcorderProfileProxy mResolvedCamcorderProfile>;

        $r23 = <androidx.camera.video.Recorder: androidx.camera.video.MediaSpec MEDIA_SPEC_DEFAULT>;

        $i8 = virtualinvoke $r23.<androidx.camera.video.MediaSpec: int getOutputFormat()>();

        $i9 = staticinvoke <androidx.camera.video.MediaSpec: int outputFormatToMuxerFormat(int)>($i8);

        $i15 = staticinvoke <androidx.camera.video.Recorder: int supportedMuxerFormatOrDefaultFrom(androidx.camera.core.impl.CamcorderProfileProxy,int)>($r24, $i9);

        goto label11;

     label10:
        $i4 = virtualinvoke r41.<androidx.camera.video.MediaSpec: int getOutputFormat()>();

        $i15 = staticinvoke <androidx.camera.video.MediaSpec: int outputFormatToMuxerFormat(int)>($i4);

     label11:
        i16 = $i15;

        $r8 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.video.Recorder)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$setupAndStartMediaMuxer$10(android.net.Uri)>, methodtype: void __METHODTYPE__(android.net.Uri));

        r42 = virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: android.media.MediaMuxer performOneTimeMediaMuxerCreation(int,androidx.core.util.Consumer)>(i16, $r8);

     label12:
        goto label16;

     label13:
        $r37 := @caughtexception;

        r43 = $r37;

        virtualinvoke r0.<androidx.camera.video.Recorder: void onInProgressRecordingInternalError(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r1, 5, r43);

     label14:
        if r2 == null goto label15;

        interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

     label15:
        return;

     label16:
        $r9 = r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest$TransformationInfo mSurfaceTransformationInfo>;

        if $r9 == null goto label17;

        $r22 = r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest$TransformationInfo mSurfaceTransformationInfo>;

        $i7 = virtualinvoke $r22.<androidx.camera.core.SurfaceRequest$TransformationInfo: int getRotationDegrees()>();

        virtualinvoke r42.<android.media.MediaMuxer: void setOrientationHint(int)>($i7);

     label17:
        $r10 = virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        r44 = virtualinvoke $r10.<androidx.camera.video.OutputOptions: android.location.Location getLocation()>();

        if r44 == null goto label23;

     label18:
        $d0 = virtualinvoke r44.<android.location.Location: double getLatitude()>();

        $d1 = virtualinvoke r44.<android.location.Location: double getLongitude()>();

        r45 = staticinvoke <androidx.camera.video.internal.workaround.CorrectNegativeLatLongForMediaMuxer: android.util.Pair adjustGeoLocation(double,double)>($d0, $d1);

        $r18 = r45.<android.util.Pair: java.lang.Object first>;

        $r19 = (java.lang.Double) $r18;

        $d2 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $f0 = (float) $d2;

        $r20 = r45.<android.util.Pair: java.lang.Object second>;

        $r21 = (java.lang.Double) $r20;

        $d3 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        $f1 = (float) $d3;

        virtualinvoke r42.<android.media.MediaMuxer: void setLocation(float,float)>($f0, $f1);

     label19:
        goto label23;

     label20:
        $r36 := @caughtexception;

        r46 = $r36;

        virtualinvoke r42.<android.media.MediaMuxer: void release()>();

        virtualinvoke r0.<androidx.camera.video.Recorder: void onInProgressRecordingInternalError(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r1, 5, r46);

     label21:
        if r2 == null goto label22;

        interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

     label22:
        return;

     label23:
        $r11 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mVideoOutputConfig>;

        $r12 = interfaceinvoke $r11.<androidx.camera.video.internal.encoder.OutputConfig: android.media.MediaFormat getMediaFormat()>();

        $i5 = virtualinvoke r42.<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)>($r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        r0.<androidx.camera.video.Recorder: java.lang.Integer mVideoTrackIndex> = $r13;

        $z2 = virtualinvoke r0.<androidx.camera.video.Recorder: boolean isAudioEnabled()>();

        if $z2 == 0 goto label24;

        $r15 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mAudioOutputConfig>;

        $r16 = interfaceinvoke $r15.<androidx.camera.video.internal.encoder.OutputConfig: android.media.MediaFormat getMediaFormat()>();

        $i6 = virtualinvoke r42.<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)>($r16);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        r0.<androidx.camera.video.Recorder: java.lang.Integer mAudioTrackIndex> = $r17;

     label24:
        virtualinvoke r42.<android.media.MediaMuxer: void start()>();

        r0.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer> = r42;

        virtualinvoke r0.<androidx.camera.video.Recorder: void writeVideoData(androidx.camera.video.internal.encoder.EncodedData,androidx.camera.video.Recorder$RecordingRecord)>(r2, r1);

        r47 = interfaceinvoke r38.<java.util.List: java.util.Iterator iterator()>();

     label25:
        $z4 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label26;

        $r14 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.video.internal.encoder.EncodedData) $r14;

        virtualinvoke r0.<androidx.camera.video.Recorder: void writeAudioData(androidx.camera.video.internal.encoder.EncodedData,androidx.camera.video.Recorder$RecordingRecord)>(r3, r1);

        goto label25;

     label26:
        if r2 == null goto label32;

        interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

        goto label32;

     label27:
        $r34 := @caughtexception;

        r48 = $r34;

        if r2 == null goto label31;

     label28:
        interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

     label29:
        goto label31;

     label30:
        $r35 := @caughtexception;

        r49 = $r35;

        virtualinvoke r48.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r49);

     label31:
        throw r48;

     label32:
        return;

        catch java.io.IOException from label09 to label12 with label13;
        catch java.lang.IllegalArgumentException from label18 to label19 with label20;
        catch java.lang.Throwable from label04 to label07 with label27;
        catch java.lang.Throwable from label09 to label14 with label27;
        catch java.lang.Throwable from label16 to label21 with label27;
        catch java.lang.Throwable from label23 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label30;
    }

    private java.util.List getAudioDataToWriteAndClearCache(long)
    {
        androidx.camera.video.Recorder r0;
        long l0, $l1;
        java.util.ArrayList r1, $r3;
        androidx.camera.video.internal.encoder.EncodedData r2;
        androidx.camera.core.internal.utils.RingBuffer $r4, $r5;
        boolean $z0;
        java.lang.Object $r6;
        byte $b2;

        r0 := @this: androidx.camera.video.Recorder;

        l0 := @parameter0: long;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

     label1:
        $r4 = r0.<androidx.camera.video.Recorder: androidx.camera.core.internal.utils.RingBuffer mPendingAudioRingBuffer>;

        $z0 = interfaceinvoke $r4.<androidx.camera.core.internal.utils.RingBuffer: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.core.internal.utils.RingBuffer mPendingAudioRingBuffer>;

        $r6 = interfaceinvoke $r5.<androidx.camera.core.internal.utils.RingBuffer: java.lang.Object dequeue()>();

        r2 = (androidx.camera.video.internal.encoder.EncodedData) $r6;

        $l1 = interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: long getPresentationTimeUs()>();

        $b2 = $l1 cmp l0;

        if $b2 < 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

     label2:
        goto label1;

     label3:
        return r1;
    }

    private void startInternal(androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1, $r2, $r7, $r8;
        androidx.camera.video.OutputOptions $r3, $r9, $r23;
        long $l0, $l4, $l5, $l6;
        byte $b1;
        androidx.camera.video.Recorder$AudioState $r4, $r14, $r20, $r29;
        int[] $r5;
        int $i2, $i3;
        boolean $z0, $z1, $z2, $z3;
        androidx.camera.video.internal.encoder.Encoder $r6, $r13;
        androidx.camera.video.RecordingStats $r10;
        androidx.camera.video.VideoRecordEvent$Start $r11;
        androidx.camera.video.internal.AudioSource $r12;
        java.lang.AssertionError $r15, $r17, $r28;
        java.lang.StringBuilder $r18, $r19, $r21, $r24, $r25, $r26;
        java.lang.String $r22, $r27;
        double $d0, $d1;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if $r2 == null goto label01;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>("Attempted to start a new recording while another was in progress.");

        throw $r28;

     label01:
        $r3 = virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $l0 = virtualinvoke $r3.<androidx.camera.video.OutputOptions: long getFileSizeLimit()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label02;

        $r23 = virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $l4 = virtualinvoke $r23.<androidx.camera.video.OutputOptions: long getFileSizeLimit()>();

        $d0 = (double) $l4;

        $d1 = $d0 * 0.95;

        $l5 = staticinvoke <java.lang.Math: long round(double)>($d1);

        r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes> = $l5;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File size limit in bytes: ");

        $l6 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r27);

        goto label03;

     label02:
        r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes> = 0L;

     label03:
        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording> = r1;

        $r5 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState>;

        $r4 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState>;

        $i2 = virtualinvoke $r4.<androidx.camera.video.Recorder$AudioState: int ordinal()>();

        $i3 = $r5[$i2];

        tableswitch($i3)
        {
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label08;
            default: goto label10;
        };

     label04:
        $r17 = new java.lang.AssertionError;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrectly invoke startInternal in audio state ");

        $r20 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r22);

        throw $r17;

     label05:
        $z2 = virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: boolean hasAudioEnabled()>();

        if $z2 == 0 goto label06;

        $r29 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ACTIVE>;

        goto label07;

     label06:
        $r29 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState DISABLED>;

     label07:
        virtualinvoke r0.<androidx.camera.video.Recorder: void setAudioState(androidx.camera.video.Recorder$AudioState)>($r29);

        goto label10;

     label08:
        $z0 = virtualinvoke r1.<androidx.camera.video.Recorder$RecordingRecord: boolean hasAudioEnabled()>();

        if $z0 == 0 goto label10;

        $z1 = virtualinvoke r0.<androidx.camera.video.Recorder: boolean isAudioSupported()>();

        if $z1 != 0 goto label09;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>("The Recorder doesn\'t support recording with audio");

        throw $r15;

     label09:
        specialinvoke r0.<androidx.camera.video.Recorder: void setupAudio(androidx.camera.video.Recorder$RecordingRecord)>(r1);

        $r14 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ACTIVE>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setAudioState(androidx.camera.video.Recorder$AudioState)>($r14);

        goto label10;

     label10:
        specialinvoke r0.<androidx.camera.video.Recorder: void initEncoderAndAudioSourceCallbacks(androidx.camera.video.Recorder$RecordingRecord)>(r1);

        $z3 = virtualinvoke r0.<androidx.camera.video.Recorder: boolean isAudioEnabled()>();

        if $z3 == 0 goto label11;

        $r12 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>;

        virtualinvoke $r12.<androidx.camera.video.internal.AudioSource: void start()>();

        $r13 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>;

        interfaceinvoke $r13.<androidx.camera.video.internal.encoder.Encoder: void start()>();

     label11:
        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        interfaceinvoke $r6.<androidx.camera.video.internal.encoder.Encoder: void start()>();

        $r8 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        $r9 = virtualinvoke $r7.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r10 = virtualinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.RecordingStats getInProgressRecordingStats()>();

        $r11 = staticinvoke <androidx.camera.video.VideoRecordEvent: androidx.camera.video.VideoRecordEvent$Start start(androidx.camera.video.OutputOptions,androidx.camera.video.RecordingStats)>($r9, $r10);

        virtualinvoke $r8.<androidx.camera.video.Recorder$RecordingRecord: void updateVideoRecordEvent(androidx.camera.video.VideoRecordEvent)>($r11);

        return;
    }

    private void initEncoderAndAudioSourceCallbacks(androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        java.util.List $r2, $r5, $r9;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r3, $r10;
        com.google.common.util.concurrent.ListenableFuture $r4, $r6, $r11;
        boolean $z1;
        androidx.camera.video.Recorder$5 $r7;
        java.util.concurrent.Executor $r8;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        $r2 = r0.<androidx.camera.video.Recorder: java.util.List mEncodingFutures>;

        $r3 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.video.Recorder,androidx.camera.video.Recorder$RecordingRecord)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: java.lang.Object lambda$initEncoderAndAudioSourceCallbacks$11(androidx.camera.video.Recorder$RecordingRecord,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r4 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        $z1 = virtualinvoke r0.<androidx.camera.video.Recorder: boolean isAudioEnabled()>();

        if $z1 == 0 goto label1;

        $r9 = r0.<androidx.camera.video.Recorder: java.util.List mEncodingFutures>;

        $r10 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.video.Recorder,androidx.camera.video.Recorder$RecordingRecord)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: java.lang.Object lambda$initEncoderAndAudioSourceCallbacks$13(androidx.camera.video.Recorder$RecordingRecord,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r11 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r10);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r11);

     label1:
        $r5 = r0.<androidx.camera.video.Recorder: java.util.List mEncodingFutures>;

        $r6 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.util.Collection)>($r5);

        $r7 = new androidx.camera.video.Recorder$5;

        specialinvoke $r7.<androidx.camera.video.Recorder$5: void <init>(androidx.camera.video.Recorder)>(r0);

        $r8 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r6, $r7, $r8);

        return;
    }

    void writeVideoData(androidx.camera.video.internal.encoder.EncodedData, androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.internal.encoder.EncodedData r1;
        androidx.camera.video.Recorder$RecordingRecord r2;
        long l0, $l1, $l2, $l3, $l6, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l17;
        java.lang.Integer $r3, $r4;
        byte $b4, $b7, $b16;
        android.media.MediaMuxer $r5;
        int $i5;
        java.nio.ByteBuffer $r6;
        android.media.MediaCodec$BufferInfo $r7;
        java.util.concurrent.TimeUnit $r8;
        java.lang.Object[] $r9, $r13;
        java.lang.Long $r10, $r14, $r15;
        java.lang.String $r11, $r12, $r16;
        java.lang.AssertionError $r17;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncodedData;

        r2 := @parameter1: androidx.camera.video.Recorder$RecordingRecord;

        $r3 = r0.<androidx.camera.video.Recorder: java.lang.Integer mVideoTrackIndex>;

        if $r3 != null goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>("Video data comes before the track is added to MediaMuxer.");

        throw $r17;

     label1:
        $l1 = r0.<androidx.camera.video.Recorder: long mRecordingBytes>;

        $l2 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: long size()>();

        l0 = $l1 + $l2;

        $l3 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label2;

        $l15 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $b16 = l0 cmp $l15;

        if $b16 <= 0 goto label2;

        $r13 = newarray (java.lang.Object)[2];

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r13[0] = $r14;

        $l17 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l17);

        $r13[1] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Reach file size limit %d > %d", $r13);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r16);

        virtualinvoke r0.<androidx.camera.video.Recorder: void onInProgressRecordingInternalError(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r2, 2, null);

        return;

     label2:
        $r5 = r0.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer>;

        $r4 = r0.<androidx.camera.video.Recorder: java.lang.Integer mVideoTrackIndex>;

        $i5 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r6 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: java.nio.ByteBuffer getByteBuffer()>();

        $r7 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: android.media.MediaCodec$BufferInfo getBufferInfo()>();

        virtualinvoke $r5.<android.media.MediaMuxer: void writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)>($i5, $r6, $r7);

        r0.<androidx.camera.video.Recorder: long mRecordingBytes> = l0;

        $l6 = r0.<androidx.camera.video.Recorder: long mFirstRecordingVideoDataTimeUs>;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label3;

        $l12 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: long getPresentationTimeUs()>();

        r0.<androidx.camera.video.Recorder: long mFirstRecordingVideoDataTimeUs> = $l12;

        $r9 = newarray (java.lang.Object)[2];

        $l13 = r0.<androidx.camera.video.Recorder: long mFirstRecordingVideoDataTimeUs>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l13);

        $r9[0] = $r10;

        $l14 = r0.<androidx.camera.video.Recorder: long mFirstRecordingVideoDataTimeUs>;

        $r11 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableUs(long)>($l14);

        $r9[1] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("First video time: %d (%s)", $r9);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r12);

     label3:
        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;

        $l8 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: long getPresentationTimeUs()>();

        $l9 = r0.<androidx.camera.video.Recorder: long mFirstRecordingVideoDataTimeUs>;

        $l10 = $l8 - $l9;

        $l11 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: long toNanos(long)>($l10);

        r0.<androidx.camera.video.Recorder: long mRecordingDurationNs> = $l11;

        virtualinvoke r0.<androidx.camera.video.Recorder: void updateInProgressStatusEvent()>();

        return;
    }

    void writeAudioData(androidx.camera.video.internal.encoder.EncodedData, androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.internal.encoder.EncodedData r1;
        androidx.camera.video.Recorder$RecordingRecord r2;
        long l0, $l1, $l2, $l3, $l6, $l8, $l9, $l10, $l11, $l13;
        byte $b4, $b7, $b12;
        java.lang.Integer $r3;
        android.media.MediaMuxer $r4;
        int $i5;
        java.nio.ByteBuffer $r5;
        android.media.MediaCodec$BufferInfo $r6;
        java.lang.Object[] $r7, $r11;
        java.lang.Long $r8, $r12, $r13;
        java.lang.String $r9, $r10, $r14;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncodedData;

        r2 := @parameter1: androidx.camera.video.Recorder$RecordingRecord;

        $l1 = r0.<androidx.camera.video.Recorder: long mRecordingBytes>;

        $l2 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: long size()>();

        l0 = $l1 + $l2;

        $l3 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        $l11 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $b12 = l0 cmp $l11;

        if $b12 <= 0 goto label1;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r11[0] = $r12;

        $l13 = r0.<androidx.camera.video.Recorder: long mFileSizeLimitInBytes>;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l13);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Reach file size limit %d > %d", $r11);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r14);

        virtualinvoke r0.<androidx.camera.video.Recorder: void onInProgressRecordingInternalError(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r2, 2, null);

        return;

     label1:
        $r4 = r0.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer>;

        $r3 = r0.<androidx.camera.video.Recorder: java.lang.Integer mAudioTrackIndex>;

        $i5 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r5 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: java.nio.ByteBuffer getByteBuffer()>();

        $r6 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: android.media.MediaCodec$BufferInfo getBufferInfo()>();

        virtualinvoke $r4.<android.media.MediaMuxer: void writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)>($i5, $r5, $r6);

        r0.<androidx.camera.video.Recorder: long mRecordingBytes> = l0;

        $l6 = r0.<androidx.camera.video.Recorder: long mFirstRecordingAudioDataTimeUs>;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label2;

        $l8 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: long getPresentationTimeUs()>();

        r0.<androidx.camera.video.Recorder: long mFirstRecordingAudioDataTimeUs> = $l8;

        $r7 = newarray (java.lang.Object)[2];

        $l9 = r0.<androidx.camera.video.Recorder: long mFirstRecordingAudioDataTimeUs>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l9);

        $r7[0] = $r8;

        $l10 = r0.<androidx.camera.video.Recorder: long mFirstRecordingAudioDataTimeUs>;

        $r9 = staticinvoke <androidx.camera.video.internal.DebugUtils: java.lang.String readableUs(long)>($l10);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("First audio time: %d (%s)", $r7);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r10);

     label2:
        return;
    }

    private void pauseInternal(androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1, $r2, $r4, $r5;
        boolean $z0, $z1;
        androidx.camera.video.internal.encoder.Encoder $r3, $r9;
        androidx.camera.video.OutputOptions $r6;
        androidx.camera.video.RecordingStats $r7;
        androidx.camera.video.VideoRecordEvent$Pause $r8;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if $r2 != r1 goto label2;

        $z0 = r0.<androidx.camera.video.Recorder: boolean mInProgressRecordingStopping>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<androidx.camera.video.Recorder: boolean isAudioEnabled()>();

        if $z1 == 0 goto label1;

        $r9 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>;

        interfaceinvoke $r9.<androidx.camera.video.internal.encoder.Encoder: void pause()>();

     label1:
        $r3 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        interfaceinvoke $r3.<androidx.camera.video.internal.encoder.Encoder: void pause()>();

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        $r4 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        $r6 = virtualinvoke $r4.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r7 = virtualinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.RecordingStats getInProgressRecordingStats()>();

        $r8 = staticinvoke <androidx.camera.video.VideoRecordEvent: androidx.camera.video.VideoRecordEvent$Pause pause(androidx.camera.video.OutputOptions,androidx.camera.video.RecordingStats)>($r6, $r7);

        virtualinvoke $r5.<androidx.camera.video.Recorder$RecordingRecord: void updateVideoRecordEvent(androidx.camera.video.VideoRecordEvent)>($r8);

     label2:
        return;
    }

    private void resumeInternal(androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1, $r2, $r4, $r5;
        boolean $z0, $z1;
        androidx.camera.video.internal.encoder.Encoder $r3, $r9;
        androidx.camera.video.OutputOptions $r6;
        androidx.camera.video.RecordingStats $r7;
        androidx.camera.video.VideoRecordEvent$Resume $r8;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if $r2 != r1 goto label2;

        $z0 = r0.<androidx.camera.video.Recorder: boolean mInProgressRecordingStopping>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<androidx.camera.video.Recorder: boolean isAudioEnabled()>();

        if $z1 == 0 goto label1;

        $r9 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>;

        interfaceinvoke $r9.<androidx.camera.video.internal.encoder.Encoder: void start()>();

     label1:
        $r3 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        interfaceinvoke $r3.<androidx.camera.video.internal.encoder.Encoder: void start()>();

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        $r4 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        $r6 = virtualinvoke $r4.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r7 = virtualinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.RecordingStats getInProgressRecordingStats()>();

        $r8 = staticinvoke <androidx.camera.video.VideoRecordEvent: androidx.camera.video.VideoRecordEvent$Resume resume(androidx.camera.video.OutputOptions,androidx.camera.video.RecordingStats)>($r6, $r7);

        virtualinvoke $r5.<androidx.camera.video.Recorder$RecordingRecord: void updateVideoRecordEvent(androidx.camera.video.VideoRecordEvent)>($r8);

     label2:
        return;
    }

    void stopInternal(androidx.camera.video.Recorder$RecordingRecord, java.lang.Long, int, java.lang.Throwable)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1, $r5;
        java.lang.Long r2;
        int i0;
        java.lang.Throwable r3;
        androidx.camera.video.internal.encoder.Encoder r4, $r9, $r10, $r11, $r17, $r18;
        boolean $z0, $z1, $z2;
        androidx.camera.core.impl.Quirk $r6;
        androidx.camera.video.VideoOutput$SourceState $r7, $r8;
        long $l1, $l2;
        java.util.concurrent.ScheduledExecutorService $r12;
        java.lang.Runnable $r13;
        java.util.concurrent.TimeUnit $r14;
        java.util.concurrent.ScheduledFuture $r15;
        androidx.camera.video.internal.encoder.EncodedData $r16, $r20;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        r2 := @parameter1: java.lang.Long;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.Throwable;

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if $r5 != r1 goto label9;

        $z0 = r0.<androidx.camera.video.Recorder: boolean mInProgressRecordingStopping>;

        if $z0 != 0 goto label9;

        $r6 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/EncoderNotUsePersistentInputSurfaceQuirk;");

        if $r6 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<androidx.camera.video.Recorder: boolean mShouldWaitForNewSurface> = $z2;

        r0.<androidx.camera.video.Recorder: boolean mInProgressRecordingStopping> = 1;

        r0.<androidx.camera.video.Recorder: int mRecordingStopError> = i0;

        r0.<androidx.camera.video.Recorder: java.lang.Throwable mRecordingStopErrorCause> = r3;

        $z1 = virtualinvoke r0.<androidx.camera.video.Recorder: boolean isAudioEnabled()>();

        if $z1 == 0 goto label4;

        specialinvoke r0.<androidx.camera.video.Recorder: void clearPendingAudioRingBuffer()>();

        if r2 != null goto label3;

        $r18 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>;

        interfaceinvoke $r18.<androidx.camera.video.internal.encoder.Encoder: void stop()>();

        goto label4;

     label3:
        $r17 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>;

        $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        interfaceinvoke $r17.<androidx.camera.video.internal.encoder.Encoder: void stop(long)>($l2);

     label4:
        $r20 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData>;

        if $r20 == null goto label5;

        $r16 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData>;

        interfaceinvoke $r16.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData> = null;

     label5:
        $r8 = r0.<androidx.camera.video.Recorder: androidx.camera.video.VideoOutput$SourceState mSourceState>;

        $r7 = <androidx.camera.video.VideoOutput$SourceState: androidx.camera.video.VideoOutput$SourceState ACTIVE_NON_STREAMING>;

        if $r8 == $r7 goto label6;

        r4 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        $r12 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r13 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder,androidx.camera.video.internal.encoder.Encoder)>(r0, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$stopInternal$15(androidx.camera.video.internal.encoder.Encoder)>, methodtype: void __METHODTYPE__());

        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r15 = interfaceinvoke $r12.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r13, 1000L, $r14);

        r0.<androidx.camera.video.Recorder: java.util.concurrent.ScheduledFuture mSourceNonStreamingTimeout> = $r15;

        goto label7;

     label6:
        $r9 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        staticinvoke <androidx.camera.video.Recorder: void notifyEncoderSourceStopped(androidx.camera.video.internal.encoder.Encoder)>($r9);

     label7:
        if r2 != null goto label8;

        $r11 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        interfaceinvoke $r11.<androidx.camera.video.internal.encoder.Encoder: void stop()>();

        goto label9;

     label8:
        $r10 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        $l1 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        interfaceinvoke $r10.<androidx.camera.video.internal.encoder.Encoder: void stop(long)>($l1);

     label9:
        return;
    }

    private static void notifyEncoderSourceStopped(androidx.camera.video.internal.encoder.Encoder)
    {
        androidx.camera.video.internal.encoder.Encoder r0;
        boolean $z0;
        androidx.camera.video.internal.encoder.EncoderImpl $r1;

        r0 := @parameter0: androidx.camera.video.internal.encoder.Encoder;

        $z0 = r0 instanceof androidx.camera.video.internal.encoder.EncoderImpl;

        if $z0 == 0 goto label1;

        $r1 = (androidx.camera.video.internal.encoder.EncoderImpl) r0;

        virtualinvoke $r1.<androidx.camera.video.internal.encoder.EncoderImpl: void signalSourceStopped()>();

     label1:
        return;
    }

    private void clearPendingAudioRingBuffer()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.internal.utils.RingBuffer $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.camera.video.Recorder;

     label1:
        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.core.internal.utils.RingBuffer mPendingAudioRingBuffer>;

        $z0 = interfaceinvoke $r1.<androidx.camera.core.internal.utils.RingBuffer: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.core.internal.utils.RingBuffer mPendingAudioRingBuffer>;

        interfaceinvoke $r2.<androidx.camera.core.internal.utils.RingBuffer: java.lang.Object dequeue()>();

        goto label1;

     label2:
        return;
    }

    private void resetInternal()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.internal.encoder.Encoder $r1, $r2, $r5, $r6;
        androidx.camera.video.internal.AudioSource $r3;
        androidx.camera.video.Recorder$AudioState $r4;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>;

        if $r1 == null goto label1;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Releasing audio encoder.");

        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>;

        interfaceinvoke $r6.<androidx.camera.video.internal.encoder.Encoder: void release()>();

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mAudioOutputConfig> = null;

     label1:
        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        if $r2 == null goto label2;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Releasing video encoder.");

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        interfaceinvoke $r5.<androidx.camera.video.internal.encoder.Encoder: void release()>();

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder> = null;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mVideoOutputConfig> = null;

     label2:
        $r3 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>;

        if $r3 == null goto label3;

        specialinvoke r0.<androidx.camera.video.Recorder: void releaseCurrentAudioSource()>();

     label3:
        $r4 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState INITIALIZING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setAudioState(androidx.camera.video.Recorder$AudioState)>($r4);

        return;
    }

    private int internalAudioStateToAudioStatsState(androidx.camera.video.Recorder$AudioState)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$AudioState r1;
        int[] $r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.AssertionError $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$AudioState;

        $r2 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState>;

        $i0 = virtualinvoke r1.<androidx.camera.video.Recorder$AudioState: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label5;
            case 5: goto label1;
            default: goto label5;
        };

     label1:
        return 1;

     label2:
        $z0 = r0.<androidx.camera.video.Recorder: boolean mIsAudioSourceSilenced>;

        if $z0 == 0 goto label3;

        return 2;

     label3:
        return 0;

     label4:
        return 3;

     label5:
        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid internal audio state: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r3;
    }

    private androidx.camera.video.StreamInfo$StreamState internalStateToStreamState(androidx.camera.video.Recorder$State)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$State r1, $r4, $r5;
        androidx.camera.video.internal.compat.quirk.DeactivateEncoderSurfaceBeforeStopEncoderQuirk r2;
        androidx.camera.core.impl.Quirk $r3;
        androidx.camera.video.StreamInfo$StreamState $r6;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$State;

        $r3 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/DeactivateEncoderSurfaceBeforeStopEncoderQuirk;");

        r2 = (androidx.camera.video.internal.compat.quirk.DeactivateEncoderSurfaceBeforeStopEncoderQuirk) $r3;

        $r4 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RECORDING>;

        if r1 == $r4 goto label1;

        $r5 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State STOPPING>;

        if r1 != $r5 goto label2;

        if r2 != null goto label2;

     label1:
        $r6 = <androidx.camera.video.StreamInfo$StreamState: androidx.camera.video.StreamInfo$StreamState ACTIVE>;

        goto label3;

     label2:
        $r6 = <androidx.camera.video.StreamInfo$StreamState: androidx.camera.video.StreamInfo$StreamState INACTIVE>;

     label3:
        return $r6;
    }

    boolean isAudioEnabled()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$AudioState $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.camera.video.Recorder;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState>;

        $r1 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ACTIVE>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void finalizeInProgressRecording(int, java.lang.Throwable)
    {
        androidx.camera.video.Recorder r0;
        int i0, $i1, $i2, i3;
        java.lang.Throwable r1, $r19, r25;
        androidx.camera.video.RecordingStats r2;
        androidx.camera.video.OutputResults r3;
        androidx.camera.video.Recorder$RecordingRecord r4, $r5, $r7, $r26, $r28;
        android.media.MediaMuxer $r6, $r16, $r17;
        java.util.List $r8;
        android.net.Uri $r9, $r27, $r30;
        androidx.camera.video.Recorder$AudioState $r10, $r13, $r15;
        int[] $r11;
        java.lang.AssertionError $r12, $r18;
        androidx.camera.video.internal.AudioSource $r14;
        java.lang.StringBuilder $r20, $r21, $r23;
        java.lang.String $r22, $r24;
        androidx.camera.video.OutputOptions r29;
        androidx.camera.video.VideoRecordEvent$Finalize $r31;

        r0 := @this: androidx.camera.video.Recorder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Throwable;

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if $r5 != null goto label01;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>("Attempted to finalize in-progress recording, but no recording is in progress.");

        throw $r18;

     label01:
        i3 = i0;

        $r6 = r0.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer>;

        if $r6 == null goto label06;

     label02:
        $r16 = r0.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer>;

        virtualinvoke $r16.<android.media.MediaMuxer: void stop()>();

        $r17 = r0.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer>;

        virtualinvoke $r17.<android.media.MediaMuxer: void release()>();

     label03:
        goto label05;

     label04:
        $r19 := @caughtexception;

        r25 = $r19;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MediaMuxer failed to stop or release with error: ");

        $r22 = virtualinvoke r25.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Recorder", $r24);

        if i3 != 0 goto label05;

        i3 = 1;

     label05:
        r0.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer> = null;

        goto label07;

     label06:
        if i3 != 0 goto label07;

        i3 = 8;

     label07:
        $r26 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        $r27 = r0.<androidx.camera.video.Recorder: android.net.Uri mOutputUri>;

        virtualinvoke $r26.<androidx.camera.video.Recorder$RecordingRecord: void finalizeRecording(android.net.Uri)>($r27);

        $r28 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        r29 = virtualinvoke $r28.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        r2 = virtualinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.RecordingStats getInProgressRecordingStats()>();

        $r30 = r0.<androidx.camera.video.Recorder: android.net.Uri mOutputUri>;

        r3 = staticinvoke <androidx.camera.video.OutputResults: androidx.camera.video.OutputResults of(android.net.Uri)>($r30);

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if i3 != 0 goto label08;

        $r31 = staticinvoke <androidx.camera.video.VideoRecordEvent: androidx.camera.video.VideoRecordEvent$Finalize finalize(androidx.camera.video.OutputOptions,androidx.camera.video.RecordingStats,androidx.camera.video.OutputResults)>(r29, r2, r3);

        goto label09;

     label08:
        $r31 = staticinvoke <androidx.camera.video.VideoRecordEvent: androidx.camera.video.VideoRecordEvent$Finalize finalizeWithError(androidx.camera.video.OutputOptions,androidx.camera.video.RecordingStats,androidx.camera.video.OutputResults,int,java.lang.Throwable)>(r29, r2, r3, i3, r1);

     label09:
        virtualinvoke $r7.<androidx.camera.video.Recorder$RecordingRecord: void updateVideoRecordEvent(androidx.camera.video.VideoRecordEvent)>($r31);

        r4 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording> = null;

        r0.<androidx.camera.video.Recorder: boolean mInProgressRecordingStopping> = 0;

        r0.<androidx.camera.video.Recorder: java.lang.Integer mAudioTrackIndex> = null;

        r0.<androidx.camera.video.Recorder: java.lang.Integer mVideoTrackIndex> = null;

        $r8 = r0.<androidx.camera.video.Recorder: java.util.List mEncodingFutures>;

        interfaceinvoke $r8.<java.util.List: void clear()>();

        $r9 = <android.net.Uri: android.net.Uri EMPTY>;

        r0.<androidx.camera.video.Recorder: android.net.Uri mOutputUri> = $r9;

        r0.<androidx.camera.video.Recorder: long mRecordingBytes> = 0L;

        r0.<androidx.camera.video.Recorder: long mRecordingDurationNs> = 0L;

        r0.<androidx.camera.video.Recorder: long mFirstRecordingVideoDataTimeUs> = 0L;

        r0.<androidx.camera.video.Recorder: long mFirstRecordingAudioDataTimeUs> = 0L;

        r0.<androidx.camera.video.Recorder: int mRecordingStopError> = 1;

        r0.<androidx.camera.video.Recorder: java.lang.Throwable mRecordingStopErrorCause> = null;

        r0.<androidx.camera.video.Recorder: java.lang.Throwable mAudioErrorCause> = null;

        specialinvoke r0.<androidx.camera.video.Recorder: void clearPendingAudioRingBuffer()>();

        $r11 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState>;

        $r10 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState>;

        $i1 = virtualinvoke $r10.<androidx.camera.video.Recorder$AudioState: int ordinal()>();

        $i2 = $r11[$i1];

        tableswitch($i2)
        {
            case 1: goto label13;
            case 2: goto label12;
            case 3: goto label12;
            case 4: goto label10;
            case 5: goto label11;
            default: goto label14;
        };

     label10:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("Incorrectly finalize recording when audio state is IDLING");

        throw $r12;

     label11:
        goto label14;

     label12:
        $r13 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState IDLING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setAudioState(androidx.camera.video.Recorder$AudioState)>($r13);

        $r14 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>;

        virtualinvoke $r14.<androidx.camera.video.internal.AudioSource: void stop()>();

        goto label14;

     label13:
        $r15 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState INITIALIZING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setAudioState(androidx.camera.video.Recorder$AudioState)>($r15);

     label14:
        specialinvoke r0.<androidx.camera.video.Recorder: void onRecordingFinalized(androidx.camera.video.Recorder$RecordingRecord)>(r4);

        return;

        catch java.lang.IllegalStateException from label02 to label03 with label04;
    }

    private void onRecordingFinalized(androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1, $r5, r25, r26;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r24, r32;
        androidx.camera.video.Recorder$State $r6, $r12, $r17, $r18, $r19, $r20, $r21, $r22;
        int[] $r7;
        int $i0, $i1;
        boolean $z0, $z1, $z2, z3, z4;
        java.lang.StringBuilder $r11, $r13, r29;
        java.lang.String $r14;
        androidx.camera.video.VideoOutput$SourceState $r15, $r16;
        byte b2;
        java.lang.Exception r27;
        java.lang.AssertionError r28, r30, r31;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        z3 = 0;

        z4 = 0;

        r25 = null;

        r26 = null;

        b2 = 0;

        r27 = null;

        $r4 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        if $r5 == r1 goto label02;

        r28 = new java.lang.AssertionError;

        specialinvoke r28.<java.lang.AssertionError: void <init>(java.lang.Object)>("Active recording did not match finalized recording on finalize.");

        throw r28;

     label02:
        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord> = null;

        $r7 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i0 = virtualinvoke $r6.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label03;
            case 3: goto label07;
            case 4: goto label06;
            case 5: goto label11;
            case 6: goto label11;
            case 7: goto label04;
            case 8: goto label04;
            case 9: goto label10;
            default: goto label12;
        };

     label03:
        $r20 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r20);

        z3 = 1;

        goto label12;

     label04:
        $z2 = r0.<androidx.camera.video.Recorder: boolean mShouldWaitForNewSurface>;

        if $z2 == 0 goto label05;

        $r22 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r22);

        goto label12;

     label05:
        $r21 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State IDLING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r21);

        goto label12;

     label06:
        z4 = 1;

     label07:
        $r16 = r0.<androidx.camera.video.Recorder: androidx.camera.video.VideoOutput$SourceState mSourceState>;

        $r15 = <androidx.camera.video.VideoOutput$SourceState: androidx.camera.video.VideoOutput$SourceState INACTIVE>;

        if $r16 != $r15 goto label08;

        r26 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord> = null;

        $r19 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r19);

        b2 = 4;

        r27 = <androidx.camera.video.Recorder: java.lang.Exception PENDING_RECORDING_ERROR_CAUSE_SOURCE_INACTIVE>;

        goto label12;

     label08:
        $z1 = r0.<androidx.camera.video.Recorder: boolean mShouldWaitForNewSurface>;

        if $z1 == 0 goto label09;

        $r18 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        specialinvoke r0.<androidx.camera.video.Recorder: void updateNonPendingState(androidx.camera.video.Recorder$State)>($r18);

        goto label12;

     label09:
        $r17 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        r25 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord makePendingRecordingActiveLocked(androidx.camera.video.Recorder$State)>($r17);

        goto label12;

     label10:
        goto label12;

     label11:
        r30 = new java.lang.AssertionError;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected state on finalize of recording: ");

        $r12 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw r30;

     label12:
        exitmonitor r2;

     label13:
        goto label16;

     label14:
        $r24 := @caughtexception;

        r3 = $r24;

        exitmonitor r2;

     label15:
        throw r3;

     label16:
        if z3 == 0 goto label17;

        specialinvoke r0.<androidx.camera.video.Recorder: void resetInternal()>();

        goto label20;

     label17:
        if r25 == null goto label19;

        $z0 = r0.<androidx.camera.video.Recorder: boolean mShouldWaitForNewSurface>;

        if $z0 == 0 goto label18;

        r31 = new java.lang.AssertionError;

        specialinvoke r31.<java.lang.AssertionError: void <init>(java.lang.Object)>("Attempt to start a pending recording while the Recorder is waiting for a new surface request.");

        throw r31;

     label18:
        specialinvoke r0.<androidx.camera.video.Recorder: void startRecording(androidx.camera.video.Recorder$RecordingRecord,boolean)>(r25, z4);

        goto label20;

     label19:
        if r26 == null goto label20;

        r32 = (java.lang.Throwable) r27;

        specialinvoke r0.<androidx.camera.video.Recorder: void finalizePendingRecording(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r26, b2, r32);

     label20:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    void onInProgressRecordingInternalError(androidx.camera.video.Recorder$RecordingRecord, int, java.lang.Throwable)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1, $r5, $r10;
        int i0, $i1, $i2;
        java.lang.Throwable r2, r4, $r19;
        java.lang.Object r3, $r6;
        androidx.camera.video.Recorder$State $r7, $r9, $r15;
        int[] $r8;
        java.lang.AssertionError $r11, $r12, $r18;
        java.lang.StringBuilder $r13, $r14, $r16;
        java.lang.String $r17;
        boolean z0;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Throwable;

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if r1 == $r5 goto label01;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>("Internal error occurred on recording that is not the current in-progress recording.");

        throw $r18;

     label01:
        z0 = 0;

        $r6 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r3 = $r6;

        entermonitor $r6;

     label02:
        $r8 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i1 = virtualinvoke $r7.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i2 = $r8[$i1];

        tableswitch($i2)
        {
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label05;
            case 7: goto label03;
            case 8: goto label03;
            case 9: goto label05;
            default: goto label06;
        };

     label03:
        $r9 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State STOPPING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r9);

        z0 = 1;

     label04:
        $r10 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        if r1 == $r10 goto label06;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>("Internal error occurred for recording but it is not the active recording.");

        throw $r11;

     label05:
        $r12 = new java.lang.AssertionError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("In-progress recording error occurred while in unexpected state: ");

        $r15 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r17);

        throw $r12;

     label06:
        exitmonitor r3;

     label07:
        goto label10;

     label08:
        $r19 := @caughtexception;

        r4 = $r19;

        exitmonitor r3;

     label09:
        throw r4;

     label10:
        if z0 == 0 goto label11;

        virtualinvoke r0.<androidx.camera.video.Recorder: void stopInternal(androidx.camera.video.Recorder$RecordingRecord,java.lang.Long,int,java.lang.Throwable)>(r1, null, i0, r2);

     label11:
        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void tryServicePendingRecording()
    {
        androidx.camera.video.Recorder r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r10, r14;
        androidx.camera.video.Recorder$State $r4, $r9;
        int[] $r5;
        int $i0, $i1;
        androidx.camera.video.Recorder$RecordingRecord $r6, r11, r12;
        androidx.camera.video.VideoOutput$SourceState $r7, $r8;
        boolean z0;
        byte b2;
        java.lang.Exception r13;

        r0 := @this: androidx.camera.video.Recorder;

        z0 = 0;

        r11 = null;

        r12 = null;

        b2 = 0;

        r13 = null;

        $r3 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r5 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r4 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i0 = virtualinvoke $r4.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label06;
            case 2: goto label06;
            case 3: goto label03;
            case 4: goto label02;
            case 5: goto label06;
            case 6: goto label06;
            case 7: goto label06;
            case 8: goto label06;
            case 9: goto label06;
            default: goto label06;
        };

     label02:
        z0 = 1;

     label03:
        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        if $r6 == null goto label04;

        goto label06;

     label04:
        $r8 = r0.<androidx.camera.video.Recorder: androidx.camera.video.VideoOutput$SourceState mSourceState>;

        $r7 = <androidx.camera.video.VideoOutput$SourceState: androidx.camera.video.VideoOutput$SourceState INACTIVE>;

        if $r8 != $r7 goto label05;

        r12 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord> = null;

        specialinvoke r0.<androidx.camera.video.Recorder: void restoreNonPendingState()>();

        b2 = 4;

        r13 = <androidx.camera.video.Recorder: java.lang.Exception PENDING_RECORDING_ERROR_CAUSE_SOURCE_INACTIVE>;

        goto label06;

     label05:
        $r9 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        r11 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord makePendingRecordingActiveLocked(androidx.camera.video.Recorder$State)>($r9);

        goto label06;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label09:
        throw r2;

     label10:
        if r11 == null goto label11;

        specialinvoke r0.<androidx.camera.video.Recorder: void startRecording(androidx.camera.video.Recorder$RecordingRecord,boolean)>(r11, z0);

        goto label12;

     label11:
        if r12 == null goto label12;

        r14 = (java.lang.Throwable) r13;

        specialinvoke r0.<androidx.camera.video.Recorder: void finalizePendingRecording(androidx.camera.video.Recorder$RecordingRecord,int,java.lang.Throwable)>(r12, b2, r14);

     label12:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private androidx.camera.video.Recorder$RecordingRecord makePendingRecordingActiveLocked(androidx.camera.video.Recorder$State)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$State r1, $r3, $r4, $r8, $r9;
        androidx.camera.video.Recorder$RecordingRecord r2, $r5, $r6, $r7;
        java.lang.AssertionError $r10, $r11, $r12;
        boolean z0;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$State;

        z0 = 0;

        $r3 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_PAUSED>;

        if r1 != $r3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        $r4 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING>;

        if r1 == $r4 goto label2;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("makePendingRecordingActiveLocked() can only be called from a pending state.");

        throw $r12;

     label2:
        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord>;

        if $r5 == null goto label3;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cannot make pending recording active because another recording is already active.");

        throw $r11;

     label3:
        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        if $r6 != null goto label4;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>("Pending recording should exist when in a PENDING state.");

        throw $r10;

     label4:
        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mActiveRecordingRecord> = $r7;

        r2 = $r7;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mPendingRecordingRecord> = null;

        if z0 == 0 goto label5;

        $r9 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PAUSED>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r9);

        goto label6;

     label5:
        $r8 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RECORDING>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r8);

     label6:
        return r2;
    }

    private void startRecording(androidx.camera.video.Recorder$RecordingRecord, boolean)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        boolean z0;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        z0 := @parameter1: boolean;

        specialinvoke r0.<androidx.camera.video.Recorder: void startInternal(androidx.camera.video.Recorder$RecordingRecord)>(r1);

        if z0 == 0 goto label1;

        specialinvoke r0.<androidx.camera.video.Recorder: void pauseInternal(androidx.camera.video.Recorder$RecordingRecord)>(r1);

     label1:
        return;
    }

    void updateInProgressStatusEvent()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord $r1, $r2, $r3;
        androidx.camera.video.OutputOptions $r4;
        androidx.camera.video.RecordingStats $r5;
        androidx.camera.video.VideoRecordEvent$Status $r6;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$RecordingRecord mInProgressRecording>;

        $r4 = virtualinvoke $r2.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r5 = virtualinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.RecordingStats getInProgressRecordingStats()>();

        $r6 = staticinvoke <androidx.camera.video.VideoRecordEvent: androidx.camera.video.VideoRecordEvent$Status status(androidx.camera.video.OutputOptions,androidx.camera.video.RecordingStats)>($r4, $r5);

        virtualinvoke $r3.<androidx.camera.video.Recorder$RecordingRecord: void updateVideoRecordEvent(androidx.camera.video.VideoRecordEvent)>($r6);

     label1:
        return;
    }

    androidx.camera.video.RecordingStats getInProgressRecordingStats()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$AudioState $r1;
        long $l0, $l1;
        int $i2;
        java.lang.Throwable $r2;
        androidx.camera.video.AudioStats $r3;
        androidx.camera.video.RecordingStats $r4;

        r0 := @this: androidx.camera.video.Recorder;

        $l0 = r0.<androidx.camera.video.Recorder: long mRecordingDurationNs>;

        $l1 = r0.<androidx.camera.video.Recorder: long mRecordingBytes>;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState>;

        $i2 = specialinvoke r0.<androidx.camera.video.Recorder: int internalAudioStateToAudioStatsState(androidx.camera.video.Recorder$AudioState)>($r1);

        $r2 = r0.<androidx.camera.video.Recorder: java.lang.Throwable mAudioErrorCause>;

        $r3 = staticinvoke <androidx.camera.video.AudioStats: androidx.camera.video.AudioStats of(int,java.lang.Throwable)>($i2, $r2);

        $r4 = staticinvoke <androidx.camera.video.RecordingStats: androidx.camera.video.RecordingStats of(long,long,androidx.camera.video.AudioStats)>($l0, $l1, $r3);

        return $r4;
    }

    java.lang.Object getObservableData(androidx.camera.core.impl.StateObservable)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.impl.StateObservable r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        java.lang.Throwable r3, $r5;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.impl.StateObservable;

        r2 = virtualinvoke r1.<androidx.camera.core.impl.StateObservable: com.google.common.util.concurrent.ListenableFuture fetchData()>();

     label1:
        $r4 = interfaceinvoke r2.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r3);

        throw $r6;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    boolean isAudioSupported()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.impl.MutableStateObservable $r1;
        java.lang.Object $r2;
        androidx.camera.video.MediaSpec $r3;
        androidx.camera.video.AudioSpec $r4;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mMediaSpec>;

        $r2 = virtualinvoke r0.<androidx.camera.video.Recorder: java.lang.Object getObservableData(androidx.camera.core.impl.StateObservable)>($r1);

        $r3 = (androidx.camera.video.MediaSpec) $r2;

        $r4 = virtualinvoke $r3.<androidx.camera.video.MediaSpec: androidx.camera.video.AudioSpec getAudioSpec()>();

        $i0 = virtualinvoke $r4.<androidx.camera.video.AudioSpec: int getChannelCount()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void setState(androidx.camera.video.Recorder$State)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$State r1, $r2, $r5, $r11, $r14, $r15, $r17, $r19, $r20, $r24;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8, $r22, $r23, $r25, $r28, $r29, $r30, $r31, $r32;
        java.lang.String $r9, $r26, $r33;
        java.util.Set $r10, $r16, $r18;
        boolean $z0, $z1, $z2;
        int $i0;
        androidx.camera.core.impl.MutableStateObservable $r12;
        androidx.camera.video.StreamInfo $r13;
        java.lang.AssertionError $r21, $r27;
        androidx.camera.video.StreamInfo$StreamState r34;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$State;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        if $r2 != r1 goto label1;

        $r27 = new java.lang.AssertionError;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to transition to state ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but Recorder is already in state ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>($r33);

        throw $r27;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transitioning Recorder internal state: ");

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r9);

        r34 = null;

        $r10 = <androidx.camera.video.Recorder: java.util.Set PENDING_STATES>;

        $z0 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r16 = <androidx.camera.video.Recorder: java.util.Set PENDING_STATES>;

        $r15 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $z1 = interfaceinvoke $r16.<java.util.Set: boolean contains(java.lang.Object)>($r15);

        if $z1 != 0 goto label4;

        $r18 = <androidx.camera.video.Recorder: java.util.Set VALID_NON_PENDING_STATES_WHILE_PENDING>;

        $r17 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $z2 = interfaceinvoke $r18.<java.util.Set: boolean contains(java.lang.Object)>($r17);

        if $z2 != 0 goto label2;

        $r21 = new java.lang.AssertionError;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid state transition. Should not be transitioning to a PENDING state from state ");

        $r24 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>($r26);

        throw $r21;

     label2:
        $r19 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mNonPendingState> = $r19;

        $r20 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mNonPendingState>;

        r34 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.StreamInfo$StreamState internalStateToStreamState(androidx.camera.video.Recorder$State)>($r20);

        goto label4;

     label3:
        $r11 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mNonPendingState>;

        if $r11 == null goto label4;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mNonPendingState> = null;

     label4:
        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState> = r1;

        if r34 != null goto label5;

        $r14 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        r34 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.StreamInfo$StreamState internalStateToStreamState(androidx.camera.video.Recorder$State)>($r14);

     label5:
        $r12 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mStreamInfo>;

        $i0 = r0.<androidx.camera.video.Recorder: int mStreamId>;

        $r13 = staticinvoke <androidx.camera.video.StreamInfo: androidx.camera.video.StreamInfo of(int,androidx.camera.video.StreamInfo$StreamState)>($i0, r34);

        virtualinvoke $r12.<androidx.camera.core.impl.MutableStateObservable: void setState(java.lang.Object)>($r13);

        return;
    }

    private void setLatestSurface(android.view.Surface)
    {
        androidx.camera.video.Recorder r0;
        android.view.Surface r1, $r4;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r7;
        int $i0;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: android.view.Surface;

        $r4 = r0.<androidx.camera.video.Recorder: android.view.Surface mLatestSurface>;

        if $r4 != r1 goto label1;

        return;

     label1:
        r0.<androidx.camera.video.Recorder: android.view.Surface mLatestSurface> = r1;

        $r5 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        if r1 == null goto label3;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        goto label4;

     label3:
        $i0 = 0;

     label4:
        specialinvoke r0.<androidx.camera.video.Recorder: void setStreamId(int)>($i0);

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void setStreamId(int)
    {
        androidx.camera.video.Recorder r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        androidx.camera.video.Recorder$State $r7;
        androidx.camera.core.impl.MutableStateObservable $r8;
        androidx.camera.video.StreamInfo$StreamState $r9;
        androidx.camera.video.StreamInfo $r10;

        r0 := @this: androidx.camera.video.Recorder;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.camera.video.Recorder: int mStreamId>;

        if $i1 != i0 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transitioning streamId: ");

        $i2 = r0.<androidx.camera.video.Recorder: int mStreamId>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r6);

        r0.<androidx.camera.video.Recorder: int mStreamId> = i0;

        $r8 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mStreamInfo>;

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r9 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.StreamInfo$StreamState internalStateToStreamState(androidx.camera.video.Recorder$State)>($r7);

        $r10 = staticinvoke <androidx.camera.video.StreamInfo: androidx.camera.video.StreamInfo of(int,androidx.camera.video.StreamInfo$StreamState)>(i0, $r9);

        virtualinvoke $r8.<androidx.camera.core.impl.MutableStateObservable: void setState(java.lang.Object)>($r10);

        return;
    }

    private void updateNonPendingState(androidx.camera.video.Recorder$State)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$State r1, $r2, $r5, $r17;
        java.util.Set $r3, $r4;
        boolean $z0, $z1;
        androidx.camera.core.impl.MutableStateObservable $r6;
        int $i0;
        androidx.camera.video.StreamInfo$StreamState $r7;
        androidx.camera.video.StreamInfo $r8;
        java.lang.AssertionError $r9, $r14;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r16, $r18;
        java.lang.String $r13, $r19;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$State;

        $r3 = <androidx.camera.video.Recorder: java.util.Set PENDING_STATES>;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r14 = new java.lang.AssertionError;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only updated non-pending state from a pending state, but state is ");

        $r17 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r14;

     label1:
        $r4 = <androidx.camera.video.Recorder: java.util.Set VALID_NON_PENDING_STATES_WHILE_PENDING>;

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        $r9 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid state transition. State is not a valid non-pending state while in a pending state: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r9;

     label2:
        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mNonPendingState>;

        if $r5 == r1 goto label3;

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mNonPendingState> = r1;

        $r6 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.MutableStateObservable mStreamInfo>;

        $i0 = r0.<androidx.camera.video.Recorder: int mStreamId>;

        $r7 = specialinvoke r0.<androidx.camera.video.Recorder: androidx.camera.video.StreamInfo$StreamState internalStateToStreamState(androidx.camera.video.Recorder$State)>(r1);

        $r8 = staticinvoke <androidx.camera.video.StreamInfo: androidx.camera.video.StreamInfo of(int,androidx.camera.video.StreamInfo$StreamState)>($i0, $r7);

        virtualinvoke $r6.<androidx.camera.core.impl.MutableStateObservable: void setState(java.lang.Object)>($r8);

     label3:
        return;
    }

    private void restoreNonPendingState()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$State $r1, $r3, $r7;
        java.util.Set $r2;
        boolean $z0;
        java.lang.AssertionError $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9;

        r0 := @this: androidx.camera.video.Recorder;

        $r2 = <androidx.camera.video.Recorder: java.util.Set PENDING_STATES>;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot restore non-pending state when in state ");

        $r7 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;

     label1:
        $r3 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mNonPendingState>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setState(androidx.camera.video.Recorder$State)>($r3);

        return;
    }

    void setAudioState(androidx.camera.video.Recorder$AudioState)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$AudioState r1, $r4;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$AudioState;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transitioning audio state: ");

        $r4 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r8);

        r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState> = r1;

        return;
    }

    private static int supportedMuxerFormatOrDefaultFrom(androidx.camera.core.impl.CamcorderProfileProxy, int)
    {
        androidx.camera.core.impl.CamcorderProfileProxy r0;
        int i0, $i1, $i2;

        r0 := @parameter0: androidx.camera.core.impl.CamcorderProfileProxy;

        i0 := @parameter1: int;

        if r0 == null goto label5;

        $i1 = virtualinvoke r0.<androidx.camera.core.impl.CamcorderProfileProxy: int getFileFormat()>();

        lookupswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label1;
            case 9: goto label2;
            default: goto label5;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 >= 26 goto label4;

        return 0;

     label4:
        return 2;

     label5:
        return i0;
    }

    private void lambda$stopInternal$15(androidx.camera.video.internal.encoder.Encoder)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.internal.encoder.Encoder r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.internal.encoder.Encoder;

        $r2 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.internal.encoder.Encoder)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder: void lambda$stopInternal$14(androidx.camera.video.internal.encoder.Encoder)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    private static void lambda$stopInternal$14(androidx.camera.video.internal.encoder.Encoder)
    {
        androidx.camera.video.internal.encoder.Encoder r0;
        androidx.camera.core.impl.Quirk $r1;

        r0 := @parameter0: androidx.camera.video.internal.encoder.Encoder;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "The source didn\'t become non-streaming before timeout. Waited 1000ms");

        $r1 = staticinvoke <androidx.camera.video.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirk get(java.lang.Class)>(class "Landroidx/camera/video/internal/compat/quirk/DeactivateEncoderSurfaceBeforeStopEncoderQuirk;");

        if $r1 == null goto label1;

        staticinvoke <androidx.camera.video.Recorder: void notifyEncoderSourceStopped(androidx.camera.video.internal.encoder.Encoder)>(r0);

     label1:
        return;
    }

    private java.lang.Object lambda$initEncoderAndAudioSourceCallbacks$13(androidx.camera.video.Recorder$RecordingRecord, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        androidx.core.util.Consumer r3;
        androidx.camera.video.Recorder$3 $r4;
        androidx.camera.video.internal.AudioSource $r5;
        java.util.concurrent.Executor $r6, $r9;
        androidx.camera.video.Recorder$4 $r7;
        androidx.camera.video.internal.encoder.Encoder $r8;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r3 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.video.Recorder,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder: void lambda$initEncoderAndAudioSourceCallbacks$12(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,java.lang.Throwable)>, methodtype: void __METHODTYPE__(java.lang.Throwable));

        $r5 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.AudioSource mAudioSource>;

        $r6 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        $r4 = new androidx.camera.video.Recorder$3;

        specialinvoke $r4.<androidx.camera.video.Recorder$3: void <init>(androidx.camera.video.Recorder,androidx.core.util.Consumer)>(r0, r3);

        virtualinvoke $r5.<androidx.camera.video.internal.AudioSource: void setAudioSourceCallback(java.util.concurrent.Executor,androidx.camera.video.internal.AudioSource$AudioSourceCallback)>($r6, $r4);

        $r8 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mAudioEncoder>;

        $r7 = new androidx.camera.video.Recorder$4;

        specialinvoke $r7.<androidx.camera.video.Recorder$4: void <init>(androidx.camera.video.Recorder,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,androidx.core.util.Consumer,androidx.camera.video.Recorder$RecordingRecord)>(r0, r2, r3, r1);

        $r9 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        interfaceinvoke $r8.<androidx.camera.video.internal.encoder.Encoder: void setEncoderCallback(androidx.camera.video.internal.encoder.EncoderCallback,java.util.concurrent.Executor)>($r7, $r9);

        return "audioEncodingFuture";
    }

    private void lambda$initEncoderAndAudioSourceCallbacks$12(androidx.concurrent.futures.CallbackToFutureAdapter$Completer, java.lang.Throwable)
    {
        androidx.camera.video.Recorder r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.lang.Throwable r2, $r3;
        androidx.camera.video.Recorder$AudioState $r4;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<androidx.camera.video.Recorder: java.lang.Throwable mAudioErrorCause>;

        if $r3 != null goto label1;

        $r4 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ERROR>;

        virtualinvoke r0.<androidx.camera.video.Recorder: void setAudioState(androidx.camera.video.Recorder$AudioState)>($r4);

        r0.<androidx.camera.video.Recorder: java.lang.Throwable mAudioErrorCause> = r2;

        virtualinvoke r0.<androidx.camera.video.Recorder: void updateInProgressStatusEvent()>();

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

     label1:
        return;
    }

    private java.lang.Object lambda$initEncoderAndAudioSourceCallbacks$11(androidx.camera.video.Recorder$RecordingRecord, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        androidx.camera.video.Recorder$2 $r3;
        androidx.camera.video.internal.encoder.Encoder $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r4 = r0.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        $r3 = new androidx.camera.video.Recorder$2;

        specialinvoke $r3.<androidx.camera.video.Recorder$2: void <init>(androidx.camera.video.Recorder,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,androidx.camera.video.Recorder$RecordingRecord)>(r0, r2, r1);

        $r5 = r0.<androidx.camera.video.Recorder: java.util.concurrent.Executor mSequentialExecutor>;

        interfaceinvoke $r4.<androidx.camera.video.internal.encoder.Encoder: void setEncoderCallback(androidx.camera.video.internal.encoder.EncoderCallback,java.util.concurrent.Executor)>($r3, $r5);

        return "videoEncodingFuture";
    }

    private void lambda$setupAndStartMediaMuxer$10(android.net.Uri)
    {
        androidx.camera.video.Recorder r0;
        android.net.Uri r1;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: android.net.Uri;

        r0.<androidx.camera.video.Recorder: android.net.Uri mOutputUri> = r1;

        return;
    }

    private void lambda$setupVideo$9(androidx.camera.core.SurfaceRequest, android.view.Surface)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest r1;
        android.view.Surface r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r20;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r15, $r16, $r18;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r11, $r19;
        androidx.camera.video.Recorder$State $r12, $r17;
        int[] $r13;
        java.lang.AssertionError $r14;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        r2 := @parameter1: android.view.Surface;

        $r5 = r0.<androidx.camera.video.Recorder: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoder surface updated: ");

        $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Current surface: ");

        $i1 = r0.<androidx.camera.video.Recorder: int mStreamId>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r11);

        $r13 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r12 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $i2 = virtualinvoke $r12.<androidx.camera.video.Recorder$State: int ordinal()>();

        $i3 = $r13[$i2];

        tableswitch($i3)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label5;
            default: goto label5;
        };

     label2:
        specialinvoke r0.<androidx.camera.video.Recorder: void onEncoderSurfaceUpdated(android.view.Surface,androidx.camera.core.SurfaceRequest)>(r2, r1);

        goto label5;

     label3:
        $r14 = new java.lang.AssertionError;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected state on update of encoder surface ");

        $r17 = r0.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$State mState>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r14;

     label4:
        goto label5;

     label5:
        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r20 := @caughtexception;

        r4 = $r20;

        exitmonitor r3;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private static void lambda$composeRecorderMediaSpec$8(androidx.camera.video.VideoSpec$Builder)
    {
        androidx.camera.video.VideoSpec$Builder r0;
        androidx.camera.video.VideoSpec $r1;
        int $i0;

        r0 := @parameter0: androidx.camera.video.VideoSpec$Builder;

        $r1 = <androidx.camera.video.Recorder: androidx.camera.video.VideoSpec VIDEO_SPEC_DEFAULT>;

        $i0 = virtualinvoke $r1.<androidx.camera.video.VideoSpec: int getAspectRatio()>();

        virtualinvoke r0.<androidx.camera.video.VideoSpec$Builder: androidx.camera.video.VideoSpec$Builder setAspectRatio(int)>($i0);

        return;
    }

    private void lambda$initializeInternal$7(androidx.camera.core.SurfaceRequest$TransformationInfo)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest$TransformationInfo r1;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest$TransformationInfo;

        r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest$TransformationInfo mSurfaceTransformationInfo> = r1;

        return;
    }

    private void lambda$stop$6(androidx.camera.video.Recorder$RecordingRecord, long)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        long l0;
        java.lang.Long $r2;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r0.<androidx.camera.video.Recorder: void stopInternal(androidx.camera.video.Recorder$RecordingRecord,java.lang.Long,int,java.lang.Throwable)>(r1, $r2, 0, null);

        return;
    }

    private void lambda$resume$5(androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        specialinvoke r0.<androidx.camera.video.Recorder: void resumeInternal(androidx.camera.video.Recorder$RecordingRecord)>(r1);

        return;
    }

    private void lambda$pause$4(androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.Recorder$RecordingRecord r1;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        specialinvoke r0.<androidx.camera.video.Recorder: void pauseInternal(androidx.camera.video.Recorder$RecordingRecord)>(r1);

        return;
    }

    private void lambda$start$3()
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest $r1, $r3;
        androidx.camera.core.impl.Timebase $r2;
        java.lang.AssertionError $r4;

        r0 := @this: androidx.camera.video.Recorder;

        $r1 = r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest mSurfaceRequest>;

        if $r1 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("surface request is required to retry initialization.");

        throw $r4;

     label1:
        $r3 = r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest mSurfaceRequest>;

        $r2 = r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.Timebase mVideoSourceTimebase>;

        specialinvoke r0.<androidx.camera.video.Recorder: void initializeInternal(androidx.camera.core.SurfaceRequest,androidx.camera.core.impl.Timebase)>($r3, $r2);

        return;
    }

    private void lambda$onSourceStateChanged$2(androidx.camera.video.VideoOutput$SourceState)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.video.VideoOutput$SourceState r1;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.video.VideoOutput$SourceState;

        virtualinvoke r0.<androidx.camera.video.Recorder: void onSourceStateChangedInternal(androidx.camera.video.VideoOutput$SourceState)>(r1);

        return;
    }

    private void lambda$onSurfaceRequested$1(androidx.camera.core.SurfaceRequest, androidx.camera.core.impl.Timebase)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest r1, $r3, $r4;
        androidx.camera.core.impl.Timebase r2;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        r2 := @parameter1: androidx.camera.core.impl.Timebase;

        $r3 = r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest mSurfaceRequest>;

        if $r3 == null goto label1;

        $r4 = r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest mSurfaceRequest>;

        virtualinvoke $r4.<androidx.camera.core.SurfaceRequest: boolean willNotProvideSurface()>();

     label1:
        r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest mSurfaceRequest> = r1;

        r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.Timebase mVideoSourceTimebase> = r2;

        specialinvoke r0.<androidx.camera.video.Recorder: void initializeInternal(androidx.camera.core.SurfaceRequest,androidx.camera.core.impl.Timebase)>(r1, r2);

        return;
    }

    private void lambda$onSurfaceRequested$0(androidx.camera.core.SurfaceRequest, androidx.camera.core.impl.Timebase)
    {
        androidx.camera.video.Recorder r0;
        androidx.camera.core.SurfaceRequest r1;
        androidx.camera.core.impl.Timebase r2;

        r0 := @this: androidx.camera.video.Recorder;

        r1 := @parameter0: androidx.camera.core.SurfaceRequest;

        r2 := @parameter1: androidx.camera.core.impl.Timebase;

        r0.<androidx.camera.video.Recorder: androidx.camera.core.SurfaceRequest mSurfaceRequest> = r1;

        r0.<androidx.camera.video.Recorder: androidx.camera.core.impl.Timebase mVideoSourceTimebase> = r2;

        specialinvoke r0.<androidx.camera.video.Recorder: void initializeInternal(androidx.camera.core.SurfaceRequest,androidx.camera.core.impl.Timebase)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.video.Recorder$State $r0, $r1, $r4, $r5, $r6, $r7, $r8;
        java.util.EnumSet $r2, $r9;
        java.util.Set $r3, $r10;
        androidx.camera.video.Quality[] $r11;
        androidx.camera.video.Quality $r12, $r13, $r14, $r16;
        java.util.List $r15;
        androidx.camera.video.FallbackStrategy $r17;
        androidx.camera.video.QualitySelector $r18, $r20;
        androidx.camera.video.VideoSpec$Builder $r19, $r21, $r22;
        androidx.camera.video.VideoSpec $r23, $r26;
        androidx.camera.video.MediaSpec$Builder $r24, $r25, $r27;
        androidx.camera.video.MediaSpec $r28;
        java.lang.RuntimeException $r29;
        androidx.camera.video.internal.encoder.EncoderFactory $r30;
        java.util.concurrent.Executor $r31, $r32;

        $r1 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING>;

        $r0 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_PAUSED>;

        $r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r1, $r0);

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        <androidx.camera.video.Recorder: java.util.Set PENDING_STATES> = $r3;

        $r8 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        $r7 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State IDLING>;

        $r6 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RESETTING>;

        $r5 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State STOPPING>;

        $r4 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State ERROR>;

        $r9 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)>($r8, $r7, $r6, $r5, $r4);

        $r10 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r9);

        <androidx.camera.video.Recorder: java.util.Set VALID_NON_PENDING_STATES_WHILE_PENDING> = $r10;

        $r11 = newarray (androidx.camera.video.Quality)[3];

        $r12 = <androidx.camera.video.Quality: androidx.camera.video.Quality FHD>;

        $r11[0] = $r12;

        $r13 = <androidx.camera.video.Quality: androidx.camera.video.Quality HD>;

        $r11[1] = $r13;

        $r14 = <androidx.camera.video.Quality: androidx.camera.video.Quality SD>;

        $r11[2] = $r14;

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        $r16 = <androidx.camera.video.Quality: androidx.camera.video.Quality FHD>;

        $r17 = staticinvoke <androidx.camera.video.FallbackStrategy: androidx.camera.video.FallbackStrategy higherQualityOrLowerThan(androidx.camera.video.Quality)>($r16);

        $r18 = staticinvoke <androidx.camera.video.QualitySelector: androidx.camera.video.QualitySelector fromOrderedList(java.util.List,androidx.camera.video.FallbackStrategy)>($r15, $r17);

        <androidx.camera.video.Recorder: androidx.camera.video.QualitySelector DEFAULT_QUALITY_SELECTOR> = $r18;

        $r19 = staticinvoke <androidx.camera.video.VideoSpec: androidx.camera.video.VideoSpec$Builder builder()>();

        $r20 = <androidx.camera.video.Recorder: androidx.camera.video.QualitySelector DEFAULT_QUALITY_SELECTOR>;

        $r21 = virtualinvoke $r19.<androidx.camera.video.VideoSpec$Builder: androidx.camera.video.VideoSpec$Builder setQualitySelector(androidx.camera.video.QualitySelector)>($r20);

        $r22 = virtualinvoke $r21.<androidx.camera.video.VideoSpec$Builder: androidx.camera.video.VideoSpec$Builder setAspectRatio(int)>(1);

        $r23 = virtualinvoke $r22.<androidx.camera.video.VideoSpec$Builder: androidx.camera.video.VideoSpec build()>();

        <androidx.camera.video.Recorder: androidx.camera.video.VideoSpec VIDEO_SPEC_DEFAULT> = $r23;

        $r24 = staticinvoke <androidx.camera.video.MediaSpec: androidx.camera.video.MediaSpec$Builder builder()>();

        $r25 = virtualinvoke $r24.<androidx.camera.video.MediaSpec$Builder: androidx.camera.video.MediaSpec$Builder setOutputFormat(int)>(-1);

        $r26 = <androidx.camera.video.Recorder: androidx.camera.video.VideoSpec VIDEO_SPEC_DEFAULT>;

        $r27 = virtualinvoke $r25.<androidx.camera.video.MediaSpec$Builder: androidx.camera.video.MediaSpec$Builder setVideoSpec(androidx.camera.video.VideoSpec)>($r26);

        $r28 = virtualinvoke $r27.<androidx.camera.video.MediaSpec$Builder: androidx.camera.video.MediaSpec build()>();

        <androidx.camera.video.Recorder: androidx.camera.video.MediaSpec MEDIA_SPEC_DEFAULT> = $r28;

        $r29 = new java.lang.RuntimeException;

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.String)>("The video frame producer became inactive before any data was received.");

        <androidx.camera.video.Recorder: java.lang.Exception PENDING_RECORDING_ERROR_CAUSE_SOURCE_INACTIVE> = $r29;

        $r30 = dynamicinvoke "createEncoder" <androidx.camera.video.internal.encoder.EncoderFactory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.camera.video.internal.encoder.Encoder __METHODTYPE__(java.util.concurrent.Executor,androidx.camera.video.internal.encoder.EncoderConfig), methodhandle: "REF_INVOKE_CONSTRUCTOR" <androidx.camera.video.internal.encoder.EncoderImpl: void <init>(java.util.concurrent.Executor,androidx.camera.video.internal.encoder.EncoderConfig)>, methodtype: androidx.camera.video.internal.encoder.Encoder __METHODTYPE__(java.util.concurrent.Executor,androidx.camera.video.internal.encoder.EncoderConfig));

        <androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory DEFAULT_ENCODER_FACTORY> = $r30;

        $r31 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor ioExecutor()>();

        $r32 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor)>($r31);

        <androidx.camera.video.Recorder: java.util.concurrent.Executor AUDIO_EXECUTOR> = $r32;

        return;
    }

androidx.camera.video.Recorder$1
<androidx.camera.video.Recorder$1: androidx.camera.video.internal.AudioSource val$audioSource>
<androidx.camera.video.Recorder$1: androidx.camera.video.Recorder this$0>
    void <init>(androidx.camera.video.Recorder, androidx.camera.video.internal.AudioSource)
    {
        androidx.camera.video.Recorder$1 r0;
        androidx.camera.video.Recorder r1;
        androidx.camera.video.internal.AudioSource r2;

        r0 := @this: androidx.camera.video.Recorder$1;

        r1 := @parameter0: androidx.camera.video.Recorder;

        r2 := @parameter1: androidx.camera.video.internal.AudioSource;

        r0.<androidx.camera.video.Recorder$1: androidx.camera.video.Recorder this$0> = r1;

        r0.<androidx.camera.video.Recorder$1: androidx.camera.video.internal.AudioSource val$audioSource> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.video.Recorder$1 r0;
        java.lang.Void r1;
        java.lang.Object[] $r2;
        androidx.camera.video.internal.AudioSource $r3;
        int $i0;
        java.lang.Integer $r4;
        java.lang.String $r5;

        r0 := @this: androidx.camera.video.Recorder$1;

        r1 := @parameter0: java.lang.Void;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<androidx.camera.video.Recorder$1: androidx.camera.video.internal.AudioSource val$audioSource>;

        $i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Released audio source successfully: 0x%x", $r2);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r5);

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.video.Recorder$1 r0;
        java.lang.Throwable r1;
        java.lang.Object[] $r2;
        androidx.camera.video.internal.AudioSource $r3;
        int $i0;
        java.lang.Integer $r4;
        java.lang.String $r5;

        r0 := @this: androidx.camera.video.Recorder$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<androidx.camera.video.Recorder$1: androidx.camera.video.internal.AudioSource val$audioSource>;

        $i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("An error occurred while attempting to release audio source: 0x%x", $r2);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r5);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.video.Recorder$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.video.Recorder$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.video.Recorder$1: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.video.Recorder$2
<androidx.camera.video.Recorder$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>
<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder$RecordingRecord val$recordingToStart>
<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>
    void <init>(androidx.camera.video.Recorder, androidx.concurrent.futures.CallbackToFutureAdapter$Completer, androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder$2 r0;
        androidx.camera.video.Recorder r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        androidx.camera.video.Recorder$RecordingRecord r3;

        r0 := @this: androidx.camera.video.Recorder$2;

        r1 := @parameter0: androidx.camera.video.Recorder;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r3 := @parameter2: androidx.camera.video.Recorder$RecordingRecord;

        r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0> = r1;

        r0.<androidx.camera.video.Recorder$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer> = r2;

        r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder$RecordingRecord val$recordingToStart> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onEncodeStart()
    {
        androidx.camera.video.Recorder$2 r0;

        r0 := @this: androidx.camera.video.Recorder$2;

        return;
    }

    public void onEncodeStop()
    {
        androidx.camera.video.Recorder$2 r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1;

        r0 := @this: androidx.camera.video.Recorder$2;

        $r1 = r0.<androidx.camera.video.Recorder$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        virtualinvoke $r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;
    }

    public void onEncodeError(androidx.camera.video.internal.encoder.EncodeException)
    {
        androidx.camera.video.Recorder$2 r0;
        androidx.camera.video.internal.encoder.EncodeException r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2;
        java.lang.Throwable r3;

        r0 := @this: androidx.camera.video.Recorder$2;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncodeException;

        $r2 = r0.<androidx.camera.video.Recorder$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        r3 = (java.lang.Throwable) r1;

        virtualinvoke $r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>(r3);

        return;
    }

    public void onEncodedData(androidx.camera.video.internal.encoder.EncodedData)
    {
        androidx.camera.video.Recorder$2 r0;
        androidx.camera.video.internal.encoder.EncodedData r1, $r10, $r20, r24;
        java.lang.Throwable r2, r3, $r22, $r23;
        androidx.camera.video.Recorder $r4, $r7, $r8, $r9, $r11, $r13, $r14, $r16, $r17, $r19, $r21;
        android.media.MediaMuxer $r5;
        androidx.camera.video.Recorder$RecordingRecord $r6, $r15;
        boolean $z0, $z1, $z2, $z3, z4;
        androidx.camera.video.internal.encoder.Encoder $r12;
        androidx.camera.core.internal.utils.RingBuffer $r18;

        r0 := @this: androidx.camera.video.Recorder$2;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncodedData;

        $r4 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r5 = $r4.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer>;

        if $r5 != null goto label09;

        $r8 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $z0 = $r8.<androidx.camera.video.Recorder: boolean mInProgressRecordingStopping>;

        if $z0 != 0 goto label08;

        z4 = 0;

        $r9 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r10 = $r9.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData>;

        if $r10 == null goto label01;

        z4 = 1;

        $r19 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r20 = $r19.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData>;

        interfaceinvoke $r20.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

        $r21 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r21.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData> = null;

     label01:
        $z1 = interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: boolean isKeyFrame()>();

        if $z1 == 0 goto label05;

        $r13 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r13.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData> = r1;

        $r14 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $z2 = virtualinvoke $r14.<androidx.camera.video.Recorder: boolean isAudioEnabled()>();

        if $z2 == 0 goto label02;

        $r17 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r18 = $r17.<androidx.camera.video.Recorder: androidx.camera.core.internal.utils.RingBuffer mPendingAudioRingBuffer>;

        $z3 = interfaceinvoke $r18.<androidx.camera.core.internal.utils.RingBuffer: boolean isEmpty()>();

        if $z3 != 0 goto label03;

     label02:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Received video keyframe. Starting muxer...");

        $r16 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r15 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder$RecordingRecord val$recordingToStart>;

        virtualinvoke $r16.<androidx.camera.video.Recorder: void setupAndStartMediaMuxer(androidx.camera.video.Recorder$RecordingRecord)>($r15);

        goto label07;

     label03:
        if z4 == 0 goto label04;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Replaced cached video keyframe with newer keyframe.");

        goto label07;

     label04:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Cached video keyframe while we wait for first audio sample before starting muxer.");

        goto label07;

     label05:
        if z4 == 0 goto label06;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Dropped cached keyframe since we have new video data and have not yet received audio data.");

     label06:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Dropped video data since muxer has not yet started and data is not a keyframe.");

        $r11 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r12 = $r11.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.Encoder mVideoEncoder>;

        interfaceinvoke $r12.<androidx.camera.video.internal.encoder.Encoder: void requestKeyFrame()>();

        interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

     label07:
        goto label17;

     label08:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Drop video data since recording is stopping.");

        interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

        goto label17;

     label09:
        r24 = r1;

     label10:
        $r7 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r6 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder$RecordingRecord val$recordingToStart>;

        virtualinvoke $r7.<androidx.camera.video.Recorder: void writeVideoData(androidx.camera.video.internal.encoder.EncodedData,androidx.camera.video.Recorder$RecordingRecord)>(r24, $r6);

     label11:
        if r24 == null goto label17;

        interfaceinvoke r24.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

        goto label17;

     label12:
        $r22 := @caughtexception;

        r2 = $r22;

        if r24 == null goto label16;

     label13:
        interfaceinvoke r24.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

     label14:
        goto label16;

     label15:
        $r23 := @caughtexception;

        r3 = $r23;

        virtualinvoke r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r3);

     label16:
        throw r2;

     label17:
        return;

        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public void onOutputConfigUpdate(androidx.camera.video.internal.encoder.OutputConfig)
    {
        androidx.camera.video.Recorder$2 r0;
        androidx.camera.video.internal.encoder.OutputConfig r1;
        androidx.camera.video.Recorder $r2;

        r0 := @this: androidx.camera.video.Recorder$2;

        r1 := @parameter0: androidx.camera.video.internal.encoder.OutputConfig;

        $r2 = r0.<androidx.camera.video.Recorder$2: androidx.camera.video.Recorder this$0>;

        $r2.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mVideoOutputConfig> = r1;

        return;
    }

androidx.camera.video.Recorder$3
<androidx.camera.video.Recorder$3: androidx.core.util.Consumer val$audioErrorConsumer>
<androidx.camera.video.Recorder$3: androidx.camera.video.Recorder this$0>
    void <init>(androidx.camera.video.Recorder, androidx.core.util.Consumer)
    {
        androidx.camera.video.Recorder$3 r0;
        androidx.camera.video.Recorder r1;
        androidx.core.util.Consumer r2;

        r0 := @this: androidx.camera.video.Recorder$3;

        r1 := @parameter0: androidx.camera.video.Recorder;

        r2 := @parameter1: androidx.core.util.Consumer;

        r0.<androidx.camera.video.Recorder$3: androidx.camera.video.Recorder this$0> = r1;

        r0.<androidx.camera.video.Recorder$3: androidx.core.util.Consumer val$audioErrorConsumer> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSilenced(boolean)
    {
        androidx.camera.video.Recorder$3 r0;
        boolean z0, $z1;
        androidx.camera.video.Recorder $r1, $r6, $r7, $r8;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.IllegalStateException $r9;

        r0 := @this: androidx.camera.video.Recorder$3;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.camera.video.Recorder$3: androidx.camera.video.Recorder this$0>;

        $z1 = $r1.<androidx.camera.video.Recorder: boolean mIsAudioSourceSilenced>;

        if $z1 == z0 goto label3;

        $r6 = r0.<androidx.camera.video.Recorder$3: androidx.camera.video.Recorder this$0>;

        $r6.<androidx.camera.video.Recorder: boolean mIsAudioSourceSilenced> = z0;

        $r7 = r0.<androidx.camera.video.Recorder$3: androidx.camera.video.Recorder this$0>;

        if z0 == 0 goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The audio source has been silenced.");

        goto label2;

     label1:
        $r9 = null;

     label2:
        $r7.<androidx.camera.video.Recorder: java.lang.Throwable mAudioErrorCause> = $r9;

        $r8 = r0.<androidx.camera.video.Recorder$3: androidx.camera.video.Recorder this$0>;

        virtualinvoke $r8.<androidx.camera.video.Recorder: void updateInProgressStatusEvent()>();

        goto label4;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Audio source silenced transitions to the same state ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("Recorder", $r5);

     label4:
        return;
    }

    public void onError(java.lang.Throwable)
    {
        androidx.camera.video.Recorder$3 r0;
        java.lang.Throwable r1;
        boolean $z0;
        androidx.core.util.Consumer $r2;

        r0 := @this: androidx.camera.video.Recorder$3;

        r1 := @parameter0: java.lang.Throwable;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Recorder", "Error occurred after audio source started.", r1);

        $z0 = r1 instanceof androidx.camera.video.internal.AudioSourceAccessException;

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.camera.video.Recorder$3: androidx.core.util.Consumer val$audioErrorConsumer>;

        interfaceinvoke $r2.<androidx.core.util.Consumer: void accept(java.lang.Object)>(r1);

     label1:
        return;
    }

androidx.camera.video.Recorder$4
<androidx.camera.video.Recorder$4: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>
<androidx.camera.video.Recorder$4: androidx.core.util.Consumer val$audioErrorConsumer>
<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder$RecordingRecord val$recordingToStart>
<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>
    void <init>(androidx.camera.video.Recorder, androidx.concurrent.futures.CallbackToFutureAdapter$Completer, androidx.core.util.Consumer, androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder$4 r0;
        androidx.camera.video.Recorder r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        androidx.core.util.Consumer r3;
        androidx.camera.video.Recorder$RecordingRecord r4;

        r0 := @this: androidx.camera.video.Recorder$4;

        r1 := @parameter0: androidx.camera.video.Recorder;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r3 := @parameter2: androidx.core.util.Consumer;

        r4 := @parameter3: androidx.camera.video.Recorder$RecordingRecord;

        r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0> = r1;

        r0.<androidx.camera.video.Recorder$4: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer> = r2;

        r0.<androidx.camera.video.Recorder$4: androidx.core.util.Consumer val$audioErrorConsumer> = r3;

        r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder$RecordingRecord val$recordingToStart> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onEncodeStart()
    {
        androidx.camera.video.Recorder$4 r0;

        r0 := @this: androidx.camera.video.Recorder$4;

        return;
    }

    public void onEncodeStop()
    {
        androidx.camera.video.Recorder$4 r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1;

        r0 := @this: androidx.camera.video.Recorder$4;

        $r1 = r0.<androidx.camera.video.Recorder$4: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        virtualinvoke $r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;
    }

    public void onEncodeError(androidx.camera.video.internal.encoder.EncodeException)
    {
        androidx.camera.video.Recorder$4 r0;
        androidx.camera.video.internal.encoder.EncodeException r1;
        androidx.camera.video.Recorder $r2;
        java.lang.Throwable $r3;
        androidx.core.util.Consumer $r4;

        r0 := @this: androidx.camera.video.Recorder$4;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncodeException;

        $r2 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>;

        $r3 = $r2.<androidx.camera.video.Recorder: java.lang.Throwable mAudioErrorCause>;

        if $r3 != null goto label1;

        $r4 = r0.<androidx.camera.video.Recorder$4: androidx.core.util.Consumer val$audioErrorConsumer>;

        interfaceinvoke $r4.<androidx.core.util.Consumer: void accept(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void onEncodedData(androidx.camera.video.internal.encoder.EncodedData)
    {
        androidx.camera.video.Recorder$4 r0;
        androidx.camera.video.internal.encoder.EncodedData r1, r2, $r17;
        java.lang.Throwable r3, r4, $r21, $r22;
        androidx.camera.video.Recorder $r5, $r8, $r11, $r12, $r13, $r16, $r19;
        androidx.camera.video.Recorder$AudioState $r6, $r7;
        android.media.MediaMuxer $r9;
        androidx.camera.video.Recorder$RecordingRecord $r10, $r18;
        boolean $z0;
        androidx.camera.video.internal.encoder.BufferCopiedEncodedData $r14;
        androidx.camera.core.internal.utils.RingBuffer $r15;
        java.lang.AssertionError $r20;

        r0 := @this: androidx.camera.video.Recorder$4;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncodedData;

        $r5 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>;

        $r7 = $r5.<androidx.camera.video.Recorder: androidx.camera.video.Recorder$AudioState mAudioState>;

        $r6 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState DISABLED>;

        if $r7 != $r6 goto label01;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("Audio is not enabled but audio encoded data is produced.");

        throw $r20;

     label01:
        $r8 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>;

        $r9 = $r8.<androidx.camera.video.Recorder: android.media.MediaMuxer mMediaMuxer>;

        if $r9 != null goto label05;

        $r12 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>;

        $z0 = $r12.<androidx.camera.video.Recorder: boolean mInProgressRecordingStopping>;

        if $z0 != 0 goto label03;

        $r13 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>;

        $r15 = $r13.<androidx.camera.video.Recorder: androidx.camera.core.internal.utils.RingBuffer mPendingAudioRingBuffer>;

        $r14 = new androidx.camera.video.internal.encoder.BufferCopiedEncodedData;

        specialinvoke $r14.<androidx.camera.video.internal.encoder.BufferCopiedEncodedData: void <init>(androidx.camera.video.internal.encoder.EncodedData)>(r1);

        interfaceinvoke $r15.<androidx.camera.core.internal.utils.RingBuffer: void enqueue(java.lang.Object)>($r14);

        $r16 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>;

        $r17 = $r16.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncodedData mPendingFirstVideoData>;

        if $r17 == null goto label02;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Received audio data. Starting muxer...");

        $r19 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>;

        $r18 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder$RecordingRecord val$recordingToStart>;

        virtualinvoke $r19.<androidx.camera.video.Recorder: void setupAndStartMediaMuxer(androidx.camera.video.Recorder$RecordingRecord)>($r18);

        goto label04;

     label02:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Cached audio data while we wait for video keyframe before starting muxer.");

        goto label04;

     label03:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Drop audio data since recording is stopping.");

     label04:
        interfaceinvoke r1.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

        goto label13;

     label05:
        r2 = r1;

     label06:
        $r11 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>;

        $r10 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder$RecordingRecord val$recordingToStart>;

        virtualinvoke $r11.<androidx.camera.video.Recorder: void writeAudioData(androidx.camera.video.internal.encoder.EncodedData,androidx.camera.video.Recorder$RecordingRecord)>(r2, $r10);

     label07:
        if r2 == null goto label13;

        interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

        goto label13;

     label08:
        $r22 := @caughtexception;

        r3 = $r22;

        if r2 == null goto label12;

     label09:
        interfaceinvoke r2.<androidx.camera.video.internal.encoder.EncodedData: void close()>();

     label10:
        goto label12;

     label11:
        $r21 := @caughtexception;

        r4 = $r21;

        virtualinvoke r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r4);

     label12:
        throw r3;

     label13:
        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public void onOutputConfigUpdate(androidx.camera.video.internal.encoder.OutputConfig)
    {
        androidx.camera.video.Recorder$4 r0;
        androidx.camera.video.internal.encoder.OutputConfig r1;
        androidx.camera.video.Recorder $r2;

        r0 := @this: androidx.camera.video.Recorder$4;

        r1 := @parameter0: androidx.camera.video.internal.encoder.OutputConfig;

        $r2 = r0.<androidx.camera.video.Recorder$4: androidx.camera.video.Recorder this$0>;

        $r2.<androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.OutputConfig mAudioOutputConfig> = r1;

        return;
    }

androidx.camera.video.Recorder$5
<androidx.camera.video.Recorder$5: androidx.camera.video.Recorder this$0>
    void <init>(androidx.camera.video.Recorder)
    {
        androidx.camera.video.Recorder$5 r0;
        androidx.camera.video.Recorder r1;

        r0 := @this: androidx.camera.video.Recorder$5;

        r1 := @parameter0: androidx.camera.video.Recorder;

        r0.<androidx.camera.video.Recorder$5: androidx.camera.video.Recorder this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.util.List)
    {
        androidx.camera.video.Recorder$5 r0;
        java.util.List r1;
        androidx.camera.video.Recorder $r2, $r3, $r5;
        java.lang.Throwable $r4;
        int $i0;

        r0 := @this: androidx.camera.video.Recorder$5;

        r1 := @parameter0: java.util.List;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", "Encodings end successfully.");

        $r5 = r0.<androidx.camera.video.Recorder$5: androidx.camera.video.Recorder this$0>;

        $r2 = r0.<androidx.camera.video.Recorder$5: androidx.camera.video.Recorder this$0>;

        $i0 = $r2.<androidx.camera.video.Recorder: int mRecordingStopError>;

        $r3 = r0.<androidx.camera.video.Recorder$5: androidx.camera.video.Recorder this$0>;

        $r4 = $r3.<androidx.camera.video.Recorder: java.lang.Throwable mRecordingStopErrorCause>;

        virtualinvoke $r5.<androidx.camera.video.Recorder: void finalizeInProgressRecording(int,java.lang.Throwable)>($i0, $r4);

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.video.Recorder$5 r0;
        java.lang.Throwable r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        androidx.camera.video.Recorder $r6;

        r0 := @this: androidx.camera.video.Recorder$5;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encodings end with error: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r5);

        $r6 = r0.<androidx.camera.video.Recorder$5: androidx.camera.video.Recorder this$0>;

        virtualinvoke $r6.<androidx.camera.video.Recorder: void finalizeInProgressRecording(int,java.lang.Throwable)>(6, r1);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.video.Recorder$5 r0;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @this: androidx.camera.video.Recorder$5;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.List) r1;

        virtualinvoke r0.<androidx.camera.video.Recorder$5: void onSuccess(java.util.List)>($r2);

        return;
    }

androidx.camera.video.Recorder$6
<androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>
<androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState>
    static void <clinit>()
    {
        androidx.camera.video.Recorder$AudioState[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31;
        androidx.camera.video.Recorder$AudioState $r2, $r4, $r6, $r8, $r10;
        androidx.camera.video.Recorder$State[] $r12;
        androidx.camera.video.Recorder$State $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30;
        java.lang.Throwable $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59;

        $r0 = staticinvoke <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState> = $r1;

     label01:
        $r3 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState>;

        $r2 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ERROR>;

        $i1 = virtualinvoke $r2.<androidx.camera.video.Recorder$AudioState: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r42 := @caughtexception;

        r46 = $r42;

     label04:
        $r5 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState>;

        $r4 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ACTIVE>;

        $i2 = virtualinvoke $r4.<androidx.camera.video.Recorder$AudioState: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r32 := @caughtexception;

        r47 = $r32;

     label07:
        $r7 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState>;

        $r6 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState DISABLED>;

        $i3 = virtualinvoke $r6.<androidx.camera.video.Recorder$AudioState: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r45 := @caughtexception;

        r48 = $r45;

     label10:
        $r9 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState>;

        $r8 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState IDLING>;

        $i4 = virtualinvoke $r8.<androidx.camera.video.Recorder$AudioState: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r34 := @caughtexception;

        r49 = $r34;

     label13:
        $r11 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$AudioState>;

        $r10 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState INITIALIZING>;

        $i5 = virtualinvoke $r10.<androidx.camera.video.Recorder$AudioState: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r44 := @caughtexception;

        r50 = $r44;

     label16:
        $r12 = staticinvoke <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State[] values()>();

        $i6 = lengthof $r12;

        $r13 = newarray (int)[$i6];

        <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State> = $r13;

     label17:
        $r15 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r14 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State STOPPING>;

        $i7 = virtualinvoke $r14.<androidx.camera.video.Recorder$State: int ordinal()>();

        $r15[$i7] = 1;

     label18:
        goto label20;

     label19:
        $r40 := @caughtexception;

        r51 = $r40;

     label20:
        $r17 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r16 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RESETTING>;

        $i8 = virtualinvoke $r16.<androidx.camera.video.Recorder$State: int ordinal()>();

        $r17[$i8] = 2;

     label21:
        goto label23;

     label22:
        $r41 := @caughtexception;

        r52 = $r41;

     label23:
        $r19 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r18 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING>;

        $i9 = virtualinvoke $r18.<androidx.camera.video.Recorder$State: int ordinal()>();

        $r19[$i9] = 3;

     label24:
        goto label26;

     label25:
        $r39 := @caughtexception;

        r53 = $r39;

     label26:
        $r21 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r20 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_PAUSED>;

        $i10 = virtualinvoke $r20.<androidx.camera.video.Recorder$State: int ordinal()>();

        $r21[$i10] = 4;

     label27:
        goto label29;

     label28:
        $r37 := @caughtexception;

        r54 = $r37;

     label29:
        $r23 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r22 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        $i11 = virtualinvoke $r22.<androidx.camera.video.Recorder$State: int ordinal()>();

        $r23[$i11] = 5;

     label30:
        goto label32;

     label31:
        $r38 := @caughtexception;

        r55 = $r38;

     label32:
        $r25 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r24 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State IDLING>;

        $i12 = virtualinvoke $r24.<androidx.camera.video.Recorder$State: int ordinal()>();

        $r25[$i12] = 6;

     label33:
        goto label35;

     label34:
        $r36 := @caughtexception;

        r56 = $r36;

     label35:
        $r27 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r26 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RECORDING>;

        $i13 = virtualinvoke $r26.<androidx.camera.video.Recorder$State: int ordinal()>();

        $r27[$i13] = 7;

     label36:
        goto label38;

     label37:
        $r35 := @caughtexception;

        r57 = $r35;

     label38:
        $r29 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r28 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PAUSED>;

        $i14 = virtualinvoke $r28.<androidx.camera.video.Recorder$State: int ordinal()>();

        $r29[$i14] = 8;

     label39:
        goto label41;

     label40:
        $r43 := @caughtexception;

        r58 = $r43;

     label41:
        $r31 = <androidx.camera.video.Recorder$6: int[] $SwitchMap$androidx$camera$video$Recorder$State>;

        $r30 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State ERROR>;

        $i15 = virtualinvoke $r30.<androidx.camera.video.Recorder$State: int ordinal()>();

        $r31[$i15] = 9;

     label42:
        goto label44;

     label43:
        $r33 := @caughtexception;

        r59 = $r33;

     label44:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
        catch java.lang.NoSuchFieldError from label26 to label27 with label28;
        catch java.lang.NoSuchFieldError from label29 to label30 with label31;
        catch java.lang.NoSuchFieldError from label32 to label33 with label34;
        catch java.lang.NoSuchFieldError from label35 to label36 with label37;
        catch java.lang.NoSuchFieldError from label38 to label39 with label40;
        catch java.lang.NoSuchFieldError from label41 to label42 with label43;
    }

androidx.camera.video.Recorder$AudioState
<androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState INITIALIZING>
<androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState IDLING>
<androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState DISABLED>
<androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ACTIVE>
<androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ERROR>
<androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState[] $VALUES>
    public static androidx.camera.video.Recorder$AudioState[] values()
    {
        androidx.camera.video.Recorder$AudioState[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.video.Recorder$AudioState[]) $r1;

        return $r2;
    }

    public static androidx.camera.video.Recorder$AudioState valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.video.Recorder$AudioState $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/video/Recorder$AudioState;", r0);

        $r2 = (androidx.camera.video.Recorder$AudioState) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.video.Recorder$AudioState r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.video.Recorder$AudioState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.video.Recorder$AudioState $r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        androidx.camera.video.Recorder$AudioState[] $r5;

        $r0 = new androidx.camera.video.Recorder$AudioState;

        specialinvoke $r0.<androidx.camera.video.Recorder$AudioState: void <init>(java.lang.String,int)>("INITIALIZING", 0);

        <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState INITIALIZING> = $r0;

        $r1 = new androidx.camera.video.Recorder$AudioState;

        specialinvoke $r1.<androidx.camera.video.Recorder$AudioState: void <init>(java.lang.String,int)>("IDLING", 1);

        <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState IDLING> = $r1;

        $r2 = new androidx.camera.video.Recorder$AudioState;

        specialinvoke $r2.<androidx.camera.video.Recorder$AudioState: void <init>(java.lang.String,int)>("DISABLED", 2);

        <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState DISABLED> = $r2;

        $r3 = new androidx.camera.video.Recorder$AudioState;

        specialinvoke $r3.<androidx.camera.video.Recorder$AudioState: void <init>(java.lang.String,int)>("ACTIVE", 3);

        <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ACTIVE> = $r3;

        $r4 = new androidx.camera.video.Recorder$AudioState;

        specialinvoke $r4.<androidx.camera.video.Recorder$AudioState: void <init>(java.lang.String,int)>("ERROR", 4);

        <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ERROR> = $r4;

        $r5 = newarray (androidx.camera.video.Recorder$AudioState)[5];

        $r6 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState INITIALIZING>;

        $r5[0] = $r6;

        $r7 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState IDLING>;

        $r5[1] = $r7;

        $r8 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState DISABLED>;

        $r5[2] = $r8;

        $r9 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ACTIVE>;

        $r5[3] = $r9;

        $r10 = <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState ERROR>;

        $r5[4] = $r10;

        <androidx.camera.video.Recorder$AudioState: androidx.camera.video.Recorder$AudioState[] $VALUES> = $r5;

        return;
    }

androidx.camera.video.Recorder$Builder
<androidx.camera.video.Recorder$Builder: androidx.camera.video.MediaSpec$Builder mMediaSpecBuilder>
<androidx.camera.video.Recorder$Builder: java.util.concurrent.Executor mExecutor>
<androidx.camera.video.Recorder$Builder: androidx.camera.video.internal.encoder.EncoderFactory mVideoEncoderFactory>
<androidx.camera.video.Recorder$Builder: androidx.camera.video.internal.encoder.EncoderFactory mAudioEncoderFactory>
    public void <init>()
    {
        androidx.camera.video.Recorder$Builder r0;
        androidx.camera.video.internal.encoder.EncoderFactory $r1, $r2;
        androidx.camera.video.MediaSpec$Builder $r3;

        r0 := @this: androidx.camera.video.Recorder$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.video.Recorder$Builder: java.util.concurrent.Executor mExecutor> = null;

        $r1 = <androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory DEFAULT_ENCODER_FACTORY>;

        r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.internal.encoder.EncoderFactory mVideoEncoderFactory> = $r1;

        $r2 = <androidx.camera.video.Recorder: androidx.camera.video.internal.encoder.EncoderFactory DEFAULT_ENCODER_FACTORY>;

        r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.internal.encoder.EncoderFactory mAudioEncoderFactory> = $r2;

        $r3 = staticinvoke <androidx.camera.video.MediaSpec: androidx.camera.video.MediaSpec$Builder builder()>();

        r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.MediaSpec$Builder mMediaSpecBuilder> = $r3;

        return;
    }

    public androidx.camera.video.Recorder$Builder setExecutor(java.util.concurrent.Executor)
    {
        androidx.camera.video.Recorder$Builder r0;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.camera.video.Recorder$Builder;

        r1 := @parameter0: java.util.concurrent.Executor;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "The specified executor can\'t be null.");

        r0.<androidx.camera.video.Recorder$Builder: java.util.concurrent.Executor mExecutor> = r1;

        return r0;
    }

    public androidx.camera.video.Recorder$Builder setQualitySelector(androidx.camera.video.QualitySelector)
    {
        androidx.camera.video.Recorder$Builder r0;
        androidx.camera.video.QualitySelector r1;
        androidx.camera.video.MediaSpec$Builder $r3;
        androidx.core.util.Consumer $r4;

        r0 := @this: androidx.camera.video.Recorder$Builder;

        r1 := @parameter0: androidx.camera.video.QualitySelector;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "The specified quality selector can\'t be null.");

        $r3 = r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.MediaSpec$Builder mMediaSpecBuilder>;

        $r4 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.video.QualitySelector)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder$Builder: void lambda$setQualitySelector$0(androidx.camera.video.QualitySelector,androidx.camera.video.VideoSpec$Builder)>, methodtype: void __METHODTYPE__(androidx.camera.video.VideoSpec$Builder));

        virtualinvoke $r3.<androidx.camera.video.MediaSpec$Builder: androidx.camera.video.MediaSpec$Builder configureVideo(androidx.core.util.Consumer)>($r4);

        return r0;
    }

    androidx.camera.video.Recorder$Builder setAspectRatio(int)
    {
        androidx.camera.video.Recorder$Builder r0;
        int i0;
        androidx.camera.video.MediaSpec$Builder $r1;
        androidx.core.util.Consumer $r2;

        r0 := @this: androidx.camera.video.Recorder$Builder;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.MediaSpec$Builder mMediaSpecBuilder>;

        $r2 = dynamicinvoke "accept" <androidx.core.util.Consumer (int)>(i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder$Builder: void lambda$setAspectRatio$1(int,androidx.camera.video.VideoSpec$Builder)>, methodtype: void __METHODTYPE__(androidx.camera.video.VideoSpec$Builder));

        virtualinvoke $r1.<androidx.camera.video.MediaSpec$Builder: androidx.camera.video.MediaSpec$Builder configureVideo(androidx.core.util.Consumer)>($r2);

        return r0;
    }

    androidx.camera.video.Recorder$Builder setAudioSource(int)
    {
        androidx.camera.video.Recorder$Builder r0;
        int i0;
        androidx.camera.video.MediaSpec$Builder $r1;
        androidx.core.util.Consumer $r2;

        r0 := @this: androidx.camera.video.Recorder$Builder;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.MediaSpec$Builder mMediaSpecBuilder>;

        $r2 = dynamicinvoke "accept" <androidx.core.util.Consumer (int)>(i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder$Builder: void lambda$setAudioSource$2(int,androidx.camera.video.AudioSpec$Builder)>, methodtype: void __METHODTYPE__(androidx.camera.video.AudioSpec$Builder));

        virtualinvoke $r1.<androidx.camera.video.MediaSpec$Builder: androidx.camera.video.MediaSpec$Builder configureAudio(androidx.core.util.Consumer)>($r2);

        return r0;
    }

    androidx.camera.video.Recorder$Builder setVideoEncoderFactory(androidx.camera.video.internal.encoder.EncoderFactory)
    {
        androidx.camera.video.Recorder$Builder r0;
        androidx.camera.video.internal.encoder.EncoderFactory r1;

        r0 := @this: androidx.camera.video.Recorder$Builder;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderFactory;

        r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.internal.encoder.EncoderFactory mVideoEncoderFactory> = r1;

        return r0;
    }

    androidx.camera.video.Recorder$Builder setAudioEncoderFactory(androidx.camera.video.internal.encoder.EncoderFactory)
    {
        androidx.camera.video.Recorder$Builder r0;
        androidx.camera.video.internal.encoder.EncoderFactory r1;

        r0 := @this: androidx.camera.video.Recorder$Builder;

        r1 := @parameter0: androidx.camera.video.internal.encoder.EncoderFactory;

        r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.internal.encoder.EncoderFactory mAudioEncoderFactory> = r1;

        return r0;
    }

    public androidx.camera.video.Recorder build()
    {
        androidx.camera.video.Recorder$Builder r0;
        androidx.camera.video.Recorder $r1;
        androidx.camera.video.MediaSpec$Builder $r2;
        java.util.concurrent.Executor $r3;
        androidx.camera.video.MediaSpec $r4;
        androidx.camera.video.internal.encoder.EncoderFactory $r5, $r6;

        r0 := @this: androidx.camera.video.Recorder$Builder;

        $r1 = new androidx.camera.video.Recorder;

        $r3 = r0.<androidx.camera.video.Recorder$Builder: java.util.concurrent.Executor mExecutor>;

        $r2 = r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.MediaSpec$Builder mMediaSpecBuilder>;

        $r4 = virtualinvoke $r2.<androidx.camera.video.MediaSpec$Builder: androidx.camera.video.MediaSpec build()>();

        $r6 = r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.internal.encoder.EncoderFactory mVideoEncoderFactory>;

        $r5 = r0.<androidx.camera.video.Recorder$Builder: androidx.camera.video.internal.encoder.EncoderFactory mAudioEncoderFactory>;

        specialinvoke $r1.<androidx.camera.video.Recorder: void <init>(java.util.concurrent.Executor,androidx.camera.video.MediaSpec,androidx.camera.video.internal.encoder.EncoderFactory,androidx.camera.video.internal.encoder.EncoderFactory)>($r3, $r4, $r6, $r5);

        return $r1;
    }

    private static void lambda$setAudioSource$2(int, androidx.camera.video.AudioSpec$Builder)
    {
        int i0;
        androidx.camera.video.AudioSpec$Builder r0;

        i0 := @parameter0: int;

        r0 := @parameter1: androidx.camera.video.AudioSpec$Builder;

        virtualinvoke r0.<androidx.camera.video.AudioSpec$Builder: androidx.camera.video.AudioSpec$Builder setSource(int)>(i0);

        return;
    }

    private static void lambda$setAspectRatio$1(int, androidx.camera.video.VideoSpec$Builder)
    {
        int i0;
        androidx.camera.video.VideoSpec$Builder r0;

        i0 := @parameter0: int;

        r0 := @parameter1: androidx.camera.video.VideoSpec$Builder;

        virtualinvoke r0.<androidx.camera.video.VideoSpec$Builder: androidx.camera.video.VideoSpec$Builder setAspectRatio(int)>(i0);

        return;
    }

    private static void lambda$setQualitySelector$0(androidx.camera.video.QualitySelector, androidx.camera.video.VideoSpec$Builder)
    {
        androidx.camera.video.QualitySelector r0;
        androidx.camera.video.VideoSpec$Builder r1;

        r0 := @parameter0: androidx.camera.video.QualitySelector;

        r1 := @parameter1: androidx.camera.video.VideoSpec$Builder;

        virtualinvoke r1.<androidx.camera.video.VideoSpec$Builder: androidx.camera.video.VideoSpec$Builder setQualitySelector(androidx.camera.video.QualitySelector)>(r0);

        return;
    }

androidx.camera.video.Recorder$RecordingRecord$1
<androidx.camera.video.Recorder$RecordingRecord$1: android.content.Context val$context>
<androidx.camera.video.Recorder$RecordingRecord$1: androidx.camera.video.Recorder$RecordingRecord this$0>
    void <init>(androidx.camera.video.Recorder$RecordingRecord, android.content.Context)
    {
        androidx.camera.video.Recorder$RecordingRecord$1 r0;
        androidx.camera.video.Recorder$RecordingRecord r1;
        android.content.Context r2;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord$1;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        r2 := @parameter1: android.content.Context;

        r0.<androidx.camera.video.Recorder$RecordingRecord$1: androidx.camera.video.Recorder$RecordingRecord this$0> = r1;

        r0.<androidx.camera.video.Recorder$RecordingRecord$1: android.content.Context val$context> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.camera.video.internal.AudioSource get(androidx.camera.video.internal.AudioSource$Settings, java.util.concurrent.Executor) throws androidx.camera.video.internal.AudioSourceAccessException
    {
        androidx.camera.video.Recorder$RecordingRecord$1 r0;
        androidx.camera.video.internal.AudioSource$Settings r1;
        java.util.concurrent.Executor r2;
        androidx.camera.video.internal.AudioSource $r3;
        android.content.Context $r4;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord$1;

        r1 := @parameter0: androidx.camera.video.internal.AudioSource$Settings;

        r2 := @parameter1: java.util.concurrent.Executor;

        $r3 = new androidx.camera.video.internal.AudioSource;

        $r4 = r0.<androidx.camera.video.Recorder$RecordingRecord$1: android.content.Context val$context>;

        specialinvoke $r3.<androidx.camera.video.internal.AudioSource: void <init>(androidx.camera.video.internal.AudioSource$Settings,java.util.concurrent.Executor,android.content.Context)>(r1, r2, $r4);

        return $r3;
    }

androidx.camera.video.Recorder$RecordingRecord$2
<androidx.camera.video.Recorder$RecordingRecord$2: androidx.camera.video.Recorder$RecordingRecord this$0>
    void <init>(androidx.camera.video.Recorder$RecordingRecord)
    {
        androidx.camera.video.Recorder$RecordingRecord$2 r0;
        androidx.camera.video.Recorder$RecordingRecord r1;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord$2;

        r1 := @parameter0: androidx.camera.video.Recorder$RecordingRecord;

        r0.<androidx.camera.video.Recorder$RecordingRecord$2: androidx.camera.video.Recorder$RecordingRecord this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.camera.video.internal.AudioSource get(androidx.camera.video.internal.AudioSource$Settings, java.util.concurrent.Executor) throws androidx.camera.video.internal.AudioSourceAccessException
    {
        androidx.camera.video.Recorder$RecordingRecord$2 r0;
        androidx.camera.video.internal.AudioSource$Settings r1;
        java.util.concurrent.Executor r2;
        androidx.camera.video.internal.AudioSource $r3;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord$2;

        r1 := @parameter0: androidx.camera.video.internal.AudioSource$Settings;

        r2 := @parameter1: java.util.concurrent.Executor;

        $r3 = new androidx.camera.video.internal.AudioSource;

        specialinvoke $r3.<androidx.camera.video.internal.AudioSource: void <init>(androidx.camera.video.internal.AudioSource$Settings,java.util.concurrent.Executor,android.content.Context)>(r1, r2, null);

        return $r3;
    }

androidx.camera.video.Recorder$RecordingRecord$AudioSourceSupplier
<androidx.camera.video.Recorder$RecordingRecord$AudioSourceSupplier: androidx.camera.video.internal.AudioSource get(androidx.camera.video.internal.AudioSource$Settings,java.util.concurrent.Executor)>
androidx.camera.video.Recorder$RecordingRecord$MediaMuxerSupplier
<androidx.camera.video.Recorder$RecordingRecord$MediaMuxerSupplier: android.media.MediaMuxer get(int,androidx.core.util.Consumer)>
androidx.camera.video.Recorder$RecordingRecord
<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard>
<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicBoolean mInitialized>
<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mMediaMuxerSupplier>
<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mAudioSourceSupplier>
<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mRecordingFinalizer>
    void <init>()
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        androidx.camera.core.impl.utils.CloseGuardHelper $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.util.concurrent.atomic.AtomicReference $r3, $r4, $r5;
        androidx.core.util.Consumer $r6;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <androidx.camera.core.impl.utils.CloseGuardHelper: androidx.camera.core.impl.utils.CloseGuardHelper create()>();

        r0.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicBoolean mInitialized> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mMediaMuxerSupplier> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mAudioSourceSupplier> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicReference;

        $r6 = dynamicinvoke "accept" <androidx.core.util.Consumer ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder$RecordingRecord: void lambda$new$0(android.net.Uri)>, methodtype: void __METHODTYPE__(android.net.Uri));

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r6);

        r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mRecordingFinalizer> = $r5;

        return;
    }

    static androidx.camera.video.Recorder$RecordingRecord 'from'(androidx.camera.video.PendingRecording, long)
    {
        androidx.camera.video.PendingRecording r0;
        long l0;
        androidx.camera.video.AutoValue_Recorder_RecordingRecord $r1;
        androidx.camera.video.OutputOptions $r2;
        java.util.concurrent.Executor $r3;
        androidx.core.util.Consumer $r4;
        boolean $z0;

        r0 := @parameter0: androidx.camera.video.PendingRecording;

        l0 := @parameter1: long;

        $r1 = new androidx.camera.video.AutoValue_Recorder_RecordingRecord;

        $r2 = virtualinvoke r0.<androidx.camera.video.PendingRecording: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r3 = virtualinvoke r0.<androidx.camera.video.PendingRecording: java.util.concurrent.Executor getListenerExecutor()>();

        $r4 = virtualinvoke r0.<androidx.camera.video.PendingRecording: androidx.core.util.Consumer getEventListener()>();

        $z0 = virtualinvoke r0.<androidx.camera.video.PendingRecording: boolean isAudioEnabled()>();

        specialinvoke $r1.<androidx.camera.video.AutoValue_Recorder_RecordingRecord: void <init>(androidx.camera.video.OutputOptions,java.util.concurrent.Executor,androidx.core.util.Consumer,boolean,long)>($r2, $r3, $r4, $z0, l0);

        return $r1;
    }

<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>
<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.Executor getCallbackExecutor()>
<androidx.camera.video.Recorder$RecordingRecord: androidx.core.util.Consumer getEventListener()>
<androidx.camera.video.Recorder$RecordingRecord: boolean hasAudioEnabled()>
<androidx.camera.video.Recorder$RecordingRecord: long getRecordingId()>
    void initializeRecording(android.content.Context) throws java.io.IOException
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        android.content.Context r1;
        androidx.camera.video.OutputOptions r2;
        androidx.camera.video.Recorder$RecordingRecord$MediaMuxerSupplier r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.camera.core.impl.utils.CloseGuardHelper $r5;
        java.util.concurrent.atomic.AtomicReference $r6, $r7, $r9, $r11;
        int $i0, $i1;
        androidx.camera.video.Recorder$RecordingRecord$2 $r8, r23;
        androidx.camera.video.Recorder$RecordingRecord$1 $r10, r22;
        androidx.camera.video.FileDescriptorOutputOptions $r12;
        android.os.ParcelFileDescriptor $r13, r20;
        java.lang.AssertionError $r14;
        java.lang.StringBuilder $r15, $r16, $r17, $r18;
        java.lang.String $r19;
        androidx.core.util.Consumer r21;
        androidx.camera.video.MediaStoreOutputOptions r24;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

        r1 := @parameter0: android.content.Context;

        $r4 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicBoolean mInitialized>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 == 0 goto label01;

        $r14 = new java.lang.AssertionError;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recording ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has already been initialized");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r14;

     label01:
        r2 = virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $z1 = r2 instanceof androidx.camera.video.FileDescriptorOutputOptions;

        if $z1 == 0 goto label02;

        $r12 = (androidx.camera.video.FileDescriptorOutputOptions) r2;

        $r13 = virtualinvoke $r12.<androidx.camera.video.FileDescriptorOutputOptions: android.os.ParcelFileDescriptor getParcelFileDescriptor()>();

        r20 = virtualinvoke $r13.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

        goto label03;

     label02:
        r20 = null;

     label03:
        $r5 = r0.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard>;

        virtualinvoke $r5.<androidx.camera.core.impl.utils.CloseGuardHelper: void open(java.lang.String)>("finalizeRecording");

        r3 = dynamicinvoke "get" <androidx.camera.video.Recorder$RecordingRecord$MediaMuxerSupplier (androidx.camera.video.OutputOptions,android.os.ParcelFileDescriptor)>(r2, r20) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: android.media.MediaMuxer __METHODTYPE__(int,androidx.core.util.Consumer), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder$RecordingRecord: android.media.MediaMuxer lambda$initializeRecording$1(androidx.camera.video.OutputOptions,android.os.ParcelFileDescriptor,int,androidx.core.util.Consumer)>, methodtype: android.media.MediaMuxer __METHODTYPE__(int,androidx.core.util.Consumer));

        $r6 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mMediaMuxerSupplier>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r3);

        r21 = null;

        $z2 = virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: boolean hasAudioEnabled()>();

        if $z2 == 0 goto label05;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 31 goto label04;

        $r10 = new androidx.camera.video.Recorder$RecordingRecord$1;

        specialinvoke $r10.<androidx.camera.video.Recorder$RecordingRecord$1: void <init>(androidx.camera.video.Recorder$RecordingRecord,android.content.Context)>(r0, r1);

        r22 = $r10;

        $r11 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mAudioSourceSupplier>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r22);

        goto label05;

     label04:
        $r8 = new androidx.camera.video.Recorder$RecordingRecord$2;

        specialinvoke $r8.<androidx.camera.video.Recorder$RecordingRecord$2: void <init>(androidx.camera.video.Recorder$RecordingRecord)>(r0);

        r23 = $r8;

        $r9 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mAudioSourceSupplier>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r23);

     label05:
        $z4 = r2 instanceof androidx.camera.video.MediaStoreOutputOptions;

        if $z4 == 0 goto label08;

        r24 = (androidx.camera.video.MediaStoreOutputOptions) r2;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 29 goto label06;

        r21 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.video.MediaStoreOutputOptions)>(r24) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder$RecordingRecord: void lambda$initializeRecording$2(androidx.camera.video.MediaStoreOutputOptions,android.net.Uri)>, methodtype: void __METHODTYPE__(android.net.Uri));

        goto label07;

     label06:
        r21 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.video.MediaStoreOutputOptions,android.content.Context)>(r24, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder$RecordingRecord: void lambda$initializeRecording$4(androidx.camera.video.MediaStoreOutputOptions,android.content.Context,android.net.Uri)>, methodtype: void __METHODTYPE__(android.net.Uri));

     label07:
        goto label09;

     label08:
        $z3 = r2 instanceof androidx.camera.video.FileDescriptorOutputOptions;

        if $z3 == 0 goto label09;

        r21 = dynamicinvoke "accept" <androidx.core.util.Consumer (android.os.ParcelFileDescriptor)>(r20) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder$RecordingRecord: void lambda$initializeRecording$5(android.os.ParcelFileDescriptor,android.net.Uri)>, methodtype: void __METHODTYPE__(android.net.Uri));

     label09:
        if r21 == null goto label10;

        $r7 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mRecordingFinalizer>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r21);

     label10:
        return;
    }

    void updateVideoRecordEvent(androidx.camera.video.VideoRecordEvent)
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        androidx.camera.video.VideoRecordEvent r1;
        androidx.camera.video.OutputOptions $r2, $r3, $r21, $r24;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r5, $r8, $r12, $r13, $r17, $r19, $r20, $r22, $r23, $r25, $r26;
        java.lang.Class $r6;
        java.lang.String $r7, $r15, $r16, $r27, r29;
        androidx.core.util.Consumer $r9;
        java.util.concurrent.Executor $r10, $r31;
        java.lang.Runnable $r11;
        java.lang.Object[] $r14;
        int $i0;
        java.lang.AssertionError $r18;
        java.lang.Throwable $r28, r32;
        androidx.camera.video.VideoRecordEvent$Finalize r30;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

        r1 := @parameter0: androidx.camera.video.VideoRecordEvent;

        $r2 = virtualinvoke r1.<androidx.camera.video.VideoRecordEvent: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r3 = virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label1;

        $r18 = new java.lang.AssertionError;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to update event listener with event from incorrect recording [Recording: ");

        $r21 = virtualinvoke r1.<androidx.camera.video.VideoRecordEvent: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Expected: ");

        $r24 = virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.video.OutputOptions getOutputOptions()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r27);

        throw $r18;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending VideoRecordEvent ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r29 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = r1 instanceof androidx.camera.video.VideoRecordEvent$Finalize;

        if $z1 == 0 goto label2;

        r30 = (androidx.camera.video.VideoRecordEvent$Finalize) r1;

        $z2 = virtualinvoke r30.<androidx.camera.video.VideoRecordEvent$Finalize: boolean hasError()>();

        if $z2 == 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r14 = newarray (java.lang.Object)[1];

        $i0 = virtualinvoke r30.<androidx.camera.video.VideoRecordEvent$Finalize: int getError()>();

        $r15 = staticinvoke <androidx.camera.video.VideoRecordEvent$Finalize: java.lang.String errorToString(int)>($i0);

        $r14[0] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(" [error: %s]", $r14);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        r29 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", r29);

        $r31 = virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.Executor getCallbackExecutor()>();

        if $r31 == null goto label6;

        $r9 = virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: androidx.core.util.Consumer getEventListener()>();

        if $r9 == null goto label6;

     label3:
        $r10 = virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.Executor getCallbackExecutor()>();

        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.video.Recorder$RecordingRecord,androidx.camera.video.VideoRecordEvent)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.video.Recorder$RecordingRecord: void lambda$updateVideoRecordEvent$6(androidx.camera.video.VideoRecordEvent)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

     label4:
        goto label6;

     label5:
        $r28 := @caughtexception;

        r32 = $r28;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Recorder", "The callback executor is invalid.", r32);

     label6:
        return;

        catch java.util.concurrent.RejectedExecutionException from label3 to label4 with label5;
    }

    androidx.camera.video.internal.AudioSource performOneTimeAudioSourceCreation(androidx.camera.video.internal.AudioSource$Settings, java.util.concurrent.Executor) throws androidx.camera.video.internal.AudioSourceAccessException
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        androidx.camera.video.internal.AudioSource$Settings r1;
        java.util.concurrent.Executor r2;
        androidx.camera.video.Recorder$RecordingRecord$AudioSourceSupplier r3;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        androidx.camera.video.internal.AudioSource $r6;
        java.lang.AssertionError $r7, $r12;
        java.lang.StringBuilder $r8, $r9, $r10, $r13, $r14, $r15;
        java.lang.String $r11, $r16;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

        r1 := @parameter0: androidx.camera.video.internal.AudioSource$Settings;

        r2 := @parameter1: java.util.concurrent.Executor;

        $z0 = virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: boolean hasAudioEnabled()>();

        if $z0 != 0 goto label1;

        $r12 = new java.lang.AssertionError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recording does not have audio enabled. Unable to create audio source for recording ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r12;

     label1:
        $r4 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mAudioSourceSupplier>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r3 = (androidx.camera.video.Recorder$RecordingRecord$AudioSourceSupplier) $r5;

        if r3 != null goto label2;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("One-time audio source creation has already occurred for recording ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r7;

     label2:
        $r6 = interfaceinvoke r3.<androidx.camera.video.Recorder$RecordingRecord$AudioSourceSupplier: androidx.camera.video.internal.AudioSource get(androidx.camera.video.internal.AudioSource$Settings,java.util.concurrent.Executor)>(r1, r2);

        return $r6;
    }

    android.media.MediaMuxer performOneTimeMediaMuxerCreation(int, androidx.core.util.Consumer) throws java.io.IOException
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        int i0;
        androidx.core.util.Consumer r1;
        androidx.camera.video.Recorder$RecordingRecord$MediaMuxerSupplier r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        android.media.MediaMuxer $r6;
        java.lang.AssertionError $r7, $r12;
        java.lang.StringBuilder $r8, $r9, $r10, $r13, $r14, $r15, $r16;
        java.lang.String $r11, $r17;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.core.util.Consumer;

        $r3 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicBoolean mInitialized>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        $r12 = new java.lang.AssertionError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recording ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has not been initialized");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r17);

        throw $r12;

     label1:
        $r4 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mMediaMuxerSupplier>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r2 = (androidx.camera.video.Recorder$RecordingRecord$MediaMuxerSupplier) $r5;

        if r2 != null goto label2;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("One-time media muxer creation has already occurred for recording ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r7;

     label2:
        $r6 = interfaceinvoke r2.<androidx.camera.video.Recorder$RecordingRecord$MediaMuxerSupplier: android.media.MediaMuxer get(int,androidx.core.util.Consumer)>(i0, r1);

        return $r6;
    }

    void finalizeRecording(android.net.Uri)
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        android.net.Uri r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.lang.Object $r4;
        androidx.core.util.Consumer $r5;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

        r1 := @parameter0: android.net.Uri;

        $r2 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicBoolean mInitialized>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mRecordingFinalizer>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        $r5 = (androidx.core.util.Consumer) $r4;

        specialinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: void finalizeRecordingInternal(androidx.core.util.Consumer,android.net.Uri)>($r5, r1);

        return;
    }

    public void close()
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        android.net.Uri $r1;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

        $r1 = <android.net.Uri: android.net.Uri EMPTY>;

        virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: void finalizeRecording(android.net.Uri)>($r1);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        androidx.core.util.Consumer r1;
        java.lang.Throwable r2, $r7;
        androidx.camera.core.impl.utils.CloseGuardHelper $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        android.net.Uri $r6;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

     label1:
        $r3 = r0.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard>;

        virtualinvoke $r3.<androidx.camera.core.impl.utils.CloseGuardHelper: void warnIfOpen()>();

        $r4 = r0.<androidx.camera.video.Recorder$RecordingRecord: java.util.concurrent.atomic.AtomicReference mRecordingFinalizer>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r1 = (androidx.core.util.Consumer) $r5;

        if r1 == null goto label2;

        $r6 = <android.net.Uri: android.net.Uri EMPTY>;

        specialinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: void finalizeRecordingInternal(androidx.core.util.Consumer,android.net.Uri)>(r1, $r6);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void finalizeRecordingInternal(androidx.core.util.Consumer, android.net.Uri)
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        androidx.core.util.Consumer r1;
        android.net.Uri r2;
        androidx.camera.core.impl.utils.CloseGuardHelper $r3;
        java.lang.AssertionError $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

        r1 := @parameter0: androidx.core.util.Consumer;

        r2 := @parameter1: android.net.Uri;

        if r1 != null goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recording ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has already been finalized");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;

     label1:
        $r3 = r0.<androidx.camera.video.Recorder$RecordingRecord: androidx.camera.core.impl.utils.CloseGuardHelper mCloseGuard>;

        virtualinvoke $r3.<androidx.camera.core.impl.utils.CloseGuardHelper: void close()>();

        interfaceinvoke r1.<androidx.core.util.Consumer: void accept(java.lang.Object)>(r2);

        return;
    }

    private void lambda$updateVideoRecordEvent$6(androidx.camera.video.VideoRecordEvent)
    {
        androidx.camera.video.Recorder$RecordingRecord r0;
        androidx.camera.video.VideoRecordEvent r1;
        androidx.core.util.Consumer $r2;

        r0 := @this: androidx.camera.video.Recorder$RecordingRecord;

        r1 := @parameter0: androidx.camera.video.VideoRecordEvent;

        $r2 = virtualinvoke r0.<androidx.camera.video.Recorder$RecordingRecord: androidx.core.util.Consumer getEventListener()>();

        interfaceinvoke $r2.<androidx.core.util.Consumer: void accept(java.lang.Object)>(r1);

        return;
    }

    private static void lambda$initializeRecording$5(android.os.ParcelFileDescriptor, android.net.Uri)
    {
        android.os.ParcelFileDescriptor r0;
        android.net.Uri r1;
        java.lang.Throwable r2, $r3;

        r0 := @parameter0: android.os.ParcelFileDescriptor;

        r1 := @parameter1: android.net.Uri;

     label1:
        virtualinvoke r0.<android.os.ParcelFileDescriptor: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("Recorder", "Failed to close dup\'d ParcelFileDescriptor", r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void lambda$initializeRecording$4(androidx.camera.video.MediaStoreOutputOptions, android.content.Context, android.net.Uri)
    {
        androidx.camera.video.MediaStoreOutputOptions r0;
        android.content.Context r1;
        android.net.Uri r2, $r4;
        java.lang.String r3, $r9;
        boolean $z0;
        android.content.ContentResolver $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String[] $r10;
        android.media.MediaScannerConnection$OnScanCompletedListener $r11;

        r0 := @parameter0: androidx.camera.video.MediaStoreOutputOptions;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: android.net.Uri;

        $r4 = <android.net.Uri: android.net.Uri EMPTY>;

        $z0 = virtualinvoke r2.<android.net.Uri: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = virtualinvoke r0.<androidx.camera.video.MediaStoreOutputOptions: android.content.ContentResolver getContentResolver()>();

        r3 = staticinvoke <androidx.camera.video.internal.utils.OutputUtil: java.lang.String getAbsolutePathFromUri(android.content.ContentResolver,android.net.Uri,java.lang.String)>($r5, r2, "_data");

        if r3 == null goto label2;

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = r3;

        $r11 = dynamicinvoke "onScanCompleted" <android.media.MediaScannerConnection$OnScanCompletedListener ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.String,android.net.Uri), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.video.Recorder$RecordingRecord: void lambda$initializeRecording$3(java.lang.String,android.net.Uri)>, methodtype: void __METHODTYPE__(java.lang.String,android.net.Uri));

        staticinvoke <android.media.MediaScannerConnection: void scanFile(android.content.Context,java.lang.String[],java.lang.String[],android.media.MediaScannerConnection$OnScanCompletedListener)>(r1, $r10, null, $r11);

        goto label3;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping media scanner scan. Unable to retrieve file path from URI: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r9);

     label3:
        return;
    }

    private static void lambda$initializeRecording$3(java.lang.String, android.net.Uri)
    {
        java.lang.String r0, $r3, $r5;
        android.net.Uri r1;
        java.lang.Object[] $r2, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.Uri;

        if r1 != null goto label1;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r0;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("File scanning operation failed [path: %s]", $r4);

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Recorder", $r5);

        goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r2[1] = r1;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("File scan completed successfully [path: %s, URI: %s]", $r2);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Recorder", $r3);

     label2:
        return;
    }

    private static void lambda$initializeRecording$2(androidx.camera.video.MediaStoreOutputOptions, android.net.Uri)
    {
        androidx.camera.video.MediaStoreOutputOptions r0;
        android.net.Uri r1, $r3;
        android.content.ContentValues r2, $r4;
        boolean $z0;
        java.lang.Integer $r5;
        android.content.ContentResolver $r6;

        r0 := @parameter0: androidx.camera.video.MediaStoreOutputOptions;

        r1 := @parameter1: android.net.Uri;

        $r3 = <android.net.Uri: android.net.Uri EMPTY>;

        $z0 = virtualinvoke r1.<android.net.Uri: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        r2 = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_pending", $r5);

        $r6 = virtualinvoke r0.<androidx.camera.video.MediaStoreOutputOptions: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r6.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(r1, r2, null, null);

        return;
    }

    private static android.media.MediaMuxer lambda$initializeRecording$1(androidx.camera.video.OutputOptions, android.os.ParcelFileDescriptor, int, androidx.core.util.Consumer) throws java.io.IOException
    {
        androidx.camera.video.OutputOptions r0;
        android.os.ParcelFileDescriptor r1, r46;
        int i0, $i1, $i2, $i3;
        androidx.core.util.Consumer r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r19, $r20, $r21, $r24, $r25, $r26, $r34, $r35, $r37;
        java.lang.Class $r6;
        java.lang.String $r7, $r9, $r22, $r27, $r33, $r36, $r38, r45;
        android.content.ContentValues $r10, $r11, r44;
        android.content.ContentResolver $r12, $r14, $r16;
        android.net.Uri $r13, r39;
        java.io.FileDescriptor $r15, $r31;
        java.io.File $r17, r41;
        android.media.MediaMuxer $r18, $r32, r42;
        java.io.IOException $r23, $r28, $r30;
        java.lang.Integer $r29;
        androidx.camera.video.FileOutputOptions r40;
        androidx.camera.video.MediaStoreOutputOptions r43;

        r0 := @parameter0: androidx.camera.video.OutputOptions;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        i0 := @parameter2: int;

        r2 := @parameter3: androidx.core.util.Consumer;

        r39 = <android.net.Uri: android.net.Uri EMPTY>;

        $z0 = r0 instanceof androidx.camera.video.FileOutputOptions;

        if $z0 == 0 goto label02;

        r40 = (androidx.camera.video.FileOutputOptions) r0;

        r41 = virtualinvoke r40.<androidx.camera.video.FileOutputOptions: java.io.File getFile()>();

        $z4 = staticinvoke <androidx.camera.video.internal.utils.OutputUtil: boolean createParentFolder(java.io.File)>(r41);

        if $z4 != 0 goto label01;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create folder for ");

        $r36 = virtualinvoke r41.<java.io.File: java.lang.String getAbsolutePath()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("Recorder", $r38);

     label01:
        $r32 = new android.media.MediaMuxer;

        $r33 = virtualinvoke r41.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r32.<android.media.MediaMuxer: void <init>(java.lang.String,int)>($r33, i0);

        r42 = $r32;

        r39 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>(r41);

        goto label12;

     label02:
        $z1 = r0 instanceof androidx.camera.video.FileDescriptorOutputOptions;

        if $z1 == 0 goto label04;

        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 < 26 goto label03;

        $r31 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r42 = staticinvoke <androidx.camera.video.internal.compat.Api26Impl: android.media.MediaMuxer createMediaMuxer(java.io.FileDescriptor,int)>($r31, i0);

        goto label12;

     label03:
        $r30 = new java.io.IOException;

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>("MediaMuxer doesn\'t accept FileDescriptor as output destination.");

        throw $r30;

     label04:
        $z2 = r0 instanceof androidx.camera.video.MediaStoreOutputOptions;

        if $z2 == 0 goto label11;

        r43 = (androidx.camera.video.MediaStoreOutputOptions) r0;

        $r10 = new android.content.ContentValues;

        $r11 = virtualinvoke r43.<androidx.camera.video.MediaStoreOutputOptions: android.content.ContentValues getContentValues()>();

        specialinvoke $r10.<android.content.ContentValues: void <init>(android.content.ContentValues)>($r11);

        r44 = $r10;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 29 goto label05;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r44.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_pending", $r29);

     label05:
        $r12 = virtualinvoke r43.<androidx.camera.video.MediaStoreOutputOptions: android.content.ContentResolver getContentResolver()>();

        $r13 = virtualinvoke r43.<androidx.camera.video.MediaStoreOutputOptions: android.net.Uri getCollectionUri()>();

        r39 = virtualinvoke $r12.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r13, r44);

        if r39 != null goto label06;

        $r28 = new java.io.IOException;

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>("Unable to create MediaStore entry.");

        throw $r28;

     label06:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 >= 26 goto label09;

        $r16 = virtualinvoke r43.<androidx.camera.video.MediaStoreOutputOptions: android.content.ContentResolver getContentResolver()>();

        r45 = staticinvoke <androidx.camera.video.internal.utils.OutputUtil: java.lang.String getAbsolutePathFromUri(android.content.ContentResolver,android.net.Uri,java.lang.String)>($r16, r39, "_data");

        if r45 != null goto label07;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get path from uri ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label07:
        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>(r45);

        $z3 = staticinvoke <androidx.camera.video.internal.utils.OutputUtil: boolean createParentFolder(java.io.File)>($r17);

        if $z3 != 0 goto label08;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create folder for ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("Recorder", $r22);

     label08:
        $r18 = new android.media.MediaMuxer;

        specialinvoke $r18.<android.media.MediaMuxer: void <init>(java.lang.String,int)>(r45, i0);

        r42 = $r18;

        goto label10;

     label09:
        $r14 = virtualinvoke r43.<androidx.camera.video.MediaStoreOutputOptions: android.content.ContentResolver getContentResolver()>();

        r46 = virtualinvoke $r14.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>(r39, "rw");

        $r15 = virtualinvoke r46.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r42 = staticinvoke <androidx.camera.video.internal.compat.Api26Impl: android.media.MediaMuxer createMediaMuxer(java.io.FileDescriptor,int)>($r15, i0);

        virtualinvoke r46.<android.os.ParcelFileDescriptor: void close()>();

     label10:
        goto label12;

     label11:
        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid output options type: ");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r3;

     label12:
        interfaceinvoke r2.<androidx.core.util.Consumer: void accept(java.lang.Object)>(r39);

        return r42;
    }

    private static void lambda$new$0(android.net.Uri)
    {
        android.net.Uri r0;

        r0 := @parameter0: android.net.Uri;

        return;
    }

androidx.camera.video.Recorder$State
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING>
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_PAUSED>
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State IDLING>
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RECORDING>
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PAUSED>
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State STOPPING>
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RESETTING>
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State ERROR>
<androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State[] $VALUES>
    public static androidx.camera.video.Recorder$State[] values()
    {
        androidx.camera.video.Recorder$State[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.video.Recorder$State[]) $r1;

        return $r2;
    }

    public static androidx.camera.video.Recorder$State valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.video.Recorder$State $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/video/Recorder$State;", r0);

        $r2 = (androidx.camera.video.Recorder$State) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.video.Recorder$State r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.video.Recorder$State;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.video.Recorder$State $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        androidx.camera.video.Recorder$State[] $r9;

        $r0 = new androidx.camera.video.Recorder$State;

        specialinvoke $r0.<androidx.camera.video.Recorder$State: void <init>(java.lang.String,int)>("INITIALIZING", 0);

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING> = $r0;

        $r1 = new androidx.camera.video.Recorder$State;

        specialinvoke $r1.<androidx.camera.video.Recorder$State: void <init>(java.lang.String,int)>("PENDING_RECORDING", 1);

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING> = $r1;

        $r2 = new androidx.camera.video.Recorder$State;

        specialinvoke $r2.<androidx.camera.video.Recorder$State: void <init>(java.lang.String,int)>("PENDING_PAUSED", 2);

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_PAUSED> = $r2;

        $r3 = new androidx.camera.video.Recorder$State;

        specialinvoke $r3.<androidx.camera.video.Recorder$State: void <init>(java.lang.String,int)>("IDLING", 3);

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State IDLING> = $r3;

        $r4 = new androidx.camera.video.Recorder$State;

        specialinvoke $r4.<androidx.camera.video.Recorder$State: void <init>(java.lang.String,int)>("RECORDING", 4);

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RECORDING> = $r4;

        $r5 = new androidx.camera.video.Recorder$State;

        specialinvoke $r5.<androidx.camera.video.Recorder$State: void <init>(java.lang.String,int)>("PAUSED", 5);

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PAUSED> = $r5;

        $r6 = new androidx.camera.video.Recorder$State;

        specialinvoke $r6.<androidx.camera.video.Recorder$State: void <init>(java.lang.String,int)>("STOPPING", 6);

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State STOPPING> = $r6;

        $r7 = new androidx.camera.video.Recorder$State;

        specialinvoke $r7.<androidx.camera.video.Recorder$State: void <init>(java.lang.String,int)>("RESETTING", 7);

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RESETTING> = $r7;

        $r8 = new androidx.camera.video.Recorder$State;

        specialinvoke $r8.<androidx.camera.video.Recorder$State: void <init>(java.lang.String,int)>("ERROR", 8);

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State ERROR> = $r8;

        $r9 = newarray (androidx.camera.video.Recorder$State)[9];

        $r10 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State INITIALIZING>;

        $r9[0] = $r10;

        $r11 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_RECORDING>;

        $r9[1] = $r11;

        $r12 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PENDING_PAUSED>;

        $r9[2] = $r12;

        $r13 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State IDLING>;

        $r9[3] = $r13;

        $r14 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RECORDING>;

        $r9[4] = $r14;

        $r15 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State PAUSED>;

        $r9[5] = $r15;

        $r16 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State STOPPING>;

        $r9[6] = $r16;

        $r17 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State RESETTING>;

        $r9[7] = $r17;

        $r18 = <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State ERROR>;

        $r9[8] = $r18;

        <androidx.camera.video.Recorder$State: androidx.camera.video.Recorder$State[] $VALUES> = $r9;

        return;
    }

