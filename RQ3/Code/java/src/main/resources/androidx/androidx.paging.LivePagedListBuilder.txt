androidx.paging.LivePagedListBuilder
<androidx.paging.LivePagedListBuilder: kotlin.jvm.functions.Function0 pagingSourceFactory>
<androidx.paging.LivePagedListBuilder: androidx.paging.DataSource$Factory dataSourceFactory>
<androidx.paging.LivePagedListBuilder: androidx.paging.PagedList$Config config>
<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineScope coroutineScope>
<androidx.paging.LivePagedListBuilder: java.lang.Object initialLoadKey>
<androidx.paging.LivePagedListBuilder: androidx.paging.PagedList$BoundaryCallback boundaryCallback>
<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineDispatcher fetchDispatcher>
    private static void getConfig$annotations()
    {
        return;
    }

    private static void getCoroutineScope$annotations()
    {
        return;
    }

    private static void getBoundaryCallback$annotations()
    {
        return;
    }

    public void <init>(androidx.paging.DataSource$Factory, androidx.paging.PagedList$Config)
    {
        androidx.paging.LivePagedListBuilder r0;
        androidx.paging.DataSource$Factory r1;
        androidx.paging.PagedList$Config r2;
        java.util.concurrent.Executor r3;
        kotlinx.coroutines.GlobalScope $r4;
        kotlinx.coroutines.CoroutineScope $r5;
        kotlinx.coroutines.CoroutineDispatcher $r6;

        r0 := @this: androidx.paging.LivePagedListBuilder;

        r1 := @parameter0: androidx.paging.DataSource$Factory;

        r2 := @parameter1: androidx.paging.PagedList$Config;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "dataSourceFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "config");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = <kotlinx.coroutines.GlobalScope: kotlinx.coroutines.GlobalScope INSTANCE>;

        $r5 = (kotlinx.coroutines.CoroutineScope) $r4;

        r0.<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineScope coroutineScope> = $r5;

        r3 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor getIOThreadExecutor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "getIOThreadExecutor()");

        $r6 = staticinvoke <kotlinx.coroutines.ExecutorsKt: kotlinx.coroutines.CoroutineDispatcher 'from'(java.util.concurrent.Executor)>(r3);

        r0.<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineDispatcher fetchDispatcher> = $r6;

        r0.<androidx.paging.LivePagedListBuilder: kotlin.jvm.functions.Function0 pagingSourceFactory> = null;

        r0.<androidx.paging.LivePagedListBuilder: androidx.paging.DataSource$Factory dataSourceFactory> = r1;

        r0.<androidx.paging.LivePagedListBuilder: androidx.paging.PagedList$Config config> = r2;

        return;
    }

    public void <init>(androidx.paging.DataSource$Factory, int)
    {
        androidx.paging.LivePagedListBuilder r0;
        androidx.paging.DataSource$Factory r1;
        int i0;
        androidx.paging.PagedList$Config$Builder $r2, $r3;
        androidx.paging.PagedList$Config $r4;

        r0 := @this: androidx.paging.LivePagedListBuilder;

        r1 := @parameter0: androidx.paging.DataSource$Factory;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "dataSourceFactory");

        $r2 = new androidx.paging.PagedList$Config$Builder;

        specialinvoke $r2.<androidx.paging.PagedList$Config$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<androidx.paging.PagedList$Config$Builder: androidx.paging.PagedList$Config$Builder setPageSize(int)>(i0);

        $r4 = virtualinvoke $r3.<androidx.paging.PagedList$Config$Builder: androidx.paging.PagedList$Config build()>();

        specialinvoke r0.<androidx.paging.LivePagedListBuilder: void <init>(androidx.paging.DataSource$Factory,androidx.paging.PagedList$Config)>(r1, $r4);

        return;
    }

    public void <init>(kotlin.jvm.functions.Function0, androidx.paging.PagedList$Config)
    {
        androidx.paging.LivePagedListBuilder r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.paging.PagedList$Config r2;
        java.util.concurrent.Executor r3;
        kotlinx.coroutines.GlobalScope $r4;
        kotlinx.coroutines.CoroutineScope $r5;
        kotlinx.coroutines.CoroutineDispatcher $r6;

        r0 := @this: androidx.paging.LivePagedListBuilder;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        r2 := @parameter1: androidx.paging.PagedList$Config;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "pagingSourceFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "config");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = <kotlinx.coroutines.GlobalScope: kotlinx.coroutines.GlobalScope INSTANCE>;

        $r5 = (kotlinx.coroutines.CoroutineScope) $r4;

        r0.<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineScope coroutineScope> = $r5;

        r3 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor getIOThreadExecutor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "getIOThreadExecutor()");

        $r6 = staticinvoke <kotlinx.coroutines.ExecutorsKt: kotlinx.coroutines.CoroutineDispatcher 'from'(java.util.concurrent.Executor)>(r3);

        r0.<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineDispatcher fetchDispatcher> = $r6;

        r0.<androidx.paging.LivePagedListBuilder: kotlin.jvm.functions.Function0 pagingSourceFactory> = r1;

        r0.<androidx.paging.LivePagedListBuilder: androidx.paging.DataSource$Factory dataSourceFactory> = null;

        r0.<androidx.paging.LivePagedListBuilder: androidx.paging.PagedList$Config config> = r2;

        return;
    }

    public void <init>(kotlin.jvm.functions.Function0, int)
    {
        androidx.paging.LivePagedListBuilder r0;
        kotlin.jvm.functions.Function0 r1;
        int i0;
        androidx.paging.PagedList$Config$Builder $r2, $r3;
        androidx.paging.PagedList$Config $r4;

        r0 := @this: androidx.paging.LivePagedListBuilder;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "pagingSourceFactory");

        $r2 = new androidx.paging.PagedList$Config$Builder;

        specialinvoke $r2.<androidx.paging.PagedList$Config$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<androidx.paging.PagedList$Config$Builder: androidx.paging.PagedList$Config$Builder setPageSize(int)>(i0);

        $r4 = virtualinvoke $r3.<androidx.paging.PagedList$Config$Builder: androidx.paging.PagedList$Config build()>();

        specialinvoke r0.<androidx.paging.LivePagedListBuilder: void <init>(kotlin.jvm.functions.Function0,androidx.paging.PagedList$Config)>(r1, $r4);

        return;
    }

    public final androidx.paging.LivePagedListBuilder setCoroutineScope(kotlinx.coroutines.CoroutineScope)
    {
        androidx.paging.LivePagedListBuilder r0, r2, $r3, $r4;
        kotlinx.coroutines.CoroutineScope r1;
        boolean z0, z1;

        r0 := @this: androidx.paging.LivePagedListBuilder;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "coroutineScope");

        r2 = r0;

        z0 = 0;

        z1 = 0;

        $r3 = (androidx.paging.LivePagedListBuilder) r2;

        $r3.<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineScope coroutineScope> = r1;

        $r4 = (androidx.paging.LivePagedListBuilder) r2;

        return $r4;
    }

    public final androidx.paging.LivePagedListBuilder setInitialLoadKey(java.lang.Object)
    {
        androidx.paging.LivePagedListBuilder r0, r2, $r3, $r4;
        java.lang.Object r1;
        boolean z0, z1;

        r0 := @this: androidx.paging.LivePagedListBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 = r0;

        z0 = 0;

        z1 = 0;

        $r3 = (androidx.paging.LivePagedListBuilder) r2;

        $r3.<androidx.paging.LivePagedListBuilder: java.lang.Object initialLoadKey> = r1;

        $r4 = (androidx.paging.LivePagedListBuilder) r2;

        return $r4;
    }

    public final androidx.paging.LivePagedListBuilder setBoundaryCallback(androidx.paging.PagedList$BoundaryCallback)
    {
        androidx.paging.LivePagedListBuilder r0, r2, $r3, $r4;
        androidx.paging.PagedList$BoundaryCallback r1;
        boolean z0, z1;

        r0 := @this: androidx.paging.LivePagedListBuilder;

        r1 := @parameter0: androidx.paging.PagedList$BoundaryCallback;

        r2 = r0;

        z0 = 0;

        z1 = 0;

        $r3 = (androidx.paging.LivePagedListBuilder) r2;

        $r3.<androidx.paging.LivePagedListBuilder: androidx.paging.PagedList$BoundaryCallback boundaryCallback> = r1;

        $r4 = (androidx.paging.LivePagedListBuilder) r2;

        return $r4;
    }

    public final androidx.paging.LivePagedListBuilder setFetchExecutor(java.util.concurrent.Executor)
    {
        androidx.paging.LivePagedListBuilder r0, r2, $r3, $r5;
        java.util.concurrent.Executor r1;
        boolean z0, z1;
        kotlinx.coroutines.CoroutineDispatcher $r4;

        r0 := @this: androidx.paging.LivePagedListBuilder;

        r1 := @parameter0: java.util.concurrent.Executor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fetchExecutor");

        r2 = r0;

        z0 = 0;

        z1 = 0;

        $r3 = (androidx.paging.LivePagedListBuilder) r2;

        $r4 = staticinvoke <kotlinx.coroutines.ExecutorsKt: kotlinx.coroutines.CoroutineDispatcher 'from'(java.util.concurrent.Executor)>(r1);

        $r3.<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineDispatcher fetchDispatcher> = $r4;

        $r5 = (androidx.paging.LivePagedListBuilder) r2;

        return $r5;
    }

    public final androidx.lifecycle.LiveData build()
    {
        androidx.paging.LivePagedListBuilder r0;
        kotlin.jvm.functions.Function0 r1, r14, $r16;
        androidx.paging.LivePagedList $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        java.lang.Object $r4;
        androidx.paging.PagedList$Config $r5;
        androidx.paging.PagedList$BoundaryCallback $r6;
        kotlinx.coroutines.CoroutineDispatcher $r7, $r8, $r13;
        androidx.lifecycle.LiveData $r9;
        java.lang.IllegalStateException $r10;
        java.lang.String $r11, r17;
        java.lang.Throwable $r12;
        androidx.paging.DataSource$Factory r15;
        boolean $z1, z2, z3, z4;
        java.util.concurrent.Executor r18;

        r0 := @this: androidx.paging.LivePagedListBuilder;

        r14 = r0.<androidx.paging.LivePagedListBuilder: kotlin.jvm.functions.Function0 pagingSourceFactory>;

        if r14 != null goto label2;

        r15 = r0.<androidx.paging.LivePagedListBuilder: androidx.paging.DataSource$Factory dataSourceFactory>;

        if r15 != null goto label1;

        $r16 = null;

        goto label3;

     label1:
        $r13 = r0.<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineDispatcher fetchDispatcher>;

        $r16 = virtualinvoke r15.<androidx.paging.DataSource$Factory: kotlin.jvm.functions.Function0 asPagingSourceFactory(kotlinx.coroutines.CoroutineDispatcher)>($r13);

        goto label3;

     label2:
        $r16 = r14;

     label3:
        r1 = $r16;

        if r1 == null goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        z2 = $z1;

        z3 = 0;

        z4 = 0;

        if z2 != 0 goto label6;

        r17 = "LivePagedList cannot be built without a PagingSourceFactory or DataSource.Factory";

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        $r12 = (java.lang.Throwable) $r10;

        throw $r12;

     label6:
        $r2 = new androidx.paging.LivePagedList;

        $r3 = r0.<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineScope coroutineScope>;

        $r4 = r0.<androidx.paging.LivePagedListBuilder: java.lang.Object initialLoadKey>;

        $r5 = r0.<androidx.paging.LivePagedListBuilder: androidx.paging.PagedList$Config config>;

        $r6 = r0.<androidx.paging.LivePagedListBuilder: androidx.paging.PagedList$BoundaryCallback boundaryCallback>;

        r18 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor getMainThreadExecutor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r18, "getMainThreadExecutor()");

        $r7 = staticinvoke <kotlinx.coroutines.ExecutorsKt: kotlinx.coroutines.CoroutineDispatcher 'from'(java.util.concurrent.Executor)>(r18);

        $r8 = r0.<androidx.paging.LivePagedListBuilder: kotlinx.coroutines.CoroutineDispatcher fetchDispatcher>;

        specialinvoke $r2.<androidx.paging.LivePagedList: void <init>(kotlinx.coroutines.CoroutineScope,java.lang.Object,androidx.paging.PagedList$Config,androidx.paging.PagedList$BoundaryCallback,kotlin.jvm.functions.Function0,kotlinx.coroutines.CoroutineDispatcher,kotlinx.coroutines.CoroutineDispatcher)>($r3, $r4, $r5, $r6, r1, $r7, $r8);

        $r9 = (androidx.lifecycle.LiveData) $r2;

        return $r9;
    }

