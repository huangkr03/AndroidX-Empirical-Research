io.grpc.okhttp.OkHttpClientStream
<io.grpc.okhttp.OkHttpClientStream: okio.Buffer EMPTY_BUFFER>
<io.grpc.okhttp.OkHttpClientStream: io.grpc.Attributes attributes>
<io.grpc.okhttp.OkHttpClientStream: java.lang.String authority>
<io.grpc.okhttp.OkHttpClientStream: io.grpc.MethodDescriptor method>
<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$Sink sink>
<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState state>
<io.grpc.okhttp.OkHttpClientStream: io.grpc.internal.StatsTraceContext statsTraceCtx>
<io.grpc.okhttp.OkHttpClientStream: boolean useGet>
<io.grpc.okhttp.OkHttpClientStream: java.lang.String userAgent>
    static volatile java.lang.String '-$$Nest$fgetauthority'(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        java.lang.String r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream: java.lang.String authority>;

        return r1;
    }

    static volatile io.grpc.MethodDescriptor '-$$Nest$fgetmethod'(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.MethodDescriptor r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.MethodDescriptor method>;

        return r1;
    }

    static volatile io.grpc.okhttp.OkHttpClientStream$TransportState '-$$Nest$fgetstate'(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.okhttp.OkHttpClientStream$TransportState r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState state>;

        return r1;
    }

    static volatile io.grpc.internal.StatsTraceContext '-$$Nest$fgetstatsTraceCtx'(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.internal.StatsTraceContext r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.internal.StatsTraceContext statsTraceCtx>;

        return r1;
    }

    static volatile boolean '-$$Nest$fgetuseGet'(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        boolean z0;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        z0 = $r0.<io.grpc.okhttp.OkHttpClientStream: boolean useGet>;

        return z0;
    }

    static volatile java.lang.String '-$$Nest$fgetuserAgent'(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        java.lang.String r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream: java.lang.String userAgent>;

        return r1;
    }

    static volatile void '-$$Nest$fputuseGet'(io.grpc.okhttp.OkHttpClientStream, boolean)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        boolean $z0;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $z0 := @parameter1: boolean;

        $r0.<io.grpc.okhttp.OkHttpClientStream: boolean useGet> = $z0;

        return;
    }

    static volatile okio.Buffer '-$$Nest$sfgetEMPTY_BUFFER'()
    {
        okio.Buffer r0;

        r0 = <io.grpc.okhttp.OkHttpClientStream: okio.Buffer EMPTY_BUFFER>;

        return r0;
    }

    static void <clinit>()
    {
        okio.Buffer $r0;

        $r0 = new okio.Buffer;

        specialinvoke $r0.<okio.Buffer: void <init>()>();

        <io.grpc.okhttp.OkHttpClientStream: okio.Buffer EMPTY_BUFFER> = $r0;

        return;
    }

    void <init>(io.grpc.MethodDescriptor, io.grpc.Metadata, io.grpc.okhttp.ExceptionHandlingFrameWriter, io.grpc.okhttp.OkHttpClientTransport, io.grpc.okhttp.OutboundFlowController, java.lang.Object, int, int, java.lang.String, java.lang.String, io.grpc.internal.StatsTraceContext, io.grpc.internal.TransportTracer, io.grpc.CallOptions, boolean)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.MethodDescriptor $r1;
        io.grpc.Metadata $r2;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r3;
        io.grpc.okhttp.OkHttpClientTransport $r4;
        io.grpc.okhttp.OutboundFlowController $r5;
        java.lang.Object $r6, $r15;
        int $i0, $i1;
        java.lang.String $r7, $r8;
        io.grpc.internal.StatsTraceContext $r9, $r16;
        io.grpc.internal.TransportTracer $r10;
        io.grpc.CallOptions $r11;
        boolean $z0;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r12;
        io.grpc.okhttp.OkHttpWritableBufferAllocator $r13;
        io.grpc.okhttp.OkHttpClientStream$Sink $r14;
        io.grpc.Attributes $r17;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        $r1 := @parameter0: io.grpc.MethodDescriptor;

        $r2 := @parameter1: io.grpc.Metadata;

        $r3 := @parameter2: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $r4 := @parameter3: io.grpc.okhttp.OkHttpClientTransport;

        $r5 := @parameter4: io.grpc.okhttp.OutboundFlowController;

        $r6 := @parameter5: java.lang.Object;

        $i0 := @parameter6: int;

        $i1 := @parameter7: int;

        $r7 := @parameter8: java.lang.String;

        $r8 := @parameter9: java.lang.String;

        $r9 := @parameter10: io.grpc.internal.StatsTraceContext;

        $r10 := @parameter11: io.grpc.internal.TransportTracer;

        $r11 := @parameter12: io.grpc.CallOptions;

        $z0 := @parameter13: boolean;

        $r13 = new io.grpc.okhttp.OkHttpWritableBufferAllocator;

        specialinvoke $r13.<io.grpc.okhttp.OkHttpWritableBufferAllocator: void <init>()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<io.grpc.MethodDescriptor: boolean isSafe()>();

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke $r0.<io.grpc.internal.AbstractClientStream: void <init>(io.grpc.internal.WritableBufferAllocator,io.grpc.internal.StatsTraceContext,io.grpc.internal.TransportTracer,io.grpc.Metadata,io.grpc.CallOptions,boolean)>($r13, $r9, $r10, $r2, $r11, $z0);

        $r14 = new io.grpc.okhttp.OkHttpClientStream$Sink;

        specialinvoke $r14.<io.grpc.okhttp.OkHttpClientStream$Sink: void <init>(io.grpc.okhttp.OkHttpClientStream)>($r0);

        $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$Sink sink> = $r14;

        $r0.<io.grpc.okhttp.OkHttpClientStream: boolean useGet> = 0;

        $r15 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r9, "statsTraceCtx");

        $r16 = (io.grpc.internal.StatsTraceContext) $r15;

        $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.internal.StatsTraceContext statsTraceCtx> = $r16;

        $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.MethodDescriptor method> = $r1;

        $r0.<io.grpc.okhttp.OkHttpClientStream: java.lang.String authority> = $r7;

        $r0.<io.grpc.okhttp.OkHttpClientStream: java.lang.String userAgent> = $r8;

        $r17 = virtualinvoke $r4.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Attributes getAttributes()>();

        $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.Attributes attributes> = $r17;

        $r12 = new io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r7 = virtualinvoke $r1.<io.grpc.MethodDescriptor: java.lang.String getFullMethodName()>();

        specialinvoke $r12.<io.grpc.okhttp.OkHttpClientStream$TransportState: void <init>(io.grpc.okhttp.OkHttpClientStream,int,io.grpc.internal.StatsTraceContext,java.lang.Object,io.grpc.okhttp.ExceptionHandlingFrameWriter,io.grpc.okhttp.OutboundFlowController,io.grpc.okhttp.OkHttpClientTransport,int,java.lang.String)>($r0, $i0, $r9, $r6, $r3, $r5, $r4, $i1, $r7);

        $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState state> = $r12;

        return;
    }

    static void access$000(io.grpc.okhttp.OkHttpClientStream, int)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        int $i0;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $i0 := @parameter1: int;

        virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream: void onSendingBytes(int)>($i0);

        return;
    }

    static io.grpc.internal.TransportTracer access$100(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.internal.TransportTracer $r0;
        io.grpc.okhttp.OkHttpClientStream $r1;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $r0 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientStream: io.grpc.internal.TransportTracer getTransportTracer()>();

        return $r0;
    }

    static io.grpc.internal.TransportTracer access$200(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.internal.TransportTracer $r0;
        io.grpc.okhttp.OkHttpClientStream $r1;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $r0 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientStream: io.grpc.internal.TransportTracer getTransportTracer()>();

        return $r0;
    }

    protected volatile io.grpc.internal.AbstractClientStream$Sink abstractClientStreamSink()
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.okhttp.OkHttpClientStream$Sink $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        $r1 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$Sink abstractClientStreamSink()>();

        return $r1;
    }

    protected io.grpc.okhttp.OkHttpClientStream$Sink abstractClientStreamSink()
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.okhttp.OkHttpClientStream$Sink r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$Sink sink>;

        return r1;
    }

    public io.grpc.Attributes getAttributes()
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.Attributes r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.Attributes attributes>;

        return r1;
    }

    public io.grpc.MethodDescriptor$MethodType getType()
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.MethodDescriptor$MethodType $r1;
        io.grpc.MethodDescriptor $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.MethodDescriptor method>;

        $r1 = virtualinvoke $r2.<io.grpc.MethodDescriptor: io.grpc.MethodDescriptor$MethodType getType()>();

        return $r1;
    }

    public void setAuthority(java.lang.String)
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        $r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "authority");

        $r2 = (java.lang.String) $r1;

        $r0.<io.grpc.okhttp.OkHttpClientStream: java.lang.String authority> = $r2;

        return;
    }

    protected volatile io.grpc.internal.AbstractClientStream$TransportState transportState()
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        $r1 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        return $r1;
    }

    protected volatile io.grpc.internal.AbstractStream$TransportState transportState()
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        $r1 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        return $r1;
    }

    protected io.grpc.okhttp.OkHttpClientStream$TransportState transportState()
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        io.grpc.okhttp.OkHttpClientStream$TransportState r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState state>;

        return r1;
    }

    boolean useGet()
    {
        io.grpc.okhttp.OkHttpClientStream $r0;
        boolean z0;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream;

        z0 = $r0.<io.grpc.okhttp.OkHttpClientStream: boolean useGet>;

        return z0;
    }

io.grpc.okhttp.OkHttpClientStream$Sink
<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>
    void <init>(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientStream$Sink $r0;
        io.grpc.okhttp.OkHttpClientStream $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$Sink;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void cancel(io.grpc.Status)
    {
        io.grpc.okhttp.OkHttpClientStream$Sink $r0;
        io.grpc.Status $r1;
        io.grpc.okhttp.OkHttpClientStream $r2;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r3;
        java.lang.Object $r4;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$Sink;

        $r1 := @parameter0: io.grpc.Status;

        staticinvoke <io.perfmark.PerfMark: void startTask(java.lang.String)>("OkHttpClientStream$Sink.cancel");

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r3 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState '-$$Nest$fgetstate'(io.grpc.okhttp.OkHttpClientStream)>($r2);

        $r4 = staticinvoke <io.grpc.okhttp.OkHttpClientStream$TransportState: java.lang.Object '-$$Nest$fgetlock'(io.grpc.okhttp.OkHttpClientStream$TransportState)>($r3);

        entermonitor $r4;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r3 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState '-$$Nest$fgetstate'(io.grpc.okhttp.OkHttpClientStream)>($r2);

        staticinvoke <io.grpc.okhttp.OkHttpClientStream$TransportState: void '-$$Nest$mcancel'(io.grpc.okhttp.OkHttpClientStream$TransportState,io.grpc.Status,boolean,io.grpc.Metadata)>($r3, $r1, 1, null);

        exitmonitor $r4;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("OkHttpClientStream$Sink.cancel");

        return;
    }

    public void writeFrame(io.grpc.internal.WritableBuffer, boolean, boolean, int)
    {
        io.grpc.okhttp.OkHttpClientStream$Sink $r0;
        boolean $z0, $z1;
        int $i0, $i2;
        io.grpc.internal.WritableBuffer $r1;
        okio.Buffer $r2, $r4;
        io.grpc.okhttp.OkHttpWritableBuffer $r3;
        long $l1;
        io.grpc.okhttp.OkHttpClientStream $r5;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r6;
        java.lang.Object $r7;
        io.grpc.internal.TransportTracer $r8;
        java.lang.Throwable $r9, $r10;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$Sink;

        $r1 := @parameter0: io.grpc.internal.WritableBuffer;

        $z1 := @parameter1: boolean;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        staticinvoke <io.perfmark.PerfMark: void startTask(java.lang.String)>("OkHttpClientStream$Sink.writeFrame");

        if $r1 != null goto label1;

        $r2 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: okio.Buffer '-$$Nest$sfgetEMPTY_BUFFER'()>();

        goto label2;

     label1:
        $r3 = (io.grpc.okhttp.OkHttpWritableBuffer) $r1;

        $r4 = virtualinvoke $r3.<io.grpc.okhttp.OkHttpWritableBuffer: okio.Buffer buffer()>();

        $r2 = $r4;

        $l1 = virtualinvoke $r4.<okio.Buffer: long size()>();

        $i2 = (int) $l1;

        if $i2 <= 0 goto label2;

        $r5 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        staticinvoke <io.grpc.okhttp.OkHttpClientStream: void access$000(io.grpc.okhttp.OkHttpClientStream,int)>($r5, $i2);

     label2:
        $r5 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r6 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState '-$$Nest$fgetstate'(io.grpc.okhttp.OkHttpClientStream)>($r5);

        $r7 = staticinvoke <io.grpc.okhttp.OkHttpClientStream$TransportState: java.lang.Object '-$$Nest$fgetlock'(io.grpc.okhttp.OkHttpClientStream$TransportState)>($r6);

     label3:
        entermonitor $r7;

     label4:
        $r5 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r6 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState '-$$Nest$fgetstate'(io.grpc.okhttp.OkHttpClientStream)>($r5);

        staticinvoke <io.grpc.okhttp.OkHttpClientStream$TransportState: void '-$$Nest$msendBuffer'(io.grpc.okhttp.OkHttpClientStream$TransportState,okio.Buffer,boolean,boolean)>($r6, $r2, $z1, $z0);

        $r5 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r8 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.internal.TransportTracer access$100(io.grpc.okhttp.OkHttpClientStream)>($r5);

        virtualinvoke $r8.<io.grpc.internal.TransportTracer: void reportMessageSent(int)>($i0);

     label5:
        exitmonitor $r7;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("OkHttpClientStream$Sink.writeFrame");

        return;

     label6:
        $r9 := @caughtexception;

        exitmonitor $r7;

     label7:
        throw $r9;

     label8:
        $r10 := @caughtexception;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("OkHttpClientStream$Sink.writeFrame");

        throw $r10;

        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void writeHeaders(io.grpc.Metadata, byte[])
    {
        io.grpc.okhttp.OkHttpClientStream$Sink $r0;
        io.grpc.Metadata $r1;
        byte[] $r2;
        io.grpc.okhttp.OkHttpClientStream $r3;
        io.grpc.MethodDescriptor $r4;
        java.lang.String $r5, $r7;
        java.lang.StringBuilder $r6;
        com.google.common.io.BaseEncoding $r8;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r9;
        java.lang.Object $r10;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$Sink;

        $r1 := @parameter0: io.grpc.Metadata;

        $r2 := @parameter1: byte[];

        staticinvoke <io.perfmark.PerfMark: void startTask(java.lang.String)>("OkHttpClientStream$Sink.writeHeaders");

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r4 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.MethodDescriptor '-$$Nest$fgetmethod'(io.grpc.okhttp.OkHttpClientStream)>($r3);

        $r5 = virtualinvoke $r4.<io.grpc.MethodDescriptor: java.lang.String getFullMethodName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = $r5;

        if $r2 == null goto label1;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        staticinvoke <io.grpc.okhttp.OkHttpClientStream: void '-$$Nest$fputuseGet'(io.grpc.okhttp.OkHttpClientStream,boolean)>($r3, 1);

        $r8 = staticinvoke <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding base64()>();

        $r7 = virtualinvoke $r8.<com.google.common.io.BaseEncoding: java.lang.String encode(byte[])>($r2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label1:
        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r9 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState '-$$Nest$fgetstate'(io.grpc.okhttp.OkHttpClientStream)>($r3);

        $r10 = staticinvoke <io.grpc.okhttp.OkHttpClientStream$TransportState: java.lang.Object '-$$Nest$fgetlock'(io.grpc.okhttp.OkHttpClientStream$TransportState)>($r9);

        entermonitor $r10;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$Sink: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r9 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState '-$$Nest$fgetstate'(io.grpc.okhttp.OkHttpClientStream)>($r3);

        staticinvoke <io.grpc.okhttp.OkHttpClientStream$TransportState: void '-$$Nest$mstreamReady'(io.grpc.okhttp.OkHttpClientStream$TransportState,io.grpc.Metadata,java.lang.String)>($r9, $r1, $r7);

        exitmonitor $r10;

        staticinvoke <io.perfmark.PerfMark: void stopTask(java.lang.String)>("OkHttpClientStream$Sink.writeHeaders");

        return;
    }

io.grpc.okhttp.OkHttpClientStream$TransportState
<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean canStart>
<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean cancelSent>
<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean flushPendingData>
<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>
<io.grpc.okhttp.OkHttpClientStream$TransportState: int id>
<io.grpc.okhttp.OkHttpClientStream$TransportState: int initialWindowSize>
<io.grpc.okhttp.OkHttpClientStream$TransportState: java.lang.Object lock>
<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController outboundFlow>
<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController$StreamState outboundFlowState>
<io.grpc.okhttp.OkHttpClientStream$TransportState: okio.Buffer pendingData>
<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean pendingDataHasEndOfStream>
<io.grpc.okhttp.OkHttpClientStream$TransportState: int processedWindow>
<io.grpc.okhttp.OkHttpClientStream$TransportState: java.util.List requestHeaders>
<io.grpc.okhttp.OkHttpClientStream$TransportState: io.perfmark.Tag tag>
<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0>
<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientTransport transport>
<io.grpc.okhttp.OkHttpClientStream$TransportState: int window>
    static volatile java.lang.Object '-$$Nest$fgetlock'(io.grpc.okhttp.OkHttpClientStream$TransportState)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        java.lang.Object r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream$TransportState;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: java.lang.Object lock>;

        return r1;
    }

    static volatile void '-$$Nest$mcancel'(io.grpc.okhttp.OkHttpClientStream$TransportState, io.grpc.Status, boolean, io.grpc.Metadata)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.grpc.Status $r1;
        boolean $z0;
        io.grpc.Metadata $r2;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r1 := @parameter1: io.grpc.Status;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: io.grpc.Metadata;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: void cancel(io.grpc.Status,boolean,io.grpc.Metadata)>($r1, $z0, $r2);

        return;
    }

    static volatile void '-$$Nest$msendBuffer'(io.grpc.okhttp.OkHttpClientStream$TransportState, okio.Buffer, boolean, boolean)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        okio.Buffer $r1;
        boolean $z0, $z1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r1 := @parameter1: okio.Buffer;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: void sendBuffer(okio.Buffer,boolean,boolean)>($r1, $z0, $z1);

        return;
    }

    static volatile void '-$$Nest$mstreamReady'(io.grpc.okhttp.OkHttpClientStream$TransportState, io.grpc.Metadata, java.lang.String)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.grpc.Metadata $r1;
        java.lang.String $r2;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r1 := @parameter1: io.grpc.Metadata;

        $r2 := @parameter2: java.lang.String;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: void streamReady(io.grpc.Metadata,java.lang.String)>($r1, $r2);

        return;
    }

    public void <init>(io.grpc.okhttp.OkHttpClientStream, int, io.grpc.internal.StatsTraceContext, java.lang.Object, io.grpc.okhttp.ExceptionHandlingFrameWriter, io.grpc.okhttp.OutboundFlowController, io.grpc.okhttp.OkHttpClientTransport, int, java.lang.String)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        int $i0, $i1;
        io.grpc.internal.StatsTraceContext $r1;
        java.lang.Object $r2;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r3;
        io.grpc.okhttp.OutboundFlowController $r4;
        io.grpc.okhttp.OkHttpClientTransport $r5;
        java.lang.String $r6;
        io.grpc.okhttp.OkHttpClientStream $r7;
        io.grpc.internal.TransportTracer $r8;
        okio.Buffer $r9;
        io.perfmark.Tag $r10;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r7 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $i0 := @parameter1: int;

        $r1 := @parameter2: io.grpc.internal.StatsTraceContext;

        $r2 := @parameter3: java.lang.Object;

        $r3 := @parameter4: io.grpc.okhttp.ExceptionHandlingFrameWriter;

        $r4 := @parameter5: io.grpc.okhttp.OutboundFlowController;

        $r5 := @parameter6: io.grpc.okhttp.OkHttpClientTransport;

        $i1 := @parameter7: int;

        $r6 := @parameter8: java.lang.String;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0> = $r7;

        $r8 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.internal.TransportTracer access$200(io.grpc.okhttp.OkHttpClientStream)>($r7);

        specialinvoke $r0.<io.grpc.internal.Http2ClientStreamTransportState: void <init>(int,io.grpc.internal.StatsTraceContext,io.grpc.internal.TransportTracer)>($i0, $r1, $r8);

        $r9 = new okio.Buffer;

        specialinvoke $r9.<okio.Buffer: void <init>()>();

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: okio.Buffer pendingData> = $r9;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean pendingDataHasEndOfStream> = 0;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean flushPendingData> = 0;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean cancelSent> = 0;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean canStart> = 1;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id> = -1;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "lock");

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: java.lang.Object lock> = $r2;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter> = $r3;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController outboundFlow> = $r4;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientTransport transport> = $r5;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int window> = $i1;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int processedWindow> = $i1;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int initialWindowSize> = $i1;

        $r10 = staticinvoke <io.perfmark.PerfMark: io.perfmark.Tag createTag(java.lang.String)>($r6);

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.perfmark.Tag tag> = $r10;

        return;
    }

    private void cancel(io.grpc.Status, boolean, io.grpc.Metadata)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.grpc.Status $r1;
        io.grpc.internal.ClientStreamListener$RpcProgress $r2;
        io.grpc.okhttp.internal.framed.ErrorCode $r3;
        int $i0;
        boolean $z0, $z1;
        io.grpc.Metadata $r4;
        io.grpc.okhttp.OkHttpClientTransport $r5;
        io.grpc.okhttp.OkHttpClientStream $r6;
        okio.Buffer $r7;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r1 := @parameter0: io.grpc.Status;

        $z0 := @parameter1: boolean;

        $r4 := @parameter2: io.grpc.Metadata;

        $z1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean cancelSent>;

        if $z1 == 0 goto label1;

        return;

     label1:
        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean cancelSent> = 1;

        $z1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean canStart>;

        if $z1 == 0 goto label4;

        $r5 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientTransport transport>;

        $r6 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0>;

        virtualinvoke $r5.<io.grpc.okhttp.OkHttpClientTransport: void removePendingStream(io.grpc.okhttp.OkHttpClientStream)>($r6);

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: java.util.List requestHeaders> = null;

        $r7 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: okio.Buffer pendingData>;

        virtualinvoke $r7.<okio.Buffer: void clear()>();

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean canStart> = 0;

        if $r4 == null goto label2;

        goto label3;

     label2:
        $r4 = new io.grpc.Metadata;

        specialinvoke $r4.<io.grpc.Metadata: void <init>()>();

     label3:
        virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: void transportReportStatus(io.grpc.Status,boolean,io.grpc.Metadata)>($r1, 1, $r4);

        return;

     label4:
        $r5 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientTransport transport>;

        $i0 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id()>();

        $r2 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress PROCESSED>;

        $r3 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode CANCEL>;

        virtualinvoke $r5.<io.grpc.okhttp.OkHttpClientTransport: void finishStream(int,io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,boolean,io.grpc.okhttp.internal.framed.ErrorCode,io.grpc.Metadata)>($i0, $r1, $r2, $z0, $r3, $r4);

        return;
    }

    private void onEndOfStream()
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.grpc.okhttp.OkHttpClientTransport $r1;
        io.grpc.internal.ClientStreamListener$RpcProgress $r2;
        io.grpc.okhttp.internal.framed.ErrorCode $r3;
        boolean $z0;
        int $i0;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $z0 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean isOutboundClosed()>();

        if $z0 != 0 goto label1;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientTransport transport>;

        $i0 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id()>();

        $r2 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress PROCESSED>;

        $r3 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode CANCEL>;

        virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientTransport: void finishStream(int,io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,boolean,io.grpc.okhttp.internal.framed.ErrorCode,io.grpc.Metadata)>($i0, null, $r2, 0, $r3, null);

        return;

     label1:
        $r1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientTransport transport>;

        $i0 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id()>();

        $r2 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress PROCESSED>;

        virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientTransport: void finishStream(int,io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,boolean,io.grpc.okhttp.internal.framed.ErrorCode,io.grpc.Metadata)>($i0, null, $r2, 0, null, null);

        return;
    }

    private void sendBuffer(okio.Buffer, boolean, boolean)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        boolean $z0, $z1, $z2;
        okio.Buffer $r1, $r2;
        long $l0;
        int $i1;
        io.grpc.okhttp.OutboundFlowController $r3;
        io.grpc.okhttp.OutboundFlowController$StreamState $r4;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r2 := @parameter0: okio.Buffer;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean cancelSent>;

        if $z2 == 0 goto label1;

        return;

     label1:
        $z2 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean canStart>;

        if $z2 == 0 goto label2;

        $l0 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: okio.Buffer pendingData>;

        $i1 = (int) $l0;

        $l0 = (long) $i1;

        virtualinvoke $r1.<okio.Buffer: void write(okio.Buffer,long)>($r2, $l0);

        $z2 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean pendingDataHasEndOfStream>;

        $z0 = $z2 | $z0;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean pendingDataHasEndOfStream> = $z0;

        $z0 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean flushPendingData>;

        $z0 = $z0 | $z1;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean flushPendingData> = $z0;

        return;

     label2:
        $i1 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id()>();

        if $i1 == -1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "streamId should be set");

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController outboundFlow>;

        $r4 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController$StreamState outboundFlowState>;

        virtualinvoke $r3.<io.grpc.okhttp.OutboundFlowController: void data(boolean,io.grpc.okhttp.OutboundFlowController$StreamState,okio.Buffer,boolean)>($z0, $r4, $r2, $z1);

        return;
    }

    private void streamReady(io.grpc.Metadata, java.lang.String)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.grpc.Metadata $r1;
        java.lang.String $r2, $r4, $r5;
        io.grpc.okhttp.OkHttpClientStream $r3;
        boolean $z0, $z1;
        io.grpc.okhttp.OkHttpClientTransport $r6;
        java.util.List $r7;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r1 := @parameter0: io.grpc.Metadata;

        $r2 := @parameter1: java.lang.String;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r4 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: java.lang.String '-$$Nest$fgetauthority'(io.grpc.okhttp.OkHttpClientStream)>($r3);

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r5 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: java.lang.String '-$$Nest$fgetuserAgent'(io.grpc.okhttp.OkHttpClientStream)>($r3);

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0>;

        $z0 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: boolean '-$$Nest$fgetuseGet'(io.grpc.okhttp.OkHttpClientStream)>($r3);

        $r6 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientTransport transport>;

        $z1 = virtualinvoke $r6.<io.grpc.okhttp.OkHttpClientTransport: boolean isUsingPlaintext()>();

        $r7 = staticinvoke <io.grpc.okhttp.Headers: java.util.List createRequestHeaders(io.grpc.Metadata,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($r1, $r2, $r4, $r5, $z0, $z1);

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: java.util.List requestHeaders> = $r7;

        $r6 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientTransport transport>;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0>;

        virtualinvoke $r6.<io.grpc.okhttp.OkHttpClientTransport: void streamReadyToStart(io.grpc.okhttp.OkHttpClientStream)>($r3);

        return;
    }

    public void bytesRead(int)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        int $i0, $i1, $i3;
        float $f0, $f1;
        byte $b2;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r1;
        long $l4;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $i1 := @parameter0: int;

        $i0 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int processedWindow>;

        $i0 = $i0 - $i1;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int processedWindow> = $i0;

        $f0 = (float) $i0;

        $i1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int initialWindowSize>;

        $f1 = (float) $i1;

        $f1 = $f1 * 0.5F;

        $b2 = $f0 cmpg $f1;

        if $b2 > 0 goto label1;

        $i1 = $i1 - $i0;

        $i3 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int window>;

        $i3 = $i3 + $i1;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int window> = $i3;

        $i0 = $i0 + $i1;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int processedWindow> = $i0;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $i0 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id()>();

        $l4 = (long) $i1;

        virtualinvoke $r1.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void windowUpdate(int,long)>($i0, $l4);

     label1:
        return;
    }

    public void deframeFailed(java.lang.Throwable)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.grpc.Metadata $r1;
        io.grpc.Status $r2;
        java.lang.Throwable $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r3 := @parameter0: java.lang.Throwable;

        $r2 = staticinvoke <io.grpc.Status: io.grpc.Status fromThrowable(java.lang.Throwable)>($r3);

        $r1 = new io.grpc.Metadata;

        specialinvoke $r1.<io.grpc.Metadata: void <init>()>();

        virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: void http2ProcessingFailed(io.grpc.Status,boolean,io.grpc.Metadata)>($r2, 1, $r1);

        return;
    }

    public void deframerClosed(boolean)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: void onEndOfStream()>();

        specialinvoke $r0.<io.grpc.internal.Http2ClientStreamTransportState: void deframerClosed(boolean)>($z0);

        return;
    }

    io.grpc.okhttp.OutboundFlowController$StreamState getOutboundFlowState()
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        java.lang.Object $r1;
        io.grpc.okhttp.OutboundFlowController$StreamState r2;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: java.lang.Object lock>;

        entermonitor $r1;

        r2 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController$StreamState outboundFlowState>;

        exitmonitor $r1;

        return r2;
    }

    protected void http2ProcessingFailed(io.grpc.Status, boolean, io.grpc.Metadata)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.grpc.Status $r1;
        boolean $z0;
        io.grpc.Metadata $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r1 := @parameter0: io.grpc.Status;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: io.grpc.Metadata;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: void cancel(io.grpc.Status,boolean,io.grpc.Metadata)>($r1, $z0, $r2);

        return;
    }

    int id()
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        int i0;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        i0 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id>;

        return i0;
    }

    protected void onStreamAllocated()
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.grpc.internal.TransportTracer $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        specialinvoke $r0.<io.grpc.internal.Http2ClientStreamTransportState: void onStreamAllocated()>();

        $r1 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.internal.TransportTracer getTransportTracer()>();

        virtualinvoke $r1.<io.grpc.internal.TransportTracer: void reportLocalStreamStarted()>();

        return;
    }

    public void runOnTransportThread(java.lang.Runnable)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        java.lang.Object $r1;
        java.lang.Runnable $r2;
        java.lang.Throwable $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r2 := @parameter0: java.lang.Runnable;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

     label2:
        exitmonitor $r1;

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor $r1;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void start(int)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0, $r5;
        int $i0, $i1;
        java.util.List $r1;
        boolean $z0, $z1;
        io.grpc.okhttp.OutboundFlowController $r2;
        io.grpc.okhttp.OutboundFlowController$StreamState $r3;
        io.grpc.okhttp.OkHttpClientStream $r4;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r6;
        io.grpc.internal.StatsTraceContext $r7;
        okio.Buffer $r8;
        long $l2;
        byte $b3;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $i0 := @parameter0: int;

        $i1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id>;

        if $i1 != -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,int)>($z0, "the stream has been started with id %s", $i0);

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id> = $i0;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController outboundFlow>;

        $r3 = virtualinvoke $r2.<io.grpc.okhttp.OutboundFlowController: io.grpc.okhttp.OutboundFlowController$StreamState createState(io.grpc.okhttp.OutboundFlowController$Stream,int)>($r0, $i0);

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController$StreamState outboundFlowState> = $r3;

        $r4 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r5 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState '-$$Nest$fgetstate'(io.grpc.okhttp.OkHttpClientStream)>($r4);

        virtualinvoke $r5.<io.grpc.okhttp.OkHttpClientStream$TransportState: void onStreamAllocated()>();

        $z0 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean canStart>;

        if $z0 == 0 goto label4;

        $r6 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $r4 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0>;

        $z0 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: boolean '-$$Nest$fgetuseGet'(io.grpc.okhttp.OkHttpClientStream)>($r4);

        $i0 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id>;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: java.util.List requestHeaders>;

        virtualinvoke $r6.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void synStream(boolean,boolean,int,int,java.util.List)>($z0, 0, $i0, 0, $r1);

        $r4 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientStream this$0>;

        $r7 = staticinvoke <io.grpc.okhttp.OkHttpClientStream: io.grpc.internal.StatsTraceContext '-$$Nest$fgetstatsTraceCtx'(io.grpc.okhttp.OkHttpClientStream)>($r4);

        virtualinvoke $r7.<io.grpc.internal.StatsTraceContext: void clientOutboundHeaders()>();

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: java.util.List requestHeaders> = null;

        $r8 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: okio.Buffer pendingData>;

        $l2 = virtualinvoke $r8.<okio.Buffer: long size()>();

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label3;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController outboundFlow>;

        $z0 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean pendingDataHasEndOfStream>;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController$StreamState outboundFlowState>;

        $r8 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: okio.Buffer pendingData>;

        $z1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean flushPendingData>;

        virtualinvoke $r2.<io.grpc.okhttp.OutboundFlowController: void data(boolean,io.grpc.okhttp.OutboundFlowController$StreamState,okio.Buffer,boolean)>($z0, $r3, $r8, $z1);

     label3:
        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: boolean canStart> = 0;

     label4:
        return;
    }

    io.perfmark.Tag tag()
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.perfmark.Tag r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.perfmark.Tag tag>;

        return r1;
    }

    public void transportDataReceived(okio.Buffer, boolean)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        io.grpc.internal.ClientStreamListener$RpcProgress $r1;
        okio.Buffer $r2;
        boolean $z0;
        long $l0;
        int $i1, $i2;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r3;
        io.grpc.okhttp.internal.framed.ErrorCode $r4;
        io.grpc.okhttp.OkHttpClientTransport $r5;
        io.grpc.Status $r6;
        io.grpc.okhttp.OkHttpReadableBuffer $r7;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r2 := @parameter0: okio.Buffer;

        $z0 := @parameter1: boolean;

        $l0 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $i1 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int window>;

        $i2 = (int) $l0;

        $i1 = $i1 - $i2;

        $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int window> = $i1;

        if $i1 >= 0 goto label1;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $i1 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id()>();

        $r4 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode FLOW_CONTROL_ERROR>;

        virtualinvoke $r3.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void rstStream(int,io.grpc.okhttp.internal.framed.ErrorCode)>($i1, $r4);

        $r5 = $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OkHttpClientTransport transport>;

        $i1 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id()>();

        $r6 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r6 = virtualinvoke $r6.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Received data size exceeded our receiving window size");

        $r1 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress PROCESSED>;

        virtualinvoke $r5.<io.grpc.okhttp.OkHttpClientTransport: void finishStream(int,io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,boolean,io.grpc.okhttp.internal.framed.ErrorCode,io.grpc.Metadata)>($i1, $r6, $r1, 0, null, null);

        return;

     label1:
        $r7 = new io.grpc.okhttp.OkHttpReadableBuffer;

        specialinvoke $r7.<io.grpc.okhttp.OkHttpReadableBuffer: void <init>(okio.Buffer)>($r2);

        specialinvoke $r0.<io.grpc.internal.Http2ClientStreamTransportState: void transportDataReceived(io.grpc.internal.ReadableBuffer,boolean)>($r7, $z0);

        return;
    }

    public void transportHeadersReceived(java.util.List, boolean)
    {
        io.grpc.okhttp.OkHttpClientStream$TransportState $r0;
        boolean $z0;
        java.util.List $r1;
        io.grpc.Metadata $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpClientStream$TransportState;

        $r1 := @parameter0: java.util.List;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <io.grpc.okhttp.Utils: io.grpc.Metadata convertTrailers(java.util.List)>($r1);

        virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: void transportTrailersReceived(io.grpc.Metadata)>($r2);

        return;

     label1:
        $r2 = staticinvoke <io.grpc.okhttp.Utils: io.grpc.Metadata convertHeaders(java.util.List)>($r1);

        virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientStream$TransportState: void transportHeadersReceived(io.grpc.Metadata)>($r2);

        return;
    }

