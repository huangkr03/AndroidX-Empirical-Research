androidx.compose.runtime.AbstractApplier
<androidx.compose.runtime.AbstractApplier: java.lang.Object root>
<androidx.compose.runtime.AbstractApplier: java.util.List stack>
<androidx.compose.runtime.AbstractApplier: java.lang.Object current>
<androidx.compose.runtime.AbstractApplier: int $stable>
    public void <init>(java.lang.Object)
    {
        androidx.compose.runtime.AbstractApplier r0;
        java.lang.Object r1, $r4;
        java.util.ArrayList $r2;
        java.util.List $r3;

        r0 := @this: androidx.compose.runtime.AbstractApplier;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.AbstractApplier: java.lang.Object root> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = (java.util.List) $r2;

        r0.<androidx.compose.runtime.AbstractApplier: java.util.List stack> = $r3;

        $r4 = r0.<androidx.compose.runtime.AbstractApplier: java.lang.Object root>;

        r0.<androidx.compose.runtime.AbstractApplier: java.lang.Object current> = $r4;

        return;
    }

    public final java.lang.Object getRoot()
    {
        androidx.compose.runtime.AbstractApplier r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.runtime.AbstractApplier;

        $r1 = r0.<androidx.compose.runtime.AbstractApplier: java.lang.Object root>;

        return $r1;
    }

    public java.lang.Object getCurrent()
    {
        androidx.compose.runtime.AbstractApplier r0;
        java.lang.Object $r1;

        r0 := @this: androidx.compose.runtime.AbstractApplier;

        $r1 = r0.<androidx.compose.runtime.AbstractApplier: java.lang.Object current>;

        return $r1;
    }

    protected void setCurrent(java.lang.Object)
    {
        androidx.compose.runtime.AbstractApplier r0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.runtime.AbstractApplier;

        r1 := @parameter0: java.lang.Object;

        r0.<androidx.compose.runtime.AbstractApplier: java.lang.Object current> = r1;

        return;
    }

    public void down(java.lang.Object)
    {
        androidx.compose.runtime.AbstractApplier r0;
        java.lang.Object r1, $r3;
        java.util.List $r2;

        r0 := @this: androidx.compose.runtime.AbstractApplier;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.runtime.AbstractApplier: java.util.List stack>;

        $r3 = virtualinvoke r0.<androidx.compose.runtime.AbstractApplier: java.lang.Object getCurrent()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        virtualinvoke r0.<androidx.compose.runtime.AbstractApplier: void setCurrent(java.lang.Object)>(r1);

        return;
    }

    public void up()
    {
        androidx.compose.runtime.AbstractApplier r0;
        java.lang.String r1, $r8;
        java.util.List $r2, $r4, $r5;
        java.util.Collection $r3;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.Object $r6;
        java.lang.IllegalStateException r9;
        java.lang.Throwable r10;

        r0 := @this: androidx.compose.runtime.AbstractApplier;

        $r2 = r0.<androidx.compose.runtime.AbstractApplier: java.util.List stack>;

        $r3 = (java.util.Collection) $r2;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        r1 = "Check failed.";

        r9 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        r10 = (java.lang.Throwable) r9;

        throw r10;

     label3:
        $r5 = r0.<androidx.compose.runtime.AbstractApplier: java.util.List stack>;

        $r4 = r0.<androidx.compose.runtime.AbstractApplier: java.util.List stack>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>($i1);

        virtualinvoke r0.<androidx.compose.runtime.AbstractApplier: void setCurrent(java.lang.Object)>($r6);

        return;
    }

    public final void clear()
    {
        androidx.compose.runtime.AbstractApplier r0;
        java.util.List $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.runtime.AbstractApplier;

        $r1 = r0.<androidx.compose.runtime.AbstractApplier: java.util.List stack>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<androidx.compose.runtime.AbstractApplier: java.lang.Object root>;

        virtualinvoke r0.<androidx.compose.runtime.AbstractApplier: void setCurrent(java.lang.Object)>($r2);

        virtualinvoke r0.<androidx.compose.runtime.AbstractApplier: void onClear()>();

        return;
    }

<androidx.compose.runtime.AbstractApplier: void onClear()>
    protected final void remove(java.util.List, int, int)
    {
        androidx.compose.runtime.AbstractApplier r0;
        java.util.List $r1, $r2;
        int i0, i1, $i2;

        r0 := @this: androidx.compose.runtime.AbstractApplier;

        $r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        if i1 != 1 goto label1;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        goto label2;

     label1:
        $i2 = i0 + i1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(i0, $i2);

        interfaceinvoke $r2.<java.util.List: void clear()>();

     label2:
        return;
    }

    protected final void move(java.util.List, int, int, int)
    {
        androidx.compose.runtime.AbstractApplier r0;
        java.util.List $r1, r8, r9;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.util.Collection $r2, $r3;
        java.lang.Object r5, r6, r7;

        r0 := @this: androidx.compose.runtime.AbstractApplier;

        $r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        if i0 <= i1 goto label1;

        $i7 = i1;

        goto label2;

     label1:
        $i7 = i1 - i2;

     label2:
        i3 = $i7;

        if i2 != 1 goto label5;

        $i5 = i1 + 1;

        if i0 == $i5 goto label3;

        $i6 = i1 - 1;

        if i0 != $i6 goto label4;

     label3:
        r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r6 = interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r5);

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r6);

        goto label6;

     label4:
        r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        interfaceinvoke $r1.<java.util.List: void add(int,java.lang.Object)>(i3, r7);

        goto label6;

     label5:
        $i4 = i0 + i2;

        r8 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(i0, $i4);

        $r2 = (java.util.Collection) r8;

        r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r2);

        interfaceinvoke r8.<java.util.List: void clear()>();

        $r3 = (java.util.Collection) r9;

        interfaceinvoke $r1.<java.util.List: boolean addAll(int,java.util.Collection)>(i3, $r3);

     label6:
        return;
    }

    static void <clinit>()
    {
        <androidx.compose.runtime.AbstractApplier: int $stable> = 8;

        return;
    }

