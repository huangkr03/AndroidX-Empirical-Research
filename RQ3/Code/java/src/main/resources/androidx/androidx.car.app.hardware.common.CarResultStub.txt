androidx.car.app.hardware.common.CarResultStub
<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.hardware.common.CarHardwareHostDispatcher mHostDispatcher>
<androidx.car.app.hardware.common.CarResultStub: int mResultType>
<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.serialization.Bundleable mBundle>
<androidx.car.app.hardware.common.CarResultStub: boolean mIsSingleShot>
<androidx.car.app.hardware.common.CarResultStub: java.util.Map mListeners>
<androidx.car.app.hardware.common.CarResultStub: java.lang.Object mUnsupportedValue>
    public void <init>(int, androidx.car.app.serialization.Bundleable, boolean, java.lang.Object, androidx.car.app.hardware.common.CarHardwareHostDispatcher)
    {
        androidx.car.app.hardware.common.CarResultStub r0;
        int i0;
        androidx.car.app.serialization.Bundleable r1;
        boolean z0;
        java.lang.Object r2, $r5, $r7;
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r3, $r6;
        java.util.HashMap $r4;

        r0 := @this: androidx.car.app.hardware.common.CarResultStub;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.car.app.serialization.Bundleable;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Object;

        r3 := @parameter4: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        specialinvoke r0.<androidx.car.app.hardware.ICarHardwareResult$Stub: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<androidx.car.app.hardware.common.CarResultStub: java.util.Map mListeners> = $r4;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r6 = (androidx.car.app.hardware.common.CarHardwareHostDispatcher) $r5;

        r0.<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.hardware.common.CarHardwareHostDispatcher mHostDispatcher> = $r6;

        r0.<androidx.car.app.hardware.common.CarResultStub: int mResultType> = i0;

        r0.<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.serialization.Bundleable mBundle> = r1;

        r0.<androidx.car.app.hardware.common.CarResultStub: boolean mIsSingleShot> = z0;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        r0.<androidx.car.app.hardware.common.CarResultStub: java.lang.Object mUnsupportedValue> = $r7;

        return;
    }

    public void addListener(java.util.concurrent.Executor, androidx.car.app.hardware.common.OnCarDataAvailableListener)
    {
        androidx.car.app.hardware.common.CarResultStub r0;
        java.util.concurrent.Executor r1;
        androidx.car.app.hardware.common.OnCarDataAvailableListener r2, $r6;
        boolean z0, $z1, $z2, $z3;
        java.util.Map $r3, $r4;
        java.lang.Object $r5;
        androidx.car.app.serialization.Bundleable $r8, $r10;
        int $i0, $i1;
        androidx.car.app.hardware.common.CarHardwareHostDispatcher $r9, $r11;

        r0 := @this: androidx.car.app.hardware.common.CarResultStub;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.car.app.hardware.common.OnCarDataAvailableListener;

        $r3 = r0.<androidx.car.app.hardware.common.CarResultStub: java.util.Map mListeners>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        $r4 = r0.<androidx.car.app.hardware.common.CarResultStub: java.util.Map mListeners>;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r6 = (androidx.car.app.hardware.common.OnCarDataAvailableListener) $r5;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        if z0 == 0 goto label3;

        return;

     label3:
        $z2 = r0.<androidx.car.app.hardware.common.CarResultStub: boolean mIsSingleShot>;

        if $z2 == 0 goto label4;

        $r11 = r0.<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.hardware.common.CarHardwareHostDispatcher mHostDispatcher>;

        $i1 = r0.<androidx.car.app.hardware.common.CarResultStub: int mResultType>;

        $r10 = r0.<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.serialization.Bundleable mBundle>;

        virtualinvoke $r11.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: void dispatchGetCarHardwareResult(int,androidx.car.app.serialization.Bundleable,androidx.car.app.hardware.ICarHardwareResult)>($i1, $r10, r0);

        goto label5;

     label4:
        $r9 = r0.<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.hardware.common.CarHardwareHostDispatcher mHostDispatcher>;

        $i0 = r0.<androidx.car.app.hardware.common.CarResultStub: int mResultType>;

        $r8 = r0.<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.serialization.Bundleable mBundle>;

        virtualinvoke $r9.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: void dispatchSubscribeCarHardwareResult(int,androidx.car.app.serialization.Bundleable,androidx.car.app.hardware.ICarHardwareResult)>($i0, $r8, r0);

     label5:
        return;
    }

    public boolean removeListener(androidx.car.app.hardware.common.OnCarDataAvailableListener)
    {
        androidx.car.app.hardware.common.CarResultStub r0;
        androidx.car.app.hardware.common.OnCarDataAvailableListener r1;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        boolean $z0, $z1;
        androidx.car.app.serialization.Bundleable $r6;
        int $i0;
        androidx.car.app.hardware.common.CarHardwareHostDispatcher $r7;

        r0 := @this: androidx.car.app.hardware.common.CarResultStub;

        r1 := @parameter0: androidx.car.app.hardware.common.OnCarDataAvailableListener;

        $r2 = r0.<androidx.car.app.hardware.common.CarResultStub: java.util.Map mListeners>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        $r5 = r0.<androidx.car.app.hardware.common.CarResultStub: java.util.Map mListeners>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<androidx.car.app.hardware.common.CarResultStub: boolean mIsSingleShot>;

        if $z1 != 0 goto label2;

        $r7 = r0.<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.hardware.common.CarHardwareHostDispatcher mHostDispatcher>;

        $i0 = r0.<androidx.car.app.hardware.common.CarResultStub: int mResultType>;

        $r6 = r0.<androidx.car.app.hardware.common.CarResultStub: androidx.car.app.serialization.Bundleable mBundle>;

        virtualinvoke $r7.<androidx.car.app.hardware.common.CarHardwareHostDispatcher: void dispatchUnsubscribeCarHardwareResult(int,androidx.car.app.serialization.Bundleable)>($i0, $r6);

     label2:
        return 1;
    }

    public void onCarHardwareResult(int, boolean, androidx.car.app.serialization.Bundleable, android.os.IBinder) throws android.os.RemoteException
    {
        androidx.car.app.hardware.common.CarResultStub r0;
        int i0;
        boolean z0;
        androidx.car.app.serialization.Bundleable r1;
        android.os.IBinder r2;
        androidx.car.app.IOnDoneCallback r3;
        androidx.car.app.utils.RemoteUtils$HostCall $r4;

        r0 := @this: androidx.car.app.hardware.common.CarResultStub;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: androidx.car.app.serialization.Bundleable;

        r2 := @parameter3: android.os.IBinder;

        r3 = staticinvoke <androidx.car.app.IOnDoneCallback$Stub: androidx.car.app.IOnDoneCallback asInterface(android.os.IBinder)>(r2);

        $r4 = dynamicinvoke "dispatch" <androidx.car.app.utils.RemoteUtils$HostCall (androidx.car.app.hardware.common.CarResultStub,boolean,androidx.car.app.serialization.Bundleable)>(r0, z0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.car.app.hardware.common.CarResultStub: java.lang.Object lambda$onCarHardwareResult$0(boolean,androidx.car.app.serialization.Bundleable)>, methodtype: java.lang.Object __METHODTYPE__());

        staticinvoke <androidx.car.app.utils.RemoteUtils: void dispatchCallFromHost(androidx.car.app.IOnDoneCallback,java.lang.String,androidx.car.app.utils.RemoteUtils$HostCall)>(r3, "onCarHardwareResult", $r4);

        return;
    }

    private void notifyResults(boolean, androidx.car.app.serialization.Bundleable) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.hardware.common.CarResultStub r0;
        boolean z0, $z1, $z2;
        androidx.car.app.serialization.Bundleable r1;
        java.lang.Object r2, $r8, $r9, $r12;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.Map $r5, $r7;
        java.util.Set $r6;
        java.util.concurrent.Executor $r10;
        java.lang.Runnable $r11;

        r0 := @this: androidx.car.app.hardware.common.CarResultStub;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.car.app.serialization.Bundleable;

        if z0 == 0 goto label1;

        $r12 = specialinvoke r0.<androidx.car.app.hardware.common.CarResultStub: java.lang.Object convertAndRecast(androidx.car.app.serialization.Bundleable)>(r1);

        goto label2;

     label1:
        $r12 = r0.<androidx.car.app.hardware.common.CarResultStub: java.lang.Object mUnsupportedValue>;

     label2:
        r2 = $r12;

        $r5 = r0.<androidx.car.app.hardware.common.CarResultStub: java.util.Map mListeners>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.util.concurrent.Executor) $r9;

        $r11 = dynamicinvoke "run" <java.lang.Runnable (java.util.Map$Entry,java.lang.Object)>(r4, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.car.app.hardware.common.CarResultStub: void lambda$notifyResults$1(java.util.Map$Entry,java.lang.Object)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

        goto label3;

     label4:
        $z1 = r0.<androidx.car.app.hardware.common.CarResultStub: boolean mIsSingleShot>;

        if $z1 == 0 goto label5;

        $r7 = r0.<androidx.car.app.hardware.common.CarResultStub: java.util.Map mListeners>;

        interfaceinvoke $r7.<java.util.Map: void clear()>();

     label5:
        return;
    }

    private java.lang.Object convertAndRecast(androidx.car.app.serialization.Bundleable) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.hardware.common.CarResultStub r0;
        androidx.car.app.serialization.Bundleable r1;
        java.lang.Object r2, r3;

        r0 := @this: androidx.car.app.hardware.common.CarResultStub;

        r1 := @parameter0: androidx.car.app.serialization.Bundleable;

        r2 = virtualinvoke r1.<androidx.car.app.serialization.Bundleable: java.lang.Object get()>();

        r3 = r2;

        goto label1;

     label1:
        return r3;
    }

    private static void lambda$notifyResults$1(java.util.Map$Entry, java.lang.Object)
    {
        java.util.Map$Entry r0;
        java.lang.Object r1, $r2;
        androidx.car.app.hardware.common.OnCarDataAvailableListener $r3;

        r0 := @parameter0: java.util.Map$Entry;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (androidx.car.app.hardware.common.OnCarDataAvailableListener) $r2;

        interfaceinvoke $r3.<androidx.car.app.hardware.common.OnCarDataAvailableListener: void onCarDataAvailable(java.lang.Object)>(r1);

        return;
    }

    private java.lang.Object lambda$onCarHardwareResult$0(boolean, androidx.car.app.serialization.Bundleable) throws androidx.car.app.serialization.BundlerException
    {
        androidx.car.app.hardware.common.CarResultStub r0;
        boolean z0;
        androidx.car.app.serialization.Bundleable r1;

        r0 := @this: androidx.car.app.hardware.common.CarResultStub;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.car.app.serialization.Bundleable;

        specialinvoke r0.<androidx.car.app.hardware.common.CarResultStub: void notifyResults(boolean,androidx.car.app.serialization.Bundleable)>(z0, r1);

        return null;
    }

