androidx.camera.video.PendingRecording
<androidx.camera.video.PendingRecording: android.content.Context mContext>
<androidx.camera.video.PendingRecording: androidx.camera.video.Recorder mRecorder>
<androidx.camera.video.PendingRecording: androidx.camera.video.OutputOptions mOutputOptions>
<androidx.camera.video.PendingRecording: androidx.core.util.Consumer mEventListener>
<androidx.camera.video.PendingRecording: java.util.concurrent.Executor mListenerExecutor>
<androidx.camera.video.PendingRecording: boolean mAudioEnabled>
    void <init>(android.content.Context, androidx.camera.video.Recorder, androidx.camera.video.OutputOptions)
    {
        androidx.camera.video.PendingRecording r0;
        android.content.Context r1, $r4;
        androidx.camera.video.Recorder r2;
        androidx.camera.video.OutputOptions r3;

        r0 := @this: androidx.camera.video.PendingRecording;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.camera.video.Recorder;

        r3 := @parameter2: androidx.camera.video.OutputOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.video.PendingRecording: boolean mAudioEnabled> = 0;

        $r4 = staticinvoke <androidx.camera.core.impl.utils.ContextUtil: android.content.Context getApplicationContext(android.content.Context)>(r1);

        r0.<androidx.camera.video.PendingRecording: android.content.Context mContext> = $r4;

        r0.<androidx.camera.video.PendingRecording: androidx.camera.video.Recorder mRecorder> = r2;

        r0.<androidx.camera.video.PendingRecording: androidx.camera.video.OutputOptions mOutputOptions> = r3;

        return;
    }

    android.content.Context getApplicationContext()
    {
        androidx.camera.video.PendingRecording r0;
        android.content.Context $r1;

        r0 := @this: androidx.camera.video.PendingRecording;

        $r1 = r0.<androidx.camera.video.PendingRecording: android.content.Context mContext>;

        return $r1;
    }

    androidx.camera.video.Recorder getRecorder()
    {
        androidx.camera.video.PendingRecording r0;
        androidx.camera.video.Recorder $r1;

        r0 := @this: androidx.camera.video.PendingRecording;

        $r1 = r0.<androidx.camera.video.PendingRecording: androidx.camera.video.Recorder mRecorder>;

        return $r1;
    }

    androidx.camera.video.OutputOptions getOutputOptions()
    {
        androidx.camera.video.PendingRecording r0;
        androidx.camera.video.OutputOptions $r1;

        r0 := @this: androidx.camera.video.PendingRecording;

        $r1 = r0.<androidx.camera.video.PendingRecording: androidx.camera.video.OutputOptions mOutputOptions>;

        return $r1;
    }

    java.util.concurrent.Executor getListenerExecutor()
    {
        androidx.camera.video.PendingRecording r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.camera.video.PendingRecording;

        $r1 = r0.<androidx.camera.video.PendingRecording: java.util.concurrent.Executor mListenerExecutor>;

        return $r1;
    }

    androidx.core.util.Consumer getEventListener()
    {
        androidx.camera.video.PendingRecording r0;
        androidx.core.util.Consumer $r1;

        r0 := @this: androidx.camera.video.PendingRecording;

        $r1 = r0.<androidx.camera.video.PendingRecording: androidx.core.util.Consumer mEventListener>;

        return $r1;
    }

    boolean isAudioEnabled()
    {
        androidx.camera.video.PendingRecording r0;
        boolean $z0;

        r0 := @this: androidx.camera.video.PendingRecording;

        $z0 = r0.<androidx.camera.video.PendingRecording: boolean mAudioEnabled>;

        return $z0;
    }

    public androidx.camera.video.PendingRecording withAudioEnabled()
    {
        androidx.camera.video.PendingRecording r0;
        android.content.Context $r1;
        int $i0;
        androidx.camera.video.Recorder $r2;
        boolean $z0;
        java.lang.SecurityException $r3;

        r0 := @this: androidx.camera.video.PendingRecording;

        $r1 = r0.<androidx.camera.video.PendingRecording: android.content.Context mContext>;

        $i0 = staticinvoke <androidx.core.content.PermissionChecker: int checkSelfPermission(android.content.Context,java.lang.String)>($r1, "android.permission.RECORD_AUDIO");

        if $i0 != -1 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Attempted to enable audio for recording but application does not have RECORD_AUDIO permission granted.");

        throw $r3;

     label1:
        $r2 = r0.<androidx.camera.video.PendingRecording: androidx.camera.video.Recorder mRecorder>;

        $z0 = virtualinvoke $r2.<androidx.camera.video.Recorder: boolean isAudioSupported()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "The Recorder this recording is associated to doesn\'t support audio.");

        r0.<androidx.camera.video.PendingRecording: boolean mAudioEnabled> = 1;

        return r0;
    }

    public androidx.camera.video.Recording start(java.util.concurrent.Executor, androidx.core.util.Consumer)
    {
        androidx.camera.video.PendingRecording r0;
        java.util.concurrent.Executor r1;
        androidx.core.util.Consumer r2;
        androidx.camera.video.Recorder $r5;
        androidx.camera.video.Recording $r6;

        r0 := @this: androidx.camera.video.PendingRecording;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.core.util.Consumer;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Listener Executor can\'t be null.");

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "Event listener can\'t be null");

        r0.<androidx.camera.video.PendingRecording: java.util.concurrent.Executor mListenerExecutor> = r1;

        r0.<androidx.camera.video.PendingRecording: androidx.core.util.Consumer mEventListener> = r2;

        $r5 = r0.<androidx.camera.video.PendingRecording: androidx.camera.video.Recorder mRecorder>;

        $r6 = virtualinvoke $r5.<androidx.camera.video.Recorder: androidx.camera.video.Recording start(androidx.camera.video.PendingRecording)>(r0);

        return $r6;
    }

