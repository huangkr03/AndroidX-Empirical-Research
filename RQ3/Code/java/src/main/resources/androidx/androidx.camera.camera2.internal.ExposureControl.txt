androidx.camera.camera2.internal.ExposureControl
<androidx.camera.camera2.internal.ExposureControl: int DEFAULT_EXPOSURE_COMPENSATION>
<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>
<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.ExposureStateImpl mExposureStateImpl>
<androidx.camera.camera2.internal.ExposureControl: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.ExposureControl: boolean mIsActive>
<androidx.camera.camera2.internal.ExposureControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCompleter>
<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mRunningCaptureResultListener>
    void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl, androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat, java.util.concurrent.Executor)
    {
        androidx.camera.camera2.internal.ExposureControl r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl r1;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r2;
        java.util.concurrent.Executor r3;
        androidx.camera.camera2.internal.ExposureStateImpl $r4;

        r0 := @this: androidx.camera.camera2.internal.ExposureControl;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r2 := @parameter1: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        r3 := @parameter2: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.ExposureControl: boolean mIsActive> = 0;

        r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl> = r1;

        $r4 = new androidx.camera.camera2.internal.ExposureStateImpl;

        specialinvoke $r4.<androidx.camera.camera2.internal.ExposureStateImpl: void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,int)>(r2, 0);

        r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.ExposureStateImpl mExposureStateImpl> = $r4;

        r0.<androidx.camera.camera2.internal.ExposureControl: java.util.concurrent.Executor mExecutor> = r3;

        return;
    }

    static androidx.camera.core.ExposureState getDefaultExposureState(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)
    {
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r0;
        androidx.camera.camera2.internal.ExposureStateImpl $r1;

        r0 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        $r1 = new androidx.camera.camera2.internal.ExposureStateImpl;

        specialinvoke $r1.<androidx.camera.camera2.internal.ExposureStateImpl: void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,int)>(r0, 0);

        return $r1;
    }

    void setActive(boolean)
    {
        androidx.camera.camera2.internal.ExposureControl r0;
        boolean z0, $z1, $z2;
        androidx.camera.camera2.internal.ExposureStateImpl $r1;

        r0 := @this: androidx.camera.camera2.internal.ExposureControl;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.camera.camera2.internal.ExposureControl: boolean mIsActive>;

        if z0 != $z1 goto label1;

        return;

     label1:
        r0.<androidx.camera.camera2.internal.ExposureControl: boolean mIsActive> = z0;

        $z2 = r0.<androidx.camera.camera2.internal.ExposureControl: boolean mIsActive>;

        if $z2 != 0 goto label2;

        $r1 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.ExposureStateImpl mExposureStateImpl>;

        virtualinvoke $r1.<androidx.camera.camera2.internal.ExposureStateImpl: void setExposureCompensationIndex(int)>(0);

        specialinvoke r0.<androidx.camera.camera2.internal.ExposureControl: void clearRunningTask()>();

     label2:
        return;
    }

    void setCaptureRequestOption(androidx.camera.camera2.impl.Camera2ImplConfig$Builder)
    {
        androidx.camera.camera2.internal.ExposureControl r0;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r1;
        androidx.camera.camera2.internal.ExposureStateImpl $r2;
        android.hardware.camera2.CaptureRequest$Key $r3;
        int $i0;
        java.lang.Integer $r4;

        r0 := @this: androidx.camera.camera2.internal.ExposureControl;

        r1 := @parameter0: androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        $r3 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r2 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.ExposureStateImpl mExposureStateImpl>;

        $i0 = virtualinvoke $r2.<androidx.camera.camera2.internal.ExposureStateImpl: int getExposureCompensationIndex()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r3, $r4);

        return;
    }

    androidx.camera.core.ExposureState getExposureState()
    {
        androidx.camera.camera2.internal.ExposureControl r0;
        androidx.camera.camera2.internal.ExposureStateImpl $r1;

        r0 := @this: androidx.camera.camera2.internal.ExposureControl;

        $r1 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.ExposureStateImpl mExposureStateImpl>;

        return $r1;
    }

    com.google.common.util.concurrent.ListenableFuture setExposureCompensationIndex(int)
    {
        androidx.camera.camera2.internal.ExposureControl r0;
        int i0;
        android.util.Range r1;
        androidx.camera.camera2.internal.ExposureStateImpl $r2, $r3, $r5;
        boolean $z0, $z1;
        java.lang.Integer $r4;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r6;
        com.google.common.util.concurrent.ListenableFuture $r7, $r8, $r21, $r23;
        java.lang.IllegalArgumentException $r9, $r22;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r16, $r18, $r19;
        java.lang.Comparable $r14, $r17;
        java.lang.String $r20;

        r0 := @this: androidx.camera.camera2.internal.ExposureControl;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.ExposureStateImpl mExposureStateImpl>;

        $z0 = virtualinvoke $r2.<androidx.camera.camera2.internal.ExposureStateImpl: boolean isExposureCompensationSupported()>();

        if $z0 != 0 goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ExposureCompensation is not supported");

        $r23 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r22);

        return $r23;

     label1:
        $r3 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.ExposureStateImpl mExposureStateImpl>;

        r1 = virtualinvoke $r3.<androidx.camera.camera2.internal.ExposureStateImpl: android.util.Range getExposureCompensationRange()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = virtualinvoke r1.<android.util.Range: boolean contains(java.lang.Comparable)>($r4);

        if $z1 != 0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested ExposureCompensation ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not within valid range [");

        $r14 = virtualinvoke r1.<android.util.Range: java.lang.Comparable getUpper()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $r17 = virtualinvoke r1.<android.util.Range: java.lang.Comparable getLower()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        $r21 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r9);

        return $r21;

     label2:
        $r5 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.ExposureStateImpl mExposureStateImpl>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.ExposureStateImpl: void setExposureCompensationIndex(int)>(i0);

        $r6 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.ExposureControl,int)>(r0, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.ExposureControl: java.lang.Object lambda$setExposureCompensationIndex$2(int,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r7 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r6);

        $r8 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r7);

        return $r8;
    }

    private void clearRunningTask()
    {
        androidx.camera.camera2.internal.ExposureControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1, $r6;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r2, $r3;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r4;
        androidx.camera.core.CameraControl$OperationCanceledException $r5;

        r0 := @this: androidx.camera.camera2.internal.ExposureControl;

        $r1 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCompleter>;

        if $r1 == null goto label1;

        $r6 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCompleter>;

        $r5 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r5.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Cancelled by another setExposureCompensationIndex()");

        virtualinvoke $r6.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r5);

        r0.<androidx.camera.camera2.internal.ExposureControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCompleter> = null;

     label1:
        $r2 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mRunningCaptureResultListener>;

        if $r2 == null goto label2;

        $r4 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r3 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mRunningCaptureResultListener>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void removeCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>($r3);

        r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mRunningCaptureResultListener> = null;

     label2:
        return;
    }

    private java.lang.Object lambda$setExposureCompensationIndex$2(int, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.ExposureControl r0;
        int i0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: androidx.camera.camera2.internal.ExposureControl;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.internal.ExposureControl: java.util.concurrent.Executor mExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.ExposureControl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,int)>(r0, r1, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.ExposureControl: void lambda$setExposureCompensationIndex$1(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,int)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setExposureCompensationIndex[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private void lambda$setExposureCompensationIndex$1(androidx.concurrent.futures.CallbackToFutureAdapter$Completer, int)
    {
        androidx.camera.camera2.internal.ExposureControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1, $r2;
        int i0;
        boolean $z0, $z2, $z3;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r3, $r4, $r5;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r6, $r7;
        androidx.camera.camera2.internal.ExposureStateImpl $r8;
        androidx.camera.core.CameraControl$OperationCanceledException $r9;

        r0 := @this: androidx.camera.camera2.internal.ExposureControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        i0 := @parameter1: int;

        $z0 = r0.<androidx.camera.camera2.internal.ExposureControl: boolean mIsActive>;

        if $z0 != 0 goto label1;

        $r8 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.ExposureStateImpl mExposureStateImpl>;

        virtualinvoke $r8.<androidx.camera.camera2.internal.ExposureStateImpl: void setExposureCompensationIndex(int)>(0);

        $r9 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r9.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r9);

        return;

     label1:
        specialinvoke r0.<androidx.camera.camera2.internal.ExposureControl: void clearRunningTask()>();

        $r2 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCompleter>;

        if $r2 != null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z2, "mRunningCompleter should be null when starting set a new exposure compensation value");

        $r3 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mRunningCaptureResultListener>;

        if $r3 != null goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z3, "mRunningCaptureResultListener should be null when starting set a new exposure compensation value");

        $r4 = dynamicinvoke "onCaptureResult" <androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener (int,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(i0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.ExposureControl: boolean lambda$setExposureCompensationIndex$0(int,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,android.hardware.camera2.TotalCaptureResult)>, methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mRunningCaptureResultListener> = $r4;

        r0.<androidx.camera.camera2.internal.ExposureControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mRunningCompleter> = r1;

        $r6 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r5 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mRunningCaptureResultListener>;

        virtualinvoke $r6.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void addCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>($r5);

        $r7 = r0.<androidx.camera.camera2.internal.ExposureControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        virtualinvoke $r7.<androidx.camera.camera2.internal.Camera2CameraControlImpl: long updateSessionConfigSynchronous()>();

        return;
    }

    private static boolean lambda$setExposureCompensationIndex$0(int, androidx.concurrent.futures.CallbackToFutureAdapter$Completer, android.hardware.camera2.TotalCaptureResult)
    {
        int i0, $i1, $i2, $i3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r0;
        android.hardware.camera2.TotalCaptureResult r1;
        java.lang.Integer r2, r3, $r8, $r9;
        android.hardware.camera2.CaptureResult$Key $r4, $r6;
        java.lang.Object $r5, $r7;

        i0 := @parameter0: int;

        r0 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r1 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        $r4 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_STATE>;

        $r5 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r4);

        r2 = (java.lang.Integer) $r5;

        $r6 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r7 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r6);

        r3 = (java.lang.Integer) $r7;

        if r2 == null goto label3;

        if r3 == null goto label3;

        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        tableswitch($i2)
        {
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            default: goto label2;
        };

     label1:
        $i3 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        if $i3 != i0 goto label4;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>($r9);

        return 1;

     label2:
        goto label4;

     label3:
        if r3 == null goto label4;

        $i1 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        if $i1 != i0 goto label4;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>($r8);

        return 1;

     label4:
        return 0;
    }

