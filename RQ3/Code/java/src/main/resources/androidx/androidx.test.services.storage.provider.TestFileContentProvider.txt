androidx.test.services.storage.provider.TestFileContentProvider
<androidx.test.services.storage.provider.TestFileContentProvider: java.lang.String TAG>
<androidx.test.services.storage.provider.TestFileContentProvider: java.io.File outputDirectory>
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Landroidx/test/services/storage/provider/TestFileContentProvider;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.services.storage.provider.TestFileContentProvider: java.lang.String TAG> = $r0;

        return;
    }

    public void <init>(java.lang.String, androidx.test.services.storage.provider.AbstractFileContentProvider$Access)
    {
        androidx.test.services.storage.provider.TestFileContentProvider $r0;
        java.lang.String $r1;
        androidx.test.services.storage.provider.AbstractFileContentProvider$Access $r2;
        java.io.File $r3, $r4;

        $r0 := @this: androidx.test.services.storage.provider.TestFileContentProvider;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: androidx.test.services.storage.provider.AbstractFileContentProvider$Access;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r1);

        specialinvoke $r0.<androidx.test.services.storage.provider.AbstractFileContentProvider: void <init>(java.io.File,androidx.test.services.storage.provider.AbstractFileContentProvider$Access)>($r3, $r2);

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r1);

        $r0.<androidx.test.services.storage.provider.TestFileContentProvider: java.io.File outputDirectory> = $r3;

        return;
    }

    protected boolean onCreateHook()
    {
        androidx.test.services.storage.provider.TestFileContentProvider $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.io.File $r4;
        java.lang.Object[] $r5;

        $r0 := @this: androidx.test.services.storage.provider.TestFileContentProvider;

        $r1 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z0 != 0 goto label1;

        $r1 = <androidx.test.services.storage.provider.TestFileContentProvider: java.lang.String TAG>;

        $r2 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sdcard in bad state: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r1, $r2);

        return 0;

     label1:
        $r4 = $r0.<androidx.test.services.storage.provider.TestFileContentProvider: java.io.File outputDirectory>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r4 = $r0.<androidx.test.services.storage.provider.TestFileContentProvider: java.io.File outputDirectory>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label2;

        $r1 = <androidx.test.services.storage.provider.TestFileContentProvider: java.lang.String TAG>;

        $r5 = newarray (java.lang.Object)[1];

        $r4 = $r0.<androidx.test.services.storage.provider.TestFileContentProvider: java.io.File outputDirectory>;

        $r5[0] = $r4;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\': could not create output dir! ", $r5);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r1, $r2);

        return 0;

     label2:
        return 1;
    }

