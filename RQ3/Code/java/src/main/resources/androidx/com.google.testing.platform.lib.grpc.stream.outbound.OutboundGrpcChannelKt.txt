com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt
    public static final com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel OutboundGrpcChannel(kotlinx.coroutines.CoroutineScope, io.grpc.stub.StreamObserver, kotlinx.coroutines.channels.Channel)
    {
        io.grpc.stub.StreamObserver $r0;
        kotlinx.coroutines.channels.Channel $r1;
        kotlinx.coroutines.CoroutineStart $r2;
        com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt$OutboundGrpcChannel$1 $r3;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r4;
        kotlinx.coroutines.CoroutineScope $r5;
        com.google.testing.platform.lib.grpc.stream.outbound.DefaultOutboundGrpcChannel $r6;
        com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt$OutboundGrpcChannel$2 $r7;

        $r5 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r0 := @parameter1: io.grpc.stub.StreamObserver;

        $r1 := @parameter2: kotlinx.coroutines.channels.Channel;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r5, "parentScope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "observer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "channel");

        $r4 = staticinvoke <com.google.testing.platform.lib.coroutines.scope.JobScopeKt: com.google.testing.platform.lib.coroutines.scope.JobScope jobScope(kotlinx.coroutines.CoroutineScope)>($r5);

        $r6 = new com.google.testing.platform.lib.grpc.stream.outbound.DefaultOutboundGrpcChannel;

        specialinvoke $r6.<com.google.testing.platform.lib.grpc.stream.outbound.DefaultOutboundGrpcChannel: void <init>(kotlinx.coroutines.channels.Channel,com.google.testing.platform.lib.coroutines.scope.JobScope)>($r1, $r4);

        $r2 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC>;

        $r3 = new com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt$OutboundGrpcChannel$1;

        specialinvoke $r3.<com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt$OutboundGrpcChannel$1: void <init>(com.google.testing.platform.lib.grpc.stream.outbound.DefaultOutboundGrpcChannel,kotlin.coroutines.Continuation)>($r6, null);

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r4, null, $r2, $r3, 1, null);

        $r2 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC>;

        $r7 = new com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt$OutboundGrpcChannel$2;

        specialinvoke $r7.<com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt$OutboundGrpcChannel$2: void <init>(kotlinx.coroutines.channels.Channel,com.google.testing.platform.lib.grpc.stream.outbound.DefaultOutboundGrpcChannel,io.grpc.stub.StreamObserver,kotlin.coroutines.Continuation)>($r1, $r6, $r0, null);

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>($r4, $r6, $r2, $r7);

        return $r6;
    }

    public static final boolean access$handleStreamError(com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel, io.grpc.stub.StreamObserver, java.lang.Throwable)
    {
        io.grpc.stub.StreamObserver $r0;
        java.lang.Throwable $r1;
        boolean $z0;
        com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel $r2;

        $r2 := @parameter0: com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel;

        $r0 := @parameter1: io.grpc.stub.StreamObserver;

        $r1 := @parameter2: java.lang.Throwable;

        $z0 = staticinvoke <com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt: boolean handleStreamError(com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel,io.grpc.stub.StreamObserver,java.lang.Throwable)>($r2, $r0, $r1);

        return $z0;
    }

    private static final boolean handleStreamError(com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel, io.grpc.stub.StreamObserver, java.lang.Throwable)
    {
        com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel $r0;
        io.grpc.stub.StreamObserver $r1;
        java.lang.Throwable $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel;

        $r1 := @parameter1: io.grpc.stub.StreamObserver;

        $r2 := @parameter2: java.lang.Throwable;

        $z0 = $r2 instanceof java.util.concurrent.CancellationException;

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r3 == null goto label1;

        $r2 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $z0 = staticinvoke <com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt: boolean handleStreamError(com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel,io.grpc.stub.StreamObserver,java.lang.Throwable)>($r0, $r1, $r2);

        return $z0;

     label1:
        $z0 = interfaceinvoke $r0.<com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel: boolean isActive()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r0.<com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel: boolean complete()>();

     label2:
        return 0;

     label3:
        $z0 = $r2 instanceof com.google.testing.platform.lib.grpc.stream.inbound.InboundGrpcChannelException;

        if $z0 == 0 goto label5;

        $z0 = interfaceinvoke $r0.<com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel: boolean isActive()>();

        if $z0 == 0 goto label4;

        interfaceinvoke $r0.<com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel: boolean complete()>();

     label4:
        return 0;

     label5:
        interfaceinvoke $r1.<io.grpc.stub.StreamObserver: void onError(java.lang.Throwable)>($r2);

        $z0 = interfaceinvoke $r0.<com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel: boolean isActive()>();

        if $z0 == 0 goto label6;

        interfaceinvoke $r0.<com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel: boolean completeExceptionally(java.lang.Throwable)>($r2);

     label6:
        return 1;
    }

    public static final com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel outboundGrpcChannel(kotlinx.coroutines.CoroutineScope, io.grpc.stub.StreamObserver, kotlinx.coroutines.channels.Channel)
    {
        io.grpc.stub.StreamObserver $r0;
        kotlinx.coroutines.channels.Channel $r1;
        com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel $r2;
        kotlinx.coroutines.CoroutineScope $r3;

        $r3 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r0 := @parameter1: io.grpc.stub.StreamObserver;

        $r1 := @parameter2: kotlinx.coroutines.channels.Channel;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "observer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "channel");

        $r2 = staticinvoke <com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannelKt: com.google.testing.platform.lib.grpc.stream.outbound.OutboundGrpcChannel OutboundGrpcChannel(kotlinx.coroutines.CoroutineScope,io.grpc.stub.StreamObserver,kotlinx.coroutines.channels.Channel)>($r3, $r0, $r1);

        return $r2;
    }

