androidx.camera.core.CaptureProcessorPipeline
<androidx.camera.core.CaptureProcessorPipeline: java.lang.String TAG>
<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPreCaptureProcessor>
<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPostCaptureProcessor>
<androidx.camera.core.CaptureProcessorPipeline: com.google.common.util.concurrent.ListenableFuture mUnderlyingCaptureProcessorsCloseFuture>
<androidx.camera.core.CaptureProcessorPipeline: java.util.concurrent.Executor mExecutor>
<androidx.camera.core.CaptureProcessorPipeline: int mMaxImages>
<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.ImageReaderProxy mIntermediateImageReader>
<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.ImageInfo mSourceImageInfo>
<androidx.camera.core.CaptureProcessorPipeline: java.lang.Object mLock>
<androidx.camera.core.CaptureProcessorPipeline: boolean mClosed>
<androidx.camera.core.CaptureProcessorPipeline: boolean mProcessing>
<androidx.camera.core.CaptureProcessorPipeline: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCloseCompleter>
<androidx.camera.core.CaptureProcessorPipeline: com.google.common.util.concurrent.ListenableFuture mCloseFuture>
    void <init>(androidx.camera.core.impl.CaptureProcessor, int, androidx.camera.core.impl.CaptureProcessor, java.util.concurrent.Executor)
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        androidx.camera.core.impl.CaptureProcessor r1, r2, $r7, $r9;
        int i0;
        java.util.concurrent.Executor r3;
        java.util.ArrayList r4, $r6;
        java.lang.Object $r5;
        com.google.common.util.concurrent.ListenableFuture $r8, $r10, $r11;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        r1 := @parameter0: androidx.camera.core.impl.CaptureProcessor;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.camera.core.impl.CaptureProcessor;

        r3 := @parameter3: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.ImageReaderProxy mIntermediateImageReader> = null;

        r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.ImageInfo mSourceImageInfo> = null;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.CaptureProcessorPipeline: java.lang.Object mLock> = $r5;

        r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mClosed> = 0;

        r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mProcessing> = 0;

        r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPreCaptureProcessor> = r1;

        r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPostCaptureProcessor> = r2;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r4 = $r6;

        $r7 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPreCaptureProcessor>;

        $r8 = interfaceinvoke $r7.<androidx.camera.core.impl.CaptureProcessor: com.google.common.util.concurrent.ListenableFuture getCloseFuture()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPostCaptureProcessor>;

        $r10 = interfaceinvoke $r9.<androidx.camera.core.impl.CaptureProcessor: com.google.common.util.concurrent.ListenableFuture getCloseFuture()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.util.Collection)>(r4);

        r0.<androidx.camera.core.CaptureProcessorPipeline: com.google.common.util.concurrent.ListenableFuture mUnderlyingCaptureProcessorsCloseFuture> = $r11;

        r0.<androidx.camera.core.CaptureProcessorPipeline: java.util.concurrent.Executor mExecutor> = r3;

        r0.<androidx.camera.core.CaptureProcessorPipeline: int mMaxImages> = i0;

        return;
    }

    public void onOutputSurface(android.view.Surface, int)
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        android.view.Surface r1;
        int i0;
        androidx.camera.core.impl.CaptureProcessor $r2;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        r1 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPostCaptureProcessor>;

        interfaceinvoke $r2.<androidx.camera.core.impl.CaptureProcessor: void onOutputSurface(android.view.Surface,int)>(r1, i0);

        return;
    }

    public void process(androidx.camera.core.impl.ImageProxyBundle)
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        androidx.camera.core.impl.ImageProxyBundle r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        androidx.camera.core.ImageProxy r3;
        java.lang.Object $r4, $r5, $r7, r11;
        boolean $z0, $z1;
        java.lang.Integer $r6;
        int $i0;
        androidx.camera.core.impl.CaptureProcessor $r8;
        java.lang.Throwable $r9, r14;
        java.lang.IllegalArgumentException $r10;
        java.util.List r12;
        androidx.camera.core.ImageInfo r13;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        r1 := @parameter0: androidx.camera.core.impl.ImageProxyBundle;

        $r4 = r0.<androidx.camera.core.CaptureProcessorPipeline: java.lang.Object mLock>;

        r11 = $r4;

        entermonitor $r4;

        $z0 = r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mClosed>;

        if $z0 == 0 goto label1;

        exitmonitor r11;

        return;

     label1:
        r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mProcessing> = 1;

        exitmonitor r11;

        goto label2;

     label2:
        r12 = interfaceinvoke r1.<androidx.camera.core.impl.ImageProxyBundle: java.util.List getCaptureIds()>();

        $r5 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r2 = interfaceinvoke r1.<androidx.camera.core.impl.ImageProxyBundle: com.google.common.util.concurrent.ListenableFuture getImageProxy(int)>($i0);

        $z1 = interfaceinvoke r2.<com.google.common.util.concurrent.ListenableFuture: boolean isDone()>();

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z1);

     label3:
        $r7 = interfaceinvoke r2.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        r3 = (androidx.camera.core.ImageProxy) $r7;

        r13 = interfaceinvoke r3.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageInfo getImageInfo()>();

        r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.ImageInfo mSourceImageInfo> = r13;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        r14 = $r9;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not successfully extract ImageProxy from the ImageProxyBundle.");

        throw $r10;

     label6:
        $r8 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPreCaptureProcessor>;

        interfaceinvoke $r8.<androidx.camera.core.impl.CaptureProcessor: void process(androidx.camera.core.impl.ImageProxyBundle)>(r1);

        return;

        catch java.util.concurrent.ExecutionException from label3 to label4 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public void onResolutionUpdate(android.util.Size)
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        android.util.Size r1;
        androidx.camera.core.AndroidImageReaderProxy $r2;
        int $i0, $i1, $i2;
        android.media.ImageReader $r3;
        androidx.camera.core.impl.ImageReaderProxy $r4, $r9;
        androidx.camera.core.impl.CaptureProcessor $r5, $r7, $r8;
        android.view.Surface $r6;
        androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener $r10;
        java.util.concurrent.Executor $r11;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        r1 := @parameter0: android.util.Size;

        $r2 = new androidx.camera.core.AndroidImageReaderProxy;

        $i0 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $i2 = r0.<androidx.camera.core.CaptureProcessorPipeline: int mMaxImages>;

        $r3 = staticinvoke <android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>($i0, $i1, 35, $i2);

        specialinvoke $r2.<androidx.camera.core.AndroidImageReaderProxy: void <init>(android.media.ImageReader)>($r3);

        r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.ImageReaderProxy mIntermediateImageReader> = $r2;

        $r5 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPreCaptureProcessor>;

        $r4 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.ImageReaderProxy mIntermediateImageReader>;

        $r6 = interfaceinvoke $r4.<androidx.camera.core.impl.ImageReaderProxy: android.view.Surface getSurface()>();

        interfaceinvoke $r5.<androidx.camera.core.impl.CaptureProcessor: void onOutputSurface(android.view.Surface,int)>($r6, 35);

        $r7 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPreCaptureProcessor>;

        interfaceinvoke $r7.<androidx.camera.core.impl.CaptureProcessor: void onResolutionUpdate(android.util.Size)>(r1);

        $r8 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPostCaptureProcessor>;

        interfaceinvoke $r8.<androidx.camera.core.impl.CaptureProcessor: void onResolutionUpdate(android.util.Size)>(r1);

        $r9 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.ImageReaderProxy mIntermediateImageReader>;

        $r10 = dynamicinvoke "onImageAvailable" <androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener (androidx.camera.core.CaptureProcessorPipeline)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.CaptureProcessorPipeline: void lambda$onResolutionUpdate$1(androidx.camera.core.impl.ImageReaderProxy)>, methodtype: void __METHODTYPE__(androidx.camera.core.impl.ImageReaderProxy));

        $r11 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r9.<androidx.camera.core.impl.ImageReaderProxy: void setOnImageAvailableListener(androidx.camera.core.impl.ImageReaderProxy$OnImageAvailableListener,java.util.concurrent.Executor)>($r10, $r11);

        return;
    }

    void postProcess(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        androidx.camera.core.ImageProxy r1;
        boolean z0;
        java.lang.String r2, $r28, $r30;
        int i0, $i1, $i2;
        androidx.camera.core.SettableImageProxy r3, $r19;
        androidx.camera.core.SettableImageProxyBundle r4, $r21;
        java.lang.Throwable r5, $r25;
        java.lang.Object $r6, $r14, $r17, r31, $r33, r34;
        android.util.Size $r7, r32;
        androidx.camera.core.ImageInfo $r8, $r10, $r15, $r20;
        androidx.camera.core.impl.TagBundle $r11, $r16;
        java.util.Set $r12;
        java.util.Iterator $r13;
        java.lang.Integer $r18, $r22;
        java.util.List $r23;
        androidx.camera.core.impl.CaptureProcessor $r24;
        java.lang.StringBuilder $r26, $r27, $r29;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        $r6 = r0.<androidx.camera.core.CaptureProcessorPipeline: java.lang.Object mLock>;

        r31 = $r6;

        entermonitor $r6;

        z0 = r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mClosed>;

        exitmonitor r31;

        goto label1;

     label1:
        if z0 != 0 goto label5;

        $r7 = new android.util.Size;

        $i1 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: int getWidth()>();

        $i2 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: int getHeight()>();

        specialinvoke $r7.<android.util.Size: void <init>(int,int)>($i1, $i2);

        r32 = $r7;

        $r8 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.ImageInfo mSourceImageInfo>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r8);

        $r10 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.ImageInfo mSourceImageInfo>;

        $r11 = interfaceinvoke $r10.<androidx.camera.core.ImageInfo: androidx.camera.core.impl.TagBundle getTagBundle()>();

        $r12 = virtualinvoke $r11.<androidx.camera.core.impl.TagBundle: java.util.Set listKeys()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r14;

        $r15 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.ImageInfo mSourceImageInfo>;

        $r16 = interfaceinvoke $r15.<androidx.camera.core.ImageInfo: androidx.camera.core.impl.TagBundle getTagBundle()>();

        $r17 = virtualinvoke $r16.<androidx.camera.core.impl.TagBundle: java.lang.Object getTag(java.lang.String)>(r2);

        $r18 = (java.lang.Integer) $r17;

        i0 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $r19 = new androidx.camera.core.SettableImageProxy;

        $r20 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.ImageInfo mSourceImageInfo>;

        specialinvoke $r19.<androidx.camera.core.SettableImageProxy: void <init>(androidx.camera.core.ImageProxy,android.util.Size,androidx.camera.core.ImageInfo)>(r1, r32, $r20);

        r3 = $r19;

        r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.ImageInfo mSourceImageInfo> = null;

        $r21 = new androidx.camera.core.SettableImageProxyBundle;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r23 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r22);

        specialinvoke $r21.<androidx.camera.core.SettableImageProxyBundle: void <init>(java.util.List,java.lang.String)>($r23, r2);

        r4 = $r21;

        virtualinvoke r4.<androidx.camera.core.SettableImageProxyBundle: void addImageProxy(androidx.camera.core.ImageProxy)>(r3);

     label2:
        $r24 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPostCaptureProcessor>;

        interfaceinvoke $r24.<androidx.camera.core.impl.CaptureProcessor: void process(androidx.camera.core.impl.ImageProxyBundle)>(r4);

     label3:
        goto label5;

     label4:
        $r25 := @caughtexception;

        r5 = $r25;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Post processing image failed! ");

        $r28 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureProcessorPipeline", $r30);

     label5:
        $r33 = r0.<androidx.camera.core.CaptureProcessorPipeline: java.lang.Object mLock>;

        r34 = $r33;

        entermonitor $r33;

        r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mProcessing> = 0;

        exitmonitor r34;

        goto label6;

     label6:
        specialinvoke r0.<androidx.camera.core.CaptureProcessorPipeline: void closeAndCompleteFutureIfNecessary()>();

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void close()
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        java.lang.Object r1, $r2;
        boolean $z0;
        androidx.camera.core.impl.CaptureProcessor $r3, $r4;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        $r2 = r0.<androidx.camera.core.CaptureProcessorPipeline: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $z0 = r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mClosed>;

        if $z0 == 0 goto label1;

        exitmonitor r1;

        return;

     label1:
        r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mClosed> = 1;

        exitmonitor r1;

        goto label2;

     label2:
        $r3 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPreCaptureProcessor>;

        interfaceinvoke $r3.<androidx.camera.core.impl.CaptureProcessor: void close()>();

        $r4 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.CaptureProcessor mPostCaptureProcessor>;

        interfaceinvoke $r4.<androidx.camera.core.impl.CaptureProcessor: void close()>();

        specialinvoke r0.<androidx.camera.core.CaptureProcessorPipeline: void closeAndCompleteFutureIfNecessary()>();

        return;
    }

    private void closeAndCompleteFutureIfNecessary()
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        boolean z0, z1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        com.google.common.util.concurrent.ListenableFuture $r5;
        java.lang.Runnable $r6;
        java.util.concurrent.Executor $r7;
        androidx.camera.core.impl.ImageReaderProxy $r8;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        $r4 = r0.<androidx.camera.core.CaptureProcessorPipeline: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        z0 = r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mClosed>;

        z1 = r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mProcessing>;

        r1 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCloseCompleter>;

        if z0 == 0 goto label2;

        if z1 != 0 goto label2;

        $r8 = r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.camera.core.impl.ImageReaderProxy mIntermediateImageReader>;

        interfaceinvoke $r8.<androidx.camera.core.impl.ImageReaderProxy: void close()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        if z0 == 0 goto label7;

        if z1 != 0 goto label7;

        if r1 == null goto label7;

        $r5 = r0.<androidx.camera.core.CaptureProcessorPipeline: com.google.common.util.concurrent.ListenableFuture mUnderlyingCaptureProcessorsCloseFuture>;

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.CaptureProcessorPipeline: void lambda$closeAndCompleteFutureIfNecessary$2(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        $r7 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r5.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r6, $r7);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public com.google.common.util.concurrent.ListenableFuture getCloseFuture()
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r11;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r4, $r5, $r7, $r8, r12;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r6;
        androidx.arch.core.util.Function $r9;
        java.util.concurrent.Executor $r10;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        $r3 = r0.<androidx.camera.core.CaptureProcessorPipeline: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mClosed>;

        if $z0 == 0 goto label2;

        $z1 = r0.<androidx.camera.core.CaptureProcessorPipeline: boolean mProcessing>;

        if $z1 != 0 goto label2;

        $r8 = r0.<androidx.camera.core.CaptureProcessorPipeline: com.google.common.util.concurrent.ListenableFuture mUnderlyingCaptureProcessorsCloseFuture>;

        $r9 = dynamicinvoke "apply" <androidx.arch.core.util.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.CaptureProcessorPipeline: java.lang.Void lambda$getCloseFuture$3(java.util.List)>, methodtype: java.lang.Void __METHODTYPE__(java.util.List));

        $r10 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        r12 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r8, $r9, $r10);

        goto label4;

     label2:
        $r4 = r0.<androidx.camera.core.CaptureProcessorPipeline: com.google.common.util.concurrent.ListenableFuture mCloseFuture>;

        if $r4 != null goto label3;

        $r6 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.core.CaptureProcessorPipeline)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.CaptureProcessorPipeline: java.lang.Object lambda$getCloseFuture$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r7 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r6);

        r0.<androidx.camera.core.CaptureProcessorPipeline: com.google.common.util.concurrent.ListenableFuture mCloseFuture> = $r7;

     label3:
        $r5 = r0.<androidx.camera.core.CaptureProcessorPipeline: com.google.common.util.concurrent.ListenableFuture mCloseFuture>;

        r12 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r5);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return r12;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private java.lang.Object lambda$getCloseFuture$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.lang.Object r2, $r3;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = r0.<androidx.camera.core.CaptureProcessorPipeline: java.lang.Object mLock>;

        r2 = $r3;

        entermonitor $r3;

        r0.<androidx.camera.core.CaptureProcessorPipeline: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCloseCompleter> = r1;

        exitmonitor r2;

        goto label1;

     label1:
        return "CaptureProcessorPipeline-close";
    }

    private static java.lang.Void lambda$getCloseFuture$3(java.util.List)
    {
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        return null;
    }

    private static void lambda$closeAndCompleteFutureIfNecessary$2(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r0;

        r0 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        virtualinvoke r0.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;
    }

    private void lambda$onResolutionUpdate$1(androidx.camera.core.impl.ImageReaderProxy)
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        androidx.camera.core.impl.ImageReaderProxy r1;
        androidx.camera.core.ImageProxy r2;
        java.lang.Throwable r3, $r6;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        r1 := @parameter0: androidx.camera.core.impl.ImageReaderProxy;

        r2 = interfaceinvoke r1.<androidx.camera.core.impl.ImageReaderProxy: androidx.camera.core.ImageProxy acquireNextImage()>();

     label1:
        $r4 = r0.<androidx.camera.core.CaptureProcessorPipeline: java.util.concurrent.Executor mExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.CaptureProcessorPipeline,androidx.camera.core.ImageProxy)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.CaptureProcessorPipeline: void lambda$onResolutionUpdate$0(androidx.camera.core.ImageProxy)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureProcessorPipeline", "The executor for post-processing might have been shutting down or terminated!");

        interfaceinvoke r2.<androidx.camera.core.ImageProxy: void close()>();

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private void lambda$onResolutionUpdate$0(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.CaptureProcessorPipeline r0;
        androidx.camera.core.ImageProxy r1;

        r0 := @this: androidx.camera.core.CaptureProcessorPipeline;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        virtualinvoke r0.<androidx.camera.core.CaptureProcessorPipeline: void postProcess(androidx.camera.core.ImageProxy)>(r1);

        return;
    }

