androidx.media3.exoplayer.mediacodec.MediaCodecRenderer
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float CODEC_OPERATING_RATE_UNSET>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.lang.String TAG>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long MAX_CODEC_HOTSWAP_TIME_MS>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int RECONFIGURATION_STATE_NONE>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int RECONFIGURATION_STATE_WRITE_PENDING>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int RECONFIGURATION_STATE_QUEUE_PENDING>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int DRAIN_STATE_NONE>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int DRAIN_STATE_SIGNAL_END_OF_STREAM>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int DRAIN_STATE_WAIT_END_OF_STREAM>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int DRAIN_ACTION_NONE>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int DRAIN_ACTION_FLUSH>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int DRAIN_ACTION_FLUSH_AND_UPDATE_DRM_SESSION>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int DRAIN_ACTION_REINITIALIZE>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int ADAPTATION_WORKAROUND_MODE_NEVER>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int ADAPTATION_WORKAROUND_MODE_SAME_RESOLUTION>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int ADAPTATION_WORKAROUND_MODE_ALWAYS>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: byte[] ADAPTATION_WORKAROUND_BUFFER>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int ADAPTATION_WORKAROUND_SLICE_WIDTH_HEIGHT>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory codecAdapterFactory>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecSelector mediaCodecSelector>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean enableDecoderFallback>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float assumedMinimumCodecOperatingRate>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer noDataBuffer>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayList decodeOnlyPresentationTimestamps>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format outputFormat>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession sourceDrmSession>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean mediaCryptoRequiresSecureDecoder>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long renderTimeLimitMs>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float currentPlaybackSpeed>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float targetPlaybackSpeed>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaFormat codecOutputMediaFormat>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecOutputMediaFormatChanged>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float codecOperatingRate>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException preferredDecoderInitializationException>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecAdaptationWorkaroundMode>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsDiscardToSpsWorkaround>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsFlushWorkaround>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsSosFlushWorkaround>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosFlushWorkaround>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosOutputExceptionWorkaround>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosBufferTimestampWorkaround>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsMonoChannelCountWorkaround>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsAdaptationWorkaroundBuffer>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldSkipAdaptationWorkaroundOutputBuffer>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosPropagation>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker c2Mp3TimestampTracker>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long codecHotswapDeadlineMs>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int outputIndex>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.nio.ByteBuffer outputBuffer>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isDecodeOnlyOutputBuffer>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isLastOutputBuffer>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassEnabled>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassSampleBufferPending>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassDrainAndReinitialize>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReconfigured>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedBuffers>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedEos>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecHasOutputMediaFormat>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastBufferInStreamPresentationTimeUs>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean outputStreamEnded>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean waitingForFirstSampleInFormat>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean pendingOutputEndOfStream>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException pendingPlaybackException>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo outputStreamInfo>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastProcessedOutputBufferTimeUs>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean needToNotifyOutputFormatChangeAfterStreamChange>
    public void <init>(int, androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory, androidx.media3.exoplayer.mediacodec.MediaCodecSelector, boolean, float)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        int i0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r2, $r4;
        boolean z0;
        float f0;
        java.lang.Object $r3;
        androidx.media3.decoder.DecoderInputBuffer $r5, $r6, $r7;
        androidx.media3.exoplayer.mediacodec.BatchBuffer $r8, $r13, $r14;
        java.util.ArrayList $r9;
        android.media.MediaCodec$BufferInfo $r10;
        java.util.ArrayDeque $r11;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo $r12;
        java.nio.ByteBuffer $r15;
        java.nio.ByteOrder $r16;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory;

        r2 := @parameter2: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        z0 := @parameter3: boolean;

        f0 := @parameter4: float;

        specialinvoke r0.<androidx.media3.exoplayer.BaseRenderer: void <init>(int)>(i0);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory codecAdapterFactory> = r1;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (androidx.media3.exoplayer.mediacodec.MediaCodecSelector) $r3;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecSelector mediaCodecSelector> = $r4;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean enableDecoderFallback> = z0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float assumedMinimumCodecOperatingRate> = f0;

        $r5 = staticinvoke <androidx.media3.decoder.DecoderInputBuffer: androidx.media3.decoder.DecoderInputBuffer newNoDataInstance()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer noDataBuffer> = $r5;

        $r6 = new androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke $r6.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(0);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer> = $r6;

        $r7 = new androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke $r7.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(2);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer> = $r7;

        $r8 = new androidx.media3.exoplayer.mediacodec.BatchBuffer;

        specialinvoke $r8.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayList decodeOnlyPresentationTimestamps> = $r9;

        $r10 = new android.media.MediaCodec$BufferInfo;

        specialinvoke $r10.<android.media.MediaCodec$BufferInfo: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo> = $r10;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float currentPlaybackSpeed> = 1.0F;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float targetPlaybackSpeed> = 1.0F;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long renderTimeLimitMs> = -9223372036854775807L;

        $r11 = new java.util.ArrayDeque;

        specialinvoke $r11.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges> = $r11;

        $r12 = <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo UNSET>;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setOutputStreamInfo(androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo)>($r12);

        $r13 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        virtualinvoke $r13.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void ensureSpaceForWrite(int)>(0);

        $r14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $r15 = $r14.<androidx.media3.exoplayer.mediacodec.BatchBuffer: java.nio.ByteBuffer data>;

        $r16 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke $r15.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r16);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float codecOperatingRate> = -1.0F;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecAdaptationWorkaroundMode> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex> = -1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int outputIndex> = -1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long codecHotswapDeadlineMs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastBufferInStreamPresentationTimeUs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastProcessedOutputBufferTimeUs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction> = 0;

        return;
    }

    public void setRenderTimeLimitMs(long)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long renderTimeLimitMs> = l0;

        return;
    }

    public final int supportsMixedMimeTypeAdaptation()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        return 8;
    }

    public final int supportsFormat(androidx.media3.common.Format) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.common.Format r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector $r2;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecSelector mediaCodecSelector>;

        $i0 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int supportsFormat(androidx.media3.exoplayer.mediacodec.MediaCodecSelector,androidx.media3.common.Format)>($r2, r1);

        return $i0;
    }

<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int supportsFormat(androidx.media3.exoplayer.mediacodec.MediaCodecSelector,androidx.media3.common.Format)>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.List getDecoderInfos(androidx.media3.exoplayer.mediacodec.MediaCodecSelector,androidx.media3.common.Format,boolean)>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration getMediaCodecConfiguration(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,androidx.media3.common.Format,android.media.MediaCrypto,float)>
    protected final void maybeInitCodecOrBypass() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.String r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        androidx.media3.common.Format $r3, $r6, $r13, $r21, $r22, $r24;
        androidx.media3.exoplayer.drm.DrmSession $r4, $r5, $r7, $r9, $r10, $r15, $r20;
        android.media.MediaCrypto $r8, $r19, $r31, r32;
        androidx.media3.exoplayer.drm.DrmSession$DrmSessionException $r11, r27, r30;
        java.lang.Object $r12;
        int $i0, i1;
        androidx.media3.exoplayer.ExoPlaybackException $r14, $r25;
        byte[] $r17;
        java.util.UUID $r18;
        java.lang.Throwable $r23, r28, r33, r34, r35;
        androidx.media3.exoplayer.drm.FrameworkCryptoConfig r26;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        if $r2 != null goto label01;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassEnabled>;

        if $z0 != 0 goto label01;

        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        if $r3 != null goto label02;

     label01:
        return;

     label02:
        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession sourceDrmSession>;

        if $r4 != null goto label03;

        $r21 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $z3 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldUseBypass(androidx.media3.common.Format)>($r21);

        if $z3 == 0 goto label03;

        $r22 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void initBypass(androidx.media3.common.Format)>($r22);

        return;

     label03:
        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession sourceDrmSession>;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setCodecDrmSession(androidx.media3.exoplayer.drm.DrmSession)>($r5);

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        r1 = $r6.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession>;

        if $r7 == null goto label14;

        $r8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto>;

        if $r8 != null goto label12;

        $r15 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession>;

        r26 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.FrameworkCryptoConfig getFrameworkCryptoConfig(androidx.media3.exoplayer.drm.DrmSession)>($r15);

        if r26 != null goto label06;

        $r20 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession>;

        r27 = interfaceinvoke $r20.<androidx.media3.exoplayer.drm.DrmSession: androidx.media3.exoplayer.drm.DrmSession$DrmSessionException getError()>();

        if r27 == null goto label04;

        goto label05;

     label04:
        return;

     label05:
        goto label12;

     label06:
        r32 = new android.media.MediaCrypto;

        $r18 = r26.<androidx.media3.exoplayer.drm.FrameworkCryptoConfig: java.util.UUID uuid>;

        $r17 = r26.<androidx.media3.exoplayer.drm.FrameworkCryptoConfig: byte[] sessionId>;

        specialinvoke r32.<android.media.MediaCrypto: void <init>(java.util.UUID,byte[])>($r18, $r17);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto> = r32;

     label07:
        goto label09;

     label08:
        $r23 := @caughtexception;

        r28 = $r23;

        $r24 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $r25 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException createRendererException(java.lang.Throwable,androidx.media3.common.Format,int)>(r28, $r24, 6006);

        r33 = (java.lang.Throwable) $r25;

        throw r33;

     label09:
        $z1 = r26.<androidx.media3.exoplayer.drm.FrameworkCryptoConfig: boolean forceAllowInsecureDecoderComponents>;

        if $z1 != 0 goto label10;

        $r19 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto>;

        $z2 = virtualinvoke $r19.<android.media.MediaCrypto: boolean requiresSecureDecoderComponent(java.lang.String)>(r1);

        if $z2 == 0 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean mediaCryptoRequiresSecureDecoder> = $z4;

     label12:
        $z5 = <androidx.media3.exoplayer.drm.FrameworkCryptoConfig: boolean WORKAROUND_DEVICE_NEEDS_KEYS_TO_CONFIGURE_CODEC>;

        if $z5 == 0 goto label14;

        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession>;

        i1 = interfaceinvoke $r9.<androidx.media3.exoplayer.drm.DrmSession: int getState()>();

        if i1 != 1 goto label13;

        $r10 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession>;

        $r11 = interfaceinvoke $r10.<androidx.media3.exoplayer.drm.DrmSession: androidx.media3.exoplayer.drm.DrmSession$DrmSessionException getError()>();

        $r12 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r11);

        r30 = (androidx.media3.exoplayer.drm.DrmSession$DrmSessionException) $r12;

        $r13 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $i0 = r30.<androidx.media3.exoplayer.drm.DrmSession$DrmSessionException: int errorCode>;

        r34 = (java.lang.Throwable) r30;

        $r14 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException createRendererException(java.lang.Throwable,androidx.media3.common.Format,int)>(r34, $r13, $i0);

        r35 = (java.lang.Throwable) $r14;

        throw r35;

     label13:
        if i1 == 4 goto label14;

        return;

     label14:
        $r31 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto>;

        $z6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean mediaCryptoRequiresSecureDecoder>;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void maybeInitCodecWithFallback(android.media.MediaCrypto,boolean)>($r31, $z6);

        goto label15;

     label15:
        return;

        catch android.media.MediaCryptoException from label06 to label07 with label08;
    }

    protected boolean shouldUseBypass(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.common.Format r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        return 0;
    }

    protected boolean shouldInitCodec(androidx.media3.exoplayer.mediacodec.MediaCodecInfo)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        return 1;
    }

    protected boolean shouldReinitCodec()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        return 0;
    }

    protected boolean getCodecNeedsEosPropagation()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        return 0;
    }

    protected final void setPendingPlaybackException(androidx.media3.exoplayer.ExoPlaybackException)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.ExoPlaybackException r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlaybackException;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException pendingPlaybackException> = r1;

        return;
    }

    protected final void updateOutputFormatForTime(long) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo $r1, $r8;
        androidx.media3.common.util.TimedValueQueue $r2, $r9;
        java.lang.Object $r3, $r10;
        android.media.MediaFormat $r4, $r7;
        androidx.media3.common.Format $r5, $r6, r11;
        boolean $z0, $z1, z2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        z2 = 0;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo outputStreamInfo>;

        $r2 = $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.common.util.TimedValueQueue formatQueue>;

        $r3 = virtualinvoke $r2.<androidx.media3.common.util.TimedValueQueue: java.lang.Object pollFloor(long)>(l0);

        r11 = (androidx.media3.common.Format) $r3;

        if r11 != null goto label1;

        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean needToNotifyOutputFormatChangeAfterStreamChange>;

        if $z1 == 0 goto label1;

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaFormat codecOutputMediaFormat>;

        if $r7 == null goto label1;

        $r8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo outputStreamInfo>;

        $r9 = $r8.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.common.util.TimedValueQueue formatQueue>;

        $r10 = virtualinvoke $r9.<androidx.media3.common.util.TimedValueQueue: java.lang.Object pollFirst()>();

        r11 = (androidx.media3.common.Format) $r10;

     label1:
        if r11 == null goto label2;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format outputFormat> = r11;

        z2 = 1;

     label2:
        if z2 != 0 goto label3;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecOutputMediaFormatChanged>;

        if $z0 == 0 goto label4;

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format outputFormat>;

        if $r6 == null goto label4;

     label3:
        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format outputFormat>;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaFormat codecOutputMediaFormat>;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onOutputFormatChanged(androidx.media3.common.Format,android.media.MediaFormat)>($r5, $r4);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecOutputMediaFormatChanged> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean needToNotifyOutputFormatChangeAfterStreamChange> = 0;

     label4:
        return;
    }

    protected final androidx.media3.exoplayer.mediacodec.MediaCodecAdapter getCodec()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        return $r1;
    }

    protected final android.media.MediaFormat getCodecOutputMediaFormat()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        android.media.MediaFormat $r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaFormat codecOutputMediaFormat>;

        return $r1;
    }

    protected final androidx.media3.exoplayer.mediacodec.MediaCodecInfo getCodecInfo()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo $r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo>;

        return $r1;
    }

    protected void onEnabled(boolean, boolean) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        boolean z0, z1;
        androidx.media3.exoplayer.DecoderCounters $r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = new androidx.media3.exoplayer.DecoderCounters;

        specialinvoke $r1.<androidx.media3.exoplayer.DecoderCounters: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters> = $r1;

        return;
    }

    protected void onStreamChanged(androidx.media3.common.Format[], long, long) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.common.Format[] r1;
        long l0, l1, $l2, $l4, $l6, $l7, $l9;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo $r2, $r3, $r6;
        byte $b3, $b5, $b8;
        java.util.ArrayDeque $r4, $r5;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.common.Format[];

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo outputStreamInfo>;

        $l2 = $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long streamOffsetUs>;

        $b3 = $l2 cmp -9223372036854775807L;

        if $b3 == 0 goto label1;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>;

        $z0 = virtualinvoke $r4.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $l4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastProcessedOutputBufferTimeUs>;

        $b5 = $l4 cmp -9223372036854775807L;

        if $b5 == 0 goto label2;

        $l7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastProcessedOutputBufferTimeUs>;

        $l6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs>;

        $b8 = $l7 cmp $l6;

        if $b8 < 0 goto label2;

     label1:
        $r3 = new androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo;

        specialinvoke $r3.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: void <init>(long,long,long)>(-9223372036854775807L, l0, l1);

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setOutputStreamInfo(androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo)>($r3);

        goto label3;

     label2:
        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>;

        $r6 = new androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo;

        $l9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs>;

        specialinvoke $r6.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: void <init>(long,long,long)>($l9, l0, l1);

        virtualinvoke $r5.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r6);

     label3:
        return;
    }

    protected void onPositionReset(long, boolean) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0;
        boolean z0, $z1;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo $r1, $r3;
        androidx.media3.common.util.TimedValueQueue $r2, $r4;
        int $i1;
        java.util.ArrayDeque $r5;
        androidx.media3.exoplayer.mediacodec.BatchBuffer $r6;
        androidx.media3.decoder.DecoderInputBuffer $r7;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean outputStreamEnded> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean pendingOutputEndOfStream> = 0;

        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassEnabled>;

        if $z1 == 0 goto label1;

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        virtualinvoke $r6.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void clear()>();

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>;

        virtualinvoke $r7.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassSampleBufferPending> = 0;

        goto label2;

     label1:
        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean flushOrReinitializeCodec()>();

     label2:
        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo outputStreamInfo>;

        $r2 = $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.common.util.TimedValueQueue formatQueue>;

        $i1 = virtualinvoke $r2.<androidx.media3.common.util.TimedValueQueue: int size()>();

        if $i1 <= 0 goto label3;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean waitingForFirstSampleInFormat> = 1;

     label3:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo outputStreamInfo>;

        $r4 = $r3.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.common.util.TimedValueQueue formatQueue>;

        virtualinvoke $r4.<androidx.media3.common.util.TimedValueQueue: void clear()>();

        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>;

        virtualinvoke $r5.<java.util.ArrayDeque: void clear()>();

        return;
    }

    public void setPlaybackSpeed(float, float) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        float f0, f1;
        androidx.media3.common.Format $r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float currentPlaybackSpeed> = f0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float targetPlaybackSpeed> = f1;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat>;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean updateCodecOperatingRate(androidx.media3.common.Format)>($r1);

        return;
    }

    protected void onDisabled()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo $r1;
        java.util.ArrayDeque $r2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat> = null;

        $r1 = <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo UNSET>;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setOutputStreamInfo(androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo)>($r1);

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>;

        virtualinvoke $r2.<java.util.ArrayDeque: void clear()>();

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean flushOrReleaseCodec()>();

        return;
    }

    protected void onReset()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

     label1:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void disableBypass()>();

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void releaseCodec()>();

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setSourceDrmSession(androidx.media3.exoplayer.drm.DrmSession)>(null);

        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setSourceDrmSession(androidx.media3.exoplayer.drm.DrmSession)>(null);

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void disableBypass()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.BatchBuffer $r1;
        androidx.media3.decoder.DecoderInputBuffer $r2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassDrainAndReinitialize> = 0;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        virtualinvoke $r1.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void clear()>();

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>;

        virtualinvoke $r2.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassSampleBufferPending> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassEnabled> = 0;

        return;
    }

    protected void releaseCodec()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.Throwable r1, r2, r3, $r11, $r12, $r13;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r4, $r7;
        android.media.MediaCrypto $r5, $r6, $r14, $r15;
        androidx.media3.exoplayer.DecoderCounters $r8;
        int $i0, $i1;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo $r9;
        java.lang.String $r10;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

     label01:
        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        if $r4 == null goto label02;

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        interfaceinvoke $r7.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void release()>();

        $r8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        $i0 = $r8.<androidx.media3.exoplayer.DecoderCounters: int decoderReleaseCount>;

        $i1 = $i0 + 1;

        $r8.<androidx.media3.exoplayer.DecoderCounters: int decoderReleaseCount> = $i1;

        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo>;

        $r10 = $r9.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onCodecReleased(java.lang.String)>($r10);

     label02:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec> = null;

     label03:
        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto>;

        if $r5 == null goto label04;

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto>;

        virtualinvoke $r6.<android.media.MediaCrypto: void release()>();

     label04:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto> = null;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setCodecDrmSession(androidx.media3.exoplayer.drm.DrmSession)>(null);

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetCodecStateForRelease()>();

        goto label06;

     label05:
        $r11 := @caughtexception;

        r1 = $r11;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto> = null;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setCodecDrmSession(androidx.media3.exoplayer.drm.DrmSession)>(null);

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetCodecStateForRelease()>();

        throw r1;

     label06:
        goto label12;

     label07:
        $r13 := @caughtexception;

        r2 = $r13;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec> = null;

     label08:
        $r14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto>;

        if $r14 == null goto label09;

        $r15 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto>;

        virtualinvoke $r15.<android.media.MediaCrypto: void release()>();

     label09:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto> = null;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setCodecDrmSession(androidx.media3.exoplayer.drm.DrmSession)>(null);

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetCodecStateForRelease()>();

        goto label11;

     label10:
        $r12 := @caughtexception;

        r3 = $r12;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto> = null;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setCodecDrmSession(androidx.media3.exoplayer.drm.DrmSession)>(null);

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetCodecStateForRelease()>();

        throw r3;

     label11:
        throw r2;

     label12:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    protected void onStarted()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        return;
    }

    protected void onStopped()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        return;
    }

    public void render(long, long) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0, l1, l6;
        boolean z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        androidx.media3.exoplayer.ExoPlaybackException $r1, $r9, r10;
        androidx.media3.common.Format $r2, $r8;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r3;
        androidx.media3.exoplayer.DecoderCounters $r4, $r11;
        int $i2, $i3, $i4, $i5;
        java.lang.Throwable $r5, r12, r13, r14, r15;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo $r6;
        androidx.media3.exoplayer.mediacodec.MediaCodecDecoderException $r7;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean pendingOutputEndOfStream>;

        if $z1 == 0 goto label01;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean pendingOutputEndOfStream> = 0;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void processEndOfStream()>();

     label01:
        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException pendingPlaybackException>;

        if $r1 == null goto label02;

        r10 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException pendingPlaybackException>;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException pendingPlaybackException> = null;

        r13 = (java.lang.Throwable) r10;

        throw r13;

     label02:
        $z2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean outputStreamEnded>;

        if $z2 == 0 goto label04;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void renderToEndOfStream()>();

     label03:
        return;

     label04:
        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        if $r2 != null goto label06;

        $z9 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean readSourceOmittingSampleData(int)>(2);

        if $z9 != 0 goto label06;

     label05:
        return;

     label06:
        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void maybeInitCodecOrBypass()>();

        $z3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassEnabled>;

        if $z3 == 0 goto label09;

        staticinvoke <androidx.media3.common.util.TraceUtil: void beginSection(java.lang.String)>("bypassRender");

     label07:
        $z8 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassRender(long,long)>(l0, l1);

        if $z8 == 0 goto label08;

        goto label07;

     label08:
        staticinvoke <androidx.media3.common.util.TraceUtil: void endSection()>();

        goto label14;

     label09:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        if $r3 == null goto label13;

        l6 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <androidx.media3.common.util.TraceUtil: void beginSection(java.lang.String)>("drainAndFeed");

     label10:
        $z5 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean drainOutputBuffer(long,long)>(l0, l1);

        if $z5 == 0 goto label11;

        $z7 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldContinueRendering(long)>(l6);

        if $z7 == 0 goto label11;

        goto label10;

     label11:
        $z12 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean feedInputBuffer()>();

        if $z12 == 0 goto label12;

        $z6 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldContinueRendering(long)>(l6);

        if $z6 == 0 goto label12;

        goto label11;

     label12:
        staticinvoke <androidx.media3.common.util.TraceUtil: void endSection()>();

        goto label14;

     label13:
        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        $i2 = $r4.<androidx.media3.exoplayer.DecoderCounters: int skippedInputBufferCount>;

        $i3 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int skipSource(long)>(l0);

        $i4 = $i2 + $i3;

        $r4.<androidx.media3.exoplayer.DecoderCounters: int skippedInputBufferCount> = $i4;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean readSourceOmittingSampleData(int)>(1);

     label14:
        $r11 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        virtualinvoke $r11.<androidx.media3.exoplayer.DecoderCounters: void ensureUpdated()>();

     label15:
        goto label21;

     label16:
        $r5 := @caughtexception;

        r12 = $r5;

        $z10 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isMediaCodecException(java.lang.IllegalStateException)>(r12);

        if $z10 == 0 goto label20;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onCodecError(java.lang.Exception)>(r12);

        $i5 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i5 < 21 goto label17;

        $z11 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isRecoverableMediaCodecExceptionV21(java.lang.IllegalStateException)>(r12);

        if $z11 == 0 goto label17;

        $z13 = 1;

        goto label18;

     label17:
        $z13 = 0;

     label18:
        z0 = $z13;

        if z0 == 0 goto label19;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void releaseCodec()>();

     label19:
        $r6 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecInfo getCodecInfo()>();

        $r7 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecDecoderException createDecoderException(java.lang.Throwable,androidx.media3.exoplayer.mediacodec.MediaCodecInfo)>(r12, $r6);

        $r8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        r14 = (java.lang.Throwable) $r7;

        $r9 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException createRendererException(java.lang.Throwable,androidx.media3.common.Format,boolean,int)>(r14, $r8, z0, 4003);

        r15 = (java.lang.Throwable) $r9;

        throw r15;

     label20:
        throw r12;

     label21:
        return;

        catch java.lang.IllegalStateException from label02 to label03 with label16;
        catch java.lang.IllegalStateException from label04 to label05 with label16;
        catch java.lang.IllegalStateException from label06 to label15 with label16;
    }

    protected final boolean flushOrReinitializeCodec() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        boolean z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        z0 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean flushOrReleaseCodec()>();

        if z0 == 0 goto label1;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void maybeInitCodecOrBypass()>();

     label1:
        return z0;
    }

    protected boolean flushOrReleaseCodec()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction>;

        if $i0 == 3 goto label3;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsFlushWorkaround>;

        if $z0 != 0 goto label3;

        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsSosFlushWorkaround>;

        if $z1 == 0 goto label2;

        $z4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecHasOutputMediaFormat>;

        if $z4 == 0 goto label3;

     label2:
        $z2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosFlushWorkaround>;

        if $z2 == 0 goto label4;

        $z3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedEos>;

        if $z3 == 0 goto label4;

     label3:
        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void releaseCodec()>();

        return 1;

     label4:
        $i1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction>;

        if $i1 != 2 goto label7;

        $i2 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i2 < 23 goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z5);

        $i3 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i3 < 23 goto label7;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void updateDrmSessionV23()>();

        goto label7;

     label7:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void flushCodec()>();

        return 0;
    }

    private void flushCodec()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.Throwable r1, $r3;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

     label1:
        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void flush()>();

     label2:
        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetCodecStateForFlush()>();

        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetCodecStateForFlush()>();

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void resetCodecStateForFlush()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.util.ArrayList $r1;
        androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker $r2, $r4;
        boolean $z0;
        byte $b0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetInputBuffer()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetOutputBuffer()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long codecHotswapDeadlineMs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedEos> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedBuffers> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsAdaptationWorkaroundBuffer> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldSkipAdaptationWorkaroundOutputBuffer> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isDecodeOnlyOutputBuffer> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isLastOutputBuffer> = 0;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayList decodeOnlyPresentationTimestamps>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastBufferInStreamPresentationTimeUs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastProcessedOutputBufferTimeUs> = -9223372036854775807L;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker c2Mp3TimestampTracker>;

        if $r2 == null goto label1;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker c2Mp3TimestampTracker>;

        virtualinvoke $r4.<androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker: void reset()>();

     label1:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction> = 0;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReconfigured>;

        if $z0 == 0 goto label2;

        $b0 = 1;

        goto label3;

     label2:
        $b0 = 0;

     label3:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = $b0;

        return;
    }

    protected void resetCodecStateForRelease()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetCodecStateForFlush()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException pendingPlaybackException> = null;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker c2Mp3TimestampTracker> = null;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos> = null;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo> = null;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat> = null;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaFormat codecOutputMediaFormat> = null;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecOutputMediaFormatChanged> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecHasOutputMediaFormat> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float codecOperatingRate> = -1.0F;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecAdaptationWorkaroundMode> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsDiscardToSpsWorkaround> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsFlushWorkaround> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsSosFlushWorkaround> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosFlushWorkaround> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosOutputExceptionWorkaround> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosBufferTimestampWorkaround> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsMonoChannelCountWorkaround> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosPropagation> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReconfigured> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean mediaCryptoRequiresSecureDecoder> = 0;

        return;
    }

    protected androidx.media3.exoplayer.mediacodec.MediaCodecDecoderException createDecoderException(java.lang.Throwable, androidx.media3.exoplayer.mediacodec.MediaCodecInfo)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.Throwable r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r2;
        androidx.media3.exoplayer.mediacodec.MediaCodecDecoderException $r3;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        $r3 = new androidx.media3.exoplayer.mediacodec.MediaCodecDecoderException;

        specialinvoke $r3.<androidx.media3.exoplayer.mediacodec.MediaCodecDecoderException: void <init>(java.lang.Throwable,androidx.media3.exoplayer.mediacodec.MediaCodecInfo)>(r1, r2);

        return $r3;
    }

    private boolean readSourceOmittingSampleData(int) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        int i0, i1, $i2;
        androidx.media3.exoplayer.FormatHolder r1;
        androidx.media3.decoder.DecoderInputBuffer $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.FormatHolder getFormatHolder()>();

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer noDataBuffer>;

        virtualinvoke $r2.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer noDataBuffer>;

        $i2 = i0 | 4;

        i1 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int readSource(androidx.media3.exoplayer.FormatHolder,androidx.media3.decoder.DecoderInputBuffer,int)>(r1, $r3, $i2);

        if i1 != -5 goto label1;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderReuseEvaluation onInputFormatChanged(androidx.media3.exoplayer.FormatHolder)>(r1);

        return 1;

     label1:
        if i1 != -4 goto label2;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer noDataBuffer>;

        $z0 = virtualinvoke $r4.<androidx.media3.decoder.DecoderInputBuffer: boolean isEndOfStream()>();

        if $z0 == 0 goto label2;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded> = 1;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void processEndOfStream()>();

     label2:
        return 0;
    }

    private void maybeInitCodecWithFallback(android.media.MediaCrypto, boolean) throws androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        android.media.MediaCrypto r1;
        boolean z0, $z1, $z2, $z3, $z4, $z7;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r2, $r16, r34;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException r3, $r27, $r28, $r29, $r31, r38, r40;
        java.util.ArrayDeque $r4, $r5, $r6, $r9, $r14, $r17, $r23, $r30, r37;
        java.lang.Object $r7, $r10, $r15;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r8;
        androidx.media3.common.Format $r12, $r26;
        java.lang.Throwable $r18, $r32, r35, r36, r41, r42;
        java.lang.StringBuilder $r20, $r21, r39;
        java.lang.String $r22;
        java.util.List r33;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: android.media.MediaCrypto;

        z0 := @parameter1: boolean;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos>;

        if $r4 != null goto label03;

        r33 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.List getAvailableCodecInfos(boolean)>(z0);

        r37 = new java.util.ArrayDeque;

        specialinvoke r37.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos> = r37;

        $z3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean enableDecoderFallback>;

        if $z3 == 0 goto label01;

        $r17 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos>;

        virtualinvoke $r17.<java.util.ArrayDeque: boolean addAll(java.util.Collection)>(r33);

        goto label02;

     label01:
        $z4 = interfaceinvoke r33.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label02;

        $r14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos>;

        $r15 = interfaceinvoke r33.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (androidx.media3.exoplayer.mediacodec.MediaCodecInfo) $r15;

        virtualinvoke $r14.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r16);

     label02:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException preferredDecoderInitializationException> = null;

        goto label03;

     label03:
        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos>;

        $z1 = virtualinvoke $r5.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z1 == 0 goto label04;

        r38 = new androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        $r12 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        specialinvoke r38.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: void <init>(androidx.media3.common.Format,java.lang.Throwable,boolean,int)>($r12, null, z0, -49999);

        r41 = (java.lang.Throwable) r38;

        throw r41;

     label04:
        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos>;

        $r7 = virtualinvoke $r6.<java.util.ArrayDeque: java.lang.Object peekFirst()>();

        r34 = (androidx.media3.exoplayer.mediacodec.MediaCodecInfo) $r7;

     label05:
        $r8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        if $r8 != null goto label15;

        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos>;

        $r10 = virtualinvoke $r9.<java.util.ArrayDeque: java.lang.Object peekFirst()>();

        r2 = (androidx.media3.exoplayer.mediacodec.MediaCodecInfo) $r10;

        $z2 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldInitCodec(androidx.media3.exoplayer.mediacodec.MediaCodecInfo)>(r2);

        if $z2 != 0 goto label06;

        return;

     label06:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void initCodec(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,android.media.MediaCrypto)>(r2, r1);

     label07:
        goto label10;

     label08:
        $r32 := @caughtexception;

        r35 = $r32;

        if r2 != r34 goto label09;

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MediaCodecRenderer", "Preferred decoder instantiation failed. Sleeping for 50ms then retrying.");

        staticinvoke <java.lang.Thread: void sleep(long)>(50L);

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void initCodec(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,android.media.MediaCrypto)>(r2, r1);

        goto label10;

     label09:
        throw r35;

     label10:
        goto label14;

     label11:
        $r18 := @caughtexception;

        r36 = $r18;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to initialize decoder: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecRenderer", $r22, r36);

        $r23 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos>;

        virtualinvoke $r23.<java.util.ArrayDeque: java.lang.Object removeFirst()>();

        r40 = new androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        $r26 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        specialinvoke r40.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: void <init>(androidx.media3.common.Format,java.lang.Throwable,boolean,androidx.media3.exoplayer.mediacodec.MediaCodecInfo)>($r26, r36, z0, r2);

        r3 = r40;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onCodecError(java.lang.Exception)>(r3);

        $r27 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException preferredDecoderInitializationException>;

        if $r27 != null goto label12;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException preferredDecoderInitializationException> = r3;

        goto label13;

     label12:
        $r28 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException preferredDecoderInitializationException>;

        $r29 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException access$000(androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException,androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException)>($r28, r3);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException preferredDecoderInitializationException> = $r29;

     label13:
        $r30 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos>;

        $z7 = virtualinvoke $r30.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z7 == 0 goto label14;

        $r31 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException preferredDecoderInitializationException>;

        r42 = (java.lang.Throwable) $r31;

        throw r42;

     label14:
        goto label05;

     label15:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos> = null;

        return;

        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label06 to label10 with label11;
    }

    private java.util.List getAvailableCodecInfos(boolean) throws androidx.media3.exoplayer.mediacodec.MediaCodecUtil$DecoderQueryException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        boolean z0, $z1, $z2;
        androidx.media3.common.Format $r1, $r3, $r7;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector $r2, $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r11, $r12;
        java.lang.String $r8, $r13;
        java.util.List r14;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        z0 := @parameter0: boolean;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecSelector mediaCodecSelector>;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        r14 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.List getDecoderInfos(androidx.media3.exoplayer.mediacodec.MediaCodecSelector,androidx.media3.common.Format,boolean)>($r2, $r1, z0);

        $z1 = interfaceinvoke r14.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        if z0 == 0 goto label1;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecSelector mediaCodecSelector>;

        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        r14 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.List getDecoderInfos(androidx.media3.exoplayer.mediacodec.MediaCodecSelector,androidx.media3.common.Format,boolean)>($r4, $r3, 0);

        $z2 = interfaceinvoke r14.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Drm session requires secure decoder for ");

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $r8 = $r7.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but no secure decoder available. Trying to proceed with ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MediaCodecRenderer", $r13);

     label1:
        return r14;
    }

    private void initBypass(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.common.Format r1;
        java.lang.String r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        androidx.media3.exoplayer.mediacodec.BatchBuffer $r6, $r7;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void disableBypass()>();

        r2 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r3 = "audio/mp4a-latm";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r4 = "audio/mpeg";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 != 0 goto label1;

        $r5 = "audio/opus";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label1;

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        virtualinvoke $r6.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void setMaxSampleCount(int)>(1);

        goto label2;

     label1:
        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        virtualinvoke $r7.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void setMaxSampleCount(int)>(32);

     label2:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassEnabled> = 1;

        return;
    }

    private void initCodec(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, android.media.MediaCrypto) throws java.lang.Exception
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r1;
        android.media.MediaCrypto r2;
        long l0, l1, $l9, $l10, l12;
        java.lang.String r3, $r11, $r25, $r26, $r30, $r31;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration r4;
        int $i2, $i4, $i5, $i6, $i7, $i8, $i11;
        float $f0, $f1, $f2, f3;
        androidx.media3.common.Format $r5, $r7, $r14, $r15, $r16, $r17, $r24;
        androidx.media3.common.Format[] $r6;
        byte $b3;
        java.lang.StringBuilder $r8, $r9, $r10;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory $r12;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r13, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        androidx.media3.exoplayer.DecoderCounters $r19;
        androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker $r20;
        java.lang.Object[] $r23;
        androidx.media3.exoplayer.analytics.PlayerId $r27;
        java.lang.Throwable $r28, r29;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r2 := @parameter1: android.media.MediaCrypto;

        r3 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $i2 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i2 >= 23 goto label01;

        $f2 = -1.0F;

        goto label02;

     label01:
        $f0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float targetPlaybackSpeed>;

        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $r6 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format[] getStreamFormats()>();

        $f2 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float getCodecOperatingRateV23(float,androidx.media3.common.Format,androidx.media3.common.Format[])>($f0, $r5, $r6);

     label02:
        f3 = $f2;

        $f1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float assumedMinimumCodecOperatingRate>;

        $b3 = f3 cmpg $f1;

        if $b3 > 0 goto label03;

        f3 = -1.0F;

     label03:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        r4 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration getMediaCodecConfiguration(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,androidx.media3.common.Format,android.media.MediaCrypto,float)>(r1, $r7, r2, f3);

        $i4 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i4 < 31 goto label04;

        $r27 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.analytics.PlayerId getPlayerId()>();

        staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$Api31: void setLogSessionIdToMediaCodecFormat(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration,androidx.media3.exoplayer.analytics.PlayerId)>(r4, $r27);

     label04:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createCodec:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.TraceUtil: void beginSection(java.lang.String)>($r11);

        $r12 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory codecAdapterFactory>;

        $r13 = interfaceinvoke $r12.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter createAdapter(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration)>(r4);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec> = $r13;

     label05:
        staticinvoke <androidx.media3.common.util.TraceUtil: void endSection()>();

        goto label08;

     label06:
        $r28 := @caughtexception;

        r29 = $r28;

     label07:
        staticinvoke <androidx.media3.common.util.TraceUtil: void endSection()>();

        throw r29;

     label08:
        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $z0 = virtualinvoke r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isFormatSupported(androidx.media3.common.Format)>($r14);

        if $z0 != 0 goto label09;

        $r23 = newarray (java.lang.Object)[2];

        $r24 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $r25 = staticinvoke <androidx.media3.common.Format: java.lang.String toLogString(androidx.media3.common.Format)>($r24);

        $r23[0] = $r25;

        $r23[1] = r3;

        $r26 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("Format exceeds selected codec\'s capabilities [%s, %s]", $r23);

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MediaCodecRenderer", $r26);

     label09:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo> = r1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float codecOperatingRate> = f3;

        $r15 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat> = $r15;

        $i5 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecAdaptationWorkaroundMode(java.lang.String)>(r3);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecAdaptationWorkaroundMode> = $i5;

        $r16 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat>;

        $z1 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsDiscardToSpsWorkaround(java.lang.String,androidx.media3.common.Format)>(r3, $r16);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsDiscardToSpsWorkaround> = $z1;

        $z2 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsFlushWorkaround(java.lang.String)>(r3);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsFlushWorkaround> = $z2;

        $z3 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsSosFlushWorkaround(java.lang.String)>(r3);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsSosFlushWorkaround> = $z3;

        $z4 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosFlushWorkaround(java.lang.String)>(r3);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosFlushWorkaround> = $z4;

        $z5 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosOutputExceptionWorkaround(java.lang.String)>(r3);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosOutputExceptionWorkaround> = $z5;

        $z6 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosBufferTimestampWorkaround(java.lang.String)>(r3);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosBufferTimestampWorkaround> = $z6;

        $r17 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat>;

        $z7 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsMonoChannelCountWorkaround(java.lang.String,androidx.media3.common.Format)>(r3, $r17);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsMonoChannelCountWorkaround> = $z7;

        $z8 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosPropagationWorkaround(androidx.media3.exoplayer.mediacodec.MediaCodecInfo)>(r1);

        if $z8 != 0 goto label10;

        $z10 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean getCodecNeedsEosPropagation()>();

        if $z10 == 0 goto label11;

     label10:
        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosPropagation> = $z11;

        $r18 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $z9 = interfaceinvoke $r18.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: boolean needsReconfiguration()>();

        if $z9 == 0 goto label15;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReconfigured> = 1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = 1;

        $i11 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecAdaptationWorkaroundMode>;

        if $i11 == 0 goto label13;

        $z12 = 1;

        goto label14;

     label13:
        $z12 = 0;

     label14:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsAdaptationWorkaroundBuffer> = $z12;

     label15:
        $r30 = "c2.android.mp3.decoder";

        $r31 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $z13 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z13 == 0 goto label16;

        $r20 = new androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker;

        specialinvoke $r20.<androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker c2Mp3TimestampTracker> = $r20;

     label16:
        $i6 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int getState()>();

        if $i6 != 2 goto label17;

        $l9 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l10 = $l9 + 1000L;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long codecHotswapDeadlineMs> = $l10;

     label17:
        $r19 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        $i7 = $r19.<androidx.media3.exoplayer.DecoderCounters: int decoderInitCount>;

        $i8 = $i7 + 1;

        $r19.<androidx.media3.exoplayer.DecoderCounters: int decoderInitCount> = $i8;

        l12 = l1 - l0;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onCodecInitialized(java.lang.String,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration,long,long)>(r3, r4, l1, l12);

        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private boolean shouldContinueRendering(long)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0, $l1, $l3, $l4, $l5;
        byte $b2, $b6;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        $l1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long renderTimeLimitMs>;

        $b2 = $l1 cmp -9223372036854775807L;

        if $b2 == 0 goto label1;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l5 = $l3 - l0;

        $l4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long renderTimeLimitMs>;

        $b6 = $l5 cmp $l4;

        if $b6 >= 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean hasOutputBuffer()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $i0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int outputIndex>;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void resetInputBuffer()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.decoder.DecoderInputBuffer $r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex> = -1;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r1.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data> = null;

        return;
    }

    private void resetOutputBuffer()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int outputIndex> = -1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.nio.ByteBuffer outputBuffer> = null;

        return;
    }

    private void setSourceDrmSession(androidx.media3.exoplayer.drm.DrmSession)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.drm.DrmSession r1, $r2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.drm.DrmSession;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession sourceDrmSession>;

        staticinvoke <androidx.media3.exoplayer.drm.DrmSession: void replaceSession(androidx.media3.exoplayer.drm.DrmSession,androidx.media3.exoplayer.drm.DrmSession)>($r2, r1);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession sourceDrmSession> = r1;

        return;
    }

    private void setCodecDrmSession(androidx.media3.exoplayer.drm.DrmSession)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.drm.DrmSession r1, $r2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.drm.DrmSession;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession>;

        staticinvoke <androidx.media3.exoplayer.drm.DrmSession: void replaceSession(androidx.media3.exoplayer.drm.DrmSession,androidx.media3.exoplayer.drm.DrmSession)>($r2, r1);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession> = r1;

        return;
    }

    private boolean feedInputBuffer() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32;
        java.lang.Throwable r1, $r66, $r69, $r70, r75, r76, r81, r82;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2, $r12, $r16, $r42, $r59, $r60, $r61, $r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z14, z16, $z17;
        androidx.media3.decoder.DecoderInputBuffer $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r14, $r17, $r29, $r34, $r36, $r38, $r40, $r41, $r43, $r45, $r51, $r54, $r63, $r65, $r77, $r79, $r80;
        java.nio.ByteBuffer $r4, $r11, $r35, $r37, $r52, $r56, $r64;
        androidx.media3.exoplayer.DecoderCounters $r13;
        androidx.media3.decoder.CryptoInfo $r15, $r39;
        java.util.ArrayDeque $r18, $r22;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo $r19, $r24;
        androidx.media3.common.Format $r20, $r25, $r30, $r32, $r46, $r48, $r67, $r71;
        androidx.media3.common.util.TimedValueQueue $r21, $r26;
        java.lang.Object $r23, $r50;
        java.util.ArrayList $r27;
        java.lang.Long $r28;
        androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker $r31, $r33, $r78;
        long $l10, $l11, $l12, $l18, l33, $l34, $l35;
        java.util.List $r47, $r49;
        byte[] $r55, $r58, r73;
        androidx.media3.exoplayer.ExoPlaybackException $r68, $r72;
        androidx.media3.exoplayer.FormatHolder r74;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        if $r2 == null goto label01;

        $i1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState>;

        if $i1 == 2 goto label01;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded>;

        if $z0 == 0 goto label02;

     label01:
        return 0;

     label02:
        $i2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState>;

        if $i2 != 0 goto label03;

        $z14 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldReinitCodec()>();

        if $z14 == 0 goto label03;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void drainAndReinitializeCodec()>();

     label03:
        $i30 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex>;

        if $i30 >= 0 goto label05;

        $r61 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $i23 = interfaceinvoke $r61.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: int dequeueInputBufferIndex()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex> = $i23;

        $i24 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex>;

        if $i24 >= 0 goto label04;

        return 0;

     label04:
        $r63 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r62 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $i25 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex>;

        $r64 = interfaceinvoke $r62.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: java.nio.ByteBuffer getInputBuffer(int)>($i25);

        $r63.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data> = $r64;

        $r65 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        virtualinvoke $r65.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

     label05:
        $i3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState>;

        if $i3 != 1 goto label08;

        $z13 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosPropagation>;

        if $z13 == 0 goto label06;

        goto label07;

     label06:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedEos> = 1;

        $r60 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $i22 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex>;

        interfaceinvoke $r60.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void queueInputBuffer(int,int,int,long,int)>($i22, 0, 0, 0L, 4);

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetInputBuffer()>();

     label07:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState> = 2;

        return 0;

     label08:
        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsAdaptationWorkaroundBuffer>;

        if $z1 == 0 goto label09;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsAdaptationWorkaroundBuffer> = 0;

        $r54 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r56 = $r54.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        $r55 = <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: byte[] ADAPTATION_WORKAROUND_BUFFER>;

        virtualinvoke $r56.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r55);

        $r59 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $i21 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex>;

        $r58 = <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: byte[] ADAPTATION_WORKAROUND_BUFFER>;

        $i20 = lengthof $r58;

        interfaceinvoke $r59.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void queueInputBuffer(int,int,int,long,int)>($i21, 0, $i20, 0L, 0);

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetInputBuffer()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedBuffers> = 1;

        return 1;

     label09:
        $i4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState>;

        if $i4 != 1 goto label12;

        i31 = 0;

     label10:
        $r46 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat>;

        $r47 = $r46.<androidx.media3.common.Format: java.util.List initializationData>;

        $i19 = interfaceinvoke $r47.<java.util.List: int size()>();

        if i31 >= $i19 goto label11;

        $r48 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat>;

        $r49 = $r48.<androidx.media3.common.Format: java.util.List initializationData>;

        $r50 = interfaceinvoke $r49.<java.util.List: java.lang.Object get(int)>(i31);

        r73 = (byte[]) $r50;

        $r51 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r52 = $r51.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        virtualinvoke $r52.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r73);

        i31 = i31 + 1;

        goto label10;

     label11:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = 2;

     label12:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r4 = $r3.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        i32 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        r74 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.FormatHolder getFormatHolder()>();

     label13:
        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        i0 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int readSource(androidx.media3.exoplayer.FormatHolder,androidx.media3.decoder.DecoderInputBuffer,int)>(r74, $r5, 0);

     label14:
        goto label16;

     label15:
        $r69 := @caughtexception;

        r75 = $r69;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onCodecError(java.lang.Exception)>(r75);

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean readSourceOmittingSampleData(int)>(0);

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void flushCodec()>();

        return 1;

     label16:
        $z2 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean hasReadStreamToEnd()>();

        if $z2 == 0 goto label17;

        $l18 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs>;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastBufferInStreamPresentationTimeUs> = $l18;

     label17:
        if i0 != -3 goto label18;

        return 0;

     label18:
        if i0 != -5 goto label20;

        $i17 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState>;

        if $i17 != 2 goto label19;

        $r45 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        virtualinvoke $r45.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = 1;

     label19:
        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderReuseEvaluation onInputFormatChanged(androidx.media3.exoplayer.FormatHolder)>(r74);

        return 1;

     label20:
        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $z3 = virtualinvoke $r6.<androidx.media3.decoder.DecoderInputBuffer: boolean isEndOfStream()>();

        if $z3 == 0 goto label27;

        $i15 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState>;

        if $i15 != 2 goto label21;

        $r43 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        virtualinvoke $r43.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = 1;

     label21:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded> = 1;

        $z11 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedBuffers>;

        if $z11 != 0 goto label22;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void processEndOfStream()>();

        return 0;

     label22:
        $z12 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosPropagation>;

        if $z12 == 0 goto label23;

        goto label24;

     label23:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedEos> = 1;

        $r42 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $i16 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex>;

        interfaceinvoke $r42.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void queueInputBuffer(int,int,int,long,int)>($i16, 0, 0, 0L, 4);

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetInputBuffer()>();

     label24:
        goto label26;

     label25:
        $r70 := @caughtexception;

        r76 = $r70;

        $r71 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $i28 = virtualinvoke r76.<android.media.MediaCodec$CryptoException: int getErrorCode()>();

        $i29 = staticinvoke <androidx.media3.common.util.Util: int getErrorCodeForMediaDrmErrorCode(int)>($i28);

        $r72 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException createRendererException(java.lang.Throwable,androidx.media3.common.Format,int)>(r76, $r71, $i29);

        r81 = (java.lang.Throwable) $r72;

        throw r81;

     label26:
        return 0;

     label27:
        $z4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedBuffers>;

        if $z4 != 0 goto label29;

        $r40 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $z10 = virtualinvoke $r40.<androidx.media3.decoder.DecoderInputBuffer: boolean isKeyFrame()>();

        if $z10 != 0 goto label29;

        $r41 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        virtualinvoke $r41.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

        $i14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState>;

        if $i14 != 2 goto label28;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = 1;

     label28:
        return 1;

     label29:
        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        z16 = virtualinvoke $r7.<androidx.media3.decoder.DecoderInputBuffer: boolean isEncrypted()>();

        if z16 == 0 goto label30;

        $r38 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r39 = $r38.<androidx.media3.decoder.DecoderInputBuffer: androidx.media3.decoder.CryptoInfo cryptoInfo>;

        virtualinvoke $r39.<androidx.media3.decoder.CryptoInfo: void increaseClearDataFirstSubSampleBy(int)>(i32);

     label30:
        $z5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsDiscardToSpsWorkaround>;

        if $z5 == 0 goto label32;

        if z16 != 0 goto label32;

        $r34 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r35 = $r34.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        staticinvoke <androidx.media3.extractor.NalUnitUtil: void discardToSps(java.nio.ByteBuffer)>($r35);

        $r36 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r37 = $r36.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        $i13 = virtualinvoke $r37.<java.nio.ByteBuffer: int position()>();

        if $i13 != 0 goto label31;

        return 1;

     label31:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsDiscardToSpsWorkaround> = 0;

     label32:
        $r77 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        l33 = $r77.<androidx.media3.decoder.DecoderInputBuffer: long timeUs>;

        $r78 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker c2Mp3TimestampTracker>;

        if $r78 == null goto label33;

        $r31 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker c2Mp3TimestampTracker>;

        $r30 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $r29 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        l33 = virtualinvoke $r31.<androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker: long updateAndGetPresentationTimeUs(androidx.media3.common.Format,androidx.media3.decoder.DecoderInputBuffer)>($r30, $r29);

        $l10 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs>;

        $r33 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker c2Mp3TimestampTracker>;

        $r32 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $l11 = virtualinvoke $r33.<androidx.media3.exoplayer.mediacodec.C2Mp3TimestampTracker: long getLastOutputBufferPresentationTimeUs(androidx.media3.common.Format)>($r32);

        $l12 = staticinvoke <java.lang.Math: long max(long,long)>($l10, $l11);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs> = $l12;

     label33:
        $r8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $z6 = virtualinvoke $r8.<androidx.media3.decoder.DecoderInputBuffer: boolean isDecodeOnly()>();

        if $z6 == 0 goto label34;

        $r27 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayList decodeOnlyPresentationTimestamps>;

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l33);

        virtualinvoke $r27.<java.util.ArrayList: boolean add(java.lang.Object)>($r28);

     label34:
        $z7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean waitingForFirstSampleInFormat>;

        if $z7 == 0 goto label37;

        $r18 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>;

        $z8 = virtualinvoke $r18.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z8 != 0 goto label35;

        $r22 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>;

        $r23 = virtualinvoke $r22.<java.util.ArrayDeque: java.lang.Object peekLast()>();

        $r24 = (androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo) $r23;

        $r26 = $r24.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.common.util.TimedValueQueue formatQueue>;

        $r25 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        virtualinvoke $r26.<androidx.media3.common.util.TimedValueQueue: void add(long,java.lang.Object)>(l33, $r25);

        goto label36;

     label35:
        $r19 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo outputStreamInfo>;

        $r21 = $r19.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.common.util.TimedValueQueue formatQueue>;

        $r20 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        virtualinvoke $r21.<androidx.media3.common.util.TimedValueQueue: void add(long,java.lang.Object)>(l33, $r20);

     label36:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean waitingForFirstSampleInFormat> = 0;

     label37:
        $l34 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs>;

        $l35 = staticinvoke <java.lang.Math: long max(long,long)>($l34, l33);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs> = $l35;

        $r79 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        virtualinvoke $r79.<androidx.media3.decoder.DecoderInputBuffer: void flip()>();

        $r80 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $z17 = virtualinvoke $r80.<androidx.media3.decoder.DecoderInputBuffer: boolean hasSupplementalData()>();

        if $z17 == 0 goto label38;

        $r17 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void handleInputBufferSupplementalData(androidx.media3.decoder.DecoderInputBuffer)>($r17);

     label38:
        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onQueueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)>($r9);

     label39:
        if z16 == 0 goto label40;

        $r16 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $i9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex>;

        $r14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r15 = $r14.<androidx.media3.decoder.DecoderInputBuffer: androidx.media3.decoder.CryptoInfo cryptoInfo>;

        interfaceinvoke $r16.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void queueSecureInputBuffer(int,int,androidx.media3.decoder.CryptoInfo,long,int)>($i9, 0, $r15, l33, 0);

        goto label41;

     label40:
        $r12 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $i5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int inputIndex>;

        $r10 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer buffer>;

        $r11 = $r10.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        $i6 = virtualinvoke $r11.<java.nio.ByteBuffer: int limit()>();

        interfaceinvoke $r12.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void queueInputBuffer(int,int,int,long,int)>($i5, 0, $i6, l33, 0);

     label41:
        goto label43;

     label42:
        $r66 := @caughtexception;

        r1 = $r66;

        $r67 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $i26 = virtualinvoke r1.<android.media.MediaCodec$CryptoException: int getErrorCode()>();

        $i27 = staticinvoke <androidx.media3.common.util.Util: int getErrorCodeForMediaDrmErrorCode(int)>($i26);

        $r68 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException createRendererException(java.lang.Throwable,androidx.media3.common.Format,int)>(r1, $r67, $i27);

        r82 = (java.lang.Throwable) $r68;

        throw r82;

     label43:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetInputBuffer()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedBuffers> = 1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = 0;

        $r13 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        $i7 = $r13.<androidx.media3.exoplayer.DecoderCounters: int queuedInputBufferCount>;

        $i8 = $i7 + 1;

        $r13.<androidx.media3.exoplayer.DecoderCounters: int queuedInputBufferCount> = $i8;

        return 1;

        catch androidx.media3.decoder.DecoderInputBuffer$InsufficientCapacityException from label13 to label14 with label15;
        catch android.media.MediaCodec$CryptoException from label22 to label24 with label25;
        catch android.media.MediaCodec$CryptoException from label39 to label41 with label42;
    }

    protected void onCodecInitialized(java.lang.String, androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration, long, long)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.String r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration r2;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        return;
    }

    protected void onCodecReleased(java.lang.String)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: java.lang.String;

        return;
    }

    protected void onCodecError(java.lang.Exception)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.Exception r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: java.lang.Exception;

        return;
    }

    protected androidx.media3.exoplayer.DecoderReuseEvaluation onInputFormatChanged(androidx.media3.exoplayer.FormatHolder) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.FormatHolder r1;
        androidx.media3.common.Format r2, r5, $r7;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter r3, $r11, $r16;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        androidx.media3.exoplayer.DecoderReuseEvaluation r6, r26, r28;
        java.lang.Object $r8;
        java.lang.String $r9, $r18, $r21;
        androidx.media3.exoplayer.drm.DrmSession $r10, $r12, $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        androidx.media3.exoplayer.ExoPlaybackException $r23;
        byte b9;
        java.lang.IllegalArgumentException r25;
        java.lang.IllegalStateException r27;
        java.lang.Throwable r29;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.FormatHolder;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean waitingForFirstSampleInFormat> = 1;

        $r7 = r1.<androidx.media3.exoplayer.FormatHolder: androidx.media3.common.Format format>;

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        r2 = (androidx.media3.common.Format) $r8;

        $r9 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        if $r9 != null goto label01;

        r25 = new java.lang.IllegalArgumentException;

        specialinvoke r25.<java.lang.IllegalArgumentException: void <init>()>();

        $r23 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException createRendererException(java.lang.Throwable,androidx.media3.common.Format,int)>(r25, r2, 4005);

        r29 = (java.lang.Throwable) $r23;

        throw r29;

     label01:
        $r10 = r1.<androidx.media3.exoplayer.FormatHolder: androidx.media3.exoplayer.drm.DrmSession drmSession>;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setSourceDrmSession(androidx.media3.exoplayer.drm.DrmSession)>($r10);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat> = r2;

        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassEnabled>;

        if $z1 == 0 goto label02;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassDrainAndReinitialize> = 1;

        return null;

     label02:
        $r11 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        if $r11 != null goto label03;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque availableCodecInfos> = null;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void maybeInitCodecOrBypass()>();

        return null;

     label03:
        r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo>;

        r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat>;

        $r13 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession>;

        $r12 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession sourceDrmSession>;

        $z2 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean drmNeedsCodecReinitialization(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,androidx.media3.common.Format,androidx.media3.exoplayer.drm.DrmSession,androidx.media3.exoplayer.drm.DrmSession)>(r4, r2, $r13, $r12);

        if $z2 == 0 goto label04;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void drainAndReinitializeCodec()>();

        r26 = new androidx.media3.exoplayer.DecoderReuseEvaluation;

        $r21 = r4.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        specialinvoke r26.<androidx.media3.exoplayer.DecoderReuseEvaluation: void <init>(java.lang.String,androidx.media3.common.Format,androidx.media3.common.Format,int,int)>($r21, r5, r2, 0, 128);

        return r26;

     label04:
        $r15 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession sourceDrmSession>;

        $r14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession codecDrmSession>;

        if $r15 == $r14 goto label05;

        $z10 = 1;

        goto label06;

     label05:
        $z10 = 0;

     label06:
        z0 = $z10;

        if z0 == 0 goto label07;

        $i8 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i8 < 23 goto label08;

     label07:
        $z11 = 1;

        goto label09;

     label08:
        $z11 = 0;

     label09:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z11);

        r6 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderReuseEvaluation canReuseCodec(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,androidx.media3.common.Format,androidx.media3.common.Format)>(r4, r5, r2);

        b9 = 0;

        $i0 = r6.<androidx.media3.exoplayer.DecoderReuseEvaluation: int result>;

        tableswitch($i0)
        {
            case 0: goto label10;
            case 1: goto label11;
            case 2: goto label14;
            case 3: goto label19;
            default: goto label21;
        };

     label10:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void drainAndReinitializeCodec()>();

        goto label22;

     label11:
        $z7 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean updateCodecOperatingRate(androidx.media3.common.Format)>(r2);

        if $z7 != 0 goto label12;

        b9 = b9 | 16;

        goto label22;

     label12:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat> = r2;

        if z0 == 0 goto label13;

        $z9 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean drainAndUpdateCodecDrmSessionV23()>();

        if $z9 != 0 goto label22;

        b9 = b9 | 2;

        goto label22;

     label13:
        $z8 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean drainAndFlushCodec()>();

        if $z8 != 0 goto label22;

        b9 = b9 | 2;

        goto label22;

     label14:
        $z5 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean updateCodecOperatingRate(androidx.media3.common.Format)>(r2);

        if $z5 != 0 goto label15;

        b9 = b9 | 16;

        goto label22;

     label15:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReconfigured> = 1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecReconfigurationState> = 1;

        $i2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecAdaptationWorkaroundMode>;

        if $i2 == 2 goto label16;

        $i3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecAdaptationWorkaroundMode>;

        if $i3 != 1 goto label17;

        $i5 = r2.<androidx.media3.common.Format: int width>;

        $i4 = r5.<androidx.media3.common.Format: int width>;

        if $i5 != $i4 goto label17;

        $i7 = r2.<androidx.media3.common.Format: int height>;

        $i6 = r5.<androidx.media3.common.Format: int height>;

        if $i7 != $i6 goto label17;

     label16:
        $z12 = 1;

        goto label18;

     label17:
        $z12 = 0;

     label18:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsAdaptationWorkaroundBuffer> = $z12;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat> = r2;

        if z0 == 0 goto label22;

        $z6 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean drainAndUpdateCodecDrmSessionV23()>();

        if $z6 != 0 goto label22;

        b9 = b9 | 2;

        goto label22;

     label19:
        $z3 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean updateCodecOperatingRate(androidx.media3.common.Format)>(r2);

        if $z3 != 0 goto label20;

        b9 = b9 | 16;

        goto label22;

     label20:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat> = r2;

        if z0 == 0 goto label22;

        $z4 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean drainAndUpdateCodecDrmSessionV23()>();

        if $z4 != 0 goto label22;

        b9 = b9 | 2;

        goto label22;

     label21:
        r27 = new java.lang.IllegalStateException;

        specialinvoke r27.<java.lang.IllegalStateException: void <init>()>();

        throw r27;

     label22:
        $i10 = r6.<androidx.media3.exoplayer.DecoderReuseEvaluation: int result>;

        if $i10 == 0 goto label24;

        $r16 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        if $r16 != r3 goto label23;

        $i1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction>;

        if $i1 != 3 goto label24;

     label23:
        r28 = new androidx.media3.exoplayer.DecoderReuseEvaluation;

        $r18 = r4.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        specialinvoke r28.<androidx.media3.exoplayer.DecoderReuseEvaluation: void <init>(java.lang.String,androidx.media3.common.Format,androidx.media3.common.Format,int,int)>($r18, r5, r2, 0, b9);

        return r28;

     label24:
        return r6;
    }

    protected void onOutputFormatChanged(androidx.media3.common.Format, android.media.MediaFormat) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.common.Format r1;
        android.media.MediaFormat r2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: android.media.MediaFormat;

        return;
    }

    protected void handleInputBufferSupplementalData(androidx.media3.decoder.DecoderInputBuffer) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.decoder.DecoderInputBuffer r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.decoder.DecoderInputBuffer;

        return;
    }

    protected void onQueueInputBuffer(androidx.media3.decoder.DecoderInputBuffer) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.decoder.DecoderInputBuffer r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.decoder.DecoderInputBuffer;

        return;
    }

    protected void onProcessedOutputBuffer(long)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0, $l1;
        java.util.ArrayDeque $r1, $r2, $r5;
        boolean $z0;
        java.lang.Object $r3, $r6;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo $r4, $r7;
        byte $b2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastProcessedOutputBufferTimeUs> = l0;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>;

        $z0 = virtualinvoke $r1.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>;

        $r3 = virtualinvoke $r2.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r4 = (androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo) $r3;

        $l1 = $r4.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long previousStreamLastBufferTimeUs>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayDeque pendingOutputStreamChanges>;

        $r6 = virtualinvoke $r5.<java.util.ArrayDeque: java.lang.Object poll()>();

        $r7 = (androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo) $r6;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setOutputStreamInfo(androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo)>($r7);

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onProcessedStreamChange()>();

     label1:
        return;
    }

    protected void onProcessedStreamChange()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        return;
    }

    protected androidx.media3.exoplayer.DecoderReuseEvaluation canReuseCodec(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, androidx.media3.common.Format, androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r1;
        androidx.media3.common.Format r2, r3;
        androidx.media3.exoplayer.DecoderReuseEvaluation $r4;
        java.lang.String $r5;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r2 := @parameter1: androidx.media3.common.Format;

        r3 := @parameter2: androidx.media3.common.Format;

        $r4 = new androidx.media3.exoplayer.DecoderReuseEvaluation;

        $r5 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        specialinvoke $r4.<androidx.media3.exoplayer.DecoderReuseEvaluation: void <init>(java.lang.String,androidx.media3.common.Format,androidx.media3.common.Format,int,int)>($r5, r2, r3, 0, 1);

        return $r4;
    }

    protected void onOutputStreamOffsetUsChanged(long)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        return;
    }

    public boolean isEnded()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean outputStreamEnded>;

        return $z0;
    }

    public boolean isReady()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.common.Format $r1;
        boolean $z0, $z1, $z2;
        long $l0, $l2, $l3;
        byte $b1, $b4;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        if $r1 == null goto label2;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isSourceReady()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean hasOutputBuffer()>();

        if $z1 != 0 goto label1;

        $l0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long codecHotswapDeadlineMs>;

        $b1 = $l0 cmp -9223372036854775807L;

        if $b1 == 0 goto label2;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long codecHotswapDeadlineMs>;

        $b4 = $l2 cmp $l3;

        if $b4 >= 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected float getPlaybackSpeed()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        float $f0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $f0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float currentPlaybackSpeed>;

        return $f0;
    }

    protected float getCodecOperatingRate()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        float $f0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $f0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float codecOperatingRate>;

        return $f0;
    }

    protected float getCodecOperatingRateV23(float, androidx.media3.common.Format, androidx.media3.common.Format[])
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        float f0;
        androidx.media3.common.Format r1;
        androidx.media3.common.Format[] r2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        f0 := @parameter0: float;

        r1 := @parameter1: androidx.media3.common.Format;

        r2 := @parameter2: androidx.media3.common.Format[];

        return -1.0F;
    }

    protected final boolean updateCodecOperatingRate() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.common.Format $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format codecInputFormat>;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean updateCodecOperatingRate(androidx.media3.common.Format)>($r1);

        return $z0;
    }

    private boolean updateCodecOperatingRate(androidx.media3.common.Format) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.common.Format r1;
        float f0, $f1, $f2, $f3, $f4;
        android.os.Bundle r2, $r5;
        int $i0, $i1, $i2;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r3, $r6;
        androidx.media3.common.Format[] $r4;
        byte $b3, $b4, $b5, $b6;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 23 goto label1;

        return 1;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        if $r3 == null goto label2;

        $i1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction>;

        if $i1 == 3 goto label2;

        $i2 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int getState()>();

        if $i2 != 0 goto label3;

     label2:
        return 1;

     label3:
        $f1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float targetPlaybackSpeed>;

        $r4 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format[] getStreamFormats()>();

        f0 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float getCodecOperatingRateV23(float,androidx.media3.common.Format,androidx.media3.common.Format[])>($f1, r1, $r4);

        $f2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float codecOperatingRate>;

        $b3 = $f2 cmpl f0;

        if $b3 != 0 goto label4;

        return 1;

     label4:
        $b4 = f0 cmpl -1.0F;

        if $b4 != 0 goto label5;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void drainAndReinitializeCodec()>();

        return 0;

     label5:
        $f3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float codecOperatingRate>;

        $b5 = $f3 cmpl -1.0F;

        if $b5 != 0 goto label6;

        $f4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float assumedMinimumCodecOperatingRate>;

        $b6 = f0 cmpl $f4;

        if $b6 <= 0 goto label7;

     label6:
        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>()>();

        r2 = $r5;

        virtualinvoke r2.<android.os.Bundle: void putFloat(java.lang.String,float)>("operating-rate", f0);

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        interfaceinvoke $r6.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void setParameters(android.os.Bundle)>(r2);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: float codecOperatingRate> = f0;

        return 1;

     label7:
        return 1;
    }

    private boolean drainAndFlushCodec()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedBuffers>;

        if $z0 == 0 goto label3;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState> = 1;

        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsFlushWorkaround>;

        if $z1 != 0 goto label1;

        $z2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosFlushWorkaround>;

        if $z2 == 0 goto label2;

     label1:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction> = 3;

        return 0;

     label2:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction> = 1;

     label3:
        return 1;
    }

    private boolean drainAndUpdateCodecDrmSessionV23() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedBuffers>;

        if $z0 == 0 goto label3;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState> = 1;

        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsFlushWorkaround>;

        if $z1 != 0 goto label1;

        $z2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosFlushWorkaround>;

        if $z2 == 0 goto label2;

     label1:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction> = 3;

        return 0;

     label2:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction> = 2;

        goto label4;

     label3:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void updateDrmSessionV23()>();

     label4:
        return 1;
    }

    private void drainAndReinitializeCodec() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedBuffers>;

        if $z0 == 0 goto label1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState> = 1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction> = 3;

        goto label2;

     label1:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void reinitializeCodec()>();

     label2:
        return;
    }

    private boolean drainOutputBuffer(long, long) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0, l1, $l2, $l5, $l8, $l12, $l13, $l17, $l19, $l28, $l29, $l30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, $z18, z19;
        android.media.MediaCodec$BufferInfo $r1, $r2, $r6, $r7, $r8, $r9, $r13, $r15, $r19, $r21, $r22, $r23, $r24, $r27, $r28, $r31, $r33, $r38, $r39;
        androidx.media3.common.Format $r3, $r10;
        int $i3, $i4, $i6, $i7, $i9, $i10, $i11, $i15, $i16, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27;
        java.nio.ByteBuffer $r4, $r11, $r17, $r18, $r25, $r29;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r5, $r12, $r14, $r16, $r32, $r34;
        byte $b14, $b18, $b31;
        java.lang.Throwable $r35, $r36, r37, r40;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean hasOutputBuffer()>();

        if $z0 != 0 goto label17;

        $z6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosOutputExceptionWorkaround>;

        if $z6 == 0 goto label05;

        $z11 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedEos>;

        if $z11 == 0 goto label05;

     label01:
        $r34 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $r33 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        i27 = interfaceinvoke $r34.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: int dequeueOutputBufferIndex(android.media.MediaCodec$BufferInfo)>($r33);

     label02:
        goto label06;

     label03:
        $r36 := @caughtexception;

        r37 = $r36;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void processEndOfStream()>();

        $z13 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean outputStreamEnded>;

        if $z13 == 0 goto label04;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void releaseCodec()>();

     label04:
        return 0;

     label05:
        $r14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $r13 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        i27 = interfaceinvoke $r14.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: int dequeueOutputBufferIndex(android.media.MediaCodec$BufferInfo)>($r13);

     label06:
        if i27 >= 0 goto label10;

        if i27 != -2 goto label07;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void processOutputMediaFormatChanged()>();

        return 1;

     label07:
        $z9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosPropagation>;

        if $z9 == 0 goto label09;

        $z10 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded>;

        if $z10 != 0 goto label08;

        $i26 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState>;

        if $i26 != 2 goto label09;

     label08:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void processEndOfStream()>();

     label09:
        return 0;

     label10:
        $z7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldSkipAdaptationWorkaroundOutputBuffer>;

        if $z7 == 0 goto label11;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldSkipAdaptationWorkaroundOutputBuffer> = 0;

        $r32 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        interfaceinvoke $r32.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void releaseOutputBuffer(int,boolean)>(i27, 0);

        return 1;

     label11:
        $r15 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $i11 = $r15.<android.media.MediaCodec$BufferInfo: int size>;

        if $i11 != 0 goto label12;

        $r31 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $i24 = $r31.<android.media.MediaCodec$BufferInfo: int flags>;

        $i25 = $i24 & 4;

        if $i25 == 0 goto label12;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void processEndOfStream()>();

        return 0;

     label12:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int outputIndex> = i27;

        $r16 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $r17 = interfaceinvoke $r16.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: java.nio.ByteBuffer getOutputBuffer(int)>(i27);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.nio.ByteBuffer outputBuffer> = $r17;

        $r18 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.nio.ByteBuffer outputBuffer>;

        if $r18 == null goto label13;

        $r25 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.nio.ByteBuffer outputBuffer>;

        $r24 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $i20 = $r24.<android.media.MediaCodec$BufferInfo: int offset>;

        virtualinvoke $r25.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i20);

        $r29 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.nio.ByteBuffer outputBuffer>;

        $r27 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $i22 = $r27.<android.media.MediaCodec$BufferInfo: int offset>;

        $r28 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $i21 = $r28.<android.media.MediaCodec$BufferInfo: int size>;

        $i23 = $i22 + $i21;

        virtualinvoke $r29.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i23);

     label13:
        $z8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosBufferTimestampWorkaround>;

        if $z8 == 0 goto label14;

        $r21 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $l13 = $r21.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $b14 = $l13 cmp 0L;

        if $b14 != 0 goto label14;

        $r22 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $i15 = $r22.<android.media.MediaCodec$BufferInfo: int flags>;

        $i16 = $i15 & 4;

        if $i16 == 0 goto label14;

        $l17 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs>;

        $b18 = $l17 cmp -9223372036854775807L;

        if $b18 == 0 goto label14;

        $r23 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $l19 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long largestQueuedPresentationTimeUs>;

        $r23.<android.media.MediaCodec$BufferInfo: long presentationTimeUs> = $l19;

     label14:
        $r38 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $l28 = $r38.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $z14 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isDecodeOnlyBuffer(long)>($l28);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isDecodeOnlyOutputBuffer> = $z14;

        $l29 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: long lastBufferInStreamPresentationTimeUs>;

        $r39 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $l30 = $r39.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $b31 = $l29 cmp $l30;

        if $b31 != 0 goto label15;

        $z15 = 1;

        goto label16;

     label15:
        $z15 = 0;

     label16:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isLastOutputBuffer> = $z15;

        $r19 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $l12 = $r19.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void updateOutputFormatForTime(long)>($l12);

     label17:
        $z16 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsEosOutputExceptionWorkaround>;

        if $z16 == 0 goto label22;

        $z3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecReceivedEos>;

        if $z3 == 0 goto label22;

     label18:
        $r12 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $r11 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.nio.ByteBuffer outputBuffer>;

        $i10 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int outputIndex>;

        $r8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $i9 = $r8.<android.media.MediaCodec$BufferInfo: int flags>;

        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $l8 = $r9.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $z5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isDecodeOnlyOutputBuffer>;

        $z4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isLastOutputBuffer>;

        $r10 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format outputFormat>;

        z17 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean processOutputBuffer(long,long,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter,java.nio.ByteBuffer,int,int,int,long,boolean,boolean,androidx.media3.common.Format)>(l0, l1, $r12, $r11, $i10, $i9, 1, $l8, $z5, $z4, $r10);

     label19:
        goto label23;

     label20:
        $r35 := @caughtexception;

        r40 = $r35;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void processEndOfStream()>();

        $z12 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean outputStreamEnded>;

        if $z12 == 0 goto label21;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void releaseCodec()>();

     label21:
        return 0;

     label22:
        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.nio.ByteBuffer outputBuffer>;

        $i4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int outputIndex>;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $i3 = $r1.<android.media.MediaCodec$BufferInfo: int flags>;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $l2 = $r2.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $z2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isDecodeOnlyOutputBuffer>;

        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isLastOutputBuffer>;

        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format outputFormat>;

        z17 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean processOutputBuffer(long,long,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter,java.nio.ByteBuffer,int,int,int,long,boolean,boolean,androidx.media3.common.Format)>(l0, l1, $r5, $r4, $i4, $i3, 1, $l2, $z2, $z1, $r3);

     label23:
        if z17 == 0 goto label27;

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $l5 = $r6.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onProcessedOutputBuffer(long)>($l5);

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCodec$BufferInfo outputBufferInfo>;

        $i6 = $r7.<android.media.MediaCodec$BufferInfo: int flags>;

        $i7 = $i6 & 4;

        if $i7 == 0 goto label24;

        $z18 = 1;

        goto label25;

     label24:
        $z18 = 0;

     label25:
        z19 = $z18;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void resetOutputBuffer()>();

        if z19 != 0 goto label26;

        return 1;

     label26:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void processEndOfStream()>();

     label27:
        return 0;

        catch java.lang.IllegalStateException from label01 to label02 with label03;
        catch java.lang.IllegalStateException from label18 to label19 with label20;
    }

    private void processOutputMediaFormatChanged()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        android.media.MediaFormat r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecHasOutputMediaFormat> = 1;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter codec>;

        r1 = interfaceinvoke $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: android.media.MediaFormat getOutputFormat()>();

        $i0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecAdaptationWorkaroundMode>;

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<android.media.MediaFormat: int getInteger(java.lang.String)>("width");

        if $i1 != 32 goto label1;

        $i2 = virtualinvoke r1.<android.media.MediaFormat: int getInteger(java.lang.String)>("height");

        if $i2 != 32 goto label1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean shouldSkipAdaptationWorkaroundOutputBuffer> = 1;

        return;

     label1:
        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecNeedsMonoChannelCountWorkaround>;

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("channel-count", 1);

     label2:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaFormat codecOutputMediaFormat> = r1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean codecOutputMediaFormatChanged> = 1;

        return;
    }

<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean processOutputBuffer(long,long,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter,java.nio.ByteBuffer,int,int,int,long,boolean,boolean,androidx.media3.common.Format)>
    protected void renderToEndOfStream() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        return;
    }

    private void processEndOfStream() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $i0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction>;

        tableswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label3;
            case 2: goto label2;
            case 3: goto label1;
            default: goto label4;
        };

     label1:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void reinitializeCodec()>();

        goto label5;

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void flushCodec()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void updateDrmSessionV23()>();

        goto label5;

     label3:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void flushCodec()>();

        goto label5;

     label4:
        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean outputStreamEnded> = 1;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void renderToEndOfStream()>();

     label5:
        return;
    }

    protected final void setPendingOutputEndOfStream()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean pendingOutputEndOfStream> = 1;

        return;
    }

    protected final long getOutputStreamOffsetUs()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo outputStreamInfo>;

        $l0 = $r1.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long streamOffsetUs>;

        return $l0;
    }

    private void setOutputStreamInfo(androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo r1;
        long $l0, $l2;
        byte $b1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo outputStreamInfo> = r1;

        $l0 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long streamOffsetUs>;

        $b1 = $l0 cmp -9223372036854775807L;

        if $b1 == 0 goto label1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean needToNotifyOutputFormatChangeAfterStreamChange> = 1;

        $l2 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long streamOffsetUs>;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onOutputStreamOffsetUsChanged(long)>($l2);

     label1:
        return;
    }

    protected static boolean supportsFormatDrm(androidx.media3.common.Format)
    {
        androidx.media3.common.Format r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: androidx.media3.common.Format;

        $i0 = r0.<androidx.media3.common.Format: int cryptoType>;

        if $i0 == 0 goto label1;

        $i1 = r0.<androidx.media3.common.Format: int cryptoType>;

        if $i1 != 2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean drmNeedsCodecReinitialization(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, androidx.media3.common.Format, androidx.media3.exoplayer.drm.DrmSession, androidx.media3.exoplayer.drm.DrmSession) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r1;
        androidx.media3.common.Format r2;
        androidx.media3.exoplayer.drm.DrmSession r3, r4;
        androidx.media3.exoplayer.drm.FrameworkCryptoConfig r5;
        java.util.UUID $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        int $i0;
        java.lang.String $r12;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r2 := @parameter1: androidx.media3.common.Format;

        r3 := @parameter2: androidx.media3.exoplayer.drm.DrmSession;

        r4 := @parameter3: androidx.media3.exoplayer.drm.DrmSession;

        if r3 != r4 goto label01;

        return 0;

     label01:
        if r4 == null goto label02;

        if r3 != null goto label03;

     label02:
        return 1;

     label03:
        $r6 = interfaceinvoke r4.<androidx.media3.exoplayer.drm.DrmSession: java.util.UUID getSchemeUuid()>();

        $r7 = interfaceinvoke r3.<androidx.media3.exoplayer.drm.DrmSession: java.util.UUID getSchemeUuid()>();

        $z0 = virtualinvoke $r6.<java.util.UUID: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label04;

        return 1;

     label04:
        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 23 goto label05;

        return 1;

     label05:
        $r8 = <androidx.media3.common.C: java.util.UUID PLAYREADY_UUID>;

        $r9 = interfaceinvoke r3.<androidx.media3.exoplayer.drm.DrmSession: java.util.UUID getSchemeUuid()>();

        $z1 = virtualinvoke $r8.<java.util.UUID: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label06;

        $r10 = <androidx.media3.common.C: java.util.UUID PLAYREADY_UUID>;

        $r11 = interfaceinvoke r4.<androidx.media3.exoplayer.drm.DrmSession: java.util.UUID getSchemeUuid()>();

        $z2 = virtualinvoke $r10.<java.util.UUID: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label07;

     label06:
        return 1;

     label07:
        r5 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.FrameworkCryptoConfig getFrameworkCryptoConfig(androidx.media3.exoplayer.drm.DrmSession)>(r4);

        if r5 != null goto label08;

        return 1;

     label08:
        $z3 = r5.<androidx.media3.exoplayer.drm.FrameworkCryptoConfig: boolean forceAllowInsecureDecoderComponents>;

        if $z3 == 0 goto label09;

        z5 = 0;

        goto label10;

     label09:
        $r12 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        z5 = interfaceinvoke r4.<androidx.media3.exoplayer.drm.DrmSession: boolean requiresSecureDecoder(java.lang.String)>($r12);

     label10:
        $z4 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean secure>;

        if $z4 != 0 goto label11;

        if z5 == 0 goto label11;

        return 1;

     label11:
        return 0;
    }

    private void reinitializeCodec() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void releaseCodec()>();

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void maybeInitCodecOrBypass()>();

        return;
    }

    private boolean isDecodeOnlyBuffer(long)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0, $l2;
        int i1, i4;
        java.util.ArrayList $r1, $r2, $r5;
        java.lang.Object $r3;
        java.lang.Long $r4;
        byte $b3;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayList decodeOnlyPresentationTimestamps>;

        i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i4 = 0;

     label1:
        if i4 >= i1 goto label3;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayList decodeOnlyPresentationTimestamps>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r4 = (java.lang.Long) $r3;

        $l2 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label2;

        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: java.util.ArrayList decodeOnlyPresentationTimestamps>;

        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>(i4);

        return 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void updateDrmSessionV23() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.Throwable r1, $r7, r10;
        androidx.media3.exoplayer.drm.DrmSession $r2, $r6;
        android.media.MediaCrypto $r3;
        androidx.media3.exoplayer.drm.FrameworkCryptoConfig $r4;
        byte[] $r5;
        androidx.media3.common.Format $r8;
        androidx.media3.exoplayer.ExoPlaybackException $r9;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: android.media.MediaCrypto mediaCrypto>;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession sourceDrmSession>;

        $r4 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.FrameworkCryptoConfig getFrameworkCryptoConfig(androidx.media3.exoplayer.drm.DrmSession)>($r2);

        $r5 = $r4.<androidx.media3.exoplayer.drm.FrameworkCryptoConfig: byte[] sessionId>;

        virtualinvoke $r3.<android.media.MediaCrypto: void setMediaDrmSession(byte[])>($r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $r9 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException createRendererException(java.lang.Throwable,androidx.media3.common.Format,int)>(r1, $r8, 6006);

        r10 = (java.lang.Throwable) $r9;

        throw r10;

     label4:
        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.drm.DrmSession sourceDrmSession>;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void setCodecDrmSession(androidx.media3.exoplayer.drm.DrmSession)>($r6);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainState> = 0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int codecDrainAction> = 0;

        return;

        catch android.media.MediaCryptoException from label1 to label2 with label3;
    }

    private androidx.media3.exoplayer.drm.FrameworkCryptoConfig getFrameworkCryptoConfig(androidx.media3.exoplayer.drm.DrmSession) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.drm.DrmSession r1;
        androidx.media3.decoder.CryptoConfig r2;
        androidx.media3.exoplayer.drm.FrameworkCryptoConfig $r3;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, r11;
        java.lang.String $r8;
        androidx.media3.common.Format $r9;
        androidx.media3.exoplayer.ExoPlaybackException $r10;
        java.lang.IllegalArgumentException r12;
        java.lang.Throwable r13;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.drm.DrmSession;

        r2 = interfaceinvoke r1.<androidx.media3.exoplayer.drm.DrmSession: androidx.media3.decoder.CryptoConfig getCryptoConfig()>();

        if r2 == null goto label1;

        $z0 = r2 instanceof androidx.media3.exoplayer.drm.FrameworkCryptoConfig;

        if $z0 != 0 goto label1;

        r12 = new java.lang.IllegalArgumentException;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting FrameworkCryptoConfig but found: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $r10 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.ExoPlaybackException createRendererException(java.lang.Throwable,androidx.media3.common.Format,int)>(r12, $r9, 6001);

        r13 = (java.lang.Throwable) $r10;

        throw r13;

     label1:
        $r3 = (androidx.media3.exoplayer.drm.FrameworkCryptoConfig) r2;

        return $r3;
    }

    private boolean bypassRender(long, long) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        long l0, l1, $l4, $l5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        androidx.media3.exoplayer.mediacodec.BatchBuffer $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16;
        androidx.media3.decoder.DecoderInputBuffer $r6;
        java.nio.ByteBuffer $r10;
        int $i2, $i3;
        androidx.media3.common.Format $r14;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean outputStreamEnded>;

        if $z0 != 0 goto label01;

        $z15 = 1;

        goto label02;

     label01:
        $z15 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z15);

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $z1 = virtualinvoke $r1.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean hasSamples()>();

        if $z1 == 0 goto label04;

        $r8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $r10 = $r8.<androidx.media3.exoplayer.mediacodec.BatchBuffer: java.nio.ByteBuffer data>;

        $i2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int outputIndex>;

        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $i3 = virtualinvoke $r9.<androidx.media3.exoplayer.mediacodec.BatchBuffer: int getSampleCount()>();

        $r11 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $l4 = virtualinvoke $r11.<androidx.media3.exoplayer.mediacodec.BatchBuffer: long getFirstSampleTimeUs()>();

        $r12 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $z12 = virtualinvoke $r12.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean isDecodeOnly()>();

        $r13 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $z13 = virtualinvoke $r13.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean isEndOfStream()>();

        $r14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format outputFormat>;

        $z14 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean processOutputBuffer(long,long,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter,java.nio.ByteBuffer,int,int,int,long,boolean,boolean,androidx.media3.common.Format)>(l0, l1, null, $r10, $i2, 0, $i3, $l4, $z12, $z13, $r14);

        if $z14 == 0 goto label03;

        $r15 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $l5 = virtualinvoke $r15.<androidx.media3.exoplayer.mediacodec.BatchBuffer: long getLastSampleTimeUs()>();

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onProcessedOutputBuffer(long)>($l5);

        $r16 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        virtualinvoke $r16.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void clear()>();

        goto label04;

     label03:
        return 0;

     label04:
        $z2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded>;

        if $z2 == 0 goto label05;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean outputStreamEnded> = 1;

        return 0;

     label05:
        $z3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassSampleBufferPending>;

        if $z3 == 0 goto label06;

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>;

        $z11 = virtualinvoke $r7.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean append(androidx.media3.decoder.DecoderInputBuffer)>($r6);

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z11);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassSampleBufferPending> = 0;

     label06:
        $z4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassDrainAndReinitialize>;

        if $z4 == 0 goto label08;

        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $z9 = virtualinvoke $r5.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean hasSamples()>();

        if $z9 == 0 goto label07;

        return 1;

     label07:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void disableBypass()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassDrainAndReinitialize> = 0;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void maybeInitCodecOrBypass()>();

        $z10 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassEnabled>;

        if $z10 != 0 goto label08;

        return 0;

     label08:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void bypassRead()>();

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $z5 = virtualinvoke $r2.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean hasSamples()>();

        if $z5 == 0 goto label09;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        virtualinvoke $r4.<androidx.media3.exoplayer.mediacodec.BatchBuffer: void flip()>();

     label09:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $z6 = virtualinvoke $r3.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean hasSamples()>();

        if $z6 != 0 goto label10;

        $z7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded>;

        if $z7 != 0 goto label10;

        $z8 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassDrainAndReinitialize>;

        if $z8 == 0 goto label11;

     label10:
        $z16 = 1;

        goto label12;

     label11:
        $z16 = 0;

     label12:
        return $z16;
    }

    private void bypassRead() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        androidx.media3.exoplayer.FormatHolder r1;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.media3.decoder.DecoderInputBuffer $r2, $r3, $r4, $r5, $r13, $r14;
        androidx.media3.exoplayer.mediacodec.BatchBuffer $r6;
        androidx.media3.common.Format $r7, $r9, $r10;
        java.lang.Object $r8;
        java.lang.IllegalStateException $r12;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded>;

        if $z0 != 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z4);

        r1 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.FormatHolder getFormatHolder()>();

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>;

        virtualinvoke $r2.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

     label03:
        $r13 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>;

        virtualinvoke $r13.<androidx.media3.decoder.DecoderInputBuffer: void clear()>();

        $r14 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>;

        i0 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: int readSource(androidx.media3.exoplayer.FormatHolder,androidx.media3.decoder.DecoderInputBuffer,int)>(r1, $r14, 0);

        tableswitch(i0)
        {
            case -5: goto label04;
            case -4: goto label06;
            case -3: goto label05;
            default: goto label09;
        };

     label04:
        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderReuseEvaluation onInputFormatChanged(androidx.media3.exoplayer.FormatHolder)>(r1);

        return;

     label05:
        return;

     label06:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>;

        $z1 = virtualinvoke $r3.<androidx.media3.decoder.DecoderInputBuffer: boolean isEndOfStream()>();

        if $z1 == 0 goto label07;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean inputStreamEnded> = 1;

        return;

     label07:
        $z2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean waitingForFirstSampleInFormat>;

        if $z2 == 0 goto label08;

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format inputFormat>;

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        $r9 = (androidx.media3.common.Format) $r8;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format outputFormat> = $r9;

        $r10 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.common.Format outputFormat>;

        virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onOutputFormatChanged(androidx.media3.common.Format,android.media.MediaFormat)>($r10, null);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean waitingForFirstSampleInFormat> = 0;

     label08:
        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>;

        virtualinvoke $r4.<androidx.media3.decoder.DecoderInputBuffer: void flip()>();

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.mediacodec.BatchBuffer bypassBatchBuffer>;

        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.decoder.DecoderInputBuffer bypassSampleBuffer>;

        $z3 = virtualinvoke $r6.<androidx.media3.exoplayer.mediacodec.BatchBuffer: boolean append(androidx.media3.decoder.DecoderInputBuffer)>($r5);

        if $z3 != 0 goto label10;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean bypassSampleBufferPending> = 1;

        return;

     label09:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>()>();

        throw $r12;

     label10:
        goto label03;
    }

    private static boolean isMediaCodecException(java.lang.IllegalStateException)
    {
        java.lang.IllegalStateException r0;
        java.lang.StackTraceElement[] r1;
        int $i0, $i1;
        java.lang.StackTraceElement $r2;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.IllegalStateException;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 21 goto label1;

        $z1 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isMediaCodecExceptionV21(java.lang.IllegalStateException)>(r0);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        r1 = virtualinvoke r0.<java.lang.IllegalStateException: java.lang.StackTraceElement[] getStackTrace()>();

        $i1 = lengthof r1;

        if $i1 <= 0 goto label2;

        $r2 = r1[0];

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("android.media.MediaCodec");

        if $z0 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isMediaCodecExceptionV21(java.lang.IllegalStateException)
    {
        java.lang.IllegalStateException r0;
        boolean $z0;

        r0 := @parameter0: java.lang.IllegalStateException;

        $z0 = r0 instanceof android.media.MediaCodec$CodecException;

        return $z0;
    }

    private static boolean isRecoverableMediaCodecExceptionV21(java.lang.IllegalStateException)
    {
        java.lang.IllegalStateException r0;
        boolean $z0, $z1;
        android.media.MediaCodec$CodecException $r1;

        r0 := @parameter0: java.lang.IllegalStateException;

        $z0 = r0 instanceof android.media.MediaCodec$CodecException;

        if $z0 == 0 goto label1;

        $r1 = (android.media.MediaCodec$CodecException) r0;

        $z1 = virtualinvoke $r1.<android.media.MediaCodec$CodecException: boolean isRecoverable()>();

        return $z1;

     label1:
        return 0;
    }

    private static boolean codecNeedsFlushWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.String;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 18 goto label2;

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 != 18 goto label1;

        $r4 = "OMX.SEC.avc.dec";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 != 0 goto label2;

        $r5 = "OMX.SEC.avc.dec.secure";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z4 != 0 goto label2;

     label1:
        $i2 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i2 != 19 goto label3;

        $r1 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("SM-G800");

        if $z0 == 0 goto label3;

        $r2 = "OMX.Exynos.avc.dec";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label2;

        $r3 = "OMX.Exynos.avc.dec.secure";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;
    }

    private int codecAdaptationWorkaroundMode(java.lang.String)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer;

        r1 := @parameter0: java.lang.String;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 > 25 goto label2;

        $r12 = "OMX.Exynos.avc.dec.secure";

        $z6 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label2;

        $r13 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z7 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("SM-T585");

        if $z7 != 0 goto label1;

        $r14 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z8 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>("SM-A510");

        if $z8 != 0 goto label1;

        $r15 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z9 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("SM-A520");

        if $z9 != 0 goto label1;

        $r16 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z10 = virtualinvoke $r16.<java.lang.String: boolean startsWith(java.lang.String)>("SM-J700");

        if $z10 == 0 goto label2;

     label1:
        return 2;

     label2:
        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 >= 24 goto label5;

        $r2 = "OMX.Nvidia.h264.decode";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r11 = "OMX.Nvidia.h264.decode.secure";

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label5;

     label3:
        $r4 = "flounder";

        $r3 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label4;

        $r6 = "flounder_lte";

        $r5 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label4;

        $r8 = "grouper";

        $r7 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 != 0 goto label4;

        $r10 = "tilapia";

        $r9 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    private static boolean codecNeedsDiscardToSpsWorkaround(java.lang.String, androidx.media3.common.Format)
    {
        java.lang.String r0, $r3;
        androidx.media3.common.Format r1;
        int $i0;
        java.util.List $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.common.Format;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 21 goto label1;

        $r2 = r1.<androidx.media3.common.Format: java.util.List initializationData>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = "OMX.MTK.VIDEO.DECODER.AVC";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean codecNeedsSosFlushWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 != 29 goto label1;

        $r1 = "c2.android.aac.decoder";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean codecNeedsEosPropagationWorkaround(androidx.media3.exoplayer.mediacodec.MediaCodecInfo)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 > 25 goto label1;

        $r13 = "OMX.rk.video_decoder.avc";

        $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z10 != 0 goto label4;

     label1:
        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 > 17 goto label2;

        $r12 = "OMX.allwinner.video.decoder.avc";

        $z9 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z9 != 0 goto label4;

     label2:
        $i2 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i2 > 29 goto label3;

        $r6 = "OMX.broadcom.video_decoder.tunnel";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label4;

        $r7 = "OMX.broadcom.video_decoder.tunnel.secure";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 != 0 goto label4;

        $r8 = "OMX.bcm.vdec.avc.tunnel";

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 != 0 goto label4;

        $r9 = "OMX.bcm.vdec.avc.tunnel.secure";

        $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 != 0 goto label4;

        $r10 = "OMX.bcm.vdec.hevc.tunnel";

        $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z7 != 0 goto label4;

        $r11 = "OMX.bcm.vdec.hevc.tunnel.secure";

        $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z8 != 0 goto label4;

     label3:
        $r3 = "Amazon";

        $r2 = <androidx.media3.common.util.Util: java.lang.String MANUFACTURER>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        $r5 = "AFTS";

        $r4 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label5;

        $z2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean secure>;

        if $z2 == 0 goto label5;

     label4:
        $z11 = 1;

        goto label6;

     label5:
        $z11 = 0;

     label6:
        return $z11;
    }

    private static boolean codecNeedsEosFlushWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.String;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 > 23 goto label1;

        $r7 = "OMX.google.vorbis.decoder";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z4 != 0 goto label3;

     label1:
        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 > 19 goto label4;

        $r2 = "hb2000";

        $r1 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r6 = "stvm8";

        $r5 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label4;

     label2:
        $r3 = "OMX.amlogic.avc.decoder.awesome";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label3;

        $r4 = "OMX.amlogic.avc.decoder.awesome.secure";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label4;

     label3:
        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        return $z5;
    }

    private static boolean codecNeedsEosBufferTimestampWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @parameter0: java.lang.String;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 21 goto label2;

        $r1 = "OMX.SEC.mp3.dec";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r3 = "samsung";

        $r2 = <androidx.media3.common.util.Util: java.lang.String MANUFACTURER>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $r4 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("baffin");

        if $z2 != 0 goto label1;

        $r5 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z3 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("grand");

        if $z3 != 0 goto label1;

        $r6 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z4 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("fortuna");

        if $z4 != 0 goto label1;

        $r7 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z5 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("gprimelte");

        if $z5 != 0 goto label1;

        $r8 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z6 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("j2y18lte");

        if $z6 != 0 goto label1;

        $r9 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z7 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("ms01");

        if $z7 == 0 goto label2;

     label1:
        $z8 = 1;

        goto label3;

     label2:
        $z8 = 0;

     label3:
        return $z8;
    }

    private static boolean codecNeedsEosOutputExceptionWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 != 21 goto label1;

        $r1 = "OMX.google.aac.decoder";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean codecNeedsMonoChannelCountWorkaround(java.lang.String, androidx.media3.common.Format)
    {
        java.lang.String r0, $r2;
        androidx.media3.common.Format r1;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.common.Format;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 > 18 goto label1;

        $i1 = r1.<androidx.media3.common.Format: int channelCount>;

        if $i1 != 1 goto label1;

        $r2 = "OMX.MTK.AUDIO.DECODER.MP3";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[38];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 1;

        $r0[3] = 103;

        $r0[4] = 66;

        $r0[5] = -64;

        $r0[6] = 11;

        $r0[7] = -38;

        $r0[8] = 37;

        $r0[9] = -112;

        $r0[10] = 0;

        $r0[11] = 0;

        $r0[12] = 1;

        $r0[13] = 104;

        $r0[14] = -50;

        $r0[15] = 15;

        $r0[16] = 19;

        $r0[17] = 32;

        $r0[18] = 0;

        $r0[19] = 0;

        $r0[20] = 1;

        $r0[21] = 101;

        $r0[22] = -120;

        $r0[23] = -124;

        $r0[24] = 13;

        $r0[25] = -50;

        $r0[26] = 113;

        $r0[27] = 24;

        $r0[28] = -96;

        $r0[29] = 0;

        $r0[30] = 47;

        $r0[31] = -65;

        $r0[32] = 28;

        $r0[33] = 49;

        $r0[34] = -61;

        $r0[35] = 39;

        $r0[36] = 93;

        $r0[37] = 120;

        <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: byte[] ADAPTATION_WORKAROUND_BUFFER> = $r0;

        return;
    }

androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$Api31
    private void <init>()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$Api31 r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$Api31;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setLogSessionIdToMediaCodecFormat(androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration, androidx.media3.exoplayer.analytics.PlayerId)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration r0;
        androidx.media3.exoplayer.analytics.PlayerId r1;
        android.media.metrics.LogSessionId r2, $r3;
        boolean $z0;
        android.media.MediaFormat $r4;
        java.lang.String $r5;

        r0 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration;

        r1 := @parameter1: androidx.media3.exoplayer.analytics.PlayerId;

        r2 = virtualinvoke r1.<androidx.media3.exoplayer.analytics.PlayerId: android.media.metrics.LogSessionId getLogSessionId()>();

        $r3 = <android.media.metrics.LogSessionId: android.media.metrics.LogSessionId LOG_SESSION_ID_NONE>;

        $z0 = virtualinvoke r2.<android.media.metrics.LogSessionId: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: android.media.MediaFormat mediaFormat>;

        $r5 = virtualinvoke r2.<android.media.metrics.LogSessionId: java.lang.String getStringId()>();

        virtualinvoke $r4.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("log-session-id", $r5);

     label1:
        return;
    }

androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: int CUSTOM_ERROR_CODE_BASE>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: int NO_SUITABLE_DECODER_ERROR>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: int DECODER_QUERY_ERROR>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.String mimeType>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: boolean secureDecoderRequired>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.String diagnosticInfo>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException fallbackDecoderInitializationException>
    public void <init>(androidx.media3.common.Format, java.lang.Throwable, boolean, int)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException r0;
        androidx.media3.common.Format r1;
        java.lang.Throwable r2;
        boolean z0;
        int i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8, $r9, $r10;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: java.lang.Throwable;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Decoder init failed: [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r10 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.String buildCustomDiagnosticInfo(int)>(i0);

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: void <init>(java.lang.String,java.lang.Throwable,java.lang.String,boolean,androidx.media3.exoplayer.mediacodec.MediaCodecInfo,java.lang.String,androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException)>($r8, r2, $r9, z0, null, $r10, null);

        return;
    }

    public void <init>(androidx.media3.common.Format, java.lang.Throwable, boolean, androidx.media3.exoplayer.mediacodec.MediaCodecInfo)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException r0;
        androidx.media3.common.Format r1;
        java.lang.Throwable r2;
        boolean z0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9;
        java.lang.String $r6, $r10, $r11, $r15;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: java.lang.Throwable;

        z0 := @parameter2: boolean;

        r3 := @parameter3: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Decoder init failed: ");

        $r6 = r3.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 21 goto label1;

        $r15 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.String getDiagnosticInfoV21(java.lang.Throwable)>(r2);

        goto label2;

     label1:
        $r15 = null;

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: void <init>(java.lang.String,java.lang.Throwable,java.lang.String,boolean,androidx.media3.exoplayer.mediacodec.MediaCodecInfo,java.lang.String,androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException)>($r10, r2, $r11, z0, r3, $r15, null);

        return;
    }

    private void <init>(java.lang.String, java.lang.Throwable, java.lang.String, boolean, androidx.media3.exoplayer.mediacodec.MediaCodecInfo, java.lang.String, androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException r0, r6;
        java.lang.String r1, r3, r5;
        java.lang.Throwable r2;
        boolean z0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r4;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r4 := @parameter4: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.String mimeType> = r3;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: boolean secureDecoderRequired> = z0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo> = r4;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.String diagnosticInfo> = r5;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException fallbackDecoderInitializationException> = r6;

        return;
    }

    private androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException copyWithFallbackException(androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException r0, r1, $r2;
        java.lang.String $r3, $r5, $r7;
        java.lang.Throwable $r4;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo $r6;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        $r2 = new androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        $r3 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.String getMessage()>();

        $r4 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.Throwable getCause()>();

        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.String mimeType>;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: boolean secureDecoderRequired>;

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: androidx.media3.exoplayer.mediacodec.MediaCodecInfo codecInfo>;

        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: java.lang.String diagnosticInfo>;

        specialinvoke $r2.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: void <init>(java.lang.String,java.lang.Throwable,java.lang.String,boolean,androidx.media3.exoplayer.mediacodec.MediaCodecInfo,java.lang.String,androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException)>($r3, $r4, $r7, $z0, $r6, $r5, r1);

        return $r2;
    }

    private static java.lang.String getDiagnosticInfoV21(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;
        android.media.MediaCodec$CodecException $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof android.media.MediaCodec$CodecException;

        if $z0 == 0 goto label1;

        $r1 = (android.media.MediaCodec$CodecException) r0;

        $r2 = virtualinvoke $r1.<android.media.MediaCodec$CodecException: java.lang.String getDiagnosticInfo()>();

        return $r2;

     label1:
        return null;
    }

    private static java.lang.String buildCustomDiagnosticInfo(int)
    {
        int i0, $i1;
        java.lang.String r0, $r5, $r6;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r6 = "neg_";

        goto label2;

     label1:
        $r6 = "";

     label2:
        r0 = $r6;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.google.android.exoplayer2.mediacodec.MediaCodecRenderer_");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException access$000(androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException, androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException r0, r1, $r2;

        r0 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        r1 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException;

        $r2 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException copyWithFallbackException(androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$DecoderInitializationException)>(r1);

        return $r2;
    }

androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo UNSET>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long previousStreamLastBufferTimeUs>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long startPositionUs>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long streamOffsetUs>
<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.common.util.TimedValueQueue formatQueue>
    public void <init>(long, long, long)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo r0;
        long l0, l1, l2;
        androidx.media3.common.util.TimedValueQueue $r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long previousStreamLastBufferTimeUs> = l0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long startPositionUs> = l1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: long streamOffsetUs> = l2;

        $r1 = new androidx.media3.common.util.TimedValueQueue;

        specialinvoke $r1.<androidx.media3.common.util.TimedValueQueue: void <init>()>();

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.common.util.TimedValueQueue formatQueue> = $r1;

        return;
    }

    static void <clinit>()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo $r0;

        $r0 = new androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo;

        specialinvoke $r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: void <init>(long,long,long)>(-9223372036854775807L, -9223372036854775807L, -9223372036854775807L);

        <androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo: androidx.media3.exoplayer.mediacodec.MediaCodecRenderer$OutputStreamInfo UNSET> = $r0;

        return;
    }

