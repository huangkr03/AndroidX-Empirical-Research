androidx.compose.ui.platform.WindowRecomposer_androidKt
<androidx.compose.ui.platform.WindowRecomposer_androidKt: java.util.Map animationScale>
    public static final androidx.compose.runtime.CompositionContext getCompositionContext(android.view.View)
    {
        android.view.View $r0;
        java.lang.Object r1;
        int $i0;
        boolean $z0;
        androidx.compose.runtime.CompositionContext $r2;

        $r0 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = <androidx.compose.ui.R$id: int androidx_compose_ui_view_composition_context>;

        r1 = virtualinvoke $r0.<android.view.View: java.lang.Object getTag(int)>($i0);

        $z0 = r1 instanceof androidx.compose.runtime.CompositionContext;

        if $z0 == 0 goto label1;

        $r2 = (androidx.compose.runtime.CompositionContext) r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static final void setCompositionContext(android.view.View, androidx.compose.runtime.CompositionContext)
    {
        android.view.View $r0;
        androidx.compose.runtime.CompositionContext r1;
        int $i0;

        $r0 := @parameter0: android.view.View;

        r1 := @parameter1: androidx.compose.runtime.CompositionContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = <androidx.compose.ui.R$id: int androidx_compose_ui_view_composition_context>;

        virtualinvoke $r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, r1);

        return;
    }

    public static final androidx.compose.runtime.CompositionContext findViewTreeCompositionContext(android.view.View)
    {
        android.view.View $r0, $r1;
        boolean $z0;
        androidx.compose.runtime.CompositionContext r2;
        android.view.ViewParent r3;

        $r0 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r2 = staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: androidx.compose.runtime.CompositionContext getCompositionContext(android.view.View)>($r0);

        if r2 == null goto label1;

        return r2;

     label1:
        r3 = virtualinvoke $r0.<android.view.View: android.view.ViewParent getParent()>();

     label2:
        if r2 != null goto label3;

        $z0 = r3 instanceof android.view.View;

        if $z0 == 0 goto label3;

        $r1 = (android.view.View) r3;

        r2 = staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: androidx.compose.runtime.CompositionContext getCompositionContext(android.view.View)>($r1);

        r3 = interfaceinvoke r3.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label2;

     label3:
        return r2;
    }

    private static final kotlinx.coroutines.flow.StateFlow getAnimationScaleFlowFor(android.content.Context)
    {
        android.content.Context r0;
        java.util.Map r1, r2, $r3;
        java.lang.Object r4, $r23;
        android.content.ContentResolver r5, $r18;
        android.net.Uri r6;
        kotlinx.coroutines.channels.Channel r7;
        android.os.Handler r8;
        androidx.compose.ui.platform.WindowRecomposer_androidKt$getAnimationScaleFlowFor$1$1$contentObserver$1 r9, $r11;
        android.os.Looper $r10;
        androidx.compose.ui.platform.WindowRecomposer_androidKt$getAnimationScaleFlowFor$1$1$1 $r12;
        kotlin.jvm.functions.Function2 $r13;
        kotlinx.coroutines.flow.Flow $r14;
        kotlinx.coroutines.CoroutineScope $r15;
        kotlinx.coroutines.flow.SharingStarted$Companion $r16;
        kotlinx.coroutines.flow.SharingStarted $r17;
        float $f0;
        java.lang.Float $r19;
        java.lang.Throwable $r21;
        kotlinx.coroutines.flow.StateFlow $r22, $r24;

        r0 := @parameter0: android.content.Context;

        r1 = <androidx.compose.ui.platform.WindowRecomposer_androidKt: java.util.Map animationScale>;

        r2 = r1;

        entermonitor r2;

     label1:
        $r3 = <androidx.compose.ui.platform.WindowRecomposer_androidKt: java.util.Map animationScale>;

        r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if r4 != null goto label2;

        r5 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r6 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("animator_duration_scale");

        r7 = staticinvoke <kotlinx.coroutines.channels.ChannelKt: kotlinx.coroutines.channels.Channel Channel$default(int,kotlinx.coroutines.channels.BufferOverflow,kotlin.jvm.functions.Function1,int,java.lang.Object)>(-1, null, null, 6, null);

        $r10 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r8 = staticinvoke <androidx.core.os.HandlerCompat: android.os.Handler createAsync(android.os.Looper)>($r10);

        $r11 = new androidx.compose.ui.platform.WindowRecomposer_androidKt$getAnimationScaleFlowFor$1$1$contentObserver$1;

        specialinvoke $r11.<androidx.compose.ui.platform.WindowRecomposer_androidKt$getAnimationScaleFlowFor$1$1$contentObserver$1: void <init>(kotlinx.coroutines.channels.Channel,android.os.Handler)>(r7, r8);

        r9 = $r11;

        $r12 = new androidx.compose.ui.platform.WindowRecomposer_androidKt$getAnimationScaleFlowFor$1$1$1;

        specialinvoke $r12.<androidx.compose.ui.platform.WindowRecomposer_androidKt$getAnimationScaleFlowFor$1$1$1: void <init>(android.content.ContentResolver,android.net.Uri,androidx.compose.ui.platform.WindowRecomposer_androidKt$getAnimationScaleFlowFor$1$1$contentObserver$1,kotlinx.coroutines.channels.Channel,android.content.Context,kotlin.coroutines.Continuation)>(r5, r6, r9, r7, r0, null);

        $r13 = (kotlin.jvm.functions.Function2) $r12;

        $r14 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flow(kotlin.jvm.functions.Function2)>($r13);

        $r15 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope MainScope()>();

        $r16 = <kotlinx.coroutines.flow.SharingStarted: kotlinx.coroutines.flow.SharingStarted$Companion Companion>;

        $r17 = staticinvoke <kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted WhileSubscribed$default(kotlinx.coroutines.flow.SharingStarted$Companion,long,long,int,java.lang.Object)>($r16, 0L, 0L, 3, null);

        $r18 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f0 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>($r18, "animator_duration_scale", 1.0F);

        $r19 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r22 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.StateFlow stateIn(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.flow.SharingStarted,java.lang.Object)>($r14, $r15, $r17, $r19);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r22);

        $r23 = $r22;

        goto label3;

     label2:
        $r23 = r4;

     label3:
        $r24 = (kotlinx.coroutines.flow.StateFlow) $r23;

     label4:
        exitmonitor r2;

        goto label7;

     label5:
        $r21 := @caughtexception;

     label6:
        exitmonitor r2;

        throw $r21;

     label7:
        return $r24;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static final android.view.View getContentChild(android.view.View)
    {
        android.view.View $r0, $r1, r2;
        boolean $z0;
        int $i0;
        android.view.ViewParent r3;

        $r0 := @parameter0: android.view.View;

        r2 = $r0;

        r3 = virtualinvoke r2.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        $z0 = r3 instanceof android.view.View;

        if $z0 == 0 goto label3;

        $r1 = (android.view.View) r3;

        $i0 = virtualinvoke $r1.<android.view.View: int getId()>();

        if $i0 != 16908290 goto label2;

        return r2;

     label2:
        r2 = (android.view.View) r3;

        r3 = virtualinvoke r2.<android.view.View: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return r2;
    }

    public static final androidx.compose.runtime.Recomposer getWindowRecomposer(android.view.View)
    {
        android.view.View $r0, r1;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r2, $r10;
        java.lang.String $r3, $r4, $r11, $r12;
        androidx.compose.ui.platform.WindowRecomposerPolicy $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        androidx.compose.runtime.CompositionContext $r13;
        androidx.compose.runtime.Recomposer $r14;

        $r0 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate windowRecomposer; View ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not attached to a window");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label1:
        r1 = staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: android.view.View getContentChild(android.view.View)>($r0);

        $r13 = staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: androidx.compose.runtime.CompositionContext getCompositionContext(android.view.View)>(r1);

        if $r13 != null goto label2;

        $r5 = <androidx.compose.ui.platform.WindowRecomposerPolicy: androidx.compose.ui.platform.WindowRecomposerPolicy INSTANCE>;

        $r14 = virtualinvoke $r5.<androidx.compose.ui.platform.WindowRecomposerPolicy: androidx.compose.runtime.Recomposer createAndInstallWindowRecomposer$ui_release(android.view.View)>(r1);

        goto label4;

     label2:
        $z1 = $r13 instanceof androidx.compose.runtime.Recomposer;

        if $z1 == 0 goto label3;

        $r14 = (androidx.compose.runtime.Recomposer) $r13;

        goto label4;

     label3:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "root viewTreeParentCompositionContext is not a Recomposer";

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label4:
        return $r14;
    }

    public static void getWindowRecomposer$annotations(android.view.View)
    {
        android.view.View r0;

        r0 := @parameter0: android.view.View;

        return;
    }

    public static final androidx.compose.runtime.Recomposer createLifecycleAwareWindowRecomposer(android.view.View, kotlin.coroutines.CoroutineContext, androidx.lifecycle.Lifecycle)
    {
        android.view.View $r0;
        kotlin.coroutines.CoroutineContext r1, r3, $r11, $r21, $r22, $r42, $r49, r50;
        androidx.lifecycle.Lifecycle r2, $r53;
        androidx.compose.runtime.PausableMonotonicFrameClock r4, $r38, r44, $r45;
        kotlin.jvm.internal.Ref$ObjectRef r5, $r16;
        androidx.compose.ui.MotionDurationScale r6, $r46;
        kotlin.coroutines.ContinuationInterceptor$Key $r7;
        kotlin.coroutines.CoroutineContext$Key $r8, $r13, $r18, $r40;
        kotlin.coroutines.CoroutineContext$Element $r9, $r14, $r19, $r41;
        androidx.compose.ui.platform.AndroidUiDispatcher$Companion $r10;
        androidx.compose.runtime.MonotonicFrameClock$Key $r12, $r39;
        androidx.compose.runtime.MonotonicFrameClock $r15, r43;
        androidx.compose.ui.MotionDurationScale$Key $r17;
        kotlin.coroutines.EmptyCoroutineContext $r20;
        androidx.compose.runtime.Recomposer $r23;
        androidx.compose.ui.platform.WindowRecomposer_androidKt$createLifecycleAwareWindowRecomposer$1 $r24;
        android.view.View$OnAttachStateChangeListener $r25;
        androidx.compose.ui.platform.WindowRecomposer_androidKt$createLifecycleAwareWindowRecomposer$2 $r26;
        androidx.lifecycle.LifecycleObserver $r27;
        java.lang.StringBuilder $r28, $r29, $r30;
        java.lang.IllegalStateException $r31;
        java.lang.String $r32, $r34;
        androidx.lifecycle.LifecycleOwner $r33;
        androidx.compose.ui.platform.MotionDurationScaleImpl $r36, r48;
        kotlinx.coroutines.CoroutineScope r52;

        $r0 := @parameter0: android.view.View;

        r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        r2 := @parameter2: androidx.lifecycle.Lifecycle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "coroutineContext");

        $r7 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r8 = (kotlin.coroutines.CoroutineContext$Key) $r7;

        $r9 = interfaceinvoke r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r8);

        if $r9 == null goto label01;

        $r39 = <androidx.compose.runtime.MonotonicFrameClock: androidx.compose.runtime.MonotonicFrameClock$Key Key>;

        $r40 = (kotlin.coroutines.CoroutineContext$Key) $r39;

        $r41 = interfaceinvoke r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r40);

        if $r41 != null goto label02;

     label01:
        $r10 = <androidx.compose.ui.platform.AndroidUiDispatcher: androidx.compose.ui.platform.AndroidUiDispatcher$Companion Companion>;

        $r11 = virtualinvoke $r10.<androidx.compose.ui.platform.AndroidUiDispatcher$Companion: kotlin.coroutines.CoroutineContext getCurrentThread()>();

        $r42 = interfaceinvoke $r11.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>(r1);

        goto label03;

     label02:
        $r42 = r1;

     label03:
        r3 = $r42;

        $r12 = <androidx.compose.runtime.MonotonicFrameClock: androidx.compose.runtime.MonotonicFrameClock$Key Key>;

        $r13 = (kotlin.coroutines.CoroutineContext$Key) $r12;

        $r14 = interfaceinvoke r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r13);

        $r15 = (androidx.compose.runtime.MonotonicFrameClock) $r14;

        if $r15 == null goto label04;

        r43 = $r15;

        $r38 = new androidx.compose.runtime.PausableMonotonicFrameClock;

        specialinvoke $r38.<androidx.compose.runtime.PausableMonotonicFrameClock: void <init>(androidx.compose.runtime.MonotonicFrameClock)>(r43);

        r44 = $r38;

        virtualinvoke r44.<androidx.compose.runtime.PausableMonotonicFrameClock: void pause()>();

        $r45 = r44;

        goto label05;

     label04:
        $r45 = null;

     label05:
        r4 = $r45;

        $r16 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r16.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r5 = $r16;

        $r17 = <androidx.compose.ui.MotionDurationScale: androidx.compose.ui.MotionDurationScale$Key Key>;

        $r18 = (kotlin.coroutines.CoroutineContext$Key) $r17;

        $r19 = interfaceinvoke r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r18);

        $r46 = (androidx.compose.ui.MotionDurationScale) $r19;

        if $r46 != null goto label06;

        $r36 = new androidx.compose.ui.platform.MotionDurationScaleImpl;

        specialinvoke $r36.<androidx.compose.ui.platform.MotionDurationScaleImpl: void <init>()>();

        r48 = $r36;

        r5.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = r48;

        $r46 = (androidx.compose.ui.MotionDurationScale) $r36;

     label06:
        r6 = $r46;

        if r4 == null goto label07;

        $r49 = (kotlin.coroutines.CoroutineContext) r4;

        goto label08;

     label07:
        $r20 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r49 = (kotlin.coroutines.CoroutineContext) $r20;

     label08:
        $r21 = interfaceinvoke r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r49);

        $r22 = (kotlin.coroutines.CoroutineContext) r6;

        r50 = interfaceinvoke $r21.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r22);

        $r23 = new androidx.compose.runtime.Recomposer;

        specialinvoke $r23.<androidx.compose.runtime.Recomposer: void <init>(kotlin.coroutines.CoroutineContext)>(r50);

        r52 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>(r50);

        $r53 = r2;

        if r2 != null goto label10;

        $r33 = staticinvoke <androidx.lifecycle.ViewTreeLifecycleOwner: androidx.lifecycle.LifecycleOwner get(android.view.View)>($r0);

        if $r33 == null goto label09;

        $r53 = interfaceinvoke $r33.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        goto label10;

     label09:
        $r53 = null;

     label10:
        if $r53 != null goto label11;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ViewTreeLifecycleOwner not found from ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r31 = new java.lang.IllegalStateException;

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = virtualinvoke $r34.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r32);

        throw $r31;

     label11:
        $r24 = new androidx.compose.ui.platform.WindowRecomposer_androidKt$createLifecycleAwareWindowRecomposer$1;

        specialinvoke $r24.<androidx.compose.ui.platform.WindowRecomposer_androidKt$createLifecycleAwareWindowRecomposer$1: void <init>(android.view.View,androidx.compose.runtime.Recomposer)>($r0, $r23);

        $r25 = (android.view.View$OnAttachStateChangeListener) $r24;

        virtualinvoke $r0.<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r25);

        $r26 = new androidx.compose.ui.platform.WindowRecomposer_androidKt$createLifecycleAwareWindowRecomposer$2;

        specialinvoke $r26.<androidx.compose.ui.platform.WindowRecomposer_androidKt$createLifecycleAwareWindowRecomposer$2: void <init>(kotlinx.coroutines.CoroutineScope,androidx.compose.runtime.PausableMonotonicFrameClock,androidx.compose.runtime.Recomposer,kotlin.jvm.internal.Ref$ObjectRef,android.view.View)>(r52, r4, $r23, r5, $r0);

        $r27 = (androidx.lifecycle.LifecycleObserver) $r26;

        virtualinvoke $r53.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r27);

        return $r23;
    }

    public static androidx.compose.runtime.Recomposer createLifecycleAwareWindowRecomposer$default(android.view.View, kotlin.coroutines.CoroutineContext, androidx.lifecycle.Lifecycle, int, java.lang.Object)
    {
        android.view.View r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        androidx.compose.runtime.Recomposer $r2;
        kotlin.coroutines.EmptyCoroutineContext $r3;
        kotlin.coroutines.CoroutineContext r4;
        androidx.lifecycle.Lifecycle r5;

        r0 := @parameter0: android.view.View;

        r4 := @parameter1: kotlin.coroutines.CoroutineContext;

        r5 := @parameter2: androidx.lifecycle.Lifecycle;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r3 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        r4 = (kotlin.coroutines.CoroutineContext) $r3;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r5 = null;

     label2:
        $r2 = staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: androidx.compose.runtime.Recomposer createLifecycleAwareWindowRecomposer(android.view.View,kotlin.coroutines.CoroutineContext,androidx.lifecycle.Lifecycle)>(r0, r4, r5);

        return $r2;
    }

    public static final kotlinx.coroutines.flow.StateFlow access$getAnimationScaleFlowFor(android.content.Context)
    {
        android.content.Context r0;
        kotlinx.coroutines.flow.StateFlow $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <androidx.compose.ui.platform.WindowRecomposer_androidKt: kotlinx.coroutines.flow.StateFlow getAnimationScaleFlowFor(android.content.Context)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        java.util.LinkedHashMap $r0;
        java.util.Map $r1;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r1 = (java.util.Map) $r0;

        <androidx.compose.ui.platform.WindowRecomposer_androidKt: java.util.Map animationScale> = $r1;

        return;
    }

