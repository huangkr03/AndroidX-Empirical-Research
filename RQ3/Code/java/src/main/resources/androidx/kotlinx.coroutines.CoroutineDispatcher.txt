kotlinx.coroutines.CoroutineDispatcher
<kotlinx.coroutines.CoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher$Key Key>
    static void <clinit>()
    {
        kotlinx.coroutines.CoroutineDispatcher$Key $r0;

        $r0 = new kotlinx.coroutines.CoroutineDispatcher$Key;

        specialinvoke $r0.<kotlinx.coroutines.CoroutineDispatcher$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.coroutines.CoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher$Key Key> = $r0;

        return;
    }

    public void <init>()
    {
        kotlinx.coroutines.CoroutineDispatcher $r0;
        kotlin.coroutines.ContinuationInterceptor$Key $r1;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        specialinvoke $r0.<kotlin.coroutines.AbstractCoroutineContextElement: void <init>(kotlin.coroutines.CoroutineContext$Key)>($r1);

        return;
    }

<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>
    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.CoroutineDispatcher $r0;
        kotlin.coroutines.CoroutineContext$Element $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r1 = staticinvoke <kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>($r0, $r2);

        return $r1;
    }

    public final kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.CoroutineDispatcher $r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.internal.DispatchedContinuation $r2;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "continuation");

        $r2 = new kotlinx.coroutines.internal.DispatchedContinuation;

        specialinvoke $r2.<kotlinx.coroutines.internal.DispatchedContinuation: void <init>(kotlinx.coroutines.CoroutineDispatcher,kotlin.coroutines.Continuation)>($r0, $r1);

        return $r2;
    }

    public boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.CoroutineDispatcher $r0;
        kotlin.coroutines.CoroutineContext $r1;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "context");

        return 1;
    }

    public kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)
    {
        kotlinx.coroutines.CoroutineDispatcher $r0;
        int $i0;
        kotlinx.coroutines.internal.LimitedDispatcher $r1;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $i0 := @parameter0: int;

        staticinvoke <kotlinx.coroutines.internal.LimitedDispatcherKt: void checkParallelism(int)>($i0);

        $r1 = new kotlinx.coroutines.internal.LimitedDispatcher;

        specialinvoke $r1.<kotlinx.coroutines.internal.LimitedDispatcher: void <init>(kotlinx.coroutines.CoroutineDispatcher,int)>($r0, $i0);

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.CoroutineDispatcher $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r1 = staticinvoke <kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>($r0, $r2);

        return $r1;
    }

    public final void releaseInterceptedContinuation(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.CoroutineDispatcher $r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.internal.DispatchedContinuation $r2;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "continuation");

        $r2 = (kotlinx.coroutines.internal.DispatchedContinuation) $r1;

        virtualinvoke $r2.<kotlinx.coroutines.internal.DispatchedContinuation: void release()>();

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.CoroutineDispatcher $r0;
        java.lang.String $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)>($r0);

        $r2 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

kotlinx.coroutines.CoroutineDispatcher$Key$1
<kotlinx.coroutines.CoroutineDispatcher$Key$1: kotlinx.coroutines.CoroutineDispatcher$Key$1 INSTANCE>
    static void <clinit>()
    {
        kotlinx.coroutines.CoroutineDispatcher$Key$1 $r0;

        $r0 = new kotlinx.coroutines.CoroutineDispatcher$Key$1;

        specialinvoke $r0.<kotlinx.coroutines.CoroutineDispatcher$Key$1: void <init>()>();

        <kotlinx.coroutines.CoroutineDispatcher$Key$1: kotlinx.coroutines.CoroutineDispatcher$Key$1 INSTANCE> = $r0;

        return;
    }

    void <init>()
    {
        kotlinx.coroutines.CoroutineDispatcher$Key$1 $r0;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher$Key$1;

        specialinvoke $r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        kotlinx.coroutines.CoroutineDispatcher$Key$1 $r0;
        kotlinx.coroutines.CoroutineDispatcher $r1;
        java.lang.Object $r2;
        kotlin.coroutines.CoroutineContext$Element $r3;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher$Key$1;

        $r2 := @parameter0: java.lang.Object;

        $r3 = (kotlin.coroutines.CoroutineContext$Element) $r2;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.CoroutineDispatcher$Key$1: kotlinx.coroutines.CoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element)>($r3);

        return $r1;
    }

    public final kotlinx.coroutines.CoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element)
    {
        kotlinx.coroutines.CoroutineDispatcher$Key$1 $r0;
        kotlin.coroutines.CoroutineContext$Element $r1;
        boolean $z0;
        kotlinx.coroutines.CoroutineDispatcher $r2;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher$Key$1;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Element;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "it");

        $z0 = $r1 instanceof kotlinx.coroutines.CoroutineDispatcher;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.CoroutineDispatcher) $r1;

        return $r2;

     label1:
        return null;
    }

kotlinx.coroutines.CoroutineDispatcher$Key
    private void <init>()
    {
        kotlinx.coroutines.CoroutineDispatcher$Key $r0;
        kotlin.coroutines.ContinuationInterceptor$Key $r1;
        kotlinx.coroutines.CoroutineDispatcher$Key$1 $r2;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher$Key;

        $r1 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r2 = <kotlinx.coroutines.CoroutineDispatcher$Key$1: kotlinx.coroutines.CoroutineDispatcher$Key$1 INSTANCE>;

        specialinvoke $r0.<kotlin.coroutines.AbstractCoroutineContextKey: void <init>(kotlin.coroutines.CoroutineContext$Key,kotlin.jvm.functions.Function1)>($r1, $r2);

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.CoroutineDispatcher$Key $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlinx.coroutines.CoroutineDispatcher$Key;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlinx.coroutines.CoroutineDispatcher$Key: void <init>()>();

        return;
    }

