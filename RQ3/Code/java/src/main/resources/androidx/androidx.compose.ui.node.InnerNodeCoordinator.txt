androidx.compose.ui.node.InnerNodeCoordinator
<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.InnerNodeCoordinator$Companion Companion>
<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.Modifier$Node tail>
<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.graphics.Paint innerBoundsPaint>
    public void <init>(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.InnerNodeCoordinator$tail$1 $r2;
        androidx.compose.ui.Modifier$Node $r3, $r4;
        androidx.compose.ui.node.NodeCoordinator $r5;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void <init>(androidx.compose.ui.node.LayoutNode)>(r1);

        $r2 = new androidx.compose.ui.node.InnerNodeCoordinator$tail$1;

        specialinvoke $r2.<androidx.compose.ui.node.InnerNodeCoordinator$tail$1: void <init>()>();

        $r3 = (androidx.compose.ui.Modifier$Node) $r2;

        r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.Modifier$Node tail> = $r3;

        $r4 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        $r5 = (androidx.compose.ui.node.NodeCoordinator) r0;

        virtualinvoke $r4.<androidx.compose.ui.Modifier$Node: void updateCoordinator$ui_release(androidx.compose.ui.node.NodeCoordinator)>($r5);

        return;
    }

    public androidx.compose.ui.Modifier$Node getTail()
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        androidx.compose.ui.Modifier$Node $r1;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        $r1 = r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.Modifier$Node tail>;

        return $r1;
    }

    public static void getTail$annotations()
    {
        return;
    }

    public androidx.compose.ui.node.LookaheadDelegate createLookaheadDelegate(androidx.compose.ui.layout.LookaheadScope)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        androidx.compose.ui.layout.LookaheadScope r1;
        androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl $r2;
        androidx.compose.ui.node.LookaheadDelegate $r3;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.layout.LookaheadScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        $r2 = new androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl;

        specialinvoke $r2.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: void <init>(androidx.compose.ui.node.InnerNodeCoordinator,androidx.compose.ui.layout.LookaheadScope)>(r0, r1);

        $r3 = (androidx.compose.ui.node.LookaheadDelegate) $r2;

        return $r3;
    }

    public androidx.compose.ui.layout.Placeable measure-BRTryo0(long)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0, r5;
        long l0;
        androidx.compose.ui.node.NodeCoordinator r1;
        androidx.compose.ui.node.LayoutNode r2, r4, $r6, $r8;
        int i1, i2;
        java.lang.Object[] r3, $r12;
        androidx.compose.ui.layout.MeasureScope $r7;
        java.util.List $r9;
        androidx.compose.ui.layout.MeasureResult $r10;
        androidx.compose.ui.layout.Placeable $r11;
        java.lang.Object $r13;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r14;
        androidx.compose.ui.layout.MeasurePolicy $r15;
        androidx.compose.runtime.collection.MutableVector r16;
        boolean z5;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        l0 := @parameter0: long;

        r1 = (androidx.compose.ui.node.NodeCoordinator) r0;

        staticinvoke <androidx.compose.ui.node.NodeCoordinator: void access$setMeasurementConstraints-BRTryo0(androidx.compose.ui.node.NodeCoordinator,long)>(r1, l0);

        r2 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r16 = virtualinvoke r2.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i1 = virtualinvoke r16.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i1 <= 0 goto label2;

        i2 = 0;

        $r12 = virtualinvoke r16.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r12, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r12;

     label1:
        $r13 = r3[i2];

        r4 = (androidx.compose.ui.node.LayoutNode) $r13;

        $r14 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        virtualinvoke r4.<androidx.compose.ui.node.LayoutNode: void setMeasuredByParent$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r14);

        i2 = i2 + 1;

        if i2 < i1 goto label1;

     label2:
        $r6 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r5 = r0;

        z5 = 0;

        $r15 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.MeasurePolicy getMeasurePolicy()>();

        $r7 = (androidx.compose.ui.layout.MeasureScope) r0;

        $r8 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r9 = virtualinvoke $r8.<androidx.compose.ui.node.LayoutNode: java.util.List getChildMeasurables$ui_release()>();

        $r10 = interfaceinvoke $r15.<androidx.compose.ui.layout.MeasurePolicy: androidx.compose.ui.layout.MeasureResult measure-3p2s80s(androidx.compose.ui.layout.MeasureScope,java.util.List,long)>($r7, $r9, l0);

        virtualinvoke r5.<androidx.compose.ui.node.InnerNodeCoordinator: void setMeasureResult$ui_release(androidx.compose.ui.layout.MeasureResult)>($r10);

        virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: void onMeasured()>();

        $r11 = (androidx.compose.ui.layout.Placeable) r0;

        return $r11;
    }

    public int minIntrinsicWidth(int)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.IntrinsicsPolicy $r2;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy getIntrinsicsPolicy$ui_release()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.IntrinsicsPolicy: int minIntrinsicWidth(int)>(i0);

        return $i1;
    }

    public int minIntrinsicHeight(int)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.IntrinsicsPolicy $r2;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy getIntrinsicsPolicy$ui_release()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.IntrinsicsPolicy: int minIntrinsicHeight(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicWidth(int)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.IntrinsicsPolicy $r2;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy getIntrinsicsPolicy$ui_release()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.IntrinsicsPolicy: int maxIntrinsicWidth(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicHeight(int)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.IntrinsicsPolicy $r2;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy getIntrinsicsPolicy$ui_release()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.IntrinsicsPolicy: int maxIntrinsicHeight(int)>(i0);

        return $i1;
    }

    protected void placeAt-f8xVGno(long, float, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        long l0;
        float f0;
        kotlin.jvm.functions.Function1 r1;
        boolean $z0;
        androidx.compose.ui.node.LayoutNode $r2;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        specialinvoke r0.<androidx.compose.ui.node.NodeCoordinator: void placeAt-f8xVGno(long,float,kotlin.jvm.functions.Function1)>(l0, f0, r1);

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: boolean isShallowPlacing$ui_release()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: void onPlaced()>();

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        virtualinvoke $r2.<androidx.compose.ui.node.LayoutNode: void onNodePlaced$ui_release()>();

        return;
    }

    public int calculateAlignmentLine(androidx.compose.ui.layout.AlignmentLine)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        androidx.compose.ui.layout.AlignmentLine r1;
        androidx.compose.ui.node.LookaheadDelegate $r2;
        androidx.compose.ui.node.AlignmentLinesOwner $r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        int $i0;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.layout.AlignmentLine;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "alignmentLine");

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LookaheadDelegate getLookaheadDelegate$ui_release()>();

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<androidx.compose.ui.node.LookaheadDelegate: int calculateAlignmentLine(androidx.compose.ui.layout.AlignmentLine)>(r1);

        goto label3;

     label1:
        $r3 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()>();

        $r4 = interfaceinvoke $r3.<androidx.compose.ui.node.AlignmentLinesOwner: java.util.Map calculateAlignmentLines()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.lang.Integer) $r5;

        if $r6 == null goto label2;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        goto label3;

     label2:
        $i0 = -2147483648;

     label3:
        return $i0;
    }

    public void performDraw(androidx.compose.ui.graphics.Canvas)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        androidx.compose.ui.graphics.Canvas r1;
        androidx.compose.ui.node.Owner r2;
        androidx.compose.runtime.collection.MutableVector r3;
        int i0, i1;
        java.lang.Object[] r4, $r9;
        androidx.compose.ui.node.LayoutNode r5, $r6, $r7;
        boolean $z2, $z3;
        androidx.compose.ui.graphics.Paint $r8;
        java.lang.Object $r10;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        $r6 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r2 = staticinvoke <androidx.compose.ui.node.LayoutNodeKt: androidx.compose.ui.node.Owner requireOwner(androidx.compose.ui.node.LayoutNode)>($r6);

        $r7 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r3 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector getZSortedChildren()>();

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r9 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r9, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r9;

     label1:
        $r10 = r4[i1];

        r5 = (androidx.compose.ui.node.LayoutNode) $r10;

        $z3 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z3 == 0 goto label2;

        virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: void draw$ui_release(androidx.compose.ui.graphics.Canvas)>(r1);

     label2:
        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label3:
        $z2 = interfaceinvoke r2.<androidx.compose.ui.node.Owner: boolean getShowLayoutBounds()>();

        if $z2 == 0 goto label4;

        $r8 = <androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.graphics.Paint innerBoundsPaint>;

        virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: void drawBorder(androidx.compose.ui.graphics.Canvas,androidx.compose.ui.graphics.Paint)>(r1, $r8);

     label4:
        return;
    }

    public void hitTestChild-YqVAtuI(androidx.compose.ui.node.NodeCoordinator$HitTestSource, long, androidx.compose.ui.node.HitTestResult, boolean, boolean)
    {
        androidx.compose.ui.node.InnerNodeCoordinator r0;
        androidx.compose.ui.node.NodeCoordinator$HitTestSource r1;
        long l0, $l3;
        androidx.compose.ui.node.HitTestResult r2, r11;
        boolean z0, z1, z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z15, $z16, z17, z18, $z19;
        int i1, i2, i4;
        androidx.compose.runtime.collection.MutableVector r3;
        java.lang.Object[] r4, $r8;
        androidx.compose.ui.node.LayoutNode r5, $r6, $r7;
        java.lang.Object $r9;
        androidx.compose.ui.node.NodeCoordinator $r10;
        float f0;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator$HitTestSource;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.compose.ui.node.HitTestResult;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "hitTestSource");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "hitTestResult");

        z13 = 0;

        z14 = z1;

        z15 = 0;

        $r6 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $z7 = interfaceinvoke r1.<androidx.compose.ui.node.NodeCoordinator$HitTestSource: boolean shouldHitTestChildren(androidx.compose.ui.node.LayoutNode)>($r6);

        if $z7 == 0 goto label04;

        $z10 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: boolean withinLayerBounds-k-4lQ0M(long)>(l0);

        if $z10 == 0 goto label01;

        z15 = 1;

        goto label04;

     label01:
        if z0 == 0 goto label04;

        $l3 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: long getMinimumTouchTargetSize-NH-jbRc()>();

        f0 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: float distanceInMinimumTouchTarget-tz77jQw(long,long)>(l0, $l3);

        $z11 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z11 != 0 goto label02;

        $z12 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z12 != 0 goto label02;

        $z16 = 1;

        goto label03;

     label02:
        $z16 = 0;

     label03:
        if $z16 == 0 goto label04;

        z14 = 0;

        z15 = 1;

     label04:
        if z15 == 0 goto label13;

        r11 = r2;

        i1 = staticinvoke <androidx.compose.ui.node.HitTestResult: int access$getHitDepth$p(androidx.compose.ui.node.HitTestResult)>(r11);

        $r7 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r3 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector getZSortedChildren()>();

        i2 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i2 <= 0 goto label12;

        i4 = i2 - 1;

        $r8 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r8;

     label05:
        $r9 = r4[i4];

        r5 = (androidx.compose.ui.node.LayoutNode) $r9;

        $z8 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: boolean isPlaced()>();

        if $z8 == 0 goto label10;

        interfaceinvoke r1.<androidx.compose.ui.node.NodeCoordinator$HitTestSource: void childHitTest-YqVAtuI(androidx.compose.ui.node.LayoutNode,long,androidx.compose.ui.node.HitTestResult,boolean,boolean)>(r5, l0, r2, z0, z14);

        z6 = virtualinvoke r2.<androidx.compose.ui.node.HitTestResult: boolean hasHit()>();

        z17 = 0;

        if z6 != 0 goto label06;

        z18 = 1;

        goto label08;

     label06:
        $r10 = virtualinvoke r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()>();

        $z9 = virtualinvoke $r10.<androidx.compose.ui.node.NodeCoordinator: boolean shouldSharePointerInputWithSiblings()>();

        if $z9 == 0 goto label07;

        virtualinvoke r2.<androidx.compose.ui.node.HitTestResult: void acceptHits()>();

        z18 = 1;

        goto label08;

     label07:
        z18 = 0;

     label08:
        if z18 != 0 goto label09;

        $z19 = 1;

        goto label11;

     label09:
        $z19 = 0;

        goto label11;

     label10:
        $z19 = 0;

     label11:
        if $z19 != 0 goto label12;

        i4 = i4 + -1;

        if i4 >= 0 goto label05;

     label12:
        staticinvoke <androidx.compose.ui.node.HitTestResult: void access$setHitDepth$p(androidx.compose.ui.node.HitTestResult,int)>(r11, i1);

     label13:
        return;
    }

    public static final androidx.compose.ui.graphics.Paint access$getInnerBoundsPaint$cp()
    {
        androidx.compose.ui.graphics.Paint $r0;

        $r0 = <androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.graphics.Paint innerBoundsPaint>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.graphics.Paint r0, r1;
        androidx.compose.ui.node.InnerNodeCoordinator$Companion $r2;
        androidx.compose.ui.graphics.Color$Companion $r3;
        long $l0;
        androidx.compose.ui.graphics.PaintingStyle$Companion $r4;
        int $i1;

        $r2 = new androidx.compose.ui.node.InnerNodeCoordinator$Companion;

        specialinvoke $r2.<androidx.compose.ui.node.InnerNodeCoordinator$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.node.InnerNodeCoordinator$Companion Companion> = $r2;

        r0 = staticinvoke <androidx.compose.ui.graphics.AndroidPaint_androidKt: androidx.compose.ui.graphics.Paint Paint()>();

        r1 = r0;

        $r3 = <androidx.compose.ui.graphics.Color: androidx.compose.ui.graphics.Color$Companion Companion>;

        $l0 = virtualinvoke $r3.<androidx.compose.ui.graphics.Color$Companion: long getRed-0d7_KjU()>();

        interfaceinvoke r1.<androidx.compose.ui.graphics.Paint: void setColor-8_81llA(long)>($l0);

        interfaceinvoke r1.<androidx.compose.ui.graphics.Paint: void setStrokeWidth(float)>(1.0F);

        $r4 = <androidx.compose.ui.graphics.PaintingStyle: androidx.compose.ui.graphics.PaintingStyle$Companion Companion>;

        $i1 = virtualinvoke $r4.<androidx.compose.ui.graphics.PaintingStyle$Companion: int getStroke-TiuSbCo()>();

        interfaceinvoke r1.<androidx.compose.ui.graphics.Paint: void setStyle-k9PVt8s(int)>($i1);

        <androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.graphics.Paint innerBoundsPaint> = r0;

        return;
    }

androidx.compose.ui.node.InnerNodeCoordinator$Companion
    private void <init>()
    {
        androidx.compose.ui.node.InnerNodeCoordinator$Companion r0;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.compose.ui.graphics.Paint getInnerBoundsPaint()
    {
        androidx.compose.ui.node.InnerNodeCoordinator$Companion r0;
        androidx.compose.ui.graphics.Paint $r1;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$Companion;

        $r1 = staticinvoke <androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.graphics.Paint access$getInnerBoundsPaint$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.node.InnerNodeCoordinator$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$Companion: void <init>()>();

        return;
    }

androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl
<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.InnerNodeCoordinator this$0>
    public void <init>(androidx.compose.ui.node.InnerNodeCoordinator, androidx.compose.ui.layout.LookaheadScope)
    {
        androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl r0;
        androidx.compose.ui.node.InnerNodeCoordinator r1;
        androidx.compose.ui.layout.LookaheadScope r2;
        androidx.compose.ui.node.NodeCoordinator $r3;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl;

        r1 := @parameter0: androidx.compose.ui.node.InnerNodeCoordinator;

        r2 := @parameter1: androidx.compose.ui.layout.LookaheadScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "scope");

        r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.InnerNodeCoordinator this$0> = r1;

        $r3 = (androidx.compose.ui.node.NodeCoordinator) r1;

        specialinvoke r0.<androidx.compose.ui.node.LookaheadDelegate: void <init>(androidx.compose.ui.node.NodeCoordinator,androidx.compose.ui.layout.LookaheadScope)>($r3, r2);

        return;
    }

    public androidx.compose.ui.layout.Placeable measure-BRTryo0(long)
    {
        androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl r0;
        long l0;
        androidx.compose.ui.node.LookaheadDelegate r1, r4;
        int i1, i2;
        java.lang.Object[] r2, $r10;
        androidx.compose.ui.node.LayoutNode r3, $r5, $r7, r13;
        androidx.compose.ui.layout.MeasureScope $r6;
        java.util.List $r8;
        androidx.compose.ui.layout.Placeable $r9;
        java.lang.Object $r11;
        androidx.compose.ui.node.LayoutNode$UsageByParent $r12;
        androidx.compose.runtime.collection.MutableVector r14;
        androidx.compose.ui.layout.MeasurePolicy r15;
        androidx.compose.ui.layout.MeasureResult r16;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl;

        l0 := @parameter0: long;

        r1 = (androidx.compose.ui.node.LookaheadDelegate) r0;

        staticinvoke <androidx.compose.ui.node.LookaheadDelegate: void access$setMeasurementConstraints-BRTryo0(androidx.compose.ui.node.LookaheadDelegate,long)>(r1, l0);

        r4 = r1;

        r13 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r14 = virtualinvoke r13.<androidx.compose.ui.node.LayoutNode: androidx.compose.runtime.collection.MutableVector get_children$ui_release()>();

        i1 = virtualinvoke r14.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i1 <= 0 goto label2;

        i2 = 0;

        $r10 = virtualinvoke r14.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r10, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r2 = $r10;

     label1:
        $r11 = r2[i2];

        r3 = (androidx.compose.ui.node.LayoutNode) $r11;

        $r12 = <androidx.compose.ui.node.LayoutNode$UsageByParent: androidx.compose.ui.node.LayoutNode$UsageByParent NotUsed>;

        virtualinvoke r3.<androidx.compose.ui.node.LayoutNode: void setMeasuredByParentInLookahead$ui_release(androidx.compose.ui.node.LayoutNode$UsageByParent)>($r12);

        i2 = i2 + 1;

        if i2 < i1 goto label1;

     label2:
        $r5 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        r15 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.layout.MeasurePolicy getMeasurePolicy()>();

        $r6 = (androidx.compose.ui.layout.MeasureScope) r0;

        $r7 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r8 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: java.util.List getChildLookaheadMeasurables$ui_release()>();

        r16 = interfaceinvoke r15.<androidx.compose.ui.layout.MeasurePolicy: androidx.compose.ui.layout.MeasureResult measure-3p2s80s(androidx.compose.ui.layout.MeasureScope,java.util.List,long)>($r6, $r8, l0);

        staticinvoke <androidx.compose.ui.node.LookaheadDelegate: void access$set_measureResult(androidx.compose.ui.node.LookaheadDelegate,androidx.compose.ui.layout.MeasureResult)>(r4, r16);

        $r9 = (androidx.compose.ui.layout.Placeable) r1;

        return $r9;
    }

    public int calculateAlignmentLine(androidx.compose.ui.layout.AlignmentLine)
    {
        androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl r0;
        androidx.compose.ui.layout.AlignmentLine r1;
        int i0, i1, $i2;
        java.lang.Integer r2, $r6;
        androidx.compose.ui.node.AlignmentLinesOwner $r3;
        java.util.Map $r4, $r7;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl;

        r1 := @parameter0: androidx.compose.ui.layout.AlignmentLine;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "alignmentLine");

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()>();

        $r4 = interfaceinvoke $r3.<androidx.compose.ui.node.AlignmentLinesOwner: java.util.Map calculateAlignmentLines()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.lang.Integer) $r5;

        if $r6 == null goto label1;

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i2 = -2147483648;

     label2:
        i0 = $i2;

        i1 = i0;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: java.util.Map getCachedAlignmentLinesMap()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return i0;
    }

    protected void placeChildren()
    {
        androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl r0;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate $r2;
        androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate $r3;
        androidx.compose.ui.node.AlignmentLinesOwner $r4;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNodeLayoutDelegate getLayoutDelegate$ui_release()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.LayoutNodeLayoutDelegate: androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate getLookaheadPassDelegate$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        virtualinvoke $r3.<androidx.compose.ui.node.LayoutNodeLayoutDelegate$LookaheadPassDelegate: void onPlaced()>();

        $r4 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.AlignmentLinesOwner getAlignmentLinesOwner()>();

        interfaceinvoke $r4.<androidx.compose.ui.node.AlignmentLinesOwner: void layoutChildren()>();

        return;
    }

    public int minIntrinsicWidth(int)
    {
        androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.IntrinsicsPolicy $r2;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy getIntrinsicsPolicy$ui_release()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.IntrinsicsPolicy: int minLookaheadIntrinsicWidth(int)>(i0);

        return $i1;
    }

    public int minIntrinsicHeight(int)
    {
        androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.IntrinsicsPolicy $r2;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy getIntrinsicsPolicy$ui_release()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.IntrinsicsPolicy: int minLookaheadIntrinsicHeight(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicWidth(int)
    {
        androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.IntrinsicsPolicy $r2;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy getIntrinsicsPolicy$ui_release()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.IntrinsicsPolicy: int maxLookaheadIntrinsicWidth(int)>(i0);

        return $i1;
    }

    public int maxIntrinsicHeight(int)
    {
        androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl r0;
        int i0, $i1;
        androidx.compose.ui.node.LayoutNode $r1;
        androidx.compose.ui.node.IntrinsicsPolicy $r2;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.InnerNodeCoordinator$LookaheadDelegateImpl: androidx.compose.ui.node.LayoutNode getLayoutNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.IntrinsicsPolicy getIntrinsicsPolicy$ui_release()>();

        $i1 = virtualinvoke $r2.<androidx.compose.ui.node.IntrinsicsPolicy: int maxLookaheadIntrinsicHeight(int)>(i0);

        return $i1;
    }

androidx.compose.ui.node.InnerNodeCoordinator$tail$1
    void <init>()
    {
        androidx.compose.ui.node.InnerNodeCoordinator$tail$1 r0;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$tail$1;

        specialinvoke r0.<androidx.compose.ui.Modifier$Node: void <init>()>();

        return;
    }

    public java.lang.String toString()
    {
        androidx.compose.ui.node.InnerNodeCoordinator$tail$1 r0;

        r0 := @this: androidx.compose.ui.node.InnerNodeCoordinator$tail$1;

        return "<tail>";
    }

