androidx.compose.ui.node.DelegatingNode
<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.Modifier$Node delegate>
<androidx.compose.ui.node.DelegatingNode: int $stable>
    public void <init>()
    {
        androidx.compose.ui.node.DelegatingNode r0;

        r0 := @this: androidx.compose.ui.node.DelegatingNode;

        specialinvoke r0.<androidx.compose.ui.Modifier$Node: void <init>()>();

        return;
    }

    public void updateCoordinator$ui_release(androidx.compose.ui.node.NodeCoordinator)
    {
        androidx.compose.ui.node.DelegatingNode r0, r2;
        androidx.compose.ui.node.NodeCoordinator r1;
        androidx.compose.ui.Modifier$Node r3, r4;

        r0 := @this: androidx.compose.ui.node.DelegatingNode;

        r1 := @parameter0: androidx.compose.ui.node.NodeCoordinator;

        specialinvoke r0.<androidx.compose.ui.Modifier$Node: void updateCoordinator$ui_release(androidx.compose.ui.node.NodeCoordinator)>(r1);

        r2 = r0;

        r4 = r2.<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.Modifier$Node delegate>;

     label1:
        if r4 == null goto label2;

        r3 = r4;

        virtualinvoke r3.<androidx.compose.ui.Modifier$Node: void updateCoordinator$ui_release(androidx.compose.ui.node.NodeCoordinator)>(r1);

        r4 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label1;

     label2:
        return;
    }

    public final androidx.compose.ui.Modifier$Node delegated(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.DelegatingNode r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.ui.Modifier$Node r2, r3;
        java.lang.Object $r4;
        boolean $z0;
        androidx.compose.ui.node.NodeCoordinator $r5;

        r0 := @this: androidx.compose.ui.node.DelegatingNode;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fn");

        r2 = virtualinvoke r0.<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.Modifier$Node getNode()>();

        $r4 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        r3 = (androidx.compose.ui.Modifier$Node) $r4;

        virtualinvoke r3.<androidx.compose.ui.Modifier$Node: void setAsDelegateTo$ui_release(androidx.compose.ui.Modifier$Node)>(r2);

        $z0 = virtualinvoke r0.<androidx.compose.ui.node.DelegatingNode: boolean isAttached()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r2.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.node.NodeCoordinator getCoordinator$ui_release()>();

        virtualinvoke r0.<androidx.compose.ui.node.DelegatingNode: void updateCoordinator$ui_release(androidx.compose.ui.node.NodeCoordinator)>($r5);

        virtualinvoke r3.<androidx.compose.ui.Modifier$Node: void attach$ui_release()>();

     label1:
        specialinvoke r0.<androidx.compose.ui.node.DelegatingNode: void addDelegate(androidx.compose.ui.Modifier$Node)>(r3);

        return r3;
    }

    private final void addDelegate(androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.DelegatingNode r0;
        androidx.compose.ui.Modifier$Node r1, r2;

        r0 := @this: androidx.compose.ui.node.DelegatingNode;

        r1 := @parameter0: androidx.compose.ui.Modifier$Node;

        r2 = r0.<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.Modifier$Node delegate>;

        if r2 == null goto label1;

        virtualinvoke r1.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>(r2);

     label1:
        r0.<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.Modifier$Node delegate> = r1;

        return;
    }

    public final kotlin.Lazy lazyDelegated(kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.DelegatingNode r0;
        kotlin.jvm.functions.Function0 r1, $r4;
        androidx.compose.ui.node.DelegatingNode$lazyDelegated$1 $r2;
        kotlin.LazyThreadSafetyMode $r3;
        kotlin.Lazy $r5;

        r0 := @this: androidx.compose.ui.node.DelegatingNode;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fn");

        $r3 = <kotlin.LazyThreadSafetyMode: kotlin.LazyThreadSafetyMode NONE>;

        $r2 = new androidx.compose.ui.node.DelegatingNode$lazyDelegated$1;

        specialinvoke $r2.<androidx.compose.ui.node.DelegatingNode$lazyDelegated$1: void <init>(androidx.compose.ui.node.DelegatingNode,kotlin.jvm.functions.Function0)>(r0, r1);

        $r4 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.LazyThreadSafetyMode,kotlin.jvm.functions.Function0)>($r3, $r4);

        return $r5;
    }

    private final void forEachDelegate(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.DelegatingNode r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node r3;

        r0 := @this: androidx.compose.ui.node.DelegatingNode;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r3 = r0.<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.Modifier$Node delegate>;

     label1:
        if r3 == null goto label2;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        r3 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label1;

     label2:
        return;
    }

    public void onAttach()
    {
        androidx.compose.ui.node.DelegatingNode r0, r1;
        androidx.compose.ui.Modifier$Node r2, r4;
        androidx.compose.ui.node.NodeCoordinator $r3;

        r0 := @this: androidx.compose.ui.node.DelegatingNode;

        specialinvoke r0.<androidx.compose.ui.Modifier$Node: void onAttach()>();

        r1 = r0;

        r4 = r1.<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.Modifier$Node delegate>;

     label1:
        if r4 == null goto label2;

        r2 = r4;

        $r3 = virtualinvoke r0.<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.node.NodeCoordinator getCoordinator$ui_release()>();

        virtualinvoke r0.<androidx.compose.ui.node.DelegatingNode: void updateCoordinator$ui_release(androidx.compose.ui.node.NodeCoordinator)>($r3);

        virtualinvoke r2.<androidx.compose.ui.Modifier$Node: void attach$ui_release()>();

        r4 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label1;

     label2:
        return;
    }

    public void onDetach()
    {
        androidx.compose.ui.node.DelegatingNode r0, r1;
        androidx.compose.ui.Modifier$Node r2, r3;

        r0 := @this: androidx.compose.ui.node.DelegatingNode;

        r1 = r0;

        r3 = r1.<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.Modifier$Node delegate>;

     label1:
        if r3 == null goto label2;

        r2 = r3;

        virtualinvoke r2.<androidx.compose.ui.Modifier$Node: void detach$ui_release()>();

        r3 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label1;

     label2:
        specialinvoke r0.<androidx.compose.ui.Modifier$Node: void onDetach()>();

        return;
    }

    static void <clinit>()
    {
        <androidx.compose.ui.node.DelegatingNode: int $stable> = 8;

        return;
    }

androidx.compose.ui.node.DelegatingNode$lazyDelegated$1
<androidx.compose.ui.node.DelegatingNode$lazyDelegated$1: androidx.compose.ui.node.DelegatingNode this$0>
<androidx.compose.ui.node.DelegatingNode$lazyDelegated$1: kotlin.jvm.functions.Function0 $fn>
    void <init>(androidx.compose.ui.node.DelegatingNode, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.DelegatingNode$lazyDelegated$1 r0;
        androidx.compose.ui.node.DelegatingNode $r1;
        kotlin.jvm.functions.Function0 $r2;

        r0 := @this: androidx.compose.ui.node.DelegatingNode$lazyDelegated$1;

        $r1 := @parameter0: androidx.compose.ui.node.DelegatingNode;

        $r2 := @parameter1: kotlin.jvm.functions.Function0;

        r0.<androidx.compose.ui.node.DelegatingNode$lazyDelegated$1: androidx.compose.ui.node.DelegatingNode this$0> = $r1;

        r0.<androidx.compose.ui.node.DelegatingNode$lazyDelegated$1: kotlin.jvm.functions.Function0 $fn> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.compose.ui.Modifier$Node invoke()
    {
        androidx.compose.ui.node.DelegatingNode$lazyDelegated$1 r0;
        kotlin.jvm.functions.Function0 $r1;
        androidx.compose.ui.node.DelegatingNode $r2;
        androidx.compose.ui.Modifier$Node $r3;

        r0 := @this: androidx.compose.ui.node.DelegatingNode$lazyDelegated$1;

        $r2 = r0.<androidx.compose.ui.node.DelegatingNode$lazyDelegated$1: androidx.compose.ui.node.DelegatingNode this$0>;

        $r1 = r0.<androidx.compose.ui.node.DelegatingNode$lazyDelegated$1: kotlin.jvm.functions.Function0 $fn>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.node.DelegatingNode: androidx.compose.ui.Modifier$Node delegated(kotlin.jvm.functions.Function0)>($r1);

        return $r3;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.node.DelegatingNode$lazyDelegated$1 r0;
        androidx.compose.ui.Modifier$Node $r1;

        r0 := @this: androidx.compose.ui.node.DelegatingNode$lazyDelegated$1;

        $r1 = virtualinvoke r0.<androidx.compose.ui.node.DelegatingNode$lazyDelegated$1: androidx.compose.ui.Modifier$Node invoke()>();

        return $r1;
    }

