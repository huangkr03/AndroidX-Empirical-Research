androidx.compose.ui.test.SemanticsNodeInteraction
<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext testContext>
<androidx.compose.ui.test.SemanticsNodeInteraction: boolean useUnmergedTree>
<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector selector>
<androidx.compose.ui.test.SemanticsNodeInteraction: java.lang.String lastSeenSemantics>
<androidx.compose.ui.test.SemanticsNodeInteraction: int $stable>
    public void <init>(androidx.compose.ui.test.TestContext, boolean, androidx.compose.ui.test.SemanticsSelector)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        androidx.compose.ui.test.TestContext r1;
        boolean z0;
        androidx.compose.ui.test.SemanticsSelector r2;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter0: androidx.compose.ui.test.TestContext;

        z0 := @parameter1: boolean;

        r2 := @parameter2: androidx.compose.ui.test.SemanticsSelector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "testContext");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "selector");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext testContext> = r1;

        r0.<androidx.compose.ui.test.SemanticsNodeInteraction: boolean useUnmergedTree> = z0;

        r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector selector> = r2;

        return;
    }

    public final androidx.compose.ui.test.TestContext getTestContext$ui_test_release()
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        androidx.compose.ui.test.TestContext $r1;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        $r1 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext testContext>;

        return $r1;
    }

    public final boolean getUseUnmergedTree$ui_test_release()
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        boolean $z0;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        $z0 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: boolean useUnmergedTree>;

        return $z0;
    }

    public final androidx.compose.ui.test.SemanticsSelector getSelector$ui_test_release()
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        androidx.compose.ui.test.SemanticsSelector $r1;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        $r1 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector selector>;

        return $r1;
    }

    public void <init>(androidx.compose.ui.test.TestContext, boolean, androidx.compose.ui.test.SemanticsMatcher)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        androidx.compose.ui.test.TestContext r1;
        boolean z0;
        androidx.compose.ui.test.SemanticsMatcher r2;
        androidx.compose.ui.test.SemanticsSelector $r3;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter0: androidx.compose.ui.test.TestContext;

        z0 := @parameter1: boolean;

        r2 := @parameter2: androidx.compose.ui.test.SemanticsMatcher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "testContext");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "matcher");

        $r3 = staticinvoke <androidx.compose.ui.test.SemanticsSelectorKt: androidx.compose.ui.test.SemanticsSelector SemanticsSelector(androidx.compose.ui.test.SemanticsMatcher)>(r2);

        specialinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: void <init>(androidx.compose.ui.test.TestContext,boolean,androidx.compose.ui.test.SemanticsSelector)>(r1, z0, $r3);

        return;
    }

    public final androidx.compose.ui.test.SelectionResult fetchSemanticsNodes$ui_test_release(boolean, java.lang.String)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        boolean z0, $z1;
        java.lang.String r1, $r6;
        androidx.compose.ui.test.TestContext $r2;
        androidx.compose.ui.test.SemanticsSelector $r3;
        java.lang.Iterable $r4;
        androidx.compose.ui.test.SelectionResult $r5;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector selector>;

        $r2 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext testContext>;

        $z1 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: boolean useUnmergedTree>;

        $r4 = virtualinvoke $r2.<androidx.compose.ui.test.TestContext: java.lang.Iterable getAllSemanticsNodes$ui_test_release(boolean,boolean)>(z0, $z1);

        $r6 = r1;

        if r1 != null goto label1;

        $r6 = "";

     label1:
        $r5 = virtualinvoke $r3.<androidx.compose.ui.test.SemanticsSelector: androidx.compose.ui.test.SelectionResult map(java.lang.Iterable,java.lang.String)>($r4, $r6);

        return $r5;
    }

    public static androidx.compose.ui.test.SelectionResult fetchSemanticsNodes$ui_test_release$default(androidx.compose.ui.test.SemanticsNodeInteraction, boolean, java.lang.String, int, java.lang.Object)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        boolean z0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.compose.ui.test.SelectionResult $r2;
        java.lang.String r3;

        r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        z0 := @parameter1: boolean;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = virtualinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SelectionResult fetchSemanticsNodes$ui_test_release(boolean,java.lang.String)>(z0, r3);

        return $r2;
    }

    public final androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        java.lang.String r1;
        androidx.compose.ui.semantics.SemanticsNode $r2;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchOneOrDie(java.lang.String)>(r1);

        return $r2;
    }

    public static androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode$default(androidx.compose.ui.test.SemanticsNodeInteraction, java.lang.String, int, java.lang.Object)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.compose.ui.semantics.SemanticsNode $r2;
        java.lang.String r3;

        r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = virtualinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>(r3);

        return $r2;
    }

    public final void assertDoesNotExist()
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        androidx.compose.ui.test.SelectionResult r1;
        java.util.List $r2, $r6;
        java.util.Collection $r3;
        boolean $z0, $z1;
        java.lang.AssertionError $r4;
        androidx.compose.ui.test.SemanticsSelector $r5;
        java.lang.String $r7;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 = virtualinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SelectionResult fetchSemanticsNodes$ui_test_release(boolean,java.lang.String)>(0, "Failed: assertDoesNotExist.");

        $r2 = virtualinvoke r1.<androidx.compose.ui.test.SelectionResult: java.util.List getSelectedNodes()>();

        $r3 = (java.util.Collection) $r2;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label3;

        $r4 = new java.lang.AssertionError;

        $r5 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector selector>;

        $r6 = virtualinvoke r1.<androidx.compose.ui.test.SelectionResult: java.util.List getSelectedNodes()>();

        $r7 = staticinvoke <androidx.compose.ui.test.ErrorMessagesKt: java.lang.String buildErrorMessageForCountMismatch$default(java.lang.String,androidx.compose.ui.test.SemanticsSelector,java.util.List,int,java.util.List,int,java.lang.Object)>("Failed: assertDoesNotExist.", $r5, $r6, 0, null, 16, null);

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r4;

     label3:
        return;
    }

    public final androidx.compose.ui.test.SemanticsNodeInteraction assertExists(java.lang.String)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        java.lang.String r1;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchOneOrDie(java.lang.String)>(r1);

        return r0;
    }

    public static androidx.compose.ui.test.SemanticsNodeInteraction assertExists$default(androidx.compose.ui.test.SemanticsNodeInteraction, java.lang.String, int, java.lang.Object)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0, $r2;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.String r3;

        r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = virtualinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsNodeInteraction assertExists(java.lang.String)>(r3);

        return $r2;
    }

    private final androidx.compose.ui.semantics.SemanticsNode fetchOneOrDie(java.lang.String)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        java.lang.String r1, r2, $r12, $r17, $r19, $r24, $r26, $r27, $r29, $r31, $r32;
        androidx.compose.ui.test.SelectionResult r3;
        java.util.List r4, r6, $r7, $r9, $r13, $r16;
        androidx.compose.ui.test.SemanticsSelector r5, $r30;
        java.util.Collection $r8;
        int $i0;
        java.lang.Object $r10, $r14;
        androidx.compose.ui.semantics.SemanticsNode $r11, $r15;
        boolean $z0;
        java.lang.AssertionError $r18, $r20, $r28;
        java.lang.StringBuilder $r21, $r22, $r23, $r25;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter0: java.lang.String;

        $r32 = r1;

        if r1 != null goto label1;

        $r32 = "Failed: assertExists.";

     label1:
        r2 = $r32;

        r3 = virtualinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SelectionResult fetchSemanticsNodes$ui_test_release(boolean,java.lang.String)>(1, r2);

        $r7 = virtualinvoke r3.<androidx.compose.ui.test.SelectionResult: java.util.List getSelectedNodes()>();

        $r8 = (java.util.Collection) $r7;

        $i0 = interfaceinvoke $r8.<java.util.Collection: int size()>();

        if $i0 == 1 goto label4;

        $r16 = virtualinvoke r3.<androidx.compose.ui.test.SelectionResult: java.util.List getSelectedNodes()>();

        $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r27 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: java.lang.String lastSeenSemantics>;

        if $r27 == null goto label2;

        $r28 = new java.lang.AssertionError;

        $r30 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector selector>;

        $r29 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: java.lang.String lastSeenSemantics>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r29);

        $r31 = staticinvoke <androidx.compose.ui.test.ErrorMessagesKt: java.lang.String buildErrorMessageForNodeMissingInTree(java.lang.String,androidx.compose.ui.test.SemanticsSelector,java.lang.String)>(r2, $r30, $r29);

        specialinvoke $r28.<java.lang.AssertionError: void <init>(java.lang.Object)>($r31);

        throw $r28;

     label2:
        $r17 = virtualinvoke r3.<androidx.compose.ui.test.SelectionResult: java.lang.String getCustomErrorOnNoMatch()>();

        if $r17 == null goto label3;

        $r20 = new java.lang.AssertionError;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r24 = virtualinvoke r3.<androidx.compose.ui.test.SelectionResult: java.lang.String getCustomErrorOnNoMatch()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>($r26);

        throw $r20;

     label3:
        $r18 = new java.lang.AssertionError;

        r4 = virtualinvoke r3.<androidx.compose.ui.test.SelectionResult: java.util.List getSelectedNodes()>();

        r5 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector selector>;

        r6 = specialinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: java.util.List getNodesInUnmergedTree(java.lang.String)>(r1);

        $r19 = staticinvoke <androidx.compose.ui.test.ErrorMessagesKt: java.lang.String buildErrorMessageForCountMismatch(java.lang.String,androidx.compose.ui.test.SemanticsSelector,java.util.List,int,java.util.List)>(r2, r5, r4, 1, r6);

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r18;

     label4:
        $r9 = virtualinvoke r3.<androidx.compose.ui.test.SelectionResult: java.util.List getSelectedNodes()>();

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r9);

        $r11 = (androidx.compose.ui.semantics.SemanticsNode) $r10;

        $r12 = staticinvoke <androidx.compose.ui.test.OutputKt: java.lang.String printToString$default(androidx.compose.ui.semantics.SemanticsNode,int,int,java.lang.Object)>($r11, 0, 1, null);

        r0.<androidx.compose.ui.test.SemanticsNodeInteraction: java.lang.String lastSeenSemantics> = $r12;

        $r13 = virtualinvoke r3.<androidx.compose.ui.test.SelectionResult: java.util.List getSelectedNodes()>();

        $r14 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>($r13);

        $r15 = (androidx.compose.ui.semantics.SemanticsNode) $r14;

        return $r15;
    }

    static androidx.compose.ui.semantics.SemanticsNode fetchOneOrDie$default(androidx.compose.ui.test.SemanticsNodeInteraction, java.lang.String, int, java.lang.Object)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.compose.ui.semantics.SemanticsNode $r2;
        java.lang.String r3;

        r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = specialinvoke r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchOneOrDie(java.lang.String)>(r3);

        return $r2;
    }

    private final java.util.List getNodesInUnmergedTree(java.lang.String)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction r0;
        java.lang.String r1, $r6;
        boolean $z0;
        androidx.compose.ui.test.TestContext $r2;
        androidx.compose.ui.test.SemanticsSelector $r3;
        java.lang.Iterable $r4;
        androidx.compose.ui.test.SelectionResult $r5;
        java.util.List $r7;

        r0 := @this: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: boolean useUnmergedTree>;

        if $z0 != 0 goto label2;

        $r3 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector selector>;

        $r2 = r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext testContext>;

        $r4 = virtualinvoke $r2.<androidx.compose.ui.test.TestContext: java.lang.Iterable getAllSemanticsNodes$ui_test_release(boolean,boolean)>(1, 1);

        $r6 = r1;

        if r1 != null goto label1;

        $r6 = "";

     label1:
        $r5 = virtualinvoke $r3.<androidx.compose.ui.test.SemanticsSelector: androidx.compose.ui.test.SelectionResult map(java.lang.Iterable,java.lang.String)>($r4, $r6);

        $r7 = virtualinvoke $r5.<androidx.compose.ui.test.SelectionResult: java.util.List getSelectedNodes()>();

        goto label3;

     label2:
        $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label3:
        return $r7;
    }

    static void <clinit>()
    {
        <androidx.compose.ui.test.SemanticsNodeInteraction: int $stable> = 8;

        return;
    }

